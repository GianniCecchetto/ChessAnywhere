
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004810  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  080048c8  080048c8  000058c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b64  08004b64  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004b64  08004b64  0000605c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004b64  08004b64  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b64  08004b64  00005b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b68  08004b68  00005b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004b6c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  2000005c  08004bc8  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  08004bc8  00006568  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d5b5  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b56  00000000  00000000  00023639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000e3a9  00000000  00000000  0002718f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f8  00000000  00000000  00035538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000138b  00000000  00000000  00036730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016f54  00000000  00000000  00037abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f0f6  00000000  00000000  0004ea0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f043  00000000  00000000  0006db05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fcb48  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000388c  00000000  00000000  000fcb8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00100418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000005c 	.word	0x2000005c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080048b0 	.word	0x080048b0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000060 	.word	0x20000060
 80000fc:	080048b0 	.word	0x080048b0

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_uqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5c09      	ldrb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			@ (mov r8, r8)

08000138 <__gnu_thumb1_case_shi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5e09      	ldrsh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__gnu_thumb1_case_uhi>:
 800014c:	b403      	push	{r0, r1}
 800014e:	4671      	mov	r1, lr
 8000150:	0849      	lsrs	r1, r1, #1
 8000152:	0040      	lsls	r0, r0, #1
 8000154:	0049      	lsls	r1, r1, #1
 8000156:	5a09      	ldrh	r1, [r1, r0]
 8000158:	0049      	lsls	r1, r1, #1
 800015a:	448e      	add	lr, r1
 800015c:	bc03      	pop	{r0, r1}
 800015e:	4770      	bx	lr

08000160 <__udivsi3>:
 8000160:	2200      	movs	r2, #0
 8000162:	0843      	lsrs	r3, r0, #1
 8000164:	428b      	cmp	r3, r1
 8000166:	d374      	bcc.n	8000252 <__udivsi3+0xf2>
 8000168:	0903      	lsrs	r3, r0, #4
 800016a:	428b      	cmp	r3, r1
 800016c:	d35f      	bcc.n	800022e <__udivsi3+0xce>
 800016e:	0a03      	lsrs	r3, r0, #8
 8000170:	428b      	cmp	r3, r1
 8000172:	d344      	bcc.n	80001fe <__udivsi3+0x9e>
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d328      	bcc.n	80001cc <__udivsi3+0x6c>
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d30d      	bcc.n	800019c <__udivsi3+0x3c>
 8000180:	22ff      	movs	r2, #255	@ 0xff
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	ba12      	rev	r2, r2
 8000186:	0c03      	lsrs	r3, r0, #16
 8000188:	428b      	cmp	r3, r1
 800018a:	d302      	bcc.n	8000192 <__udivsi3+0x32>
 800018c:	1212      	asrs	r2, r2, #8
 800018e:	0209      	lsls	r1, r1, #8
 8000190:	d065      	beq.n	800025e <__udivsi3+0xfe>
 8000192:	0b03      	lsrs	r3, r0, #12
 8000194:	428b      	cmp	r3, r1
 8000196:	d319      	bcc.n	80001cc <__udivsi3+0x6c>
 8000198:	e000      	b.n	800019c <__udivsi3+0x3c>
 800019a:	0a09      	lsrs	r1, r1, #8
 800019c:	0bc3      	lsrs	r3, r0, #15
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x46>
 80001a2:	03cb      	lsls	r3, r1, #15
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b83      	lsrs	r3, r0, #14
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x52>
 80001ae:	038b      	lsls	r3, r1, #14
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b43      	lsrs	r3, r0, #13
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x5e>
 80001ba:	034b      	lsls	r3, r1, #13
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0b03      	lsrs	r3, r0, #12
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x6a>
 80001c6:	030b      	lsls	r3, r1, #12
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0ac3      	lsrs	r3, r0, #11
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x76>
 80001d2:	02cb      	lsls	r3, r1, #11
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a83      	lsrs	r3, r0, #10
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x82>
 80001de:	028b      	lsls	r3, r1, #10
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a43      	lsrs	r3, r0, #9
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x8e>
 80001ea:	024b      	lsls	r3, r1, #9
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	0a03      	lsrs	r3, r0, #8
 80001f2:	428b      	cmp	r3, r1
 80001f4:	d301      	bcc.n	80001fa <__udivsi3+0x9a>
 80001f6:	020b      	lsls	r3, r1, #8
 80001f8:	1ac0      	subs	r0, r0, r3
 80001fa:	4152      	adcs	r2, r2
 80001fc:	d2cd      	bcs.n	800019a <__udivsi3+0x3a>
 80001fe:	09c3      	lsrs	r3, r0, #7
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xa8>
 8000204:	01cb      	lsls	r3, r1, #7
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0983      	lsrs	r3, r0, #6
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xb4>
 8000210:	018b      	lsls	r3, r1, #6
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0943      	lsrs	r3, r0, #5
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xc0>
 800021c:	014b      	lsls	r3, r1, #5
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xcc>
 8000228:	010b      	lsls	r3, r1, #4
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	08c3      	lsrs	r3, r0, #3
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xd8>
 8000234:	00cb      	lsls	r3, r1, #3
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0883      	lsrs	r3, r0, #2
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xe4>
 8000240:	008b      	lsls	r3, r1, #2
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	0843      	lsrs	r3, r0, #1
 8000248:	428b      	cmp	r3, r1
 800024a:	d301      	bcc.n	8000250 <__udivsi3+0xf0>
 800024c:	004b      	lsls	r3, r1, #1
 800024e:	1ac0      	subs	r0, r0, r3
 8000250:	4152      	adcs	r2, r2
 8000252:	1a41      	subs	r1, r0, r1
 8000254:	d200      	bcs.n	8000258 <__udivsi3+0xf8>
 8000256:	4601      	mov	r1, r0
 8000258:	4152      	adcs	r2, r2
 800025a:	4610      	mov	r0, r2
 800025c:	4770      	bx	lr
 800025e:	e7ff      	b.n	8000260 <__udivsi3+0x100>
 8000260:	b501      	push	{r0, lr}
 8000262:	2000      	movs	r0, #0
 8000264:	f000 f8f0 	bl	8000448 <__aeabi_idiv0>
 8000268:	bd02      	pop	{r1, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)

0800026c <__aeabi_uidivmod>:
 800026c:	2900      	cmp	r1, #0
 800026e:	d0f7      	beq.n	8000260 <__udivsi3+0x100>
 8000270:	e776      	b.n	8000160 <__udivsi3>
 8000272:	4770      	bx	lr

08000274 <__divsi3>:
 8000274:	4603      	mov	r3, r0
 8000276:	430b      	orrs	r3, r1
 8000278:	d47f      	bmi.n	800037a <__divsi3+0x106>
 800027a:	2200      	movs	r2, #0
 800027c:	0843      	lsrs	r3, r0, #1
 800027e:	428b      	cmp	r3, r1
 8000280:	d374      	bcc.n	800036c <__divsi3+0xf8>
 8000282:	0903      	lsrs	r3, r0, #4
 8000284:	428b      	cmp	r3, r1
 8000286:	d35f      	bcc.n	8000348 <__divsi3+0xd4>
 8000288:	0a03      	lsrs	r3, r0, #8
 800028a:	428b      	cmp	r3, r1
 800028c:	d344      	bcc.n	8000318 <__divsi3+0xa4>
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d328      	bcc.n	80002e6 <__divsi3+0x72>
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d30d      	bcc.n	80002b6 <__divsi3+0x42>
 800029a:	22ff      	movs	r2, #255	@ 0xff
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	ba12      	rev	r2, r2
 80002a0:	0c03      	lsrs	r3, r0, #16
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d302      	bcc.n	80002ac <__divsi3+0x38>
 80002a6:	1212      	asrs	r2, r2, #8
 80002a8:	0209      	lsls	r1, r1, #8
 80002aa:	d065      	beq.n	8000378 <__divsi3+0x104>
 80002ac:	0b03      	lsrs	r3, r0, #12
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d319      	bcc.n	80002e6 <__divsi3+0x72>
 80002b2:	e000      	b.n	80002b6 <__divsi3+0x42>
 80002b4:	0a09      	lsrs	r1, r1, #8
 80002b6:	0bc3      	lsrs	r3, r0, #15
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x4c>
 80002bc:	03cb      	lsls	r3, r1, #15
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b83      	lsrs	r3, r0, #14
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x58>
 80002c8:	038b      	lsls	r3, r1, #14
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b43      	lsrs	r3, r0, #13
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x64>
 80002d4:	034b      	lsls	r3, r1, #13
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0b03      	lsrs	r3, r0, #12
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x70>
 80002e0:	030b      	lsls	r3, r1, #12
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0ac3      	lsrs	r3, r0, #11
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x7c>
 80002ec:	02cb      	lsls	r3, r1, #11
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a83      	lsrs	r3, r0, #10
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x88>
 80002f8:	028b      	lsls	r3, r1, #10
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a43      	lsrs	r3, r0, #9
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0x94>
 8000304:	024b      	lsls	r3, r1, #9
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	0a03      	lsrs	r3, r0, #8
 800030c:	428b      	cmp	r3, r1
 800030e:	d301      	bcc.n	8000314 <__divsi3+0xa0>
 8000310:	020b      	lsls	r3, r1, #8
 8000312:	1ac0      	subs	r0, r0, r3
 8000314:	4152      	adcs	r2, r2
 8000316:	d2cd      	bcs.n	80002b4 <__divsi3+0x40>
 8000318:	09c3      	lsrs	r3, r0, #7
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xae>
 800031e:	01cb      	lsls	r3, r1, #7
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0983      	lsrs	r3, r0, #6
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xba>
 800032a:	018b      	lsls	r3, r1, #6
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0943      	lsrs	r3, r0, #5
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xc6>
 8000336:	014b      	lsls	r3, r1, #5
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0903      	lsrs	r3, r0, #4
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xd2>
 8000342:	010b      	lsls	r3, r1, #4
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	08c3      	lsrs	r3, r0, #3
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xde>
 800034e:	00cb      	lsls	r3, r1, #3
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0883      	lsrs	r3, r0, #2
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xea>
 800035a:	008b      	lsls	r3, r1, #2
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	0843      	lsrs	r3, r0, #1
 8000362:	428b      	cmp	r3, r1
 8000364:	d301      	bcc.n	800036a <__divsi3+0xf6>
 8000366:	004b      	lsls	r3, r1, #1
 8000368:	1ac0      	subs	r0, r0, r3
 800036a:	4152      	adcs	r2, r2
 800036c:	1a41      	subs	r1, r0, r1
 800036e:	d200      	bcs.n	8000372 <__divsi3+0xfe>
 8000370:	4601      	mov	r1, r0
 8000372:	4152      	adcs	r2, r2
 8000374:	4610      	mov	r0, r2
 8000376:	4770      	bx	lr
 8000378:	e05d      	b.n	8000436 <__divsi3+0x1c2>
 800037a:	0fca      	lsrs	r2, r1, #31
 800037c:	d000      	beq.n	8000380 <__divsi3+0x10c>
 800037e:	4249      	negs	r1, r1
 8000380:	1003      	asrs	r3, r0, #32
 8000382:	d300      	bcc.n	8000386 <__divsi3+0x112>
 8000384:	4240      	negs	r0, r0
 8000386:	4053      	eors	r3, r2
 8000388:	2200      	movs	r2, #0
 800038a:	469c      	mov	ip, r3
 800038c:	0903      	lsrs	r3, r0, #4
 800038e:	428b      	cmp	r3, r1
 8000390:	d32d      	bcc.n	80003ee <__divsi3+0x17a>
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d312      	bcc.n	80003be <__divsi3+0x14a>
 8000398:	22fc      	movs	r2, #252	@ 0xfc
 800039a:	0189      	lsls	r1, r1, #6
 800039c:	ba12      	rev	r2, r2
 800039e:	0a03      	lsrs	r3, r0, #8
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d30c      	bcc.n	80003be <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	1192      	asrs	r2, r2, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d308      	bcc.n	80003be <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	1192      	asrs	r2, r2, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d304      	bcc.n	80003be <__divsi3+0x14a>
 80003b4:	0189      	lsls	r1, r1, #6
 80003b6:	d03a      	beq.n	800042e <__divsi3+0x1ba>
 80003b8:	1192      	asrs	r2, r2, #6
 80003ba:	e000      	b.n	80003be <__divsi3+0x14a>
 80003bc:	0989      	lsrs	r1, r1, #6
 80003be:	09c3      	lsrs	r3, r0, #7
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x154>
 80003c4:	01cb      	lsls	r3, r1, #7
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0983      	lsrs	r3, r0, #6
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x160>
 80003d0:	018b      	lsls	r3, r1, #6
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0943      	lsrs	r3, r0, #5
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x16c>
 80003dc:	014b      	lsls	r3, r1, #5
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	0903      	lsrs	r3, r0, #4
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x178>
 80003e8:	010b      	lsls	r3, r1, #4
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	08c3      	lsrs	r3, r0, #3
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x184>
 80003f4:	00cb      	lsls	r3, r1, #3
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	0883      	lsrs	r3, r0, #2
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x190>
 8000400:	008b      	lsls	r3, r1, #2
 8000402:	1ac0      	subs	r0, r0, r3
 8000404:	4152      	adcs	r2, r2
 8000406:	d2d9      	bcs.n	80003bc <__divsi3+0x148>
 8000408:	0843      	lsrs	r3, r0, #1
 800040a:	428b      	cmp	r3, r1
 800040c:	d301      	bcc.n	8000412 <__divsi3+0x19e>
 800040e:	004b      	lsls	r3, r1, #1
 8000410:	1ac0      	subs	r0, r0, r3
 8000412:	4152      	adcs	r2, r2
 8000414:	1a41      	subs	r1, r0, r1
 8000416:	d200      	bcs.n	800041a <__divsi3+0x1a6>
 8000418:	4601      	mov	r1, r0
 800041a:	4663      	mov	r3, ip
 800041c:	4152      	adcs	r2, r2
 800041e:	105b      	asrs	r3, r3, #1
 8000420:	4610      	mov	r0, r2
 8000422:	d301      	bcc.n	8000428 <__divsi3+0x1b4>
 8000424:	4240      	negs	r0, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d500      	bpl.n	800042c <__divsi3+0x1b8>
 800042a:	4249      	negs	r1, r1
 800042c:	4770      	bx	lr
 800042e:	4663      	mov	r3, ip
 8000430:	105b      	asrs	r3, r3, #1
 8000432:	d300      	bcc.n	8000436 <__divsi3+0x1c2>
 8000434:	4240      	negs	r0, r0
 8000436:	b501      	push	{r0, lr}
 8000438:	2000      	movs	r0, #0
 800043a:	f000 f805 	bl	8000448 <__aeabi_idiv0>
 800043e:	bd02      	pop	{r1, pc}

08000440 <__aeabi_idivmod>:
 8000440:	2900      	cmp	r1, #0
 8000442:	d0f8      	beq.n	8000436 <__divsi3+0x1c2>
 8000444:	e716      	b.n	8000274 <__divsi3>
 8000446:	4770      	bx	lr

08000448 <__aeabi_idiv0>:
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			@ (mov r8, r8)

0800044c <__aeabi_llsr>:
 800044c:	40d0      	lsrs	r0, r2
 800044e:	000b      	movs	r3, r1
 8000450:	40d1      	lsrs	r1, r2
 8000452:	469c      	mov	ip, r3
 8000454:	3a20      	subs	r2, #32
 8000456:	40d3      	lsrs	r3, r2
 8000458:	4318      	orrs	r0, r3
 800045a:	4252      	negs	r2, r2
 800045c:	4663      	mov	r3, ip
 800045e:	4093      	lsls	r3, r2
 8000460:	4318      	orrs	r0, r3
 8000462:	4770      	bx	lr

08000464 <__aeabi_llsl>:
 8000464:	4091      	lsls	r1, r2
 8000466:	0003      	movs	r3, r0
 8000468:	4090      	lsls	r0, r2
 800046a:	469c      	mov	ip, r3
 800046c:	3a20      	subs	r2, #32
 800046e:	4093      	lsls	r3, r2
 8000470:	4319      	orrs	r1, r3
 8000472:	4252      	negs	r2, r2
 8000474:	4663      	mov	r3, ip
 8000476:	40d3      	lsrs	r3, r2
 8000478:	4319      	orrs	r1, r3
 800047a:	4770      	bx	lr

0800047c <bitmap_set_bit>:
}

/*
 * Bitmap set a bit value
 */
void bitmap_set_bit(uint64_t *bitmap, int index) {
 800047c:	b510      	push	{r4, lr}
 800047e:	000a      	movs	r2, r1
 8000480:	0004      	movs	r4, r0
	if(is_index_out_of_bound(index)) return;
 8000482:	293f      	cmp	r1, #63	@ 0x3f
 8000484:	d808      	bhi.n	8000498 <bitmap_set_bit+0x1c>
    *bitmap |= (1ULL << index);
 8000486:	2001      	movs	r0, #1
 8000488:	2100      	movs	r1, #0
 800048a:	f7ff ffeb 	bl	8000464 <__aeabi_llsl>
 800048e:	6823      	ldr	r3, [r4, #0]
 8000490:	4318      	orrs	r0, r3
 8000492:	6863      	ldr	r3, [r4, #4]
 8000494:	430b      	orrs	r3, r1
 8000496:	c409      	stmia	r4!, {r0, r3}
}
 8000498:	bd10      	pop	{r4, pc}

0800049a <bitmap_clear_bit>:

/*
 * Bitmap clear a bit value
 */
void bitmap_clear_bit(uint64_t *bitmap, int index) {
 800049a:	b510      	push	{r4, lr}
 800049c:	000a      	movs	r2, r1
 800049e:	0004      	movs	r4, r0
	if(is_index_out_of_bound(index)) return;
 80004a0:	293f      	cmp	r1, #63	@ 0x3f
 80004a2:	d808      	bhi.n	80004b6 <bitmap_clear_bit+0x1c>
	*bitmap &= ~(1ULL << index);
 80004a4:	2001      	movs	r0, #1
 80004a6:	2100      	movs	r1, #0
 80004a8:	f7ff ffdc 	bl	8000464 <__aeabi_llsl>
 80004ac:	6822      	ldr	r2, [r4, #0]
 80004ae:	6863      	ldr	r3, [r4, #4]
 80004b0:	4382      	bics	r2, r0
 80004b2:	438b      	bics	r3, r1
 80004b4:	c40c      	stmia	r4!, {r2, r3}
}
 80004b6:	bd10      	pop	{r4, pc}

080004b8 <bitmap_get_bit>:

/*
 * Bitmap get a bit value
 */
int bitmap_get_bit(uint64_t bitmap, int index) {
 80004b8:	b510      	push	{r4, lr}
	if(is_index_out_of_bound(index)) return -1;
 80004ba:	2a3f      	cmp	r2, #63	@ 0x3f
 80004bc:	d804      	bhi.n	80004c8 <bitmap_get_bit+0x10>
	return (bitmap >> index) & 1;
 80004be:	f7ff ffc5 	bl	800044c <__aeabi_llsr>
 80004c2:	2301      	movs	r3, #1
 80004c4:	4018      	ands	r0, r3
}
 80004c6:	bd10      	pop	{r4, pc}
	if(is_index_out_of_bound(index)) return -1;
 80004c8:	2001      	movs	r0, #1
 80004ca:	4240      	negs	r0, r0
 80004cc:	e7fb      	b.n	80004c6 <bitmap_get_bit+0xe>

080004ce <cb_sq_to_str>:
 *  @param idx  Index 0..63.
 *  @param file [out] Reçoit 0..7 (A..H).
 *  @param rank [out] Reçoit 0..7 (1..8).
 */
static inline void cb_idx_to_coords(uint8_t idx, uint8_t* file, uint8_t* rank){
    *file = (uint8_t)(idx % 8u);
 80004ce:	2207      	movs	r2, #7
 *  @param idx Index 0..63.
 *  @param out Buffer de 3 chars min. (ex: "E2\0").
 */
static inline void cb_sq_to_str(uint8_t idx, char out[3]){
    uint8_t f,r; cb_idx_to_coords(idx,&f,&r);
    out[0] = (char)('H'-f); out[1]=(char)('1'+r); out[2]='\0';
 80004d0:	2348      	movs	r3, #72	@ 0x48
    *file = (uint8_t)(idx % 8u);
 80004d2:	4002      	ands	r2, r0
    out[0] = (char)('H'-f); out[1]=(char)('1'+r); out[2]='\0';
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	700b      	strb	r3, [r1, #0]
 80004d8:	2300      	movs	r3, #0
    *rank = (uint8_t)(idx / 8u);
 80004da:	08c0      	lsrs	r0, r0, #3
    out[0] = (char)('H'-f); out[1]=(char)('1'+r); out[2]='\0';
 80004dc:	3031      	adds	r0, #49	@ 0x31
 80004de:	7048      	strb	r0, [r1, #1]
 80004e0:	708b      	strb	r3, [r1, #2]
}
 80004e2:	4770      	bx	lr

080004e4 <parse_u8>:
    if(n<3) return false; if(!(s[0]=='0' && (s[1]=='x'||s[1]=='X'))) return false;
    for(size_t i=2;i<n;i++){ char c=s[i];
        if(!((c>='0'&&c<='9')||(c>='a'&&c<='f')||(c>='A'&&c<='F'))) return false; }
    return true; }

static bool parse_u8(const char* t, uint8_t* v){ if(!t||!v) return false;
 80004e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80004e6:	0004      	movs	r4, r0
 80004e8:	000d      	movs	r5, r1
 80004ea:	2800      	cmp	r0, #0
 80004ec:	d101      	bne.n	80004f2 <parse_u8+0xe>
 80004ee:	2000      	movs	r0, #0
    char* e=NULL; unsigned long x=strtoul(t,&e,10); if(e==t||*e) return false;
    if(x>255UL) return false; *v=(uint8_t)x; return true; }
 80004f0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    char* e=NULL; unsigned long x=strtoul(t,&e,10); if(e==t||*e) return false;
 80004f2:	2300      	movs	r3, #0
 80004f4:	220a      	movs	r2, #10
 80004f6:	a901      	add	r1, sp, #4
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	f003 fcd5 	bl	8003ea8 <strtoul>
 80004fe:	9b01      	ldr	r3, [sp, #4]
 8000500:	42a3      	cmp	r3, r4
 8000502:	d0f4      	beq.n	80004ee <parse_u8+0xa>
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d1f1      	bne.n	80004ee <parse_u8+0xa>
    if(x>255UL) return false; *v=(uint8_t)x; return true; }
 800050a:	28ff      	cmp	r0, #255	@ 0xff
 800050c:	d8ef      	bhi.n	80004ee <parse_u8+0xa>
 800050e:	7028      	strb	r0, [r5, #0]
 8000510:	2001      	movs	r0, #1
 8000512:	e7ed      	b.n	80004f0 <parse_u8+0xc>

08000514 <s_write>:
static size_t s_write(char* out, size_t cap, const char* fmt, ...){
 8000514:	b40c      	push	{r2, r3}
 8000516:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000518:	0005      	movs	r5, r0
 800051a:	1e0c      	subs	r4, r1, #0
    if(cap==0) return 0;
 800051c:	d104      	bne.n	8000528 <s_write+0x14>
 800051e:	2000      	movs	r0, #0
}
 8000520:	bc3e      	pop	{r1, r2, r3, r4, r5}
 8000522:	bc08      	pop	{r3}
 8000524:	b002      	add	sp, #8
 8000526:	4718      	bx	r3
    va_list ap; va_start(ap, fmt);
 8000528:	ab07      	add	r3, sp, #28
    int n = vsnprintf(out, cap, fmt, ap);
 800052a:	9a06      	ldr	r2, [sp, #24]
    va_list ap; va_start(ap, fmt);
 800052c:	9301      	str	r3, [sp, #4]
    int n = vsnprintf(out, cap, fmt, ap);
 800052e:	f003 fd2b 	bl	8003f88 <vsniprintf>
    if(n<0) return 0; // encoding error
 8000532:	2800      	cmp	r0, #0
 8000534:	dbf3      	blt.n	800051e <s_write+0xa>
    if((size_t)n >= cap){ // truncated
 8000536:	42a0      	cmp	r0, r4
 8000538:	d3f2      	bcc.n	8000520 <s_write+0xc>
        out[cap-1] = '\0';
 800053a:	2300      	movs	r3, #0
 800053c:	1e60      	subs	r0, r4, #1
 800053e:	542b      	strb	r3, [r5, r0]
        return cap-1;
 8000540:	e7ee      	b.n	8000520 <s_write+0xc>

08000542 <convert_reed_index_to_led_index>:
	if((reed_index / 8) % 2 == 0) {
 8000542:	08c3      	lsrs	r3, r0, #3
 8000544:	0702      	lsls	r2, r0, #28
 8000546:	d503      	bpl.n	8000550 <convert_reed_index_to_led_index+0xe>
		return (16 * (uint8_t)(reed_index / 8)) + 7 - reed_index;
 8000548:	011b      	lsls	r3, r3, #4
 800054a:	1a1b      	subs	r3, r3, r0
 800054c:	3307      	adds	r3, #7
 800054e:	b2d8      	uxtb	r0, r3
}
 8000550:	4770      	bx	lr

08000552 <cb_sq_from_str>:
/** @brief Parse une chaîne de 2 caractères (ex: "E2") en index 0..63.
 *  @param s Chaîne "A1".."H8" (insensible à la casse pour la lettre).
 *  @param out_idx [out] Reçoit l'index 0..63 si succès.
 *  @return true si parsing réussi, false sinon.
 */
bool cb_sq_from_str(const char* s, uint8_t* out_idx){
 8000552:	b570      	push	{r4, r5, r6, lr}
 8000554:	0005      	movs	r5, r0
 8000556:	000c      	movs	r4, r1
	    if(!s || !out_idx) return false;
 8000558:	2800      	cmp	r0, #0
 800055a:	d024      	beq.n	80005a6 <cb_sq_from_str+0x54>
 800055c:	1e08      	subs	r0, r1, #0
 800055e:	d022      	beq.n	80005a6 <cb_sq_from_str+0x54>
	    char c0 = s[0]; char c1 = s[1];
 8000560:	782a      	ldrb	r2, [r5, #0]
	    if(!s || !out_idx) return false;
 8000562:	1e10      	subs	r0, r2, #0
	    if(!c0 || !c1 || s[2]) return false; // exactly 2 chars like 'E2'
 8000564:	d01f      	beq.n	80005a6 <cb_sq_from_str+0x54>
	    char c0 = s[0]; char c1 = s[1];
 8000566:	786b      	ldrb	r3, [r5, #1]
	    if(!s || !out_idx) return false;
 8000568:	1e18      	subs	r0, r3, #0
	    if(!c0 || !c1 || s[2]) return false; // exactly 2 chars like 'E2'
 800056a:	d01c      	beq.n	80005a6 <cb_sq_from_str+0x54>
	    if(!s || !out_idx) return false;
 800056c:	2000      	movs	r0, #0
	    if(!c0 || !c1 || s[2]) return false; // exactly 2 chars like 'E2'
 800056e:	78a9      	ldrb	r1, [r5, #2]
 8000570:	4281      	cmp	r1, r0
 8000572:	d118      	bne.n	80005a6 <cb_sq_from_str+0x54>
	    if(c0>='a'&&c0<='h') c0 = (char)(c0 - 'a' + 'A');
 8000574:	0010      	movs	r0, r2
 8000576:	3861      	subs	r0, #97	@ 0x61
 8000578:	2807      	cmp	r0, #7
 800057a:	d80f      	bhi.n	800059c <cb_sq_from_str+0x4a>
 800057c:	3a20      	subs	r2, #32
 800057e:	b2d2      	uxtb	r2, r2
	    if(!(c0>='A'&&c0<='H') || !(c1>='1'&&c1<='8')) return false;
 8000580:	3b31      	subs	r3, #49	@ 0x31
 8000582:	b2db      	uxtb	r3, r3
	    if(!s || !out_idx) return false;
 8000584:	2000      	movs	r0, #0
	    if(!(c0>='A'&&c0<='H') || !(c1>='1'&&c1<='8')) return false;
 8000586:	2b07      	cmp	r3, #7
 8000588:	d80d      	bhi.n	80005a6 <cb_sq_from_str+0x54>
    return (uint8_t)(rank*8u + file);
 800058a:	00d8      	lsls	r0, r3, #3
 800058c:	3048      	adds	r0, #72	@ 0x48
 800058e:	1a80      	subs	r0, r0, r2
	    uint8_t file = (uint8_t)('H' - c0);
	    uint8_t rank = (uint8_t)(c1 - '1');
	    *out_idx = cb_coords_to_idx(file, rank);
	    *out_idx = convert_reed_index_to_led_index(*out_idx);
 8000590:	b2c0      	uxtb	r0, r0
 8000592:	f7ff ffd6 	bl	8000542 <convert_reed_index_to_led_index>
 8000596:	7020      	strb	r0, [r4, #0]
			return true;
 8000598:	2001      	movs	r0, #1
 800059a:	e004      	b.n	80005a6 <cb_sq_from_str+0x54>
	    if(!s || !out_idx) return false;
 800059c:	0008      	movs	r0, r1
	    if(!(c0>='A'&&c0<='H') || !(c1>='1'&&c1<='8')) return false;
 800059e:	0011      	movs	r1, r2
 80005a0:	3941      	subs	r1, #65	@ 0x41
 80005a2:	2907      	cmp	r1, #7
 80005a4:	d9ec      	bls.n	8000580 <cb_sq_from_str+0x2e>
}
 80005a6:	bd70      	pop	{r4, r5, r6, pc}

080005a8 <cb_parse_cmd>:

bool cb_parse_cmd(const char* line_in, cb_cmd_t* out){
 80005a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005aa:	0007      	movs	r7, r0
 80005ac:	000c      	movs	r4, r1
 80005ae:	b09b      	sub	sp, #108	@ 0x6c
    if(!line_in || !out) return false;
 80005b0:	2800      	cmp	r0, #0
 80005b2:	d101      	bne.n	80005b8 <cb_parse_cmd+0x10>
                out->type=CB_CMD_LED_OFF_SQ; out->u.led_off_sq.idx=idx; return true;
            }
            return false;
        }
        if(strcmp(tok[1],"OK")==0 && nt==4){
            uint8_t a,b; if(!cb_sq_from_str(tok[2],&a)||!cb_sq_from_str(tok[3],&b)) return false;
 80005b4:	2000      	movs	r0, #0
 80005b6:	e03b      	b.n	8000630 <cb_parse_cmd+0x88>
    if(!line_in || !out) return false;
 80005b8:	2900      	cmp	r1, #0
 80005ba:	d0fb      	beq.n	80005b4 <cb_parse_cmd+0xc>
    out->type = CB_CMD_UNKNOWN;
 80005bc:	2621      	movs	r6, #33	@ 0x21
    memset(out, 0, sizeof(*out));
 80005be:	1c48      	adds	r0, r1, #1
 80005c0:	2297      	movs	r2, #151	@ 0x97
 80005c2:	2100      	movs	r1, #0
 80005c4:	f003 fcfe 	bl	8003fc4 <memset>
    out->type = CB_CMD_UNKNOWN;
 80005c8:	7026      	strb	r6, [r4, #0]
    if(line_in[0] != ':') return false;
 80005ca:	783b      	ldrb	r3, [r7, #0]
 80005cc:	2b3a      	cmp	r3, #58	@ 0x3a
 80005ce:	d1f1      	bne.n	80005b4 <cb_parse_cmd+0xc>
    size_t L = strnlen(line_in, CB_MAX_LINE);
 80005d0:	2120      	movs	r1, #32
 80005d2:	0038      	movs	r0, r7
 80005d4:	f003 fcfe 	bl	8003fd4 <strnlen>
 80005d8:	0005      	movs	r5, r0
    if(L >= sizeof(out->_scratch)) L = sizeof(out->_scratch)-1;
 80005da:	42b0      	cmp	r0, r6
 80005dc:	d900      	bls.n	80005e0 <cb_parse_cmd+0x38>
 80005de:	0035      	movs	r5, r6
    memcpy(out->_scratch, line_in, L);
 80005e0:	0026      	movs	r6, r4
 80005e2:	3670      	adds	r6, #112	@ 0x70
 80005e4:	002a      	movs	r2, r5
 80005e6:	0039      	movs	r1, r7
 80005e8:	0030      	movs	r0, r6
 80005ea:	f003 fd2b 	bl	8004044 <memcpy>
    out->_scratch[L] = '\0';
 80005ee:	2300      	movs	r3, #0
 80005f0:	1965      	adds	r5, r4, r5
 80005f2:	3570      	adds	r5, #112	@ 0x70
    while(*p && isspace((unsigned char)*p)) p++;
 80005f4:	4983      	ldr	r1, [pc, #524]	@ (8000804 <cb_parse_cmd+0x25c>)
    out->_scratch[L] = '\0';
 80005f6:	702b      	strb	r3, [r5, #0]
    while(*p && isspace((unsigned char)*p)) p++;
 80005f8:	3308      	adds	r3, #8
 80005fa:	7835      	ldrb	r5, [r6, #0]
 80005fc:	2d00      	cmp	r5, #0
 80005fe:	d004      	beq.n	800060a <cb_parse_cmd+0x62>
 8000600:	5d4a      	ldrb	r2, [r1, r5]
 8000602:	0015      	movs	r5, r2
 8000604:	401d      	ands	r5, r3
 8000606:	421a      	tst	r2, r3
 8000608:	d114      	bne.n	8000634 <cb_parse_cmd+0x8c>
        while(*p && !isspace((unsigned char)*p)) p++;
 800060a:	2108      	movs	r1, #8
 800060c:	4a7d      	ldr	r2, [pc, #500]	@ (8000804 <cb_parse_cmd+0x25c>)
    while(*p && n<max_out){
 800060e:	7833      	ldrb	r3, [r6, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d02c      	beq.n	800066e <cb_parse_cmd+0xc6>
 8000614:	2d18      	cmp	r5, #24
 8000616:	d10f      	bne.n	8000638 <cb_parse_cmd+0x90>
    const char* T0 = tok[0] + 1;
 8000618:	9e02      	ldr	r6, [sp, #8]
    if(strcmp(T0,"PING")==0 && nt==1){ out->type=CB_CMD_PING; return true; }
 800061a:	497b      	ldr	r1, [pc, #492]	@ (8000808 <cb_parse_cmd+0x260>)
    const char* T0 = tok[0] + 1;
 800061c:	3601      	adds	r6, #1
    if(strcmp(T0,"PING")==0 && nt==1){ out->type=CB_CMD_PING; return true; }
 800061e:	0030      	movs	r0, r6
 8000620:	f7ff fd6e 	bl	8000100 <strcmp>
 8000624:	2800      	cmp	r0, #0
 8000626:	d125      	bne.n	8000674 <cb_parse_cmd+0xcc>
 8000628:	2d01      	cmp	r5, #1
 800062a:	d123      	bne.n	8000674 <cb_parse_cmd+0xcc>
 800062c:	7025      	strb	r5, [r4, #0]
 800062e:	2001      	movs	r0, #1
        return cnt>0;
    }
    */

    return false;
}
 8000630:	b01b      	add	sp, #108	@ 0x6c
 8000632:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(*p && isspace((unsigned char)*p)) p++;
 8000634:	3601      	adds	r6, #1
 8000636:	e7e0      	b.n	80005fa <cb_parse_cmd+0x52>
        out[n++] = p;
 8000638:	1c6b      	adds	r3, r5, #1
 800063a:	a802      	add	r0, sp, #8
 800063c:	00ad      	lsls	r5, r5, #2
 800063e:	502e      	str	r6, [r5, r0]
        while(*p && !isspace((unsigned char)*p)) p++;
 8000640:	7830      	ldrb	r0, [r6, #0]
 8000642:	2800      	cmp	r0, #0
 8000644:	d100      	bne.n	8000648 <cb_parse_cmd+0xa0>
 8000646:	e0db      	b.n	8000800 <cb_parse_cmd+0x258>
 8000648:	5c15      	ldrb	r5, [r2, r0]
 800064a:	1c70      	adds	r0, r6, #1
 800064c:	420d      	tst	r5, r1
 800064e:	d00a      	beq.n	8000666 <cb_parse_cmd+0xbe>
        *p++ = '\0';
 8000650:	2500      	movs	r5, #0
 8000652:	7035      	strb	r5, [r6, #0]
 8000654:	0006      	movs	r6, r0
        while(*p && isspace((unsigned char)*p)) p++;
 8000656:	7830      	ldrb	r0, [r6, #0]
 8000658:	2800      	cmp	r0, #0
 800065a:	d002      	beq.n	8000662 <cb_parse_cmd+0xba>
 800065c:	5c10      	ldrb	r0, [r2, r0]
 800065e:	4208      	tst	r0, r1
 8000660:	d103      	bne.n	800066a <cb_parse_cmd+0xc2>
        *p++ = '\0';
 8000662:	001d      	movs	r5, r3
 8000664:	e7d3      	b.n	800060e <cb_parse_cmd+0x66>
        while(*p && !isspace((unsigned char)*p)) p++;
 8000666:	0006      	movs	r6, r0
 8000668:	e7ea      	b.n	8000640 <cb_parse_cmd+0x98>
        while(*p && isspace((unsigned char)*p)) p++;
 800066a:	3601      	adds	r6, #1
 800066c:	e7f3      	b.n	8000656 <cb_parse_cmd+0xae>
    if(nt <= 0) return false;
 800066e:	2d00      	cmp	r5, #0
 8000670:	d0a0      	beq.n	80005b4 <cb_parse_cmd+0xc>
 8000672:	e7d1      	b.n	8000618 <cb_parse_cmd+0x70>
    if(strcmp(T0,"VER?")==0 && nt==1){ out->type=CB_CMD_VER_Q; return true; }
 8000674:	0030      	movs	r0, r6
 8000676:	4965      	ldr	r1, [pc, #404]	@ (800080c <cb_parse_cmd+0x264>)
 8000678:	f7ff fd42 	bl	8000100 <strcmp>
 800067c:	2800      	cmp	r0, #0
 800067e:	d104      	bne.n	800068a <cb_parse_cmd+0xe2>
 8000680:	2d01      	cmp	r5, #1
 8000682:	d102      	bne.n	800068a <cb_parse_cmd+0xe2>
 8000684:	2302      	movs	r3, #2
 8000686:	7023      	strb	r3, [r4, #0]
 8000688:	e7d1      	b.n	800062e <cb_parse_cmd+0x86>
    if(strcmp(T0,"TIME?")==0 && nt==1){ out->type=CB_CMD_TIME_Q; return true; }
 800068a:	0030      	movs	r0, r6
 800068c:	4960      	ldr	r1, [pc, #384]	@ (8000810 <cb_parse_cmd+0x268>)
 800068e:	f7ff fd37 	bl	8000100 <strcmp>
 8000692:	2800      	cmp	r0, #0
 8000694:	d102      	bne.n	800069c <cb_parse_cmd+0xf4>
 8000696:	2303      	movs	r3, #3
 8000698:	2d01      	cmp	r5, #1
 800069a:	d0f4      	beq.n	8000686 <cb_parse_cmd+0xde>
    if(strcmp(T0,"RST")==0 && nt==1){ out->type=CB_CMD_RST; return true; }
 800069c:	0030      	movs	r0, r6
 800069e:	495d      	ldr	r1, [pc, #372]	@ (8000814 <cb_parse_cmd+0x26c>)
 80006a0:	f7ff fd2e 	bl	8000100 <strcmp>
 80006a4:	2800      	cmp	r0, #0
 80006a6:	d102      	bne.n	80006ae <cb_parse_cmd+0x106>
 80006a8:	2304      	movs	r3, #4
 80006aa:	2d01      	cmp	r5, #1
 80006ac:	d0eb      	beq.n	8000686 <cb_parse_cmd+0xde>
    if(strcmp(T0,"SAVE")==0 && nt==1){ out->type=CB_CMD_SAVE; return true; }
 80006ae:	0030      	movs	r0, r6
 80006b0:	4959      	ldr	r1, [pc, #356]	@ (8000818 <cb_parse_cmd+0x270>)
 80006b2:	f7ff fd25 	bl	8000100 <strcmp>
 80006b6:	2800      	cmp	r0, #0
 80006b8:	d102      	bne.n	80006c0 <cb_parse_cmd+0x118>
 80006ba:	2305      	movs	r3, #5
 80006bc:	2d01      	cmp	r5, #1
 80006be:	d0e2      	beq.n	8000686 <cb_parse_cmd+0xde>
    if(strcmp(T0,"WIN")==0 && nt==2){
 80006c0:	0030      	movs	r0, r6
 80006c2:	4956      	ldr	r1, [pc, #344]	@ (800081c <cb_parse_cmd+0x274>)
 80006c4:	f7ff fd1c 	bl	8000100 <strcmp>
 80006c8:	2800      	cmp	r0, #0
 80006ca:	d10c      	bne.n	80006e6 <cb_parse_cmd+0x13e>
 80006cc:	2d02      	cmp	r5, #2
 80006ce:	d10a      	bne.n	80006e6 <cb_parse_cmd+0x13e>
    	out->type=CB_CMD_WIN;
 80006d0:	230b      	movs	r3, #11
 80006d2:	7023      	strb	r3, [r4, #0]
    	parse_u8(tok[1], &victory);
 80006d4:	466b      	mov	r3, sp
 80006d6:	1ddd      	adds	r5, r3, #7
 80006d8:	0029      	movs	r1, r5
 80006da:	9803      	ldr	r0, [sp, #12]
 80006dc:	f7ff ff02 	bl	80004e4 <parse_u8>
    	out->u.led_set.idx = victory;
 80006e0:	782b      	ldrb	r3, [r5, #0]
 80006e2:	7223      	strb	r3, [r4, #8]
    	return true;
 80006e4:	e7a3      	b.n	800062e <cb_parse_cmd+0x86>
    if(strcmp(T0,"DRAW")==0 && nt==2){
 80006e6:	0030      	movs	r0, r6
 80006e8:	494d      	ldr	r1, [pc, #308]	@ (8000820 <cb_parse_cmd+0x278>)
 80006ea:	f7ff fd09 	bl	8000100 <strcmp>
 80006ee:	2800      	cmp	r0, #0
 80006f0:	d102      	bne.n	80006f8 <cb_parse_cmd+0x150>
    	out->type=CB_CMD_DRAW;
 80006f2:	230c      	movs	r3, #12
    if(strcmp(T0,"DRAW")==0 && nt==2){
 80006f4:	2d02      	cmp	r5, #2
 80006f6:	d0c6      	beq.n	8000686 <cb_parse_cmd+0xde>
    if(strcmp(T0,"LED")==0 && nt>=2){
 80006f8:	0030      	movs	r0, r6
 80006fa:	494a      	ldr	r1, [pc, #296]	@ (8000824 <cb_parse_cmd+0x27c>)
 80006fc:	f7ff fd00 	bl	8000100 <strcmp>
 8000700:	2800      	cmp	r0, #0
 8000702:	d000      	beq.n	8000706 <cb_parse_cmd+0x15e>
 8000704:	e756      	b.n	80005b4 <cb_parse_cmd+0xc>
 8000706:	2d01      	cmp	r5, #1
 8000708:	d100      	bne.n	800070c <cb_parse_cmd+0x164>
 800070a:	e753      	b.n	80005b4 <cb_parse_cmd+0xc>
        if(strcmp(tok[1],"SET")==0 && nt==6){
 800070c:	9e03      	ldr	r6, [sp, #12]
 800070e:	4946      	ldr	r1, [pc, #280]	@ (8000828 <cb_parse_cmd+0x280>)
 8000710:	0030      	movs	r0, r6
 8000712:	f7ff fcf5 	bl	8000100 <strcmp>
 8000716:	2800      	cmp	r0, #0
 8000718:	d12f      	bne.n	800077a <cb_parse_cmd+0x1d2>
 800071a:	2d06      	cmp	r5, #6
 800071c:	d12d      	bne.n	800077a <cb_parse_cmd+0x1d2>
            if(!cb_sq_from_str(tok[2], &idx)) return false;
 800071e:	af01      	add	r7, sp, #4
 8000720:	0039      	movs	r1, r7
 8000722:	9804      	ldr	r0, [sp, #16]
 8000724:	f7ff ff15 	bl	8000552 <cb_sq_from_str>
 8000728:	2800      	cmp	r0, #0
 800072a:	d100      	bne.n	800072e <cb_parse_cmd+0x186>
 800072c:	e742      	b.n	80005b4 <cb_parse_cmd+0xc>
            if(!parse_u8(tok[3], &r) || !parse_u8(tok[4], &g) || !parse_u8(tok[5], &b)) return false;
 800072e:	466b      	mov	r3, sp
 8000730:	1d5e      	adds	r6, r3, #5
 8000732:	0031      	movs	r1, r6
 8000734:	9805      	ldr	r0, [sp, #20]
 8000736:	f7ff fed5 	bl	80004e4 <parse_u8>
 800073a:	2800      	cmp	r0, #0
 800073c:	d100      	bne.n	8000740 <cb_parse_cmd+0x198>
 800073e:	e739      	b.n	80005b4 <cb_parse_cmd+0xc>
 8000740:	466b      	mov	r3, sp
 8000742:	1d9d      	adds	r5, r3, #6
 8000744:	0029      	movs	r1, r5
 8000746:	9806      	ldr	r0, [sp, #24]
 8000748:	f7ff fecc 	bl	80004e4 <parse_u8>
 800074c:	2800      	cmp	r0, #0
 800074e:	d100      	bne.n	8000752 <cb_parse_cmd+0x1aa>
 8000750:	e730      	b.n	80005b4 <cb_parse_cmd+0xc>
 8000752:	466b      	mov	r3, sp
 8000754:	9807      	ldr	r0, [sp, #28]
 8000756:	1dd9      	adds	r1, r3, #7
 8000758:	f7ff fec4 	bl	80004e4 <parse_u8>
 800075c:	2800      	cmp	r0, #0
 800075e:	d100      	bne.n	8000762 <cb_parse_cmd+0x1ba>
 8000760:	e728      	b.n	80005b4 <cb_parse_cmd+0xc>
            out->type=CB_CMD_LED_SET; out->u.led_set.idx=idx; out->u.led_set.r=r; out->u.led_set.g=g; out->u.led_set.b=b; return true;
 8000762:	230d      	movs	r3, #13
 8000764:	7023      	strb	r3, [r4, #0]
 8000766:	783b      	ldrb	r3, [r7, #0]
 8000768:	7223      	strb	r3, [r4, #8]
 800076a:	7833      	ldrb	r3, [r6, #0]
 800076c:	7263      	strb	r3, [r4, #9]
 800076e:	782b      	ldrb	r3, [r5, #0]
 8000770:	72a3      	strb	r3, [r4, #10]
 8000772:	466b      	mov	r3, sp
 8000774:	79db      	ldrb	r3, [r3, #7]
 8000776:	72e3      	strb	r3, [r4, #11]
 8000778:	e75a      	b.n	8000630 <cb_parse_cmd+0x88>
        if(strcmp(tok[1],"OFF")==0){
 800077a:	0030      	movs	r0, r6
 800077c:	492b      	ldr	r1, [pc, #172]	@ (800082c <cb_parse_cmd+0x284>)
 800077e:	f7ff fcbf 	bl	8000100 <strcmp>
 8000782:	2800      	cmp	r0, #0
 8000784:	d119      	bne.n	80007ba <cb_parse_cmd+0x212>
            if(nt==3 && strcmp(tok[2],"ALL")==0){ out->type=CB_CMD_LED_OFF_ALL; return true; }
 8000786:	2d03      	cmp	r5, #3
 8000788:	d000      	beq.n	800078c <cb_parse_cmd+0x1e4>
 800078a:	e713      	b.n	80005b4 <cb_parse_cmd+0xc>
 800078c:	9d04      	ldr	r5, [sp, #16]
 800078e:	4928      	ldr	r1, [pc, #160]	@ (8000830 <cb_parse_cmd+0x288>)
 8000790:	0028      	movs	r0, r5
 8000792:	f7ff fcb5 	bl	8000100 <strcmp>
 8000796:	230f      	movs	r3, #15
 8000798:	2800      	cmp	r0, #0
 800079a:	d100      	bne.n	800079e <cb_parse_cmd+0x1f6>
 800079c:	e773      	b.n	8000686 <cb_parse_cmd+0xde>
                uint8_t idx; if(!cb_sq_from_str(tok[2], &idx)) return false;
 800079e:	466b      	mov	r3, sp
 80007a0:	1dde      	adds	r6, r3, #7
 80007a2:	0031      	movs	r1, r6
 80007a4:	0028      	movs	r0, r5
 80007a6:	f7ff fed4 	bl	8000552 <cb_sq_from_str>
 80007aa:	2800      	cmp	r0, #0
 80007ac:	d100      	bne.n	80007b0 <cb_parse_cmd+0x208>
 80007ae:	e73f      	b.n	8000630 <cb_parse_cmd+0x88>
                out->type=CB_CMD_LED_OFF_SQ; out->u.led_off_sq.idx=idx; return true;
 80007b0:	230e      	movs	r3, #14
 80007b2:	7023      	strb	r3, [r4, #0]
 80007b4:	7833      	ldrb	r3, [r6, #0]
 80007b6:	7223      	strb	r3, [r4, #8]
 80007b8:	e73a      	b.n	8000630 <cb_parse_cmd+0x88>
        if(strcmp(tok[1],"OK")==0 && nt==4){
 80007ba:	0030      	movs	r0, r6
 80007bc:	491d      	ldr	r1, [pc, #116]	@ (8000834 <cb_parse_cmd+0x28c>)
 80007be:	f7ff fc9f 	bl	8000100 <strcmp>
 80007c2:	2800      	cmp	r0, #0
 80007c4:	d000      	beq.n	80007c8 <cb_parse_cmd+0x220>
 80007c6:	e6f5      	b.n	80005b4 <cb_parse_cmd+0xc>
 80007c8:	2d04      	cmp	r5, #4
 80007ca:	d000      	beq.n	80007ce <cb_parse_cmd+0x226>
 80007cc:	e6f2      	b.n	80005b4 <cb_parse_cmd+0xc>
            uint8_t a,b; if(!cb_sq_from_str(tok[2],&a)||!cb_sq_from_str(tok[3],&b)) return false;
 80007ce:	466b      	mov	r3, sp
 80007d0:	1d9e      	adds	r6, r3, #6
 80007d2:	0031      	movs	r1, r6
 80007d4:	9804      	ldr	r0, [sp, #16]
 80007d6:	f7ff febc 	bl	8000552 <cb_sq_from_str>
 80007da:	2800      	cmp	r0, #0
 80007dc:	d100      	bne.n	80007e0 <cb_parse_cmd+0x238>
 80007de:	e6e9      	b.n	80005b4 <cb_parse_cmd+0xc>
 80007e0:	466b      	mov	r3, sp
 80007e2:	1ddd      	adds	r5, r3, #7
 80007e4:	0029      	movs	r1, r5
 80007e6:	9805      	ldr	r0, [sp, #20]
 80007e8:	f7ff feb3 	bl	8000552 <cb_sq_from_str>
 80007ec:	2800      	cmp	r0, #0
 80007ee:	d100      	bne.n	80007f2 <cb_parse_cmd+0x24a>
 80007f0:	e6e0      	b.n	80005b4 <cb_parse_cmd+0xc>
            out->type=CB_CMD_LED_OK; out->u.led_ok.from_idx=a; out->u.led_ok.to_idx=b; return true;
 80007f2:	231a      	movs	r3, #26
 80007f4:	7023      	strb	r3, [r4, #0]
 80007f6:	7833      	ldrb	r3, [r6, #0]
 80007f8:	7223      	strb	r3, [r4, #8]
 80007fa:	782b      	ldrb	r3, [r5, #0]
 80007fc:	7263      	strb	r3, [r4, #9]
 80007fe:	e717      	b.n	8000630 <cb_parse_cmd+0x88>
        out[n++] = p;
 8000800:	001d      	movs	r5, r3
    if(nt <= 0) return false;
 8000802:	e709      	b.n	8000618 <cb_parse_cmd+0x70>
 8000804:	08004a61 	.word	0x08004a61
 8000808:	080048c8 	.word	0x080048c8
 800080c:	080048cd 	.word	0x080048cd
 8000810:	080048d2 	.word	0x080048d2
 8000814:	080048d8 	.word	0x080048d8
 8000818:	080048dc 	.word	0x080048dc
 800081c:	080048e1 	.word	0x080048e1
 8000820:	080048e5 	.word	0x080048e5
 8000824:	080048ea 	.word	0x080048ea
 8000828:	080048ee 	.word	0x080048ee
 800082c:	080048f2 	.word	0x080048f2
 8000830:	080048f6 	.word	0x080048f6
 8000834:	080048fa 	.word	0x080048fa

08000838 <cb_fmt_evt_lift>:
    if(hw && *hw)  pos += s_write(out+pos, cap-pos, " HW=%s", hw);
    pos += s_write(out+pos, cap-pos, " t=%u\r\n", (unsigned)t_ms);
    return pos>cap?cap:pos;
}

size_t cb_fmt_evt_lift(char* out, size_t cap, uint8_t idx, uint32_t t_ms){
 8000838:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800083a:	001e      	movs	r6, r3
 800083c:	0004      	movs	r4, r0
 800083e:	000d      	movs	r5, r1
 8000840:	0010      	movs	r0, r2
    char sq[3]; cb_sq_to_str(idx, sq);
 8000842:	a903      	add	r1, sp, #12
 8000844:	f7ff fe43 	bl	80004ce <cb_sq_to_str>
    return s_write(out, cap, "EVT LIFT %s t=%u\r\n", sq, (unsigned)t_ms);
 8000848:	0029      	movs	r1, r5
 800084a:	0020      	movs	r0, r4
 800084c:	4a03      	ldr	r2, [pc, #12]	@ (800085c <cb_fmt_evt_lift+0x24>)
 800084e:	9600      	str	r6, [sp, #0]
 8000850:	ab03      	add	r3, sp, #12
 8000852:	f7ff fe5f 	bl	8000514 <s_write>
}
 8000856:	b004      	add	sp, #16
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	46c0      	nop			@ (mov r8, r8)
 800085c:	080048fd 	.word	0x080048fd

08000860 <cb_fmt_evt_place>:

size_t cb_fmt_evt_place(char* out, size_t cap, uint8_t idx, uint32_t t_ms){
 8000860:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8000862:	001e      	movs	r6, r3
 8000864:	0004      	movs	r4, r0
 8000866:	000d      	movs	r5, r1
 8000868:	0010      	movs	r0, r2
    char sq[3]; cb_sq_to_str(idx, sq);
 800086a:	a903      	add	r1, sp, #12
 800086c:	f7ff fe2f 	bl	80004ce <cb_sq_to_str>
    return s_write(out, cap, "EVT PLACE %s t=%u\r\n", sq, (unsigned)t_ms);
 8000870:	0029      	movs	r1, r5
 8000872:	0020      	movs	r0, r4
 8000874:	4a03      	ldr	r2, [pc, #12]	@ (8000884 <cb_fmt_evt_place+0x24>)
 8000876:	9600      	str	r6, [sp, #0]
 8000878:	ab03      	add	r3, sp, #12
 800087a:	f7ff fe4b 	bl	8000514 <s_write>
}
 800087e:	b004      	add	sp, #16
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	08004910 	.word	0x08004910

08000888 <uart_fifo_init>:
#include "fifo.h"
#include <string.h>
#include "stm32g0xx_hal.h"

void uart_fifo_init(uart_fifo_t *f) {
    f->len = 0;
 8000888:	2280      	movs	r2, #128	@ 0x80
 800088a:	2300      	movs	r3, #0
 800088c:	0092      	lsls	r2, r2, #2
 800088e:	5283      	strh	r3, [r0, r2]
    f->overflow = 0;
 8000890:	3204      	adds	r2, #4
 8000892:	5083      	str	r3, [r0, r2]
}
 8000894:	4770      	bx	lr

08000896 <uart_fifo_push_isr>:

int uart_fifo_push_isr(uart_fifo_t *f, uint8_t c) {
    // appelé depuis ISR : pas de désactivation d'interrupt ici
    uint16_t l = f->len;
 8000896:	2280      	movs	r2, #128	@ 0x80
int uart_fifo_push_isr(uart_fifo_t *f, uint8_t c) {
 8000898:	b510      	push	{r4, lr}
    uint16_t l = f->len;
 800089a:	0092      	lsls	r2, r2, #2
 800089c:	5a84      	ldrh	r4, [r0, r2]
 800089e:	b2a3      	uxth	r3, r4
    if (l >= UART_FIFO_SIZE) {
 80008a0:	4294      	cmp	r4, r2
 80008a2:	d305      	bcc.n	80008b0 <uart_fifo_push_isr+0x1a>
        f->overflow++;
 80008a4:	3204      	adds	r2, #4
 80008a6:	5883      	ldr	r3, [r0, r2]
 80008a8:	3301      	adds	r3, #1
 80008aa:	5083      	str	r3, [r0, r2]
        return 0; // overflow, on jette l'octet
 80008ac:	2000      	movs	r0, #0
    }
    f->buf[l] = c;
    // écrire len en dernier pour éviter de laisser état incohérent
    f->len = l + 1;
    return 1;
}
 80008ae:	bd10      	pop	{r4, pc}
    f->buf[l] = c;
 80008b0:	54c1      	strb	r1, [r0, r3]
    f->len = l + 1;
 80008b2:	3301      	adds	r3, #1
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	5283      	strh	r3, [r0, r2]
    return 1;
 80008b8:	2001      	movs	r0, #1
 80008ba:	e7f8      	b.n	80008ae <uart_fifo_push_isr+0x18>

080008bc <uart_fifo_get_command>:

int uart_fifo_get_command(uart_fifo_t *f, char *out, size_t out_size) {
 80008bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008be:	0005      	movs	r5, r0
 80008c0:	000f      	movs	r7, r1
 80008c2:	b085      	sub	sp, #20
    if (out_size == 0) return 0;
 80008c4:	2a00      	cmp	r2, #0
 80008c6:	d00c      	beq.n	80008e2 <uart_fifo_get_command+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i

    // courte section critique pour éviter que l'ISR ne modifie len pendant la recherche/copie.
    __disable_irq();

    uint16_t len = f->len;
 80008ca:	2380      	movs	r3, #128	@ 0x80
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	5ac3      	ldrh	r3, [r0, r3]
    uint16_t pos = 0xFFFF;
    // chercher '\n'
    for (uint16_t i = 0; i < len; ++i) {
        if (f->buf[i] == '\n') {
 80008d0:	1e41      	subs	r1, r0, #1
    uint16_t len = f->len;
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	9302      	str	r3, [sp, #8]
    for (uint16_t i = 0; i < len; ++i) {
 80008d6:	2300      	movs	r3, #0
 80008d8:	9802      	ldr	r0, [sp, #8]
 80008da:	b29e      	uxth	r6, r3
 80008dc:	42b0      	cmp	r0, r6
 80008de:	d804      	bhi.n	80008ea <uart_fifo_get_command+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 80008e0:	b662      	cpsie	i
    if (out_size == 0) return 0;
 80008e2:	2400      	movs	r4, #0
    }
    f->len = remaining;

    __enable_irq();
    return ret;
}
 80008e4:	0020      	movs	r0, r4
 80008e6:	b005      	add	sp, #20
 80008e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (f->buf[i] == '\n') {
 80008ea:	1c58      	adds	r0, r3, #1
 80008ec:	9003      	str	r0, [sp, #12]
 80008ee:	5c08      	ldrb	r0, [r1, r0]
 80008f0:	280a      	cmp	r0, #10
 80008f2:	d030      	beq.n	8000956 <uart_fifo_get_command+0x9a>
 80008f4:	9b03      	ldr	r3, [sp, #12]
 80008f6:	e7ef      	b.n	80008d8 <uart_fifo_get_command+0x1c>
    if (cmd_end > 0 && f->buf[cmd_end - 1] == '\r') {
 80008f8:	18eb      	adds	r3, r5, r3
 80008fa:	3b01      	subs	r3, #1
 80008fc:	781b      	ldrb	r3, [r3, #0]
    uint16_t cmd_end = pos; // index du '\n'
 80008fe:	0034      	movs	r4, r6
    if (cmd_end > 0 && f->buf[cmd_end - 1] == '\r') {
 8000900:	2b0d      	cmp	r3, #13
 8000902:	d101      	bne.n	8000908 <uart_fifo_get_command+0x4c>
        cmd_end -= 1;
 8000904:	1e74      	subs	r4, r6, #1
 8000906:	b2a4      	uxth	r4, r4
    if ((size_t)cmd_end < out_size) {
 8000908:	9401      	str	r4, [sp, #4]
 800090a:	4294      	cmp	r4, r2
 800090c:	d218      	bcs.n	8000940 <uart_fifo_get_command+0x84>
        memcpy(out, f->buf, cmd_end);
 800090e:	9a01      	ldr	r2, [sp, #4]
 8000910:	0029      	movs	r1, r5
 8000912:	0038      	movs	r0, r7
 8000914:	f003 fb96 	bl	8004044 <memcpy>
        out[cmd_end] = '\0';
 8000918:	2300      	movs	r3, #0
 800091a:	9a01      	ldr	r2, [sp, #4]
 800091c:	54bb      	strb	r3, [r7, r2]
    uint16_t remaining = len - (pos + 1);
 800091e:	9b02      	ldr	r3, [sp, #8]
 8000920:	3b01      	subs	r3, #1
 8000922:	1b9e      	subs	r6, r3, r6
 8000924:	b2b6      	uxth	r6, r6
    if (remaining > 0) {
 8000926:	2e00      	cmp	r6, #0
 8000928:	d005      	beq.n	8000936 <uart_fifo_get_command+0x7a>
        memmove(f->buf, f->buf + pos + 1, remaining);
 800092a:	9b03      	ldr	r3, [sp, #12]
 800092c:	0032      	movs	r2, r6
 800092e:	0028      	movs	r0, r5
 8000930:	18e9      	adds	r1, r5, r3
 8000932:	f003 fb35 	bl	8003fa0 <memmove>
    f->len = remaining;
 8000936:	2380      	movs	r3, #128	@ 0x80
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	52ee      	strh	r6, [r5, r3]
 800093c:	b662      	cpsie	i
    return ret;
 800093e:	e7d1      	b.n	80008e4 <uart_fifo_get_command+0x28>
        memcpy(out, f->buf, out_size - 1);
 8000940:	1e54      	subs	r4, r2, #1
 8000942:	0022      	movs	r2, r4
 8000944:	0029      	movs	r1, r5
 8000946:	0038      	movs	r0, r7
 8000948:	f003 fb7c 	bl	8004044 <memcpy>
        out[out_size - 1] = '\0';
 800094c:	2300      	movs	r3, #0
 800094e:	553b      	strb	r3, [r7, r4]
        ret = -1;
 8000950:	2401      	movs	r4, #1
 8000952:	4264      	negs	r4, r4
 8000954:	e7e3      	b.n	800091e <uart_fifo_get_command+0x62>
    if (cmd_end > 0 && f->buf[cmd_end - 1] == '\r') {
 8000956:	2e00      	cmp	r6, #0
 8000958:	d1ce      	bne.n	80008f8 <uart_fifo_get_command+0x3c>
    uint16_t cmd_end = pos; // index du '\n'
 800095a:	0034      	movs	r4, r6
    if ((size_t)cmd_end < out_size) {
 800095c:	9601      	str	r6, [sp, #4]
 800095e:	e7d6      	b.n	800090e <uart_fifo_get_command+0x52>

08000960 <uart_write>:


/* --- helpers UART --- */
static inline uint32_t t_ms(void){ return HAL_GetTick(); }
static void uart_write(const char *s)
{
 8000960:	b510      	push	{r4, lr}
 8000962:	0004      	movs	r4, r0
    HAL_UART_Transmit(&huart2, (uint8_t*)s, (uint16_t)strlen(s), 100);
 8000964:	f7ff fbd6 	bl	8000114 <strlen>
 8000968:	2364      	movs	r3, #100	@ 0x64
 800096a:	b282      	uxth	r2, r0
 800096c:	0021      	movs	r1, r4
 800096e:	4802      	ldr	r0, [pc, #8]	@ (8000978 <uart_write+0x18>)
 8000970:	f003 f849 	bl	8003a06 <HAL_UART_Transmit>
}
 8000974:	bd10      	pop	{r4, pc}
 8000976:	46c0      	nop			@ (mov r8, r8)
 8000978:	20000284 	.word	0x20000284

0800097c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097c:	b510      	push	{r4, lr}
 800097e:	b092      	sub	sp, #72	@ 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000980:	2234      	movs	r2, #52	@ 0x34
 8000982:	2100      	movs	r1, #0
 8000984:	a805      	add	r0, sp, #20
 8000986:	f003 fb1d 	bl	8003fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098a:	2210      	movs	r2, #16
 800098c:	2100      	movs	r1, #0
 800098e:	a801      	add	r0, sp, #4
 8000990:	f003 fb18 	bl	8003fc4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000994:	2080      	movs	r0, #128	@ 0x80
 8000996:	0080      	lsls	r0, r0, #2
 8000998:	f001 f8d8 	bl	8001b4c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800099c:	2380      	movs	r3, #128	@ 0x80
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80009a6:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 8;
 80009a8:	3308      	adds	r3, #8
 80009aa:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ac:	2380      	movs	r3, #128	@ 0x80
 80009ae:	029b      	lsls	r3, r3, #10
 80009b0:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80009b2:	23c0      	movs	r3, #192	@ 0xc0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b4:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b6:	2240      	movs	r2, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80009b8:	05db      	lsls	r3, r3, #23
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ba:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009bc:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009be:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c0:	940c      	str	r4, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009c2:	940d      	str	r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80009c4:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c6:	f001 f8ed 	bl	8001ba4 <HAL_RCC_OscConfig>
 80009ca:	2800      	cmp	r0, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0x56>
  __ASM volatile ("cpsid i" : : : "memory");
 80009ce:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <SystemClock_Config+0x54>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d2:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d4:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d6:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009d8:	2101      	movs	r1, #1
 80009da:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009dc:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009de:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009e0:	f001 fb40 	bl	8002064 <HAL_RCC_ClockConfig>
 80009e4:	2800      	cmp	r0, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x70>
 80009e8:	b672      	cpsid	i
  while (1)
 80009ea:	e7fe      	b.n	80009ea <SystemClock_Config+0x6e>
}
 80009ec:	b012      	add	sp, #72	@ 0x48
 80009ee:	bd10      	pop	{r4, pc}

080009f0 <HAL_TIM_PWM_Send_To_DMA>:
    ws2812_transfer_complete = 0;
 80009f0:	2100      	movs	r1, #0
{
 80009f2:	b570      	push	{r4, r5, r6, lr}
    HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t*)pwm_data, LED_BUFFER_SIZE);
 80009f4:	4c05      	ldr	r4, [pc, #20]	@ (8000a0c <HAL_TIM_PWM_Send_To_DMA+0x1c>)
    ws2812_transfer_complete = 0;
 80009f6:	4d06      	ldr	r5, [pc, #24]	@ (8000a10 <HAL_TIM_PWM_Send_To_DMA+0x20>)
{
 80009f8:	0002      	movs	r2, r0
    HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t*)pwm_data, LED_BUFFER_SIZE);
 80009fa:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <HAL_TIM_PWM_Send_To_DMA+0x24>)
 80009fc:	0020      	movs	r0, r4
    ws2812_transfer_complete = 0;
 80009fe:	7029      	strb	r1, [r5, #0]
    HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t*)pwm_data, LED_BUFFER_SIZE);
 8000a00:	f002 f93a 	bl	8002c78 <HAL_TIM_PWM_Start_DMA>
    while(!ws2812_transfer_complete) {}
 8000a04:	782b      	ldrb	r3, [r5, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d0fc      	beq.n	8000a04 <HAL_TIM_PWM_Send_To_DMA+0x14>
}
 8000a0a:	bd70      	pop	{r4, r5, r6, pc}
 8000a0c:	20000374 	.word	0x20000374
 8000a10:	20000414 	.word	0x20000414
 8000a14:	00000632 	.word	0x00000632

08000a18 <HAL_TIM_PWM_PulseFinishedCallback>:
    if(htim->Instance == TIM17)
 8000a18:	4b05      	ldr	r3, [pc, #20]	@ (8000a30 <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 8000a1a:	6802      	ldr	r2, [r0, #0]
{
 8000a1c:	b510      	push	{r4, lr}
    if(htim->Instance == TIM17)
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d105      	bne.n	8000a2e <HAL_TIM_PWM_PulseFinishedCallback+0x16>
        HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8000a22:	2100      	movs	r1, #0
 8000a24:	f002 f9a2 	bl	8002d6c <HAL_TIM_PWM_Stop_DMA>
        ws2812_transfer_complete = 1;
 8000a28:	2201      	movs	r2, #1
 8000a2a:	4b02      	ldr	r3, [pc, #8]	@ (8000a34 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8000a2c:	701a      	strb	r2, [r3, #0]
}
 8000a2e:	bd10      	pop	{r4, pc}
 8000a30:	40014800 	.word	0x40014800
 8000a34:	20000414 	.word	0x20000414

08000a38 <HAL_UART_RxCpltCallback>:
    if (huart->Instance == USART2)
 8000a38:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <HAL_UART_RxCpltCallback+0x20>)
 8000a3a:	6802      	ldr	r2, [r0, #0]
{
 8000a3c:	b510      	push	{r4, lr}
    if (huart->Instance == USART2)
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d109      	bne.n	8000a56 <HAL_UART_RxCpltCallback+0x1e>
    		uart_fifo_push_isr(&uartFifo, rx_data);
 8000a42:	4c06      	ldr	r4, [pc, #24]	@ (8000a5c <HAL_UART_RxCpltCallback+0x24>)
 8000a44:	4806      	ldr	r0, [pc, #24]	@ (8000a60 <HAL_UART_RxCpltCallback+0x28>)
 8000a46:	7821      	ldrb	r1, [r4, #0]
 8000a48:	f7ff ff25 	bl	8000896 <uart_fifo_push_isr>
        HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	0021      	movs	r1, r4
 8000a50:	4804      	ldr	r0, [pc, #16]	@ (8000a64 <HAL_UART_RxCpltCallback+0x2c>)
 8000a52:	f003 f975 	bl	8003d40 <HAL_UART_Receive_IT>
}
 8000a56:	bd10      	pop	{r4, pc}
 8000a58:	40004400 	.word	0x40004400
 8000a5c:	20000280 	.word	0x20000280
 8000a60:	20000078 	.word	0x20000078
 8000a64:	20000284 	.word	0x20000284

08000a68 <is_board_at_init_setup>:
uint8_t is_board_at_init_setup(uint64_t board_bitmap) {
 8000a68:	b570      	push	{r4, r5, r6, lr}
 8000a6a:	0005      	movs	r5, r0
 8000a6c:	000e      	movs	r6, r1
 8000a6e:	2400      	movs	r4, #0
		if(bitmap_get_bit(board_bitmap, index) == 0) {
 8000a70:	0022      	movs	r2, r4
 8000a72:	0028      	movs	r0, r5
 8000a74:	0031      	movs	r1, r6
 8000a76:	f7ff fd1f 	bl	80004b8 <bitmap_get_bit>
 8000a7a:	2800      	cmp	r0, #0
 8000a7c:	d00f      	beq.n	8000a9e <is_board_at_init_setup+0x36>
	for(uint8_t index = 0; index < 16; ++index) {
 8000a7e:	3401      	adds	r4, #1
 8000a80:	2c10      	cmp	r4, #16
 8000a82:	d1f5      	bne.n	8000a70 <is_board_at_init_setup+0x8>
 8000a84:	3420      	adds	r4, #32
		if(bitmap_get_bit(board_bitmap, index) == 0) {
 8000a86:	0022      	movs	r2, r4
 8000a88:	0028      	movs	r0, r5
 8000a8a:	0031      	movs	r1, r6
 8000a8c:	f7ff fd14 	bl	80004b8 <bitmap_get_bit>
 8000a90:	2800      	cmp	r0, #0
 8000a92:	d004      	beq.n	8000a9e <is_board_at_init_setup+0x36>
	for(uint8_t index = 48; index < 64; ++index) {
 8000a94:	3401      	adds	r4, #1
 8000a96:	2c40      	cmp	r4, #64	@ 0x40
 8000a98:	d1f5      	bne.n	8000a86 <is_board_at_init_setup+0x1e>
	return 1;
 8000a9a:	2001      	movs	r0, #1
}
 8000a9c:	bd70      	pop	{r4, r5, r6, pc}
				return 0;
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	e7fc      	b.n	8000a9c <is_board_at_init_setup+0x34>

08000aa2 <is_a_piece_lift>:
uint8_t is_a_piece_lift(uint64_t current, uint64_t old) {
 8000aa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000aa4:	0005      	movs	r5, r0
 8000aa6:	0016      	movs	r6, r2
 8000aa8:	001f      	movs	r7, r3
 8000aaa:	2400      	movs	r4, #0
 8000aac:	9101      	str	r1, [sp, #4]
		if(bitmap_get_bit(old, index) == 1 && bitmap_get_bit(current, index) == 0) {
 8000aae:	0022      	movs	r2, r4
 8000ab0:	0030      	movs	r0, r6
 8000ab2:	0039      	movs	r1, r7
 8000ab4:	f7ff fd00 	bl	80004b8 <bitmap_get_bit>
 8000ab8:	2801      	cmp	r0, #1
 8000aba:	d004      	beq.n	8000ac6 <is_a_piece_lift+0x24>
	for(uint8_t index = 0; index < 64; ++index) {
 8000abc:	3401      	adds	r4, #1
 8000abe:	2c40      	cmp	r4, #64	@ 0x40
 8000ac0:	d1f5      	bne.n	8000aae <is_a_piece_lift+0xc>
	return NO_INDEX_FOUND;
 8000ac2:	20ff      	movs	r0, #255	@ 0xff
}
 8000ac4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if(bitmap_get_bit(old, index) == 1 && bitmap_get_bit(current, index) == 0) {
 8000ac6:	0022      	movs	r2, r4
 8000ac8:	0028      	movs	r0, r5
 8000aca:	9901      	ldr	r1, [sp, #4]
 8000acc:	f7ff fcf4 	bl	80004b8 <bitmap_get_bit>
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	d1f3      	bne.n	8000abc <is_a_piece_lift+0x1a>
 8000ad4:	b2e0      	uxtb	r0, r4
 8000ad6:	e7f5      	b.n	8000ac4 <is_a_piece_lift+0x22>

08000ad8 <is_a_piece_placed>:
uint8_t is_a_piece_placed(uint64_t current, uint64_t old) {
 8000ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000ada:	0005      	movs	r5, r0
 8000adc:	0016      	movs	r6, r2
 8000ade:	001f      	movs	r7, r3
 8000ae0:	2400      	movs	r4, #0
 8000ae2:	9101      	str	r1, [sp, #4]
		if(bitmap_get_bit(old, index) == 0 && bitmap_get_bit(current, index) == 1) {
 8000ae4:	0022      	movs	r2, r4
 8000ae6:	0030      	movs	r0, r6
 8000ae8:	0039      	movs	r1, r7
 8000aea:	f7ff fce5 	bl	80004b8 <bitmap_get_bit>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	d004      	beq.n	8000afc <is_a_piece_placed+0x24>
	for(uint8_t index = 0; index < 64; ++index) {
 8000af2:	3401      	adds	r4, #1
 8000af4:	2c40      	cmp	r4, #64	@ 0x40
 8000af6:	d1f5      	bne.n	8000ae4 <is_a_piece_placed+0xc>
	return NO_INDEX_FOUND;
 8000af8:	20ff      	movs	r0, #255	@ 0xff
}
 8000afa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if(bitmap_get_bit(old, index) == 0 && bitmap_get_bit(current, index) == 1) {
 8000afc:	0022      	movs	r2, r4
 8000afe:	0028      	movs	r0, r5
 8000b00:	9901      	ldr	r1, [sp, #4]
 8000b02:	f7ff fcd9 	bl	80004b8 <bitmap_get_bit>
 8000b06:	2801      	cmp	r0, #1
 8000b08:	d1f3      	bne.n	8000af2 <is_a_piece_placed+0x1a>
 8000b0a:	b2e0      	uxtb	r0, r4
 8000b0c:	e7f5      	b.n	8000afa <is_a_piece_placed+0x22>
	...

08000b10 <set_gpio_column>:
void set_gpio_column(uint8_t column) {
 8000b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b12:	0006      	movs	r6, r0
	uint8_t mask = 1;
 8000b14:	2401      	movs	r4, #1
 8000b16:	4d08      	ldr	r5, [pc, #32]	@ (8000b38 <set_gpio_column+0x28>)
 8000b18:	4f08      	ldr	r7, [pc, #32]	@ (8000b3c <set_gpio_column+0x2c>)
		if(column & mask) {
 8000b1a:	0022      	movs	r2, r4
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_SET);
 8000b1c:	69a8      	ldr	r0, [r5, #24]
 8000b1e:	8ba9      	ldrh	r1, [r5, #28]
		if(column & mask) {
 8000b20:	4032      	ands	r2, r6
 8000b22:	4234      	tst	r4, r6
 8000b24:	d000      	beq.n	8000b28 <set_gpio_column+0x18>
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
		mask *= 2;
 8000b28:	0064      	lsls	r4, r4, #1
	for(uint8_t i = COL0; i < PIN_NUMBER_FOR_COLUMN + COL0; ++i) {
 8000b2a:	3508      	adds	r5, #8
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_RESET);
 8000b2c:	f000 ff60 	bl	80019f0 <HAL_GPIO_WritePin>
		mask *= 2;
 8000b30:	b2e4      	uxtb	r4, r4
	for(uint8_t i = COL0; i < PIN_NUMBER_FOR_COLUMN + COL0; ++i) {
 8000b32:	42bd      	cmp	r5, r7
 8000b34:	d1f1      	bne.n	8000b1a <set_gpio_column+0xa>
}
 8000b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b38:	080049a4 	.word	0x080049a4
 8000b3c:	080049bc 	.word	0x080049bc

08000b40 <set_gpio_line>:
void set_gpio_line(uint8_t line) {
 8000b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b42:	0006      	movs	r6, r0
	uint8_t mask = 1;
 8000b44:	2401      	movs	r4, #1
 8000b46:	4d08      	ldr	r5, [pc, #32]	@ (8000b68 <set_gpio_line+0x28>)
 8000b48:	4f08      	ldr	r7, [pc, #32]	@ (8000b6c <set_gpio_line+0x2c>)
		if(line & mask) {
 8000b4a:	0022      	movs	r2, r4
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_SET);
 8000b4c:	6828      	ldr	r0, [r5, #0]
 8000b4e:	88a9      	ldrh	r1, [r5, #4]
		if(line & mask) {
 8000b50:	4032      	ands	r2, r6
 8000b52:	4234      	tst	r4, r6
 8000b54:	d000      	beq.n	8000b58 <set_gpio_line+0x18>
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_SET);
 8000b56:	2201      	movs	r2, #1
		mask *= 2;
 8000b58:	0064      	lsls	r4, r4, #1
	for(uint8_t i = ROW0; i < PIN_NUMBER_FOR_LINE; ++i) {
 8000b5a:	3508      	adds	r5, #8
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_RESET);
 8000b5c:	f000 ff48 	bl	80019f0 <HAL_GPIO_WritePin>
		mask *= 2;
 8000b60:	b2e4      	uxtb	r4, r4
	for(uint8_t i = ROW0; i < PIN_NUMBER_FOR_LINE; ++i) {
 8000b62:	42bd      	cmp	r5, r7
 8000b64:	d1f1      	bne.n	8000b4a <set_gpio_line+0xa>
}
 8000b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b68:	080049a4 	.word	0x080049a4
 8000b6c:	080049bc 	.word	0x080049bc

08000b70 <read_reed_value>:
uint8_t read_reed_value(Square square) {
 8000b70:	b513      	push	{r0, r1, r4, lr}
 8000b72:	ac01      	add	r4, sp, #4
 8000b74:	8020      	strh	r0, [r4, #0]
	set_gpio_column(square.column);
 8000b76:	b2c0      	uxtb	r0, r0
 8000b78:	f7ff ffca 	bl	8000b10 <set_gpio_column>
	set_gpio_line(square.line);
 8000b7c:	7860      	ldrb	r0, [r4, #1]
 8000b7e:	f7ff ffdf 	bl	8000b40 <set_gpio_line>
	return HAL_GPIO_ReadPin(gpio_pins[READ].port, gpio_pins[READ].pin);
 8000b82:	2101      	movs	r1, #1
 8000b84:	4801      	ldr	r0, [pc, #4]	@ (8000b8c <read_reed_value+0x1c>)
 8000b86:	f000 ff2d 	bl	80019e4 <HAL_GPIO_ReadPin>
}
 8000b8a:	bd16      	pop	{r1, r2, r4, pc}
 8000b8c:	50000400 	.word	0x50000400

08000b90 <read_full_board>:
void read_full_board(uint64_t *board_bitmap) {
 8000b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b92:	0006      	movs	r6, r0
 8000b94:	2500      	movs	r5, #0
 8000b96:	b085      	sub	sp, #20
 8000b98:	2400      	movs	r4, #0
 8000b9a:	00eb      	lsls	r3, r5, #3
 8000b9c:	b2ef      	uxtb	r7, r5
		for(uint8_t column = 0; column < BOARD_HEIGHT; ++column) {
 8000b9e:	9301      	str	r3, [sp, #4]
			square.column = column;
 8000ba0:	ab03      	add	r3, sp, #12
 8000ba2:	701c      	strb	r4, [r3, #0]
			square.line = line;
 8000ba4:	705f      	strb	r7, [r3, #1]
			if(read_reed_value(square)) {
 8000ba6:	9803      	ldr	r0, [sp, #12]
 8000ba8:	f7ff ffe2 	bl	8000b70 <read_reed_value>
				bitmap_set_bit(board_bitmap, line * BOARD_WIDTH + column);
 8000bac:	9b01      	ldr	r3, [sp, #4]
 8000bae:	18e1      	adds	r1, r4, r3
			if(read_reed_value(square)) {
 8000bb0:	2800      	cmp	r0, #0
 8000bb2:	d00a      	beq.n	8000bca <read_full_board+0x3a>
				bitmap_set_bit(board_bitmap, line * BOARD_WIDTH + column);
 8000bb4:	0030      	movs	r0, r6
 8000bb6:	f7ff fc61 	bl	800047c <bitmap_set_bit>
		for(uint8_t column = 0; column < BOARD_HEIGHT; ++column) {
 8000bba:	3401      	adds	r4, #1
 8000bbc:	2c08      	cmp	r4, #8
 8000bbe:	d1ef      	bne.n	8000ba0 <read_full_board+0x10>
	for(uint8_t line = 0; line < BOARD_WIDTH; ++line) {
 8000bc0:	3501      	adds	r5, #1
 8000bc2:	2d08      	cmp	r5, #8
 8000bc4:	d1e8      	bne.n	8000b98 <read_full_board+0x8>
}
 8000bc6:	b005      	add	sp, #20
 8000bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bitmap_clear_bit(board_bitmap, line * BOARD_WIDTH + column);
 8000bca:	0030      	movs	r0, r6
 8000bcc:	f7ff fc65 	bl	800049a <bitmap_clear_bit>
 8000bd0:	e7f3      	b.n	8000bba <read_full_board+0x2a>

08000bd2 <leds_clear>:
	for(uint8_t index = 0; index < LED_NUMBER; ++index) {
 8000bd2:	0002      	movs	r2, r0
		colors[index][0] = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	32c0      	adds	r2, #192	@ 0xc0
 8000bd8:	7003      	strb	r3, [r0, #0]
		colors[index][1] = 0;
 8000bda:	7043      	strb	r3, [r0, #1]
		colors[index][2] = 0;
 8000bdc:	7083      	strb	r3, [r0, #2]
	for(uint8_t index = 0; index < LED_NUMBER; ++index) {
 8000bde:	3003      	adds	r0, #3
 8000be0:	4290      	cmp	r0, r2
 8000be2:	d1f9      	bne.n	8000bd8 <leds_clear+0x6>
}
 8000be4:	4770      	bx	lr

08000be6 <led_set>:
void led_set(uint8_t index, uint8_t r, uint8_t g, uint8_t b, uint8_t colors[][3], uint8_t brightness) {
 8000be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000be8:	001f      	movs	r7, r3
 8000bea:	ab06      	add	r3, sp, #24
 8000bec:	cb10      	ldmia	r3!, {r4}
 8000bee:	0016      	movs	r6, r2
 8000bf0:	781d      	ldrb	r5, [r3, #0]
	colors[index][0] = (uint8_t)(r * brightness / 255);
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	4369      	muls	r1, r5
 8000bf6:	4343      	muls	r3, r0
 8000bf8:	0008      	movs	r0, r1
 8000bfa:	21ff      	movs	r1, #255	@ 0xff
 8000bfc:	18e4      	adds	r4, r4, r3
 8000bfe:	f7ff fb39 	bl	8000274 <__divsi3>
 8000c02:	7020      	strb	r0, [r4, #0]
	colors[index][1] = (uint8_t)(g * brightness / 255);
 8000c04:	0030      	movs	r0, r6
 8000c06:	21ff      	movs	r1, #255	@ 0xff
 8000c08:	4368      	muls	r0, r5
 8000c0a:	f7ff fb33 	bl	8000274 <__divsi3>
 8000c0e:	7060      	strb	r0, [r4, #1]
	colors[index][2] = (uint8_t)(b * brightness / 255);
 8000c10:	0028      	movs	r0, r5
 8000c12:	21ff      	movs	r1, #255	@ 0xff
 8000c14:	4378      	muls	r0, r7
 8000c16:	f7ff fb2d 	bl	8000274 <__divsi3>
 8000c1a:	70a0      	strb	r0, [r4, #2]
}
 8000c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000c1e <led_show_win>:
void led_show_win(uint8_t colors[][3], uint8_t side) {
 8000c1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000c20:	0006      	movs	r6, r0
 8000c22:	000d      	movs	r5, r1
	uint8_t black_color_green = (side == 0) ? 255 : 0;
 8000c24:	27ff      	movs	r7, #255	@ 0xff
	uint8_t white_color_red   = side 		  ? 0   : 255;
 8000c26:	2900      	cmp	r1, #0
 8000c28:	d001      	beq.n	8000c2e <led_show_win+0x10>
 8000c2a:	25ff      	movs	r5, #255	@ 0xff
	uint8_t black_color_green = (side == 0) ? 255 : 0;
 8000c2c:	2700      	movs	r7, #0
	for(uint8_t index = 0; index < 32; ++index) {
 8000c2e:	2400      	movs	r4, #0
		led_set(index, white_color_red, white_color_green, 0, colors, GLOBAL_BRIGHTNESS);
 8000c30:	2308      	movs	r3, #8
 8000c32:	0020      	movs	r0, r4
	for(uint8_t index = 0; index < 32; ++index) {
 8000c34:	3401      	adds	r4, #1
		led_set(index, white_color_red, white_color_green, 0, colors, GLOBAL_BRIGHTNESS);
 8000c36:	9301      	str	r3, [sp, #4]
 8000c38:	002a      	movs	r2, r5
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	0039      	movs	r1, r7
 8000c3e:	9600      	str	r6, [sp, #0]
	for(uint8_t index = 0; index < 32; ++index) {
 8000c40:	b2e4      	uxtb	r4, r4
		led_set(index, white_color_red, white_color_green, 0, colors, GLOBAL_BRIGHTNESS);
 8000c42:	f7ff ffd0 	bl	8000be6 <led_set>
	for(uint8_t index = 0; index < 32; ++index) {
 8000c46:	2c20      	cmp	r4, #32
 8000c48:	d1f2      	bne.n	8000c30 <led_show_win+0x12>
		led_set(index, black_color_red, black_color_green, 0, colors, GLOBAL_BRIGHTNESS);
 8000c4a:	2308      	movs	r3, #8
 8000c4c:	0020      	movs	r0, r4
	for(uint8_t index = 32; index < 64; ++index) {
 8000c4e:	3401      	adds	r4, #1
		led_set(index, black_color_red, black_color_green, 0, colors, GLOBAL_BRIGHTNESS);
 8000c50:	9301      	str	r3, [sp, #4]
 8000c52:	003a      	movs	r2, r7
 8000c54:	2300      	movs	r3, #0
 8000c56:	0029      	movs	r1, r5
 8000c58:	9600      	str	r6, [sp, #0]
	for(uint8_t index = 32; index < 64; ++index) {
 8000c5a:	b2e4      	uxtb	r4, r4
		led_set(index, black_color_red, black_color_green, 0, colors, GLOBAL_BRIGHTNESS);
 8000c5c:	f7ff ffc3 	bl	8000be6 <led_set>
	for(uint8_t index = 32; index < 64; ++index) {
 8000c60:	2c40      	cmp	r4, #64	@ 0x40
 8000c62:	d1f2      	bne.n	8000c4a <led_show_win+0x2c>
}
 8000c64:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08000c66 <led_show_draw>:
void led_show_draw(uint8_t colors[][3]) {
 8000c66:	b510      	push	{r4, lr}
 8000c68:	0004      	movs	r4, r0
	leds_clear(colors);
 8000c6a:	f7ff ffb2 	bl	8000bd2 <leds_clear>
	for(uint8_t index = 16; index < 24; ++index) {
 8000c6e:	0023      	movs	r3, r4
 8000c70:	0021      	movs	r1, r4
	colors[index][0] = (uint8_t)(r * brightness / 255);
 8000c72:	2208      	movs	r2, #8
 8000c74:	3330      	adds	r3, #48	@ 0x30
 8000c76:	3148      	adds	r1, #72	@ 0x48
 8000c78:	701a      	strb	r2, [r3, #0]
	colors[index][1] = (uint8_t)(g * brightness / 255);
 8000c7a:	705a      	strb	r2, [r3, #1]
	colors[index][2] = (uint8_t)(b * brightness / 255);
 8000c7c:	709a      	strb	r2, [r3, #2]
	for(uint8_t index = 16; index < 24; ++index) {
 8000c7e:	3303      	adds	r3, #3
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d1f9      	bne.n	8000c78 <led_show_draw+0x12>
 8000c84:	0023      	movs	r3, r4
	colors[index][0] = (uint8_t)(r * brightness / 255);
 8000c86:	2208      	movs	r2, #8
 8000c88:	3360      	adds	r3, #96	@ 0x60
 8000c8a:	3478      	adds	r4, #120	@ 0x78
 8000c8c:	701a      	strb	r2, [r3, #0]
	colors[index][1] = (uint8_t)(g * brightness / 255);
 8000c8e:	705a      	strb	r2, [r3, #1]
	colors[index][2] = (uint8_t)(b * brightness / 255);
 8000c90:	709a      	strb	r2, [r3, #2]
	for(uint8_t index = 32; index < 40; ++index) {
 8000c92:	3303      	adds	r3, #3
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	d1f9      	bne.n	8000c8c <led_show_draw+0x26>
}
 8000c98:	bd10      	pop	{r4, pc}
	...

08000c9c <main>:
{
 8000c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c9e:	4ccd      	ldr	r4, [pc, #820]	@ (8000fd4 <main+0x338>)
	uint16_t  pwm_data[LED_BUFFER_SIZE] = {0};
 8000ca0:	2100      	movs	r1, #0
{
 8000ca2:	44a5      	add	sp, r4
	uint16_t  pwm_data[LED_BUFFER_SIZE] = {0};
 8000ca4:	4acc      	ldr	r2, [pc, #816]	@ (8000fd8 <main+0x33c>)
 8000ca6:	a89b      	add	r0, sp, #620	@ 0x26c
 8000ca8:	f003 f98c 	bl	8003fc4 <memset>
	uint8_t   colors[LED_NUMBER][3] = {0};
 8000cac:	22c0      	movs	r2, #192	@ 0xc0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	a86b      	add	r0, sp, #428	@ 0x1ac
 8000cb2:	f003 f987 	bl	8003fc4 <memset>
  uint64_t  board_bitmap = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	2200      	movs	r2, #0
  char msg[64] = {0};
 8000cba:	2100      	movs	r1, #0
  uint64_t  board_bitmap = 0;
 8000cbc:	9206      	str	r2, [sp, #24]
 8000cbe:	9307      	str	r3, [sp, #28]
  char msg[64] = {0};
 8000cc0:	a814      	add	r0, sp, #80	@ 0x50
 8000cc2:	3240      	adds	r2, #64	@ 0x40
 8000cc4:	f003 f97e 	bl	8003fc4 <memset>
  HAL_Init();
 8000cc8:	f000 fbae 	bl	8001428 <HAL_Init>
  SystemClock_Config();
 8000ccc:	f7ff fe56 	bl	800097c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	2214      	movs	r2, #20
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	a844      	add	r0, sp, #272	@ 0x110
 8000cd6:	f003 f975 	bl	8003fc4 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cda:	2202      	movs	r2, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	2701      	movs	r7, #1
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000cde:	2680      	movs	r6, #128	@ 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce0:	4dbe      	ldr	r5, [pc, #760]	@ (8000fdc <main+0x340>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ce2:	0236      	lsls	r6, r6, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ce6:	0031      	movs	r1, r6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	636b      	str	r3, [r5, #52]	@ 0x34
 8000cec:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000cee:	48bc      	ldr	r0, [pc, #752]	@ (8000fe0 <main+0x344>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	9303      	str	r3, [sp, #12]
 8000cf4:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8000cf8:	1892      	adds	r2, r2, r2
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	636b      	str	r3, [r5, #52]	@ 0x34
 8000cfe:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d00:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d02:	4013      	ands	r3, r2
 8000d04:	9304      	str	r3, [sp, #16]
 8000d06:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0c:	433b      	orrs	r3, r7
 8000d0e:	636b      	str	r3, [r5, #52]	@ 0x34
 8000d10:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8000d12:	403b      	ands	r3, r7
 8000d14:	9305      	str	r3, [sp, #20]
 8000d16:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d18:	f000 fe6a 	bl	80019f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 8000d1c:	20a0      	movs	r0, #160	@ 0xa0
 8000d1e:	2200      	movs	r2, #0
 8000d20:	49b0      	ldr	r1, [pc, #704]	@ (8000fe4 <main+0x348>)
 8000d22:	05c0      	lsls	r0, r0, #23
 8000d24:	f000 fe64 	bl	80019f0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d28:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2a:	48af      	ldr	r0, [pc, #700]	@ (8000fe8 <main+0x34c>)
 8000d2c:	a944      	add	r1, sp, #272	@ 0x110
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d2e:	9344      	str	r3, [sp, #272]	@ 0x110
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d30:	9445      	str	r4, [sp, #276]	@ 0x114
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	9446      	str	r4, [sp, #280]	@ 0x118
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d34:	f000 fda4 	bl	8001880 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d38:	48a9      	ldr	r0, [pc, #676]	@ (8000fe0 <main+0x344>)
 8000d3a:	a944      	add	r1, sp, #272	@ 0x110
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d3c:	9644      	str	r6, [sp, #272]	@ 0x110
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	9745      	str	r7, [sp, #276]	@ 0x114
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	9446      	str	r4, [sp, #280]	@ 0x118
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	9447      	str	r4, [sp, #284]	@ 0x11c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d44:	f000 fd9c 	bl	8001880 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 8000d4a:	4ba6      	ldr	r3, [pc, #664]	@ (8000fe4 <main+0x348>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	a944      	add	r1, sp, #272	@ 0x110
 8000d4e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 8000d50:	9344      	str	r3, [sp, #272]	@ 0x110
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	9745      	str	r7, [sp, #276]	@ 0x114
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	9446      	str	r4, [sp, #280]	@ 0x118
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	9447      	str	r4, [sp, #284]	@ 0x11c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	f000 fd92 	bl	8001880 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d5c:	2202      	movs	r2, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5e:	48a2      	ldr	r0, [pc, #648]	@ (8000fe8 <main+0x34c>)
 8000d60:	a944      	add	r1, sp, #272	@ 0x110
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d62:	9246      	str	r2, [sp, #280]	@ 0x118
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d64:	9744      	str	r7, [sp, #272]	@ 0x110
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d66:	9445      	str	r4, [sp, #276]	@ 0x114
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d68:	f000 fd8a 	bl	8001880 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d6c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d6e:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d70:	433b      	orrs	r3, r7
 8000d72:	63ab      	str	r3, [r5, #56]	@ 0x38
 8000d74:	6bab      	ldr	r3, [r5, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d76:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d78:	403b      	ands	r3, r7
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d7a:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d7c:	9302      	str	r3, [sp, #8]
 8000d7e:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d80:	f000 fb8a 	bl	8001498 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d84:	2009      	movs	r0, #9
 8000d86:	f000 fbb1 	bl	80014ec <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8000d8a:	4d98      	ldr	r5, [pc, #608]	@ (8000fec <main+0x350>)
 8000d8c:	4b98      	ldr	r3, [pc, #608]	@ (8000ff0 <main+0x354>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d8e:	0028      	movs	r0, r5
  hi2c1.Instance = I2C1;
 8000d90:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8000d92:	4b98      	ldr	r3, [pc, #608]	@ (8000ff4 <main+0x358>)
  hi2c1.Init.OwnAddress1 = 0;
 8000d94:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.Timing = 0x00B07CB4;
 8000d96:	606b      	str	r3, [r5, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d98:	60ef      	str	r7, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d9a:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d9c:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d9e:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000da0:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000da2:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000da4:	f000 fe2a 	bl	80019fc <HAL_I2C_Init>
 8000da8:	0001      	movs	r1, r0
 8000daa:	42a0      	cmp	r0, r4
 8000dac:	d001      	beq.n	8000db2 <main+0x116>
 8000dae:	b672      	cpsid	i
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <main+0x114>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000db2:	0028      	movs	r0, r5
 8000db4:	f000 fe80 	bl	8001ab8 <HAL_I2CEx_ConfigAnalogFilter>
 8000db8:	1e01      	subs	r1, r0, #0
 8000dba:	d001      	beq.n	8000dc0 <main+0x124>
 8000dbc:	b672      	cpsid	i
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <main+0x122>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dc0:	0028      	movs	r0, r5
 8000dc2:	f000 fe9f 	bl	8001b04 <HAL_I2CEx_ConfigDigitalFilter>
 8000dc6:	2800      	cmp	r0, #0
 8000dc8:	d001      	beq.n	8000dce <main+0x132>
 8000dca:	b672      	cpsid	i
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <main+0x130>
  huart2.Instance = USART2;
 8000dce:	4c8a      	ldr	r4, [pc, #552]	@ (8000ff8 <main+0x35c>)
 8000dd0:	4b8a      	ldr	r3, [pc, #552]	@ (8000ffc <main+0x360>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd2:	60a0      	str	r0, [r4, #8]
  huart2.Instance = USART2;
 8000dd4:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 115200;
 8000dd6:	23e1      	movs	r3, #225	@ 0xe1
 8000dd8:	025b      	lsls	r3, r3, #9
 8000dda:	6063      	str	r3, [r4, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ddc:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dde:	60e0      	str	r0, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000de0:	6120      	str	r0, [r4, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de2:	61a0      	str	r0, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de4:	61e0      	str	r0, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000de6:	6220      	str	r0, [r4, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de8:	6260      	str	r0, [r4, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dea:	62a0      	str	r0, [r4, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dec:	0020      	movs	r0, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dee:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000df0:	f002 fed8 	bl	8003ba4 <HAL_UART_Init>
 8000df4:	1e06      	subs	r6, r0, #0
 8000df6:	d001      	beq.n	8000dfc <main+0x160>
 8000df8:	b672      	cpsid	i
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <main+0x15e>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dfc:	0001      	movs	r1, r0
 8000dfe:	221c      	movs	r2, #28
 8000e00:	a824      	add	r0, sp, #144	@ 0x90
 8000e02:	f003 f8df 	bl	8003fc4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e06:	2234      	movs	r2, #52	@ 0x34
 8000e08:	0031      	movs	r1, r6
 8000e0a:	a844      	add	r0, sp, #272	@ 0x110
 8000e0c:	f003 f8da 	bl	8003fc4 <memset>
  htim17.Instance = TIM17;
 8000e10:	4d7b      	ldr	r5, [pc, #492]	@ (8001000 <main+0x364>)
 8000e12:	4b7c      	ldr	r3, [pc, #496]	@ (8001004 <main+0x368>)
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000e14:	0028      	movs	r0, r5
  htim17.Instance = TIM17;
 8000e16:	602b      	str	r3, [r5, #0]
  htim17.Init.Period = 39;
 8000e18:	2327      	movs	r3, #39	@ 0x27
  htim17.Init.Prescaler = 0;
 8000e1a:	606e      	str	r6, [r5, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1c:	60ae      	str	r6, [r5, #8]
  htim17.Init.Period = 39;
 8000e1e:	60eb      	str	r3, [r5, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e20:	612e      	str	r6, [r5, #16]
  htim17.Init.RepetitionCounter = 0;
 8000e22:	616e      	str	r6, [r5, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e24:	61ae      	str	r6, [r5, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000e26:	f001 fd0f 	bl	8002848 <HAL_TIM_Base_Init>
 8000e2a:	2800      	cmp	r0, #0
 8000e2c:	d001      	beq.n	8000e32 <main+0x196>
 8000e2e:	b672      	cpsid	i
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <main+0x194>
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000e32:	0028      	movs	r0, r5
 8000e34:	f001 fd32 	bl	800289c <HAL_TIM_PWM_Init>
 8000e38:	1e02      	subs	r2, r0, #0
 8000e3a:	d001      	beq.n	8000e40 <main+0x1a4>
 8000e3c:	b672      	cpsid	i
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <main+0x1a2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e40:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.Pulse = 0;
 8000e42:	9025      	str	r0, [sp, #148]	@ 0x94
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e44:	9026      	str	r0, [sp, #152]	@ 0x98
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e46:	9027      	str	r0, [sp, #156]	@ 0x9c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e48:	9028      	str	r0, [sp, #160]	@ 0xa0
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e4a:	9029      	str	r0, [sp, #164]	@ 0xa4
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e4c:	902a      	str	r0, [sp, #168]	@ 0xa8
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e4e:	a924      	add	r1, sp, #144	@ 0x90
 8000e50:	0028      	movs	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e52:	9324      	str	r3, [sp, #144]	@ 0x90
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e54:	f001 fd88 	bl	8002968 <HAL_TIM_PWM_ConfigChannel>
 8000e58:	2800      	cmp	r0, #0
 8000e5a:	d001      	beq.n	8000e60 <main+0x1c4>
 8000e5c:	b672      	cpsid	i
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <main+0x1c2>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e60:	2380      	movs	r3, #128	@ 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e62:	9044      	str	r0, [sp, #272]	@ 0x110
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e64:	9045      	str	r0, [sp, #276]	@ 0x114
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e66:	9046      	str	r0, [sp, #280]	@ 0x118
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e68:	9047      	str	r0, [sp, #284]	@ 0x11c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e6a:	9048      	str	r0, [sp, #288]	@ 0x120
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e6c:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e6e:	904a      	str	r0, [sp, #296]	@ 0x128
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e70:	9050      	str	r0, [sp, #320]	@ 0x140
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000e72:	a944      	add	r1, sp, #272	@ 0x110
 8000e74:	0028      	movs	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e76:	9349      	str	r3, [sp, #292]	@ 0x124
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000e78:	f001 ff7c 	bl	8002d74 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e7c:	1e06      	subs	r6, r0, #0
 8000e7e:	d001      	beq.n	8000e84 <main+0x1e8>
 8000e80:	b672      	cpsid	i
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <main+0x1e6>
  HAL_TIM_MspPostInit(&htim17);
 8000e84:	0028      	movs	r0, r5
 8000e86:	f000 f9df 	bl	8001248 <HAL_TIM_MspPostInit>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000e8a:	003a      	movs	r2, r7
 8000e8c:	0020      	movs	r0, r4
 8000e8e:	495e      	ldr	r1, [pc, #376]	@ (8001008 <main+0x36c>)
 8000e90:	f002 ff56 	bl	8003d40 <HAL_UART_Receive_IT>
  uart_fifo_init(&uartFifo);
 8000e94:	485d      	ldr	r0, [pc, #372]	@ (800100c <main+0x370>)
 8000e96:	f7ff fcf7 	bl	8000888 <uart_fifo_init>
  	switch(game_state) {
 8000e9a:	2e03      	cmp	r6, #3
 8000e9c:	d80a      	bhi.n	8000eb4 <main+0x218>
 8000e9e:	0030      	movs	r0, r6
 8000ea0:	f7ff f954 	bl	800014c <__gnu_thumb1_case_uhi>
 8000ea4:	00100004 	.word	0x00100004
 8000ea8:	00fa0035 	.word	0x00fa0035
				leds_clear(colors);
 8000eac:	a86b      	add	r0, sp, #428	@ 0x1ac
 8000eae:	f7ff fe90 	bl	8000bd2 <leds_clear>
  	  	game_state = INIT_BOARD;
 8000eb2:	2601      	movs	r6, #1
  	rgb_update_buffer(pwm_data, colors);
 8000eb4:	a89b      	add	r0, sp, #620	@ 0x26c
 8000eb6:	a96b      	add	r1, sp, #428	@ 0x1ac
 8000eb8:	f000 f908 	bl	80010cc <rgb_update_buffer>
		HAL_TIM_PWM_Send_To_DMA(pwm_data);
 8000ebc:	a89b      	add	r0, sp, #620	@ 0x26c
 8000ebe:	f7ff fd97 	bl	80009f0 <HAL_TIM_PWM_Send_To_DMA>
  	switch(game_state) {
 8000ec2:	e7ea      	b.n	8000e9a <main+0x1fe>
				read_full_board(&board_bitmap);
 8000ec4:	a806      	add	r0, sp, #24
 8000ec6:	f7ff fe63 	bl	8000b90 <read_full_board>
				status = is_board_at_init_setup(board_bitmap);
 8000eca:	9806      	ldr	r0, [sp, #24]
 8000ecc:	9907      	ldr	r1, [sp, #28]
 8000ece:	f7ff fdcb 	bl	8000a68 <is_board_at_init_setup>
 8000ed2:	2500      	movs	r5, #0
 8000ed4:	2703      	movs	r7, #3
	colors[index][0] = (uint8_t)(r * brightness / 255);
 8000ed6:	2608      	movs	r6, #8
					uint8_t led_index = convert_reed_index_to_led_index(i);
 8000ed8:	b2e8      	uxtb	r0, r5
 8000eda:	f7ff fb32 	bl	8000542 <convert_reed_index_to_led_index>
 8000ede:	0004      	movs	r4, r0
					if(bitmap_get_bit(board_bitmap, i)) {
 8000ee0:	9806      	ldr	r0, [sp, #24]
 8000ee2:	9907      	ldr	r1, [sp, #28]
 8000ee4:	002a      	movs	r2, r5
 8000ee6:	f7ff fae7 	bl	80004b8 <bitmap_get_bit>
	colors[index][0] = (uint8_t)(r * brightness / 255);
 8000eea:	437c      	muls	r4, r7
 8000eec:	ab6b      	add	r3, sp, #428	@ 0x1ac
 8000eee:	191b      	adds	r3, r3, r4
					if(bitmap_get_bit(board_bitmap, i)) {
 8000ef0:	2800      	cmp	r0, #0
 8000ef2:	d008      	beq.n	8000f06 <main+0x26a>
	colors[index][0] = (uint8_t)(r * brightness / 255);
 8000ef4:	2200      	movs	r2, #0
	colors[index][1] = (uint8_t)(g * brightness / 255);
 8000ef6:	705e      	strb	r6, [r3, #1]
	colors[index][0] = (uint8_t)(r * brightness / 255);
 8000ef8:	701a      	strb	r2, [r3, #0]
	colors[index][2] = (uint8_t)(b * brightness / 255);
 8000efa:	709a      	strb	r2, [r3, #2]
				for(uint8_t i = 0; i < LED_NUMBER; ++i){
 8000efc:	3501      	adds	r5, #1
 8000efe:	2d40      	cmp	r5, #64	@ 0x40
 8000f00:	d1ea      	bne.n	8000ed8 <main+0x23c>
				game_state = IN_GAME;
 8000f02:	2602      	movs	r6, #2
 8000f04:	e7d6      	b.n	8000eb4 <main+0x218>
	colors[index][0] = (uint8_t)(r * brightness / 255);
 8000f06:	701e      	strb	r6, [r3, #0]
	colors[index][1] = (uint8_t)(g * brightness / 255);
 8000f08:	7058      	strb	r0, [r3, #1]
	colors[index][2] = (uint8_t)(b * brightness / 255);
 8000f0a:	7098      	strb	r0, [r3, #2]
}
 8000f0c:	e7f6      	b.n	8000efc <main+0x260>
				read_full_board(&board_bitmap);
 8000f0e:	a806      	add	r0, sp, #24
  			old_board_bitmap = board_bitmap;
 8000f10:	9c06      	ldr	r4, [sp, #24]
 8000f12:	9d07      	ldr	r5, [sp, #28]
				read_full_board(&board_bitmap);
 8000f14:	f7ff fe3c 	bl	8000b90 <read_full_board>
				idx = is_a_piece_lift(board_bitmap, old_board_bitmap);
 8000f18:	9806      	ldr	r0, [sp, #24]
 8000f1a:	9907      	ldr	r1, [sp, #28]
 8000f1c:	0022      	movs	r2, r4
 8000f1e:	002b      	movs	r3, r5
 8000f20:	f7ff fdbf 	bl	8000aa2 <is_a_piece_lift>
 8000f24:	0007      	movs	r7, r0
				if(idx != NO_INDEX_FOUND) {
 8000f26:	28ff      	cmp	r0, #255	@ 0xff
 8000f28:	d011      	beq.n	8000f4e <main+0x2b2>
					cb_fmt_evt_lift(msg, 64, idx, HAL_GetTick());
 8000f2a:	f000 fa9d 	bl	8001468 <HAL_GetTick>
 8000f2e:	003a      	movs	r2, r7
 8000f30:	0003      	movs	r3, r0
 8000f32:	2140      	movs	r1, #64	@ 0x40
 8000f34:	a814      	add	r0, sp, #80	@ 0x50
 8000f36:	f7ff fc7f 	bl	8000838 <cb_fmt_evt_lift>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000f3a:	a814      	add	r0, sp, #80	@ 0x50
 8000f3c:	f7ff f8ea 	bl	8000114 <strlen>
 8000f40:	2301      	movs	r3, #1
 8000f42:	b282      	uxth	r2, r0
 8000f44:	425b      	negs	r3, r3
 8000f46:	482c      	ldr	r0, [pc, #176]	@ (8000ff8 <main+0x35c>)
 8000f48:	a914      	add	r1, sp, #80	@ 0x50
 8000f4a:	f002 fd5c 	bl	8003a06 <HAL_UART_Transmit>
				idx = is_a_piece_placed(board_bitmap, old_board_bitmap);
 8000f4e:	9806      	ldr	r0, [sp, #24]
 8000f50:	9907      	ldr	r1, [sp, #28]
 8000f52:	0022      	movs	r2, r4
 8000f54:	002b      	movs	r3, r5
 8000f56:	f7ff fdbf 	bl	8000ad8 <is_a_piece_placed>
 8000f5a:	0004      	movs	r4, r0
				if(idx != NO_INDEX_FOUND) {
 8000f5c:	28ff      	cmp	r0, #255	@ 0xff
 8000f5e:	d014      	beq.n	8000f8a <main+0x2ee>
					leds_clear(colors);
 8000f60:	a86b      	add	r0, sp, #428	@ 0x1ac
 8000f62:	f7ff fe36 	bl	8000bd2 <leds_clear>
					cb_fmt_evt_place(msg, 64, idx, HAL_GetTick());
 8000f66:	f000 fa7f 	bl	8001468 <HAL_GetTick>
 8000f6a:	0022      	movs	r2, r4
 8000f6c:	0003      	movs	r3, r0
 8000f6e:	2140      	movs	r1, #64	@ 0x40
 8000f70:	a814      	add	r0, sp, #80	@ 0x50
 8000f72:	f7ff fc75 	bl	8000860 <cb_fmt_evt_place>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000f76:	a814      	add	r0, sp, #80	@ 0x50
 8000f78:	f7ff f8cc 	bl	8000114 <strlen>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	b282      	uxth	r2, r0
 8000f80:	425b      	negs	r3, r3
 8000f82:	481d      	ldr	r0, [pc, #116]	@ (8000ff8 <main+0x35c>)
 8000f84:	a914      	add	r1, sp, #80	@ 0x50
 8000f86:	f002 fd3e 	bl	8003a06 <HAL_UART_Transmit>
  			int r = uart_fifo_get_command(&uartFifo, command, sizeof(command));
 8000f8a:	2280      	movs	r2, #128	@ 0x80
 8000f8c:	481f      	ldr	r0, [pc, #124]	@ (800100c <main+0x370>)
 8000f8e:	a924      	add	r1, sp, #144	@ 0x90
 8000f90:	f7ff fc94 	bl	80008bc <uart_fifo_get_command>
				if (r > 0) {
 8000f94:	2800      	cmp	r0, #0
 8000f96:	dd78      	ble.n	800108a <main+0x3ee>
					cb_parse_cmd(command, &cmd);
 8000f98:	ac44      	add	r4, sp, #272	@ 0x110
 8000f9a:	0021      	movs	r1, r4
 8000f9c:	a824      	add	r0, sp, #144	@ 0x90
 8000f9e:	f7ff fb03 	bl	80005a8 <cb_parse_cmd>
					memset(command, 0, 64);
 8000fa2:	2240      	movs	r2, #64	@ 0x40
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	a824      	add	r0, sp, #144	@ 0x90
 8000fa8:	f003 f80c 	bl	8003fc4 <memset>
					switch(cmd.type) {
 8000fac:	7820      	ldrb	r0, [r4, #0]
 8000fae:	3801      	subs	r0, #1
 8000fb0:	280e      	cmp	r0, #14
 8000fb2:	d868      	bhi.n	8001086 <main+0x3ea>
 8000fb4:	f7ff f8b6 	bl	8000124 <__gnu_thumb1_case_uqi>
 8000fb8:	3f300c08 	.word	0x3f300c08
 8000fbc:	67676748 	.word	0x67676748
 8000fc0:	635a6767 	.word	0x635a6767
 8000fc4:	674a      	.short	0x674a
 8000fc6:	56          	.byte	0x56
 8000fc7:	00          	.byte	0x00
						case CB_CMD_PING:      		uart_write("OK PING\r\n"); break;
 8000fc8:	4811      	ldr	r0, [pc, #68]	@ (8001010 <main+0x374>)
						default: uart_write("ERR CMD\r\n"); break;
 8000fca:	f7ff fcc9 	bl	8000960 <uart_write>
 8000fce:	e771      	b.n	8000eb4 <main+0x218>
						case CB_CMD_VER_Q:     		uart_write("OK FW=FW1.0.0 HW=PCBv1\r\n"); break;
 8000fd0:	4810      	ldr	r0, [pc, #64]	@ (8001014 <main+0x378>)
 8000fd2:	e7fa      	b.n	8000fca <main+0x32e>
 8000fd4:	fffff12c 	.word	0xfffff12c
 8000fd8:	00000c64 	.word	0x00000c64
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	50000800 	.word	0x50000800
 8000fe4:	00001870 	.word	0x00001870
 8000fe8:	50000400 	.word	0x50000400
 8000fec:	200003c0 	.word	0x200003c0
 8000ff0:	40005400 	.word	0x40005400
 8000ff4:	00b07cb4 	.word	0x00b07cb4
 8000ff8:	20000284 	.word	0x20000284
 8000ffc:	40004400 	.word	0x40004400
 8001000:	20000374 	.word	0x20000374
 8001004:	40014800 	.word	0x40014800
 8001008:	20000280 	.word	0x20000280
 800100c:	20000078 	.word	0x20000078
 8001010:	08004924 	.word	0x08004924
 8001014:	0800492e 	.word	0x0800492e
static inline uint32_t t_ms(void){ return HAL_GetTick(); }
 8001018:	f000 fa26 	bl	8001468 <HAL_GetTick>
							int n=snprintf(o,sizeof o,"OK TIME %lu\r\n",(unsigned long)t_ms());
 800101c:	2130      	movs	r1, #48	@ 0x30
static inline uint32_t t_ms(void){ return HAL_GetTick(); }
 800101e:	0003      	movs	r3, r0
							int n=snprintf(o,sizeof o,"OK TIME %lu\r\n",(unsigned long)t_ms());
 8001020:	4a21      	ldr	r2, [pc, #132]	@ (80010a8 <main+0x40c>)
 8001022:	a808      	add	r0, sp, #32
 8001024:	f002 ff4c 	bl	8003ec0 <sniprintf>
static void uart_write_n(const char *s, size_t n){ HAL_UART_Transmit(&huart2,(uint8_t*)s,(uint16_t)n,100); }
 8001028:	2364      	movs	r3, #100	@ 0x64
 800102a:	b282      	uxth	r2, r0
 800102c:	a908      	add	r1, sp, #32
 800102e:	481f      	ldr	r0, [pc, #124]	@ (80010ac <main+0x410>)
 8001030:	f002 fce9 	bl	8003a06 <HAL_UART_Transmit>
 8001034:	e73e      	b.n	8000eb4 <main+0x218>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001036:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103a:	4b1d      	ldr	r3, [pc, #116]	@ (80010b0 <main+0x414>)
 800103c:	4a1d      	ldr	r2, [pc, #116]	@ (80010b4 <main+0x418>)
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001044:	46c0      	nop			@ (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8001046:	e7fd      	b.n	8001044 <main+0x3a8>
						case CB_CMD_SAVE:      		uart_write("OK SAVE\r\n"); break;
 8001048:	481b      	ldr	r0, [pc, #108]	@ (80010b8 <main+0x41c>)
 800104a:	e7be      	b.n	8000fca <main+0x32e>
						case CB_CMD_LED_SET:      led_set(cmd.u.led_set.idx, cmd.u.led_set.r, cmd.u.led_set.g, cmd.u.led_set.b, colors, GLOBAL_BRIGHTNESS);
 800104c:	7ae3      	ldrb	r3, [r4, #11]
 800104e:	7aa2      	ldrb	r2, [r4, #10]
 8001050:	7a61      	ldrb	r1, [r4, #9]
 8001052:	7a20      	ldrb	r0, [r4, #8]
 8001054:	2408      	movs	r4, #8
 8001056:	9401      	str	r4, [sp, #4]
 8001058:	ac6b      	add	r4, sp, #428	@ 0x1ac
 800105a:	9400      	str	r4, [sp, #0]
 800105c:	f7ff fdc3 	bl	8000be6 <led_set>
					  case CB_CMD_LED_OFF_ALL:  leds_clear(colors); uart_write("OK\r\n"); break;
 8001060:	4816      	ldr	r0, [pc, #88]	@ (80010bc <main+0x420>)
 8001062:	e7b2      	b.n	8000fca <main+0x32e>
 8001064:	a86b      	add	r0, sp, #428	@ 0x1ac
 8001066:	f7ff fdb4 	bl	8000bd2 <leds_clear>
 800106a:	e7f9      	b.n	8001060 <main+0x3c4>
					  case CB_CMD_WIN:					led_show_win(colors, cmd.u.led_set.idx); uart_write("OK\r\n"); game_state = GAME_END; break;
 800106c:	7a21      	ldrb	r1, [r4, #8]
 800106e:	a86b      	add	r0, sp, #428	@ 0x1ac
 8001070:	f7ff fdd5 	bl	8000c1e <led_show_win>
					  case CB_CMD_DRAW:					led_show_draw(colors); uart_write("OK\r\n"); game_state = GAME_END; break;
 8001074:	4811      	ldr	r0, [pc, #68]	@ (80010bc <main+0x420>)
 8001076:	f7ff fc73 	bl	8000960 <uart_write>
					  case CB_CMD_WIN:					led_show_win(colors, cmd.u.led_set.idx); uart_write("OK\r\n"); game_state = GAME_END; break;
 800107a:	2603      	movs	r6, #3
 800107c:	e71a      	b.n	8000eb4 <main+0x218>
					  case CB_CMD_DRAW:					led_show_draw(colors); uart_write("OK\r\n"); game_state = GAME_END; break;
 800107e:	a86b      	add	r0, sp, #428	@ 0x1ac
 8001080:	f7ff fdf1 	bl	8000c66 <led_show_draw>
 8001084:	e7f6      	b.n	8001074 <main+0x3d8>
						default: uart_write("ERR CMD\r\n"); break;
 8001086:	480e      	ldr	r0, [pc, #56]	@ (80010c0 <main+0x424>)
 8001088:	e79f      	b.n	8000fca <main+0x32e>
				} else if (r == -1) {
 800108a:	3001      	adds	r0, #1
 800108c:	d000      	beq.n	8001090 <main+0x3f4>
 800108e:	e738      	b.n	8000f02 <main+0x266>
						uart_write("ERR CMD\r\n");;
 8001090:	480b      	ldr	r0, [pc, #44]	@ (80010c0 <main+0x424>)
 8001092:	f7ff fc65 	bl	8000960 <uart_write>
 8001096:	e734      	b.n	8000f02 <main+0x266>
  			HAL_Delay(5000);
 8001098:	480a      	ldr	r0, [pc, #40]	@ (80010c4 <main+0x428>)
 800109a:	f000 f9eb 	bl	8001474 <HAL_Delay>
  			leds_clear(colors);
 800109e:	a86b      	add	r0, sp, #428	@ 0x1ac
 80010a0:	f7ff fd97 	bl	8000bd2 <leds_clear>
  			game_state = STARTING_ANIMATION;
 80010a4:	2600      	movs	r6, #0
 80010a6:	e705      	b.n	8000eb4 <main+0x218>
 80010a8:	08004947 	.word	0x08004947
 80010ac:	20000284 	.word	0x20000284
 80010b0:	e000ed00 	.word	0xe000ed00
 80010b4:	05fa0004 	.word	0x05fa0004
 80010b8:	08004955 	.word	0x08004955
 80010bc:	0800495f 	.word	0x0800495f
 80010c0:	08004964 	.word	0x08004964
 80010c4:	00001388 	.word	0x00001388

080010c8 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80010c8:	b672      	cpsid	i
  while (1)
 80010ca:	e7fe      	b.n	80010ca <Error_Handler+0x2>

080010cc <rgb_update_buffer>:

// -------------------------------------------------------------------
// Fill the buffer PWM depending on the table "colors"
// -------------------------------------------------------------------
void rgb_update_buffer(uint16_t *pwm_data, uint8_t colors[][3])
{
 80010cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        uint32_t color = ((uint32_t)colors[led][1] << 16) |  // R
        				 ((uint32_t)colors[led][0] << 8) |  // G
                         ((uint32_t)colors[led][2] << 0);  // R
        for(int i = 0; i < 24; i++)
        {
            if(color & (1 << (23-i)))
 80010ce:	230d      	movs	r3, #13
{
 80010d0:	2400      	movs	r4, #0
            if(color & (1 << (23-i)))
 80010d2:	469c      	mov	ip, r3
        uint32_t color = ((uint32_t)colors[led][1] << 16) |  // R
 80010d4:	2517      	movs	r5, #23
 80010d6:	784b      	ldrb	r3, [r1, #1]
        				 ((uint32_t)colors[led][0] << 8) |  // G
 80010d8:	780a      	ldrb	r2, [r1, #0]
        uint32_t color = ((uint32_t)colors[led][1] << 16) |  // R
 80010da:	041b      	lsls	r3, r3, #16
        				 ((uint32_t)colors[led][0] << 8) |  // G
 80010dc:	0212      	lsls	r2, r2, #8
        uint32_t color = ((uint32_t)colors[led][1] << 16) |  // R
 80010de:	4313      	orrs	r3, r2
                         ((uint32_t)colors[led][2] << 0);  // R
 80010e0:	788a      	ldrb	r2, [r1, #2]
        uint32_t color = ((uint32_t)colors[led][1] << 16) |  // R
 80010e2:	4313      	orrs	r3, r2
        for(int i = 0; i < 24; i++)
 80010e4:	0062      	lsls	r2, r4, #1
 80010e6:	1882      	adds	r2, r0, r2
            if(color & (1 << (23-i)))
 80010e8:	2601      	movs	r6, #1
 80010ea:	40ae      	lsls	r6, r5
 80010ec:	271a      	movs	r7, #26
 80010ee:	4233      	tst	r3, r6
 80010f0:	d100      	bne.n	80010f4 <rgb_update_buffer+0x28>
 80010f2:	4667      	mov	r7, ip
            	pwm_data[led*24 + i] = HIGH_DUTY;
 80010f4:	8017      	strh	r7, [r2, #0]
        for(int i = 0; i < 24; i++)
 80010f6:	3202      	adds	r2, #2
 80010f8:	3d01      	subs	r5, #1
 80010fa:	d2f5      	bcs.n	80010e8 <rgb_update_buffer+0x1c>
    for(int led = 0; led < LED_NUMBER; led++)
 80010fc:	23c0      	movs	r3, #192	@ 0xc0
 80010fe:	3418      	adds	r4, #24
 8001100:	3103      	adds	r1, #3
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	429c      	cmp	r4, r3
 8001106:	d1e5      	bne.n	80010d4 <rgb_update_buffer+0x8>
    }

    // Ajoute les zéros pour le reset (>50µs)
    for(int i = 24*LED_NUMBER; i < LED_BUFFER_SIZE; i++)
    {
    	pwm_data[i] = 0;
 8001108:	23c0      	movs	r3, #192	@ 0xc0
 800110a:	011b      	lsls	r3, r3, #4
 800110c:	2264      	movs	r2, #100	@ 0x64
 800110e:	2100      	movs	r1, #0
 8001110:	18c0      	adds	r0, r0, r3
 8001112:	f002 ff57 	bl	8003fc4 <memset>
    }
}
 8001116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001118 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001118:	2101      	movs	r1, #1
 800111a:	4b0a      	ldr	r3, [pc, #40]	@ (8001144 <HAL_MspInit+0x2c>)
{
 800111c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001120:	430a      	orrs	r2, r1
 8001122:	641a      	str	r2, [r3, #64]	@ 0x40
 8001124:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001126:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001128:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112a:	9200      	str	r2, [sp, #0]
 800112c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001130:	0549      	lsls	r1, r1, #21
 8001132:	430a      	orrs	r2, r1
 8001134:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001138:	400b      	ands	r3, r1
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113e:	b002      	add	sp, #8
 8001140:	4770      	bx	lr
 8001142:	46c0      	nop			@ (mov r8, r8)
 8001144:	40021000 	.word	0x40021000

08001148 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001148:	b510      	push	{r4, lr}
 800114a:	0004      	movs	r4, r0
 800114c:	b08e      	sub	sp, #56	@ 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114e:	2214      	movs	r2, #20
 8001150:	2100      	movs	r1, #0
 8001152:	a803      	add	r0, sp, #12
 8001154:	f002 ff36 	bl	8003fc4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001158:	2218      	movs	r2, #24
 800115a:	2100      	movs	r1, #0
 800115c:	a808      	add	r0, sp, #32
 800115e:	f002 ff31 	bl	8003fc4 <memset>
  if(hi2c->Instance==I2C1)
 8001162:	4b17      	ldr	r3, [pc, #92]	@ (80011c0 <HAL_I2C_MspInit+0x78>)
 8001164:	6822      	ldr	r2, [r4, #0]
 8001166:	429a      	cmp	r2, r3
 8001168:	d128      	bne.n	80011bc <HAL_I2C_MspInit+0x74>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800116a:	2320      	movs	r3, #32
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800116c:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800116e:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001170:	f001 f836 	bl	80021e0 <HAL_RCCEx_PeriphCLKConfig>
 8001174:	2800      	cmp	r0, #0
 8001176:	d001      	beq.n	800117c <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8001178:	f7ff ffa6 	bl	80010c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117c:	2202      	movs	r2, #2
 800117e:	4c11      	ldr	r4, [pc, #68]	@ (80011c4 <HAL_I2C_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001180:	4811      	ldr	r0, [pc, #68]	@ (80011c8 <HAL_I2C_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001182:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001184:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	4313      	orrs	r3, r2
 8001188:	6363      	str	r3, [r4, #52]	@ 0x34
 800118a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800118c:	4013      	ands	r3, r2
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 8001192:	2390      	movs	r3, #144	@ 0x90
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001198:	2312      	movs	r3, #18
 800119a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80011a2:	3306      	adds	r3, #6
 80011a4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a6:	f000 fb6b 	bl	8001880 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011aa:	2280      	movs	r2, #128	@ 0x80
 80011ac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80011ae:	0392      	lsls	r2, r2, #14
 80011b0:	4313      	orrs	r3, r2
 80011b2:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80011b4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80011b6:	4013      	ands	r3, r2
 80011b8:	9302      	str	r3, [sp, #8]
 80011ba:	9b02      	ldr	r3, [sp, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80011bc:	b00e      	add	sp, #56	@ 0x38
 80011be:	bd10      	pop	{r4, pc}
 80011c0:	40005400 	.word	0x40005400
 80011c4:	40021000 	.word	0x40021000
 80011c8:	50000400 	.word	0x50000400

080011cc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(htim_base->Instance==TIM17)
 80011ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001238 <HAL_TIM_Base_MspInit+0x6c>)
 80011d0:	6802      	ldr	r2, [r0, #0]
{
 80011d2:	0005      	movs	r5, r0
  if(htim_base->Instance==TIM17)
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d12e      	bne.n	8001236 <HAL_TIM_Base_MspInit+0x6a>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80011d8:	2180      	movs	r1, #128	@ 0x80
 80011da:	4b18      	ldr	r3, [pc, #96]	@ (800123c <HAL_TIM_Base_MspInit+0x70>)
 80011dc:	02c9      	lsls	r1, r1, #11
 80011de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40

    /* TIM17 DMA Init */
    /* TIM17_CH1 Init */
    hdma_tim17_ch1.Instance = DMA1_Channel1;
 80011e0:	4c17      	ldr	r4, [pc, #92]	@ (8001240 <HAL_TIM_Base_MspInit+0x74>)
    __HAL_RCC_TIM17_CLK_ENABLE();
 80011e2:	430a      	orrs	r2, r1
 80011e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80011e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
    hdma_tim17_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80011e8:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_TIM17_CLK_ENABLE();
 80011ea:	400b      	ands	r3, r1
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	9b01      	ldr	r3, [sp, #4]
    hdma_tim17_ch1.Instance = DMA1_Channel1;
 80011f0:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <HAL_TIM_Base_MspInit+0x78>)
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80011f2:	6122      	str	r2, [r4, #16]
    hdma_tim17_ch1.Instance = DMA1_Channel1;
 80011f4:	6023      	str	r3, [r4, #0]
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
 80011f6:	232f      	movs	r3, #47	@ 0x2f
 80011f8:	6063      	str	r3, [r4, #4]
    hdma_tim17_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011fa:	3b1f      	subs	r3, #31
 80011fc:	60a3      	str	r3, [r4, #8]
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011fe:	2300      	movs	r3, #0
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001200:	1892      	adds	r2, r2, r2
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001202:	60e3      	str	r3, [r4, #12]
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001204:	6162      	str	r2, [r4, #20]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_tim17_ch1.Init.Mode = DMA_NORMAL;
 8001206:	61e3      	str	r3, [r4, #28]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001208:	2280      	movs	r2, #128	@ 0x80
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800120a:	2380      	movs	r3, #128	@ 0x80
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800120c:	00d2      	lsls	r2, r2, #3
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800120e:	015b      	lsls	r3, r3, #5
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 8001210:	0020      	movs	r0, r4
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001212:	61a2      	str	r2, [r4, #24]
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001214:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 8001216:	f000 f9c9 	bl	80015ac <HAL_DMA_Init>
 800121a:	2800      	cmp	r0, #0
 800121c:	d001      	beq.n	8001222 <HAL_TIM_Base_MspInit+0x56>
    {
      Error_Handler();
 800121e:	f7ff ff53 	bl	80010c8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2016      	movs	r0, #22
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 8001226:	626c      	str	r4, [r5, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001228:	0011      	movs	r1, r2
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 800122a:	62a5      	str	r5, [r4, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800122c:	f000 f934 	bl	8001498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001230:	2016      	movs	r0, #22
 8001232:	f000 f95b 	bl	80014ec <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8001236:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8001238:	40014800 	.word	0x40014800
 800123c:	40021000 	.word	0x40021000
 8001240:	20000318 	.word	0x20000318
 8001244:	40020008 	.word	0x40020008

08001248 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001248:	b510      	push	{r4, lr}
 800124a:	0004      	movs	r4, r0
 800124c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	2214      	movs	r2, #20
 8001250:	2100      	movs	r1, #0
 8001252:	a801      	add	r0, sp, #4
 8001254:	f002 feb6 	bl	8003fc4 <memset>
  if(htim->Instance==TIM17)
 8001258:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <HAL_TIM_MspPostInit+0x44>)
 800125a:	6822      	ldr	r2, [r4, #0]
 800125c:	429a      	cmp	r2, r3
 800125e:	d113      	bne.n	8001288 <HAL_TIM_MspPostInit+0x40>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001260:	2101      	movs	r1, #1
 8001262:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	430a      	orrs	r2, r1
 800126c:	635a      	str	r2, [r3, #52]	@ 0x34
 800126e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001270:	400b      	ands	r3, r1
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001276:	2380      	movs	r3, #128	@ 0x80
 8001278:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	3b7e      	subs	r3, #126	@ 0x7e
 800127c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8001280:	3303      	adds	r3, #3
 8001282:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	f000 fafc 	bl	8001880 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001288:	b006      	add	sp, #24
 800128a:	bd10      	pop	{r4, pc}
 800128c:	40014800 	.word	0x40014800
 8001290:	40021000 	.word	0x40021000

08001294 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001294:	b510      	push	{r4, lr}
 8001296:	0004      	movs	r4, r0
 8001298:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129a:	2214      	movs	r2, #20
 800129c:	2100      	movs	r1, #0
 800129e:	a803      	add	r0, sp, #12
 80012a0:	f002 fe90 	bl	8003fc4 <memset>
  if(huart->Instance==USART2)
 80012a4:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <HAL_UART_MspInit+0x64>)
 80012a6:	6822      	ldr	r2, [r4, #0]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d123      	bne.n	80012f4 <HAL_UART_MspInit+0x60>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ac:	2180      	movs	r1, #128	@ 0x80
 80012ae:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <HAL_UART_MspInit+0x68>)
 80012b0:	0289      	lsls	r1, r1, #10
 80012b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b4:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 80012b6:	430a      	orrs	r2, r1
 80012b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 80012be:	400a      	ands	r2, r1
 80012c0:	9201      	str	r2, [sp, #4]
 80012c2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	2201      	movs	r2, #1
 80012c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012c8:	4311      	orrs	r1, r2
 80012ca:	6359      	str	r1, [r3, #52]	@ 0x34
 80012cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ce:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	4013      	ands	r3, r2
 80012d2:	9302      	str	r3, [sp, #8]
 80012d4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012d6:	230c      	movs	r3, #12
 80012d8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	3b0a      	subs	r3, #10
 80012dc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80012de:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f000 face 	bl	8001880 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	201c      	movs	r0, #28
 80012e8:	0011      	movs	r1, r2
 80012ea:	f000 f8d5 	bl	8001498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012ee:	201c      	movs	r0, #28
 80012f0:	f000 f8fc 	bl	80014ec <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80012f4:	b008      	add	sp, #32
 80012f6:	bd10      	pop	{r4, pc}
 80012f8:	40004400 	.word	0x40004400
 80012fc:	40021000 	.word	0x40021000

08001300 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001300:	e7fe      	b.n	8001300 <NMI_Handler>

08001302 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <HardFault_Handler>

08001304 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001304:	4770      	bx	lr

08001306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001306:	4770      	bx	lr

08001308 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001308:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130a:	f000 f8a1 	bl	8001450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130e:	bd10      	pop	{r4, pc}

08001310 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001310:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1);
 8001312:	4802      	ldr	r0, [pc, #8]	@ (800131c <DMA1_Channel1_IRQHandler+0xc>)
 8001314:	f000 fa60 	bl	80017d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001318:	bd10      	pop	{r4, pc}
 800131a:	46c0      	nop			@ (mov r8, r8)
 800131c:	20000318 	.word	0x20000318

08001320 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001320:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001322:	4802      	ldr	r0, [pc, #8]	@ (800132c <TIM17_IRQHandler+0xc>)
 8001324:	f001 f970 	bl	8002608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001328:	bd10      	pop	{r4, pc}
 800132a:	46c0      	nop			@ (mov r8, r8)
 800132c:	20000374 	.word	0x20000374

08001330 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001330:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001332:	4802      	ldr	r0, [pc, #8]	@ (800133c <USART2_IRQHandler+0xc>)
 8001334:	f001 fdc0 	bl	8002eb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001338:	bd10      	pop	{r4, pc}
 800133a:	46c0      	nop			@ (mov r8, r8)
 800133c:	20000284 	.word	0x20000284

08001340 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001340:	490b      	ldr	r1, [pc, #44]	@ (8001370 <_sbrk+0x30>)
 8001342:	4a0c      	ldr	r2, [pc, #48]	@ (8001374 <_sbrk+0x34>)
{
 8001344:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001346:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001348:	490b      	ldr	r1, [pc, #44]	@ (8001378 <_sbrk+0x38>)
{
 800134a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800134c:	6808      	ldr	r0, [r1, #0]
 800134e:	2800      	cmp	r0, #0
 8001350:	d101      	bne.n	8001356 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8001352:	480a      	ldr	r0, [pc, #40]	@ (800137c <_sbrk+0x3c>)
 8001354:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001356:	6808      	ldr	r0, [r1, #0]
 8001358:	18c3      	adds	r3, r0, r3
 800135a:	4293      	cmp	r3, r2
 800135c:	d906      	bls.n	800136c <_sbrk+0x2c>
  {
    errno = ENOMEM;
 800135e:	f002 fe45 	bl	8003fec <__errno>
 8001362:	230c      	movs	r3, #12
 8001364:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001366:	2001      	movs	r0, #1
 8001368:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800136a:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800136c:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 800136e:	e7fc      	b.n	800136a <_sbrk+0x2a>
 8001370:	00000400 	.word	0x00000400
 8001374:	20002000 	.word	0x20002000
 8001378:	20000418 	.word	0x20000418
 800137c:	20000568 	.word	0x20000568

08001380 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001380:	4770      	bx	lr
	...

08001384 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001384:	480d      	ldr	r0, [pc, #52]	@ (80013bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001386:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001388:	f7ff fffa 	bl	8001380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800138c:	480c      	ldr	r0, [pc, #48]	@ (80013c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800138e:	490d      	ldr	r1, [pc, #52]	@ (80013c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001390:	4a0d      	ldr	r2, [pc, #52]	@ (80013c8 <LoopForever+0xe>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001394:	e002      	b.n	800139c <LoopCopyDataInit>

08001396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139a:	3304      	adds	r3, #4

0800139c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800139c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a0:	d3f9      	bcc.n	8001396 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a2:	4a0a      	ldr	r2, [pc, #40]	@ (80013cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80013a4:	4c0a      	ldr	r4, [pc, #40]	@ (80013d0 <LoopForever+0x16>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a8:	e001      	b.n	80013ae <LoopFillZerobss>

080013aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ac:	3204      	adds	r2, #4

080013ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b0:	d3fb      	bcc.n	80013aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013b2:	f002 fe21 	bl	8003ff8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80013b6:	f7ff fc71 	bl	8000c9c <main>

080013ba <LoopForever>:

LoopForever:
  b LoopForever
 80013ba:	e7fe      	b.n	80013ba <LoopForever>
  ldr   r0, =_estack
 80013bc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80013c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80013c8:	08004b6c 	.word	0x08004b6c
  ldr r2, =_sbss
 80013cc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80013d0:	20000568 	.word	0x20000568

080013d4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013d4:	e7fe      	b.n	80013d4 <ADC1_IRQHandler>
	...

080013d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d8:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80013da:	4b10      	ldr	r3, [pc, #64]	@ (800141c <HAL_InitTick+0x44>)
{
 80013dc:	0005      	movs	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 80013de:	7819      	ldrb	r1, [r3, #0]
 80013e0:	2900      	cmp	r1, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 80013e4:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 80013e6:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80013e8:	20fa      	movs	r0, #250	@ 0xfa
 80013ea:	0080      	lsls	r0, r0, #2
 80013ec:	f7fe feb8 	bl	8000160 <__udivsi3>
 80013f0:	4c0b      	ldr	r4, [pc, #44]	@ (8001420 <HAL_InitTick+0x48>)
 80013f2:	0001      	movs	r1, r0
 80013f4:	6820      	ldr	r0, [r4, #0]
 80013f6:	f7fe feb3 	bl	8000160 <__udivsi3>
 80013fa:	f000 f883 	bl	8001504 <HAL_SYSTICK_Config>
 80013fe:	1e04      	subs	r4, r0, #0
 8001400:	d1f0      	bne.n	80013e4 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001402:	2d03      	cmp	r5, #3
 8001404:	d8ee      	bhi.n	80013e4 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001406:	0002      	movs	r2, r0
 8001408:	2001      	movs	r0, #1
 800140a:	0029      	movs	r1, r5
 800140c:	4240      	negs	r0, r0
 800140e:	f000 f843 	bl	8001498 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001412:	4b04      	ldr	r3, [pc, #16]	@ (8001424 <HAL_InitTick+0x4c>)
 8001414:	0020      	movs	r0, r4
 8001416:	601d      	str	r5, [r3, #0]
  return status;
 8001418:	e7e5      	b.n	80013e6 <HAL_InitTick+0xe>
 800141a:	46c0      	nop			@ (mov r8, r8)
 800141c:	20000004 	.word	0x20000004
 8001420:	20000000 	.word	0x20000000
 8001424:	20000008 	.word	0x20000008

08001428 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001428:	2380      	movs	r3, #128	@ 0x80
 800142a:	4a08      	ldr	r2, [pc, #32]	@ (800144c <HAL_Init+0x24>)
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	6811      	ldr	r1, [r2, #0]
{
 8001430:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001432:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001434:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001436:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001438:	f7ff ffce 	bl	80013d8 <HAL_InitTick>
 800143c:	1e04      	subs	r4, r0, #0
 800143e:	d103      	bne.n	8001448 <HAL_Init+0x20>
  HAL_MspInit();
 8001440:	f7ff fe6a 	bl	8001118 <HAL_MspInit>
}
 8001444:	0020      	movs	r0, r4
 8001446:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001448:	2401      	movs	r4, #1
 800144a:	e7fb      	b.n	8001444 <HAL_Init+0x1c>
 800144c:	40022000 	.word	0x40022000

08001450 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001450:	4a03      	ldr	r2, [pc, #12]	@ (8001460 <HAL_IncTick+0x10>)
 8001452:	4b04      	ldr	r3, [pc, #16]	@ (8001464 <HAL_IncTick+0x14>)
 8001454:	6811      	ldr	r1, [r2, #0]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	185b      	adds	r3, r3, r1
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	4770      	bx	lr
 800145e:	46c0      	nop			@ (mov r8, r8)
 8001460:	2000041c 	.word	0x2000041c
 8001464:	20000004 	.word	0x20000004

08001468 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001468:	4b01      	ldr	r3, [pc, #4]	@ (8001470 <HAL_GetTick+0x8>)
 800146a:	6818      	ldr	r0, [r3, #0]
}
 800146c:	4770      	bx	lr
 800146e:	46c0      	nop			@ (mov r8, r8)
 8001470:	2000041c 	.word	0x2000041c

08001474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001474:	b570      	push	{r4, r5, r6, lr}
 8001476:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001478:	f7ff fff6 	bl	8001468 <HAL_GetTick>
 800147c:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147e:	1c63      	adds	r3, r4, #1
 8001480:	d002      	beq.n	8001488 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001482:	4b04      	ldr	r3, [pc, #16]	@ (8001494 <HAL_Delay+0x20>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001488:	f7ff ffee 	bl	8001468 <HAL_GetTick>
 800148c:	1b40      	subs	r0, r0, r5
 800148e:	42a0      	cmp	r0, r4
 8001490:	d3fa      	bcc.n	8001488 <HAL_Delay+0x14>
  {
  }
}
 8001492:	bd70      	pop	{r4, r5, r6, pc}
 8001494:	20000004 	.word	0x20000004

08001498 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001498:	b510      	push	{r4, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800149a:	24ff      	movs	r4, #255	@ 0xff
 800149c:	2203      	movs	r2, #3
 800149e:	000b      	movs	r3, r1
 80014a0:	0021      	movs	r1, r4
 80014a2:	4002      	ands	r2, r0
 80014a4:	00d2      	lsls	r2, r2, #3
 80014a6:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014a8:	019b      	lsls	r3, r3, #6
 80014aa:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014ac:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014ae:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 80014b0:	2800      	cmp	r0, #0
 80014b2:	db0a      	blt.n	80014ca <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014b4:	24c0      	movs	r4, #192	@ 0xc0
 80014b6:	4a0b      	ldr	r2, [pc, #44]	@ (80014e4 <HAL_NVIC_SetPriority+0x4c>)
 80014b8:	0880      	lsrs	r0, r0, #2
 80014ba:	0080      	lsls	r0, r0, #2
 80014bc:	1880      	adds	r0, r0, r2
 80014be:	00a4      	lsls	r4, r4, #2
 80014c0:	5902      	ldr	r2, [r0, r4]
 80014c2:	400a      	ands	r2, r1
 80014c4:	4313      	orrs	r3, r2
 80014c6:	5103      	str	r3, [r0, r4]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80014c8:	bd10      	pop	{r4, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014ca:	220f      	movs	r2, #15
 80014cc:	4010      	ands	r0, r2
 80014ce:	3808      	subs	r0, #8
 80014d0:	4a05      	ldr	r2, [pc, #20]	@ (80014e8 <HAL_NVIC_SetPriority+0x50>)
 80014d2:	0880      	lsrs	r0, r0, #2
 80014d4:	0080      	lsls	r0, r0, #2
 80014d6:	1880      	adds	r0, r0, r2
 80014d8:	69c2      	ldr	r2, [r0, #28]
 80014da:	4011      	ands	r1, r2
 80014dc:	4319      	orrs	r1, r3
 80014de:	61c1      	str	r1, [r0, #28]
 80014e0:	e7f2      	b.n	80014c8 <HAL_NVIC_SetPriority+0x30>
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80014ec:	2800      	cmp	r0, #0
 80014ee:	db05      	blt.n	80014fc <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f0:	231f      	movs	r3, #31
 80014f2:	4018      	ands	r0, r3
 80014f4:	3b1e      	subs	r3, #30
 80014f6:	4083      	lsls	r3, r0
 80014f8:	4a01      	ldr	r2, [pc, #4]	@ (8001500 <HAL_NVIC_EnableIRQ+0x14>)
 80014fa:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80014fc:	4770      	bx	lr
 80014fe:	46c0      	nop			@ (mov r8, r8)
 8001500:	e000e100 	.word	0xe000e100

08001504 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001504:	2280      	movs	r2, #128	@ 0x80
 8001506:	1e43      	subs	r3, r0, #1
 8001508:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800150a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800150c:	4293      	cmp	r3, r2
 800150e:	d20d      	bcs.n	800152c <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001510:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001512:	4a07      	ldr	r2, [pc, #28]	@ (8001530 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001514:	4807      	ldr	r0, [pc, #28]	@ (8001534 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001516:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001518:	6a03      	ldr	r3, [r0, #32]
 800151a:	0609      	lsls	r1, r1, #24
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	0a1b      	lsrs	r3, r3, #8
 8001520:	430b      	orrs	r3, r1
 8001522:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001524:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001526:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001528:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152a:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 800152c:	4770      	bx	lr
 800152e:	46c0      	nop			@ (mov r8, r8)
 8001530:	e000e010 	.word	0xe000e010
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001538:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800153a:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800153c:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 800153e:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001540:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 8001542:	2c00      	cmp	r4, #0
 8001544:	d002      	beq.n	800154c <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001546:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8001548:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 800154a:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800154c:	241c      	movs	r4, #28
 800154e:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8001550:	4e08      	ldr	r6, [pc, #32]	@ (8001574 <DMA_SetConfig+0x3c>)
 8001552:	4025      	ands	r5, r4
 8001554:	3c1b      	subs	r4, #27
 8001556:	40ac      	lsls	r4, r5
 8001558:	6877      	ldr	r7, [r6, #4]
 800155a:	433c      	orrs	r4, r7
 800155c:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800155e:	6804      	ldr	r4, [r0, #0]
 8001560:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001562:	6883      	ldr	r3, [r0, #8]
 8001564:	2b10      	cmp	r3, #16
 8001566:	d102      	bne.n	800156e <DMA_SetConfig+0x36>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001568:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800156a:	60e1      	str	r1, [r4, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800156c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 800156e:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8001570:	60e2      	str	r2, [r4, #12]
}
 8001572:	e7fb      	b.n	800156c <DMA_SetConfig+0x34>
 8001574:	40020000 	.word	0x40020000

08001578 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001578:	b510      	push	{r4, lr}
 800157a:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800157c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800157e:	4a09      	ldr	r2, [pc, #36]	@ (80015a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	189b      	adds	r3, r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	6443      	str	r3, [r0, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001588:	6800      	ldr	r0, [r0, #0]
 800158a:	2114      	movs	r1, #20
 800158c:	b2c0      	uxtb	r0, r0
 800158e:	3808      	subs	r0, #8
 8001590:	f7fe fde6 	bl	8000160 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001594:	4b04      	ldr	r3, [pc, #16]	@ (80015a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8001596:	64a3      	str	r3, [r4, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001598:	231f      	movs	r3, #31
 800159a:	4018      	ands	r0, r3
 800159c:	3b1e      	subs	r3, #30
 800159e:	4083      	lsls	r3, r0
 80015a0:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 80015a2:	bd10      	pop	{r4, pc}
 80015a4:	10008200 	.word	0x10008200
 80015a8:	40020880 	.word	0x40020880

080015ac <HAL_DMA_Init>:
{
 80015ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ae:	0004      	movs	r4, r0
    return HAL_ERROR;
 80015b0:	2001      	movs	r0, #1
  if (hdma == NULL)
 80015b2:	2c00      	cmp	r4, #0
 80015b4:	d046      	beq.n	8001644 <HAL_DMA_Init+0x98>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015b6:	6825      	ldr	r5, [r4, #0]
 80015b8:	4b25      	ldr	r3, [pc, #148]	@ (8001650 <HAL_DMA_Init+0xa4>)
 80015ba:	2114      	movs	r1, #20
 80015bc:	18e8      	adds	r0, r5, r3
 80015be:	f7fe fdcf 	bl	8000160 <__udivsi3>
  hdma->State = HAL_DMA_STATE_BUSY;
 80015c2:	2302      	movs	r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015c4:	0080      	lsls	r0, r0, #2
  hdma->State = HAL_DMA_STATE_BUSY;
 80015c6:	1da6      	adds	r6, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015c8:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80015ca:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015cc:	682b      	ldr	r3, [r5, #0]
 80015ce:	4a21      	ldr	r2, [pc, #132]	@ (8001654 <HAL_DMA_Init+0xa8>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80015d0:	68a7      	ldr	r7, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015d2:	4013      	ands	r3, r2
 80015d4:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80015d6:	68e3      	ldr	r3, [r4, #12]
 80015d8:	6921      	ldr	r1, [r4, #16]
 80015da:	433b      	orrs	r3, r7
 80015dc:	430b      	orrs	r3, r1
 80015de:	6961      	ldr	r1, [r4, #20]
 80015e0:	682a      	ldr	r2, [r5, #0]
 80015e2:	430b      	orrs	r3, r1
 80015e4:	69a1      	ldr	r1, [r4, #24]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80015e6:	0020      	movs	r0, r4
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80015e8:	430b      	orrs	r3, r1
 80015ea:	69e1      	ldr	r1, [r4, #28]
 80015ec:	430b      	orrs	r3, r1
 80015ee:	6a21      	ldr	r1, [r4, #32]
 80015f0:	430b      	orrs	r3, r1
 80015f2:	4313      	orrs	r3, r2
 80015f4:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80015f6:	f7ff ffbf 	bl	8001578 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80015fa:	2380      	movs	r3, #128	@ 0x80
 80015fc:	01db      	lsls	r3, r3, #7
 80015fe:	429f      	cmp	r7, r3
 8001600:	d101      	bne.n	8001606 <HAL_DMA_Init+0x5a>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001602:	2300      	movs	r3, #0
 8001604:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001606:	233f      	movs	r3, #63	@ 0x3f
 8001608:	6862      	ldr	r2, [r4, #4]
 800160a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800160c:	4013      	ands	r3, r2
 800160e:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001610:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8001612:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001614:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001616:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001618:	2a03      	cmp	r2, #3
 800161a:	d814      	bhi.n	8001646 <HAL_DMA_Init+0x9a>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800161c:	4a0e      	ldr	r2, [pc, #56]	@ (8001658 <HAL_DMA_Init+0xac>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800161e:	480f      	ldr	r0, [pc, #60]	@ (800165c <HAL_DMA_Init+0xb0>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001620:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001622:	2201      	movs	r2, #1
 8001624:	3b01      	subs	r3, #1
 8001626:	409a      	lsls	r2, r3
 8001628:	65a2      	str	r2, [r4, #88]	@ 0x58
 800162a:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800162c:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800162e:	0089      	lsls	r1, r1, #2
 8001630:	6521      	str	r1, [r4, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001632:	6560      	str	r0, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001634:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001636:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001638:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800163a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800163c:	63e0      	str	r0, [r4, #60]	@ 0x3c
  __HAL_UNLOCK(hdma);
 800163e:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_READY;
 8001640:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 8001642:	77e0      	strb	r0, [r4, #31]
}
 8001644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->DMAmuxRequestGen = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800164a:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800164c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800164e:	e7f3      	b.n	8001638 <HAL_DMA_Init+0x8c>
 8001650:	bffdfff8 	.word	0xbffdfff8
 8001654:	ffff800f 	.word	0xffff800f
 8001658:	1000823f 	.word	0x1000823f
 800165c:	40020940 	.word	0x40020940

08001660 <HAL_DMA_Start_IT>:
{
 8001660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8001662:	1d45      	adds	r5, r0, #5
{
 8001664:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8001666:	7fee      	ldrb	r6, [r5, #31]
{
 8001668:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 800166a:	2002      	movs	r0, #2
 800166c:	2e01      	cmp	r6, #1
 800166e:	d033      	beq.n	80016d8 <HAL_DMA_Start_IT+0x78>
 8001670:	3801      	subs	r0, #1
 8001672:	77e8      	strb	r0, [r5, #31]
  if (hdma->State == HAL_DMA_STATE_READY)
 8001674:	1da7      	adds	r7, r4, #6
 8001676:	7ffe      	ldrb	r6, [r7, #31]
 8001678:	46b4      	mov	ip, r6
 800167a:	4663      	mov	r3, ip
 800167c:	b2f6      	uxtb	r6, r6
 800167e:	9600      	str	r6, [sp, #0]
 8001680:	2600      	movs	r6, #0
 8001682:	4283      	cmp	r3, r0
 8001684:	d130      	bne.n	80016e8 <HAL_DMA_Start_IT+0x88>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001686:	3001      	adds	r0, #1
 8001688:	77f8      	strb	r0, [r7, #31]
    __HAL_DMA_DISABLE(hdma);
 800168a:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800168c:	63e6      	str	r6, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 800168e:	6828      	ldr	r0, [r5, #0]
 8001690:	9b00      	ldr	r3, [sp, #0]
 8001692:	4398      	bics	r0, r3
 8001694:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001696:	9b01      	ldr	r3, [sp, #4]
 8001698:	0020      	movs	r0, r4
 800169a:	f7ff ff4d 	bl	8001538 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800169e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80016a0:	42b3      	cmp	r3, r6
 80016a2:	d01a      	beq.n	80016da <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016a4:	230e      	movs	r3, #14
 80016a6:	682a      	ldr	r2, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016a8:	4313      	orrs	r3, r2
 80016aa:	602b      	str	r3, [r5, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80016ac:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	03d2      	lsls	r2, r2, #15
 80016b2:	d504      	bpl.n	80016be <HAL_DMA_Start_IT+0x5e>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80016b4:	2280      	movs	r2, #128	@ 0x80
 80016b6:	6819      	ldr	r1, [r3, #0]
 80016b8:	0052      	lsls	r2, r2, #1
 80016ba:	430a      	orrs	r2, r1
 80016bc:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80016be:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d004      	beq.n	80016ce <HAL_DMA_Start_IT+0x6e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80016c4:	2280      	movs	r2, #128	@ 0x80
 80016c6:	6819      	ldr	r1, [r3, #0]
 80016c8:	0052      	lsls	r2, r2, #1
 80016ca:	430a      	orrs	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80016ce:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 80016d0:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80016d2:	682a      	ldr	r2, [r5, #0]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	602b      	str	r3, [r5, #0]
}
 80016d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016da:	2204      	movs	r2, #4
 80016dc:	682b      	ldr	r3, [r5, #0]
 80016de:	4393      	bics	r3, r2
 80016e0:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016e2:	682a      	ldr	r2, [r5, #0]
 80016e4:	230a      	movs	r3, #10
 80016e6:	e7df      	b.n	80016a8 <HAL_DMA_Start_IT+0x48>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80016e8:	2380      	movs	r3, #128	@ 0x80
 80016ea:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80016ec:	77ee      	strb	r6, [r5, #31]
    status = HAL_ERROR;
 80016ee:	e7f3      	b.n	80016d8 <HAL_DMA_Start_IT+0x78>

080016f0 <HAL_DMA_Abort>:
{
 80016f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (NULL == hdma)
 80016f2:	2800      	cmp	r0, #0
 80016f4:	d008      	beq.n	8001708 <HAL_DMA_Abort+0x18>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80016f6:	1d84      	adds	r4, r0, #6
 80016f8:	7fe3      	ldrb	r3, [r4, #31]
 80016fa:	1d41      	adds	r1, r0, #5
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d005      	beq.n	800170c <HAL_DMA_Abort+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001700:	2304      	movs	r3, #4
 8001702:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8001704:	2300      	movs	r3, #0
 8001706:	77cb      	strb	r3, [r1, #31]
    return HAL_ERROR;
 8001708:	2001      	movs	r0, #1
}
 800170a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800170c:	250e      	movs	r5, #14
 800170e:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001710:	6c46      	ldr	r6, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001712:	6813      	ldr	r3, [r2, #0]
 8001714:	43ab      	bics	r3, r5
 8001716:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001718:	6833      	ldr	r3, [r6, #0]
 800171a:	4d10      	ldr	r5, [pc, #64]	@ (800175c <HAL_DMA_Abort+0x6c>)
 800171c:	402b      	ands	r3, r5
 800171e:	6033      	str	r3, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 8001720:	2301      	movs	r3, #1
 8001722:	6816      	ldr	r6, [r2, #0]
 8001724:	439e      	bics	r6, r3
 8001726:	6016      	str	r6, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001728:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800172a:	331b      	adds	r3, #27
 800172c:	401a      	ands	r2, r3
 800172e:	3b1b      	subs	r3, #27
 8001730:	4093      	lsls	r3, r2
 8001732:	4e0b      	ldr	r6, [pc, #44]	@ (8001760 <HAL_DMA_Abort+0x70>)
 8001734:	6877      	ldr	r7, [r6, #4]
 8001736:	433b      	orrs	r3, r7
 8001738:	6073      	str	r3, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800173a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800173c:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800173e:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8001740:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8001742:	2b00      	cmp	r3, #0
 8001744:	d005      	beq.n	8001752 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	402a      	ands	r2, r5
 800174a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800174c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800174e:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8001750:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001752:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8001754:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001756:	77e3      	strb	r3, [r4, #31]
    __HAL_UNLOCK(hdma);
 8001758:	77c8      	strb	r0, [r1, #31]
  return HAL_OK;
 800175a:	e7d6      	b.n	800170a <HAL_DMA_Abort+0x1a>
 800175c:	fffffeff 	.word	0xfffffeff
 8001760:	40020000 	.word	0x40020000

08001764 <HAL_DMA_Abort_IT>:
{
 8001764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001766:	1d81      	adds	r1, r0, #6
 8001768:	7fcb      	ldrb	r3, [r1, #31]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d003      	beq.n	8001776 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800176e:	2304      	movs	r3, #4
 8001770:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 8001772:	2001      	movs	r0, #1
}
 8001774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001776:	240e      	movs	r4, #14
 8001778:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800177a:	271c      	movs	r7, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800177c:	6813      	ldr	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800177e:	6c45      	ldr	r5, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001780:	43a3      	bics	r3, r4
 8001782:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001784:	2301      	movs	r3, #1
 8001786:	6814      	ldr	r4, [r2, #0]
 8001788:	439c      	bics	r4, r3
 800178a:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800178c:	682a      	ldr	r2, [r5, #0]
 800178e:	4c10      	ldr	r4, [pc, #64]	@ (80017d0 <HAL_DMA_Abort_IT+0x6c>)
 8001790:	4022      	ands	r2, r4
 8001792:	602a      	str	r2, [r5, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001794:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001796:	4d0f      	ldr	r5, [pc, #60]	@ (80017d4 <HAL_DMA_Abort_IT+0x70>)
 8001798:	403a      	ands	r2, r7
 800179a:	4093      	lsls	r3, r2
 800179c:	686e      	ldr	r6, [r5, #4]
 800179e:	4333      	orrs	r3, r6
 80017a0:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017a2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80017a4:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80017a6:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80017a8:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d005      	beq.n	80017ba <HAL_DMA_Abort_IT+0x56>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4022      	ands	r2, r4
 80017b2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017b4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80017b6:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80017b8:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80017ba:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 80017bc:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_READY;
 80017be:	77cb      	strb	r3, [r1, #31]
    __HAL_UNLOCK(hdma);
 80017c0:	1d43      	adds	r3, r0, #5
 80017c2:	77da      	strb	r2, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 80017c4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d000      	beq.n	80017cc <HAL_DMA_Abort_IT+0x68>
      hdma->XferAbortCallback(hdma);
 80017ca:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80017cc:	2000      	movs	r0, #0
 80017ce:	e7d1      	b.n	8001774 <HAL_DMA_Abort_IT+0x10>
 80017d0:	fffffeff 	.word	0xfffffeff
 80017d4:	40020000 	.word	0x40020000

080017d8 <HAL_DMA_IRQHandler>:
{
 80017d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80017da:	241c      	movs	r4, #28
 80017dc:	2704      	movs	r7, #4
 80017de:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t flag_it = DMA1->ISR;
 80017e0:	4a26      	ldr	r2, [pc, #152]	@ (800187c <HAL_DMA_IRQHandler+0xa4>)
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80017e2:	4021      	ands	r1, r4
 80017e4:	003c      	movs	r4, r7
 80017e6:	408c      	lsls	r4, r1
  uint32_t flag_it = DMA1->ISR;
 80017e8:	6816      	ldr	r6, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80017ea:	6803      	ldr	r3, [r0, #0]
 80017ec:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80017ee:	4226      	tst	r6, r4
 80017f0:	d00f      	beq.n	8001812 <HAL_DMA_IRQHandler+0x3a>
 80017f2:	423d      	tst	r5, r7
 80017f4:	d00d      	beq.n	8001812 <HAL_DMA_IRQHandler+0x3a>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017f6:	6819      	ldr	r1, [r3, #0]
 80017f8:	0689      	lsls	r1, r1, #26
 80017fa:	d402      	bmi.n	8001802 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017fc:	6819      	ldr	r1, [r3, #0]
 80017fe:	43b9      	bics	r1, r7
 8001800:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001802:	6853      	ldr	r3, [r2, #4]
 8001804:	431c      	orrs	r4, r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001806:	6b03      	ldr	r3, [r0, #48]	@ 0x30
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001808:	6054      	str	r4, [r2, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 800180a:	2b00      	cmp	r3, #0
 800180c:	d01b      	beq.n	8001846 <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 800180e:	4798      	blx	r3
  return;
 8001810:	e019      	b.n	8001846 <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001812:	2702      	movs	r7, #2
 8001814:	003c      	movs	r4, r7
 8001816:	408c      	lsls	r4, r1
 8001818:	4226      	tst	r6, r4
 800181a:	d015      	beq.n	8001848 <HAL_DMA_IRQHandler+0x70>
 800181c:	423d      	tst	r5, r7
 800181e:	d013      	beq.n	8001848 <HAL_DMA_IRQHandler+0x70>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001820:	6819      	ldr	r1, [r3, #0]
 8001822:	0689      	lsls	r1, r1, #26
 8001824:	d406      	bmi.n	8001834 <HAL_DMA_IRQHandler+0x5c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001826:	250a      	movs	r5, #10
 8001828:	6819      	ldr	r1, [r3, #0]
 800182a:	43a9      	bics	r1, r5
 800182c:	6019      	str	r1, [r3, #0]
        hdma->State = HAL_DMA_STATE_READY;
 800182e:	2101      	movs	r1, #1
 8001830:	1d83      	adds	r3, r0, #6
 8001832:	77d9      	strb	r1, [r3, #31]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001834:	6853      	ldr	r3, [r2, #4]
 8001836:	431c      	orrs	r4, r3
 8001838:	6054      	str	r4, [r2, #4]
      __HAL_UNLOCK(hdma);
 800183a:	2200      	movs	r2, #0
 800183c:	1d43      	adds	r3, r0, #5
 800183e:	77da      	strb	r2, [r3, #31]
      if (hdma->XferCpltCallback != NULL)
 8001840:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001842:	4293      	cmp	r3, r2
 8001844:	d1e3      	bne.n	800180e <HAL_DMA_IRQHandler+0x36>
}
 8001846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001848:	2408      	movs	r4, #8
 800184a:	0027      	movs	r7, r4
 800184c:	408f      	lsls	r7, r1
 800184e:	423e      	tst	r6, r7
 8001850:	d0f9      	beq.n	8001846 <HAL_DMA_IRQHandler+0x6e>
 8001852:	4225      	tst	r5, r4
 8001854:	d0f7      	beq.n	8001846 <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001856:	250e      	movs	r5, #14
 8001858:	681c      	ldr	r4, [r3, #0]
 800185a:	43ac      	bics	r4, r5
 800185c:	601c      	str	r4, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800185e:	2301      	movs	r3, #1
 8001860:	001d      	movs	r5, r3
 8001862:	408d      	lsls	r5, r1
 8001864:	0029      	movs	r1, r5
 8001866:	6854      	ldr	r4, [r2, #4]
 8001868:	4321      	orrs	r1, r4
 800186a:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800186c:	1d82      	adds	r2, r0, #6
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800186e:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001870:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8001872:	2200      	movs	r2, #0
 8001874:	1d43      	adds	r3, r0, #5
 8001876:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8001878:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800187a:	e7e2      	b.n	8001842 <HAL_DMA_IRQHandler+0x6a>
 800187c:	40020000 	.word	0x40020000

08001880 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8001880:	2300      	movs	r3, #0
{
 8001882:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001884:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001886:	680a      	ldr	r2, [r1, #0]
 8001888:	0014      	movs	r4, r2
 800188a:	40dc      	lsrs	r4, r3
 800188c:	d101      	bne.n	8001892 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 800188e:	b005      	add	sp, #20
 8001890:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001892:	2501      	movs	r5, #1
 8001894:	0014      	movs	r4, r2
 8001896:	409d      	lsls	r5, r3
 8001898:	402c      	ands	r4, r5
 800189a:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 800189c:	422a      	tst	r2, r5
 800189e:	d100      	bne.n	80018a2 <HAL_GPIO_Init+0x22>
 80018a0:	e091      	b.n	80019c6 <HAL_GPIO_Init+0x146>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018a2:	684a      	ldr	r2, [r1, #4]
 80018a4:	005f      	lsls	r7, r3, #1
 80018a6:	4694      	mov	ip, r2
 80018a8:	2203      	movs	r2, #3
 80018aa:	4664      	mov	r4, ip
 80018ac:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018ae:	2403      	movs	r4, #3
 80018b0:	40bc      	lsls	r4, r7
 80018b2:	43e4      	mvns	r4, r4
 80018b4:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018b6:	1e54      	subs	r4, r2, #1
 80018b8:	2c01      	cmp	r4, #1
 80018ba:	d82e      	bhi.n	800191a <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 80018bc:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018be:	9c01      	ldr	r4, [sp, #4]
 80018c0:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018c2:	68cc      	ldr	r4, [r1, #12]
 80018c4:	40bc      	lsls	r4, r7
 80018c6:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80018c8:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80018ca:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018cc:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ce:	43ac      	bics	r4, r5
 80018d0:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018d2:	4664      	mov	r4, ip
 80018d4:	0924      	lsrs	r4, r4, #4
 80018d6:	4034      	ands	r4, r6
 80018d8:	409c      	lsls	r4, r3
 80018da:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80018dc:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 80018de:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80018e0:	9c01      	ldr	r4, [sp, #4]
 80018e2:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018e4:	688c      	ldr	r4, [r1, #8]
 80018e6:	40bc      	lsls	r4, r7
 80018e8:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80018ea:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ec:	2a02      	cmp	r2, #2
 80018ee:	d116      	bne.n	800191e <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018f0:	2507      	movs	r5, #7
 80018f2:	260f      	movs	r6, #15
 80018f4:	401d      	ands	r5, r3
 80018f6:	00ad      	lsls	r5, r5, #2
 80018f8:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 80018fa:	08dc      	lsrs	r4, r3, #3
 80018fc:	00a4      	lsls	r4, r4, #2
 80018fe:	1904      	adds	r4, r0, r4
 8001900:	9402      	str	r4, [sp, #8]
 8001902:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001904:	9603      	str	r6, [sp, #12]
 8001906:	0026      	movs	r6, r4
 8001908:	9c03      	ldr	r4, [sp, #12]
 800190a:	43a6      	bics	r6, r4
 800190c:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800190e:	690e      	ldr	r6, [r1, #16]
 8001910:	40ae      	lsls	r6, r5
 8001912:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8001914:	9c02      	ldr	r4, [sp, #8]
 8001916:	6226      	str	r6, [r4, #32]
 8001918:	e001      	b.n	800191e <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800191a:	2a03      	cmp	r2, #3
 800191c:	d1df      	bne.n	80018de <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800191e:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8001920:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001922:	9d01      	ldr	r5, [sp, #4]
 8001924:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001926:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001928:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 800192a:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800192c:	4662      	mov	r2, ip
 800192e:	02a4      	lsls	r4, r4, #10
 8001930:	4222      	tst	r2, r4
 8001932:	d048      	beq.n	80019c6 <HAL_GPIO_Init+0x146>
        temp = EXTI->EXTICR[position >> 2u];
 8001934:	4a25      	ldr	r2, [pc, #148]	@ (80019cc <HAL_GPIO_Init+0x14c>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001936:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 8001938:	089c      	lsrs	r4, r3, #2
 800193a:	00a4      	lsls	r4, r4, #2
 800193c:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800193e:	220f      	movs	r2, #15
 8001940:	401d      	ands	r5, r3
 8001942:	00ed      	lsls	r5, r5, #3
 8001944:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001946:	27a0      	movs	r7, #160	@ 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 8001948:	6e26      	ldr	r6, [r4, #96]	@ 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800194a:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800194c:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800194e:	2200      	movs	r2, #0
 8001950:	42b8      	cmp	r0, r7
 8001952:	d00c      	beq.n	800196e <HAL_GPIO_Init+0xee>
 8001954:	4f1e      	ldr	r7, [pc, #120]	@ (80019d0 <HAL_GPIO_Init+0x150>)
 8001956:	3201      	adds	r2, #1
 8001958:	42b8      	cmp	r0, r7
 800195a:	d008      	beq.n	800196e <HAL_GPIO_Init+0xee>
 800195c:	4f1d      	ldr	r7, [pc, #116]	@ (80019d4 <HAL_GPIO_Init+0x154>)
 800195e:	3201      	adds	r2, #1
 8001960:	42b8      	cmp	r0, r7
 8001962:	d004      	beq.n	800196e <HAL_GPIO_Init+0xee>
 8001964:	4f1c      	ldr	r7, [pc, #112]	@ (80019d8 <HAL_GPIO_Init+0x158>)
 8001966:	3203      	adds	r2, #3
 8001968:	42b8      	cmp	r0, r7
 800196a:	d100      	bne.n	800196e <HAL_GPIO_Init+0xee>
 800196c:	3a02      	subs	r2, #2
 800196e:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001970:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001972:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 8001974:	6622      	str	r2, [r4, #96]	@ 0x60
        temp = EXTI->RTSR1;
 8001976:	4c15      	ldr	r4, [pc, #84]	@ (80019cc <HAL_GPIO_Init+0x14c>)
        temp &= ~(iocurrent);
 8001978:	9a00      	ldr	r2, [sp, #0]
        temp = EXTI->RTSR1;
 800197a:	6826      	ldr	r6, [r4, #0]
          temp |= iocurrent;
 800197c:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 800197e:	43d2      	mvns	r2, r2
          temp |= iocurrent;
 8001980:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001982:	02ff      	lsls	r7, r7, #11
 8001984:	d401      	bmi.n	800198a <HAL_GPIO_Init+0x10a>
        temp &= ~(iocurrent);
 8001986:	0035      	movs	r5, r6
 8001988:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800198a:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 800198c:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 800198e:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 8001990:	9d00      	ldr	r5, [sp, #0]
 8001992:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001994:	02bf      	lsls	r7, r7, #10
 8001996:	d401      	bmi.n	800199c <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 8001998:	0035      	movs	r5, r6
 800199a:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800199c:	4667      	mov	r7, ip
        EXTI->FTSR1 = temp;
 800199e:	6065      	str	r5, [r4, #4]
        temp = EXTI->EMR1;
 80019a0:	4c0e      	ldr	r4, [pc, #56]	@ (80019dc <HAL_GPIO_Init+0x15c>)
          temp |= iocurrent;
 80019a2:	9d00      	ldr	r5, [sp, #0]
        temp = EXTI->EMR1;
 80019a4:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 80019a6:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019a8:	03bf      	lsls	r7, r7, #14
 80019aa:	d401      	bmi.n	80019b0 <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 80019ac:	0035      	movs	r5, r6
 80019ae:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019b0:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 80019b2:	67e5      	str	r5, [r4, #124]	@ 0x7c
        temp = EXTI->IMR1;
 80019b4:	4c0a      	ldr	r4, [pc, #40]	@ (80019e0 <HAL_GPIO_Init+0x160>)
          temp |= iocurrent;
 80019b6:	9e00      	ldr	r6, [sp, #0]
        temp = EXTI->IMR1;
 80019b8:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 80019ba:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019bc:	03ff      	lsls	r7, r7, #15
 80019be:	d401      	bmi.n	80019c4 <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 80019c0:	4015      	ands	r5, r2
 80019c2:	002e      	movs	r6, r5
        EXTI->IMR1 = temp;
 80019c4:	67e6      	str	r6, [r4, #124]	@ 0x7c
    position++;
 80019c6:	3301      	adds	r3, #1
 80019c8:	e75d      	b.n	8001886 <HAL_GPIO_Init+0x6>
 80019ca:	46c0      	nop			@ (mov r8, r8)
 80019cc:	40021800 	.word	0x40021800
 80019d0:	50000400 	.word	0x50000400
 80019d4:	50000800 	.word	0x50000800
 80019d8:	50000c00 	.word	0x50000c00
 80019dc:	40021808 	.word	0x40021808
 80019e0:	40021804 	.word	0x40021804

080019e4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80019e4:	6900      	ldr	r0, [r0, #16]
 80019e6:	4008      	ands	r0, r1
 80019e8:	1e43      	subs	r3, r0, #1
 80019ea:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80019ec:	b2c0      	uxtb	r0, r0
}
 80019ee:	4770      	bx	lr

080019f0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019f0:	2a00      	cmp	r2, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019f4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019f6:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019f8:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80019fa:	e7fc      	b.n	80019f6 <HAL_GPIO_WritePin+0x6>

080019fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019fc:	b570      	push	{r4, r5, r6, lr}
 80019fe:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 8001a00:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8001a02:	2c00      	cmp	r4, #0
 8001a04:	d04e      	beq.n	8001aa4 <HAL_I2C_Init+0xa8>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a06:	0025      	movs	r5, r4
 8001a08:	3541      	adds	r5, #65	@ 0x41
 8001a0a:	782b      	ldrb	r3, [r5, #0]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d105      	bne.n	8001a1e <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a12:	0023      	movs	r3, r4
 8001a14:	3340      	adds	r3, #64	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a16:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8001a18:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8001a1a:	f7ff fb95 	bl	8001148 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a1e:	2324      	movs	r3, #36	@ 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a20:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a22:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8001a24:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a26:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8001a28:	681a      	ldr	r2, [r3, #0]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a2a:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8001a2c:	438a      	bics	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a30:	491d      	ldr	r1, [pc, #116]	@ (8001aa8 <HAL_I2C_Init+0xac>)
 8001a32:	6862      	ldr	r2, [r4, #4]
 8001a34:	400a      	ands	r2, r1
 8001a36:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	491c      	ldr	r1, [pc, #112]	@ (8001aac <HAL_I2C_Init+0xb0>)
 8001a3c:	400a      	ands	r2, r1
 8001a3e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a40:	2801      	cmp	r0, #1
 8001a42:	d107      	bne.n	8001a54 <HAL_I2C_Init+0x58>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a44:	2280      	movs	r2, #128	@ 0x80
 8001a46:	0212      	lsls	r2, r2, #8
 8001a48:	4332      	orrs	r2, r6
 8001a4a:	609a      	str	r2, [r3, #8]
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	4818      	ldr	r0, [pc, #96]	@ (8001ab0 <HAL_I2C_Init+0xb4>)
 8001a50:	4002      	ands	r2, r0
 8001a52:	e009      	b.n	8001a68 <HAL_I2C_Init+0x6c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a54:	2284      	movs	r2, #132	@ 0x84
 8001a56:	0212      	lsls	r2, r2, #8
 8001a58:	4332      	orrs	r2, r6
 8001a5a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a5c:	2802      	cmp	r0, #2
 8001a5e:	d1f5      	bne.n	8001a4c <HAL_I2C_Init+0x50>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a60:	2280      	movs	r2, #128	@ 0x80
 8001a62:	6858      	ldr	r0, [r3, #4]
 8001a64:	0112      	lsls	r2, r2, #4
 8001a66:	4302      	orrs	r2, r0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a6a:	6858      	ldr	r0, [r3, #4]
 8001a6c:	4a11      	ldr	r2, [pc, #68]	@ (8001ab4 <HAL_I2C_Init+0xb8>)
 8001a6e:	4302      	orrs	r2, r0
 8001a70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a72:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a74:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a76:	400a      	ands	r2, r1
 8001a78:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a7a:	6961      	ldr	r1, [r4, #20]
 8001a7c:	6922      	ldr	r2, [r4, #16]
 8001a7e:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a80:	69a1      	ldr	r1, [r4, #24]
 8001a82:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a84:	430a      	orrs	r2, r1
 8001a86:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a88:	6a21      	ldr	r1, [r4, #32]
 8001a8a:	69e2      	ldr	r2, [r4, #28]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001a90:	2201      	movs	r2, #1
 8001a92:	6819      	ldr	r1, [r3, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001a98:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a9a:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a9c:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a9e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa0:	3442      	adds	r4, #66	@ 0x42
 8001aa2:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001aa4:	bd70      	pop	{r4, r5, r6, pc}
 8001aa6:	46c0      	nop			@ (mov r8, r8)
 8001aa8:	f0ffffff 	.word	0xf0ffffff
 8001aac:	ffff7fff 	.word	0xffff7fff
 8001ab0:	fffff7ff 	.word	0xfffff7ff
 8001ab4:	02008000 	.word	0x02008000

08001ab8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aba:	0004      	movs	r4, r0
 8001abc:	3441      	adds	r4, #65	@ 0x41
 8001abe:	7822      	ldrb	r2, [r4, #0]
{
 8001ac0:	0003      	movs	r3, r0
 8001ac2:	000f      	movs	r7, r1
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ac6:	b2d6      	uxtb	r6, r2
 8001ac8:	2a20      	cmp	r2, #32
 8001aca:	d118      	bne.n	8001afe <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8001acc:	001d      	movs	r5, r3
 8001ace:	3540      	adds	r5, #64	@ 0x40
 8001ad0:	782a      	ldrb	r2, [r5, #0]
 8001ad2:	2a01      	cmp	r2, #1
 8001ad4:	d013      	beq.n	8001afe <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ad6:	2224      	movs	r2, #36	@ 0x24
 8001ad8:	7022      	strb	r2, [r4, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	3a23      	subs	r2, #35	@ 0x23
 8001ade:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ae0:	4807      	ldr	r0, [pc, #28]	@ (8001b00 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8001ae2:	4391      	bics	r1, r2
 8001ae4:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ae6:	6819      	ldr	r1, [r3, #0]
 8001ae8:	4001      	ands	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aea:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001aec:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001aee:	6819      	ldr	r1, [r3, #0]
 8001af0:	4339      	orrs	r1, r7
 8001af2:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001af4:	6819      	ldr	r1, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001afa:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8001afc:	7028      	strb	r0, [r5, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b00:	ffffefff 	.word	0xffffefff

08001b04 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b04:	0002      	movs	r2, r0
{
 8001b06:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b08:	3241      	adds	r2, #65	@ 0x41
 8001b0a:	7814      	ldrb	r4, [r2, #0]
{
 8001b0c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b0e:	b2e5      	uxtb	r5, r4
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b10:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b12:	2c20      	cmp	r4, #32
 8001b14:	d117      	bne.n	8001b46 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8001b16:	001c      	movs	r4, r3
 8001b18:	3440      	adds	r4, #64	@ 0x40
 8001b1a:	7826      	ldrb	r6, [r4, #0]
 8001b1c:	2e01      	cmp	r6, #1
 8001b1e:	d012      	beq.n	8001b46 <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b20:	3022      	adds	r0, #34	@ 0x22
 8001b22:	7010      	strb	r0, [r2, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	3823      	subs	r0, #35	@ 0x23
 8001b28:	681e      	ldr	r6, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b2a:	4f07      	ldr	r7, [pc, #28]	@ (8001b48 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8001b2c:	4386      	bics	r6, r0
 8001b2e:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8001b30:	681e      	ldr	r6, [r3, #0]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b32:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8001b34:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8001b36:	4331      	orrs	r1, r6

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b38:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b3a:	6819      	ldr	r1, [r3, #0]
 8001b3c:	4308      	orrs	r0, r1
 8001b3e:	6018      	str	r0, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b40:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001b42:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8001b44:	7020      	strb	r0, [r4, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b48:	fffff0ff 	.word	0xfffff0ff

08001b4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b4c:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001b4e:	4c11      	ldr	r4, [pc, #68]	@ (8001b94 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8001b50:	4911      	ldr	r1, [pc, #68]	@ (8001b98 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8001b52:	6823      	ldr	r3, [r4, #0]
{
 8001b54:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001b56:	400b      	ands	r3, r1
 8001b58:	4303      	orrs	r3, r0
 8001b5a:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b5c:	2380      	movs	r3, #128	@ 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001b5e:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d10e      	bne.n	8001b84 <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001b66:	4b0d      	ldr	r3, [pc, #52]	@ (8001b9c <HAL_PWREx_ControlVoltageScaling+0x50>)
 8001b68:	490d      	ldr	r1, [pc, #52]	@ (8001ba0 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	2306      	movs	r3, #6
 8001b6e:	4358      	muls	r0, r3
 8001b70:	f7fe faf6 	bl	8000160 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b74:	2280      	movs	r2, #128	@ 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001b76:	1c43      	adds	r3, r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b78:	00d2      	lsls	r2, r2, #3
 8001b7a:	6961      	ldr	r1, [r4, #20]
 8001b7c:	0008      	movs	r0, r1
 8001b7e:	4010      	ands	r0, r2
 8001b80:	4211      	tst	r1, r2
 8001b82:	d100      	bne.n	8001b86 <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 8001b84:	bd10      	pop	{r4, pc}
      if (wait_loop_index != 0U)
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	e7f5      	b.n	8001b7a <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 8001b8e:	2003      	movs	r0, #3
 8001b90:	e7f8      	b.n	8001b84 <HAL_PWREx_ControlVoltageScaling+0x38>
 8001b92:	46c0      	nop			@ (mov r8, r8)
 8001b94:	40007000 	.word	0x40007000
 8001b98:	fffff9ff 	.word	0xfffff9ff
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	000f4240 	.word	0x000f4240

08001ba4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ba6:	0004      	movs	r4, r0
 8001ba8:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001baa:	2800      	cmp	r0, #0
 8001bac:	d102      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001bae:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8001bb0:	b005      	add	sp, #20
 8001bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb4:	6803      	ldr	r3, [r0, #0]
 8001bb6:	07db      	lsls	r3, r3, #31
 8001bb8:	d410      	bmi.n	8001bdc <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bba:	6823      	ldr	r3, [r4, #0]
 8001bbc:	079b      	lsls	r3, r3, #30
 8001bbe:	d45c      	bmi.n	8001c7a <HAL_RCC_OscConfig+0xd6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bc0:	6823      	ldr	r3, [r4, #0]
 8001bc2:	071b      	lsls	r3, r3, #28
 8001bc4:	d500      	bpl.n	8001bc8 <HAL_RCC_OscConfig+0x24>
 8001bc6:	e0c1      	b.n	8001d4c <HAL_RCC_OscConfig+0x1a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc8:	6823      	ldr	r3, [r4, #0]
 8001bca:	075b      	lsls	r3, r3, #29
 8001bcc:	d500      	bpl.n	8001bd0 <HAL_RCC_OscConfig+0x2c>
 8001bce:	e0f2      	b.n	8001db6 <HAL_RCC_OscConfig+0x212>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bd0:	69e3      	ldr	r3, [r4, #28]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d000      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x34>
 8001bd6:	e179      	b.n	8001ecc <HAL_RCC_OscConfig+0x328>
  return HAL_OK;
 8001bd8:	2000      	movs	r0, #0
 8001bda:	e7e9      	b.n	8001bb0 <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bdc:	2238      	movs	r2, #56	@ 0x38
 8001bde:	4daf      	ldr	r5, [pc, #700]	@ (8001e9c <HAL_RCC_OscConfig+0x2f8>)
 8001be0:	68ab      	ldr	r3, [r5, #8]
 8001be2:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001be4:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001be6:	2b10      	cmp	r3, #16
 8001be8:	d109      	bne.n	8001bfe <HAL_RCC_OscConfig+0x5a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bea:	43d3      	mvns	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001bec:	079b      	lsls	r3, r3, #30
 8001bee:	d108      	bne.n	8001c02 <HAL_RCC_OscConfig+0x5e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf0:	682b      	ldr	r3, [r5, #0]
 8001bf2:	039b      	lsls	r3, r3, #14
 8001bf4:	d5e1      	bpl.n	8001bba <HAL_RCC_OscConfig+0x16>
 8001bf6:	6863      	ldr	r3, [r4, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1de      	bne.n	8001bba <HAL_RCC_OscConfig+0x16>
 8001bfc:	e7d7      	b.n	8001bae <HAL_RCC_OscConfig+0xa>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d0f6      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	6863      	ldr	r3, [r4, #4]
 8001c06:	0252      	lsls	r2, r2, #9
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d111      	bne.n	8001c30 <HAL_RCC_OscConfig+0x8c>
 8001c0c:	682a      	ldr	r2, [r5, #0]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001c12:	f7ff fc29 	bl	8001468 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c16:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001c18:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c1a:	02bf      	lsls	r7, r7, #10
 8001c1c:	682b      	ldr	r3, [r5, #0]
 8001c1e:	423b      	tst	r3, r7
 8001c20:	d1cb      	bne.n	8001bba <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c22:	f7ff fc21 	bl	8001468 <HAL_GetTick>
 8001c26:	1b80      	subs	r0, r0, r6
 8001c28:	2864      	cmp	r0, #100	@ 0x64
 8001c2a:	d9f7      	bls.n	8001c1c <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	e7bf      	b.n	8001bb0 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c30:	21a0      	movs	r1, #160	@ 0xa0
 8001c32:	02c9      	lsls	r1, r1, #11
 8001c34:	428b      	cmp	r3, r1
 8001c36:	d108      	bne.n	8001c4a <HAL_RCC_OscConfig+0xa6>
 8001c38:	2380      	movs	r3, #128	@ 0x80
 8001c3a:	6829      	ldr	r1, [r5, #0]
 8001c3c:	02db      	lsls	r3, r3, #11
 8001c3e:	430b      	orrs	r3, r1
 8001c40:	602b      	str	r3, [r5, #0]
 8001c42:	682b      	ldr	r3, [r5, #0]
 8001c44:	431a      	orrs	r2, r3
 8001c46:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c48:	e7e3      	b.n	8001c12 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c4a:	682a      	ldr	r2, [r5, #0]
 8001c4c:	4994      	ldr	r1, [pc, #592]	@ (8001ea0 <HAL_RCC_OscConfig+0x2fc>)
 8001c4e:	400a      	ands	r2, r1
 8001c50:	602a      	str	r2, [r5, #0]
 8001c52:	682a      	ldr	r2, [r5, #0]
 8001c54:	4993      	ldr	r1, [pc, #588]	@ (8001ea4 <HAL_RCC_OscConfig+0x300>)
 8001c56:	400a      	ands	r2, r1
 8001c58:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1d9      	bne.n	8001c12 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8001c5e:	f7ff fc03 	bl	8001468 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c62:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001c64:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c66:	02bf      	lsls	r7, r7, #10
 8001c68:	682b      	ldr	r3, [r5, #0]
 8001c6a:	423b      	tst	r3, r7
 8001c6c:	d0a5      	beq.n	8001bba <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c6e:	f7ff fbfb 	bl	8001468 <HAL_GetTick>
 8001c72:	1b80      	subs	r0, r0, r6
 8001c74:	2864      	cmp	r0, #100	@ 0x64
 8001c76:	d9f7      	bls.n	8001c68 <HAL_RCC_OscConfig+0xc4>
 8001c78:	e7d8      	b.n	8001c2c <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c7a:	2238      	movs	r2, #56	@ 0x38
 8001c7c:	4d87      	ldr	r5, [pc, #540]	@ (8001e9c <HAL_RCC_OscConfig+0x2f8>)
 8001c7e:	68ab      	ldr	r3, [r5, #8]
 8001c80:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c82:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001c84:	2b10      	cmp	r3, #16
 8001c86:	d128      	bne.n	8001cda <HAL_RCC_OscConfig+0x136>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c88:	2103      	movs	r1, #3
 8001c8a:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001c8c:	2a02      	cmp	r2, #2
 8001c8e:	d126      	bne.n	8001cde <HAL_RCC_OscConfig+0x13a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c90:	682a      	ldr	r2, [r5, #0]
 8001c92:	0552      	lsls	r2, r2, #21
 8001c94:	d503      	bpl.n	8001c9e <HAL_RCC_OscConfig+0xfa>
 8001c96:	68e2      	ldr	r2, [r4, #12]
 8001c98:	2a00      	cmp	r2, #0
 8001c9a:	d100      	bne.n	8001c9e <HAL_RCC_OscConfig+0xfa>
 8001c9c:	e787      	b.n	8001bae <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9e:	6869      	ldr	r1, [r5, #4]
 8001ca0:	6962      	ldr	r2, [r4, #20]
 8001ca2:	4881      	ldr	r0, [pc, #516]	@ (8001ea8 <HAL_RCC_OscConfig+0x304>)
 8001ca4:	0212      	lsls	r2, r2, #8
 8001ca6:	4001      	ands	r1, r0
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10c      	bne.n	8001cca <HAL_RCC_OscConfig+0x126>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001cb0:	682b      	ldr	r3, [r5, #0]
 8001cb2:	4a7e      	ldr	r2, [pc, #504]	@ (8001eac <HAL_RCC_OscConfig+0x308>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001cb4:	497e      	ldr	r1, [pc, #504]	@ (8001eb0 <HAL_RCC_OscConfig+0x30c>)
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	6922      	ldr	r2, [r4, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001cbe:	682b      	ldr	r3, [r5, #0]
 8001cc0:	4a7c      	ldr	r2, [pc, #496]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001cc2:	049b      	lsls	r3, r3, #18
 8001cc4:	0f5b      	lsrs	r3, r3, #29
 8001cc6:	40da      	lsrs	r2, r3
 8001cc8:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cca:	4b7b      	ldr	r3, [pc, #492]	@ (8001eb8 <HAL_RCC_OscConfig+0x314>)
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	f7ff fb83 	bl	80013d8 <HAL_InitTick>
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	d100      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x134>
 8001cd6:	e773      	b.n	8001bc0 <HAL_RCC_OscConfig+0x1c>
 8001cd8:	e769      	b.n	8001bae <HAL_RCC_OscConfig+0xa>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0d8      	beq.n	8001c90 <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cde:	68e3      	ldr	r3, [r4, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d020      	beq.n	8001d26 <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ce4:	682b      	ldr	r3, [r5, #0]
 8001ce6:	4a71      	ldr	r2, [pc, #452]	@ (8001eac <HAL_RCC_OscConfig+0x308>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce8:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001cea:	4013      	ands	r3, r2
 8001cec:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cee:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8001cf4:	2380      	movs	r3, #128	@ 0x80
 8001cf6:	682a      	ldr	r2, [r5, #0]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001cfe:	f7ff fbb3 	bl	8001468 <HAL_GetTick>
 8001d02:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d04:	682b      	ldr	r3, [r5, #0]
 8001d06:	423b      	tst	r3, r7
 8001d08:	d007      	beq.n	8001d1a <HAL_RCC_OscConfig+0x176>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0a:	686a      	ldr	r2, [r5, #4]
 8001d0c:	6963      	ldr	r3, [r4, #20]
 8001d0e:	4966      	ldr	r1, [pc, #408]	@ (8001ea8 <HAL_RCC_OscConfig+0x304>)
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	400a      	ands	r2, r1
 8001d14:	4313      	orrs	r3, r2
 8001d16:	606b      	str	r3, [r5, #4]
 8001d18:	e752      	b.n	8001bc0 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1a:	f7ff fba5 	bl	8001468 <HAL_GetTick>
 8001d1e:	1b80      	subs	r0, r0, r6
 8001d20:	2802      	cmp	r0, #2
 8001d22:	d9ef      	bls.n	8001d04 <HAL_RCC_OscConfig+0x160>
 8001d24:	e782      	b.n	8001c2c <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8001d26:	682b      	ldr	r3, [r5, #0]
 8001d28:	4a64      	ldr	r2, [pc, #400]	@ (8001ebc <HAL_RCC_OscConfig+0x318>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d2a:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d30:	f7ff fb9a 	bl	8001468 <HAL_GetTick>
 8001d34:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d36:	00ff      	lsls	r7, r7, #3
 8001d38:	682b      	ldr	r3, [r5, #0]
 8001d3a:	423b      	tst	r3, r7
 8001d3c:	d100      	bne.n	8001d40 <HAL_RCC_OscConfig+0x19c>
 8001d3e:	e73f      	b.n	8001bc0 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d40:	f7ff fb92 	bl	8001468 <HAL_GetTick>
 8001d44:	1b80      	subs	r0, r0, r6
 8001d46:	2802      	cmp	r0, #2
 8001d48:	d9f6      	bls.n	8001d38 <HAL_RCC_OscConfig+0x194>
 8001d4a:	e76f      	b.n	8001c2c <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d4c:	2238      	movs	r2, #56	@ 0x38
 8001d4e:	4d53      	ldr	r5, [pc, #332]	@ (8001e9c <HAL_RCC_OscConfig+0x2f8>)
 8001d50:	68ab      	ldr	r3, [r5, #8]
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b18      	cmp	r3, #24
 8001d56:	d108      	bne.n	8001d6a <HAL_RCC_OscConfig+0x1c6>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001d58:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8001d5a:	079b      	lsls	r3, r3, #30
 8001d5c:	d400      	bmi.n	8001d60 <HAL_RCC_OscConfig+0x1bc>
 8001d5e:	e733      	b.n	8001bc8 <HAL_RCC_OscConfig+0x24>
 8001d60:	69a3      	ldr	r3, [r4, #24]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d000      	beq.n	8001d68 <HAL_RCC_OscConfig+0x1c4>
 8001d66:	e72f      	b.n	8001bc8 <HAL_RCC_OscConfig+0x24>
 8001d68:	e721      	b.n	8001bae <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d6a:	69a2      	ldr	r2, [r4, #24]
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	2a00      	cmp	r2, #0
 8001d70:	d010      	beq.n	8001d94 <HAL_RCC_OscConfig+0x1f0>
        __HAL_RCC_LSI_ENABLE();
 8001d72:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d74:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8001d76:	4313      	orrs	r3, r2
 8001d78:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001d7a:	f7ff fb75 	bl	8001468 <HAL_GetTick>
 8001d7e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d80:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8001d82:	423b      	tst	r3, r7
 8001d84:	d000      	beq.n	8001d88 <HAL_RCC_OscConfig+0x1e4>
 8001d86:	e71f      	b.n	8001bc8 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d88:	f7ff fb6e 	bl	8001468 <HAL_GetTick>
 8001d8c:	1b80      	subs	r0, r0, r6
 8001d8e:	2802      	cmp	r0, #2
 8001d90:	d9f6      	bls.n	8001d80 <HAL_RCC_OscConfig+0x1dc>
 8001d92:	e74b      	b.n	8001c2c <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_LSI_DISABLE();
 8001d94:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d96:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8001d98:	439a      	bics	r2, r3
 8001d9a:	662a      	str	r2, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fb64 	bl	8001468 <HAL_GetTick>
 8001da0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001da2:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8001da4:	423b      	tst	r3, r7
 8001da6:	d100      	bne.n	8001daa <HAL_RCC_OscConfig+0x206>
 8001da8:	e70e      	b.n	8001bc8 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001daa:	f7ff fb5d 	bl	8001468 <HAL_GetTick>
 8001dae:	1b80      	subs	r0, r0, r6
 8001db0:	2802      	cmp	r0, #2
 8001db2:	d9f6      	bls.n	8001da2 <HAL_RCC_OscConfig+0x1fe>
 8001db4:	e73a      	b.n	8001c2c <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001db6:	2238      	movs	r2, #56	@ 0x38
 8001db8:	4d38      	ldr	r5, [pc, #224]	@ (8001e9c <HAL_RCC_OscConfig+0x2f8>)
 8001dba:	68ab      	ldr	r3, [r5, #8]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b20      	cmp	r3, #32
 8001dc0:	d108      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x230>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001dc2:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8001dc4:	079b      	lsls	r3, r3, #30
 8001dc6:	d400      	bmi.n	8001dca <HAL_RCC_OscConfig+0x226>
 8001dc8:	e702      	b.n	8001bd0 <HAL_RCC_OscConfig+0x2c>
 8001dca:	68a3      	ldr	r3, [r4, #8]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d000      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x22e>
 8001dd0:	e6fe      	b.n	8001bd0 <HAL_RCC_OscConfig+0x2c>
 8001dd2:	e6ec      	b.n	8001bae <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dd4:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001dd6:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dd8:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8001dda:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 8001ddc:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dde:	4213      	tst	r3, r2
 8001de0:	d108      	bne.n	8001df4 <HAL_RCC_OscConfig+0x250>
        __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8001de4:	4313      	orrs	r3, r2
 8001de6:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8001de8:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8001dea:	4013      	ands	r3, r2
 8001dec:	9303      	str	r3, [sp, #12]
 8001dee:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8001df0:	2301      	movs	r3, #1
 8001df2:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df4:	2780      	movs	r7, #128	@ 0x80
 8001df6:	4e32      	ldr	r6, [pc, #200]	@ (8001ec0 <HAL_RCC_OscConfig+0x31c>)
 8001df8:	007f      	lsls	r7, r7, #1
 8001dfa:	6833      	ldr	r3, [r6, #0]
 8001dfc:	423b      	tst	r3, r7
 8001dfe:	d015      	beq.n	8001e2c <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e00:	68a3      	ldr	r3, [r4, #8]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d122      	bne.n	8001e4c <HAL_RCC_OscConfig+0x2a8>
 8001e06:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	65eb      	str	r3, [r5, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 8001e0c:	f7ff fb2c 	bl	8001468 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e10:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001e12:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e14:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8001e16:	423b      	tst	r3, r7
 8001e18:	d038      	beq.n	8001e8c <HAL_RCC_OscConfig+0x2e8>
      if (pwrclkchanged == SET)
 8001e1a:	9b00      	ldr	r3, [sp, #0]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d000      	beq.n	8001e22 <HAL_RCC_OscConfig+0x27e>
 8001e20:	e6d6      	b.n	8001bd0 <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 8001e22:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8001e24:	4a27      	ldr	r2, [pc, #156]	@ (8001ec4 <HAL_RCC_OscConfig+0x320>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8001e2a:	e6d1      	b.n	8001bd0 <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e2c:	6833      	ldr	r3, [r6, #0]
 8001e2e:	433b      	orrs	r3, r7
 8001e30:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001e32:	f7ff fb19 	bl	8001468 <HAL_GetTick>
 8001e36:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e38:	6833      	ldr	r3, [r6, #0]
 8001e3a:	423b      	tst	r3, r7
 8001e3c:	d1e0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x25c>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3e:	f7ff fb13 	bl	8001468 <HAL_GetTick>
 8001e42:	9b01      	ldr	r3, [sp, #4]
 8001e44:	1ac0      	subs	r0, r0, r3
 8001e46:	2802      	cmp	r0, #2
 8001e48:	d9f6      	bls.n	8001e38 <HAL_RCC_OscConfig+0x294>
 8001e4a:	e6ef      	b.n	8001c2c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e4c:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8001e4e:	2b05      	cmp	r3, #5
 8001e50:	d105      	bne.n	8001e5e <HAL_RCC_OscConfig+0x2ba>
 8001e52:	3b01      	subs	r3, #1
 8001e54:	4313      	orrs	r3, r2
 8001e56:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8001e58:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e7d4      	b.n	8001e08 <HAL_RCC_OscConfig+0x264>
 8001e5e:	2101      	movs	r1, #1
 8001e60:	438a      	bics	r2, r1
 8001e62:	65ea      	str	r2, [r5, #92]	@ 0x5c
 8001e64:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8001e66:	3103      	adds	r1, #3
 8001e68:	438a      	bics	r2, r1
 8001e6a:	65ea      	str	r2, [r5, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1cd      	bne.n	8001e0c <HAL_RCC_OscConfig+0x268>
        tickstart = HAL_GetTick();
 8001e70:	f7ff fafa 	bl	8001468 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e74:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001e76:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e78:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8001e7a:	423b      	tst	r3, r7
 8001e7c:	d0cd      	beq.n	8001e1a <HAL_RCC_OscConfig+0x276>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7e:	f7ff faf3 	bl	8001468 <HAL_GetTick>
 8001e82:	4b11      	ldr	r3, [pc, #68]	@ (8001ec8 <HAL_RCC_OscConfig+0x324>)
 8001e84:	1b80      	subs	r0, r0, r6
 8001e86:	4298      	cmp	r0, r3
 8001e88:	d9f6      	bls.n	8001e78 <HAL_RCC_OscConfig+0x2d4>
 8001e8a:	e6cf      	b.n	8001c2c <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8c:	f7ff faec 	bl	8001468 <HAL_GetTick>
 8001e90:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec8 <HAL_RCC_OscConfig+0x324>)
 8001e92:	1b80      	subs	r0, r0, r6
 8001e94:	4298      	cmp	r0, r3
 8001e96:	d9bd      	bls.n	8001e14 <HAL_RCC_OscConfig+0x270>
 8001e98:	e6c8      	b.n	8001c2c <HAL_RCC_OscConfig+0x88>
 8001e9a:	46c0      	nop			@ (mov r8, r8)
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	fffeffff 	.word	0xfffeffff
 8001ea4:	fffbffff 	.word	0xfffbffff
 8001ea8:	ffff80ff 	.word	0xffff80ff
 8001eac:	ffffc7ff 	.word	0xffffc7ff
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	00f42400 	.word	0x00f42400
 8001eb8:	20000008 	.word	0x20000008
 8001ebc:	fffffeff 	.word	0xfffffeff
 8001ec0:	40007000 	.word	0x40007000
 8001ec4:	efffffff 	.word	0xefffffff
 8001ec8:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ecc:	2138      	movs	r1, #56	@ 0x38
 8001ece:	4d3f      	ldr	r5, [pc, #252]	@ (8001fcc <HAL_RCC_OscConfig+0x428>)
 8001ed0:	68aa      	ldr	r2, [r5, #8]
 8001ed2:	400a      	ands	r2, r1
 8001ed4:	2a10      	cmp	r2, #16
 8001ed6:	d051      	beq.n	8001f7c <HAL_RCC_OscConfig+0x3d8>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ed8:	4a3d      	ldr	r2, [pc, #244]	@ (8001fd0 <HAL_RCC_OscConfig+0x42c>)
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d138      	bne.n	8001f50 <HAL_RCC_OscConfig+0x3ac>
        __HAL_RCC_PLL_DISABLE();
 8001ede:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee0:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ee6:	f7ff fabf 	bl	8001468 <HAL_GetTick>
 8001eea:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eec:	04bf      	lsls	r7, r7, #18
 8001eee:	682b      	ldr	r3, [r5, #0]
 8001ef0:	423b      	tst	r3, r7
 8001ef2:	d127      	bne.n	8001f44 <HAL_RCC_OscConfig+0x3a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001ef6:	6a23      	ldr	r3, [r4, #32]
 8001ef8:	68ea      	ldr	r2, [r5, #12]
 8001efa:	430b      	orrs	r3, r1
 8001efc:	4935      	ldr	r1, [pc, #212]	@ (8001fd4 <HAL_RCC_OscConfig+0x430>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001efe:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f00:	400a      	ands	r2, r1
 8001f02:	4313      	orrs	r3, r2
 8001f04:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f06:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001f10:	0212      	lsls	r2, r2, #8
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8001f16:	2380      	movs	r3, #128	@ 0x80
 8001f18:	682a      	ldr	r2, [r5, #0]
 8001f1a:	045b      	lsls	r3, r3, #17
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f20:	2380      	movs	r3, #128	@ 0x80
 8001f22:	68ea      	ldr	r2, [r5, #12]
 8001f24:	055b      	lsls	r3, r3, #21
 8001f26:	4313      	orrs	r3, r2
 8001f28:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001f2a:	f7ff fa9d 	bl	8001468 <HAL_GetTick>
 8001f2e:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f30:	682b      	ldr	r3, [r5, #0]
 8001f32:	4233      	tst	r3, r6
 8001f34:	d000      	beq.n	8001f38 <HAL_RCC_OscConfig+0x394>
 8001f36:	e64f      	b.n	8001bd8 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f38:	f7ff fa96 	bl	8001468 <HAL_GetTick>
 8001f3c:	1b00      	subs	r0, r0, r4
 8001f3e:	2802      	cmp	r0, #2
 8001f40:	d9f6      	bls.n	8001f30 <HAL_RCC_OscConfig+0x38c>
 8001f42:	e673      	b.n	8001c2c <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f44:	f7ff fa90 	bl	8001468 <HAL_GetTick>
 8001f48:	1b80      	subs	r0, r0, r6
 8001f4a:	2802      	cmp	r0, #2
 8001f4c:	d9cf      	bls.n	8001eee <HAL_RCC_OscConfig+0x34a>
 8001f4e:	e66d      	b.n	8001c2c <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_PLL_DISABLE();
 8001f50:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f52:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001f54:	4013      	ands	r3, r2
 8001f56:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001f58:	f7ff fa86 	bl	8001468 <HAL_GetTick>
 8001f5c:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f5e:	04b6      	lsls	r6, r6, #18
 8001f60:	682b      	ldr	r3, [r5, #0]
 8001f62:	4233      	tst	r3, r6
 8001f64:	d104      	bne.n	8001f70 <HAL_RCC_OscConfig+0x3cc>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001f66:	68eb      	ldr	r3, [r5, #12]
 8001f68:	4a1b      	ldr	r2, [pc, #108]	@ (8001fd8 <HAL_RCC_OscConfig+0x434>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	60eb      	str	r3, [r5, #12]
 8001f6e:	e633      	b.n	8001bd8 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f70:	f7ff fa7a 	bl	8001468 <HAL_GetTick>
 8001f74:	1b00      	subs	r0, r0, r4
 8001f76:	2802      	cmp	r0, #2
 8001f78:	d9f2      	bls.n	8001f60 <HAL_RCC_OscConfig+0x3bc>
 8001f7a:	e657      	b.n	8001c2c <HAL_RCC_OscConfig+0x88>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d100      	bne.n	8001f82 <HAL_RCC_OscConfig+0x3de>
 8001f80:	e615      	b.n	8001bae <HAL_RCC_OscConfig+0xa>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f82:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8001f84:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	6a21      	ldr	r1, [r4, #32]
 8001f88:	4002      	ands	r2, r0
 8001f8a:	428a      	cmp	r2, r1
 8001f8c:	d000      	beq.n	8001f90 <HAL_RCC_OscConfig+0x3ec>
 8001f8e:	e60e      	b.n	8001bae <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f90:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f92:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f94:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f96:	428a      	cmp	r2, r1
 8001f98:	d000      	beq.n	8001f9c <HAL_RCC_OscConfig+0x3f8>
 8001f9a:	e608      	b.n	8001bae <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f9c:	21fe      	movs	r1, #254	@ 0xfe
 8001f9e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001fa0:	01c9      	lsls	r1, r1, #7
 8001fa2:	4001      	ands	r1, r0
 8001fa4:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fa6:	4291      	cmp	r1, r2
 8001fa8:	d000      	beq.n	8001fac <HAL_RCC_OscConfig+0x408>
 8001faa:	e600      	b.n	8001bae <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fac:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fae:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fb0:	0392      	lsls	r2, r2, #14
 8001fb2:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fb4:	428a      	cmp	r2, r1
 8001fb6:	d000      	beq.n	8001fba <HAL_RCC_OscConfig+0x416>
 8001fb8:	e5f9      	b.n	8001bae <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001fbc:	0f40      	lsrs	r0, r0, #29
 8001fbe:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fc0:	1ac0      	subs	r0, r0, r3
 8001fc2:	1e43      	subs	r3, r0, #1
 8001fc4:	4198      	sbcs	r0, r3
 8001fc6:	b2c0      	uxtb	r0, r0
 8001fc8:	e5f2      	b.n	8001bb0 <HAL_RCC_OscConfig+0xc>
 8001fca:	46c0      	nop			@ (mov r8, r8)
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	feffffff 	.word	0xfeffffff
 8001fd4:	1fc1808c 	.word	0x1fc1808c
 8001fd8:	effefffc 	.word	0xeffefffc

08001fdc <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fdc:	2338      	movs	r3, #56	@ 0x38
{
 8001fde:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fe0:	4c1d      	ldr	r4, [pc, #116]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001fe2:	68a2      	ldr	r2, [r4, #8]
 8001fe4:	421a      	tst	r2, r3
 8001fe6:	d105      	bne.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001fe8:	6823      	ldr	r3, [r4, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001fea:	481c      	ldr	r0, [pc, #112]	@ (800205c <HAL_RCC_GetSysClockFreq+0x80>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001fec:	049b      	lsls	r3, r3, #18
 8001fee:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001ff0:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8001ff2:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ff4:	68a2      	ldr	r2, [r4, #8]
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	2a08      	cmp	r2, #8
 8001ffa:	d027      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0x70>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ffc:	68a2      	ldr	r2, [r4, #8]
 8001ffe:	401a      	ands	r2, r3
 8002000:	2a10      	cmp	r2, #16
 8002002:	d117      	bne.n	8002034 <HAL_RCC_GetSysClockFreq+0x58>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002004:	68e3      	ldr	r3, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002006:	68e1      	ldr	r1, [r4, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002008:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800200a:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800200c:	0649      	lsls	r1, r1, #25
 800200e:	0f49      	lsrs	r1, r1, #29
 8002010:	326f      	adds	r2, #111	@ 0x6f
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002012:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002014:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002016:	4015      	ands	r5, r2
    switch (pllsource)
 8002018:	079b      	lsls	r3, r3, #30
 800201a:	d109      	bne.n	8002030 <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800201c:	4810      	ldr	r0, [pc, #64]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800201e:	f7fe f89f 	bl	8000160 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002022:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002024:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002026:	0f49      	lsrs	r1, r1, #29
 8002028:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 800202a:	f7fe f899 	bl	8000160 <__udivsi3>
 800202e:	e7e0      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002030:	480a      	ldr	r0, [pc, #40]	@ (800205c <HAL_RCC_GetSysClockFreq+0x80>)
 8002032:	e7f4      	b.n	800201e <HAL_RCC_GetSysClockFreq+0x42>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002034:	68a2      	ldr	r2, [r4, #8]
 8002036:	401a      	ands	r2, r3
 8002038:	2a20      	cmp	r2, #32
 800203a:	d009      	beq.n	8002050 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800203c:	68a2      	ldr	r2, [r4, #8]
    sysclockfreq = 0U;
 800203e:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002040:	4013      	ands	r3, r2
 8002042:	2b18      	cmp	r3, #24
 8002044:	d1d5      	bne.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSI_VALUE;
 8002046:	20fa      	movs	r0, #250	@ 0xfa
 8002048:	01c0      	lsls	r0, r0, #7
 800204a:	e7d2      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 800204c:	4804      	ldr	r0, [pc, #16]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x84>)
 800204e:	e7d0      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8002050:	2080      	movs	r0, #128	@ 0x80
 8002052:	0200      	lsls	r0, r0, #8
 8002054:	e7cd      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x16>
 8002056:	46c0      	nop			@ (mov r8, r8)
 8002058:	40021000 	.word	0x40021000
 800205c:	00f42400 	.word	0x00f42400
 8002060:	007a1200 	.word	0x007a1200

08002064 <HAL_RCC_ClockConfig>:
{
 8002064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002066:	0004      	movs	r4, r0
 8002068:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800206a:	2800      	cmp	r0, #0
 800206c:	d101      	bne.n	8002072 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800206e:	2001      	movs	r0, #1
}
 8002070:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002072:	2707      	movs	r7, #7
 8002074:	4e48      	ldr	r6, [pc, #288]	@ (8002198 <HAL_RCC_ClockConfig+0x134>)
 8002076:	6833      	ldr	r3, [r6, #0]
 8002078:	403b      	ands	r3, r7
 800207a:	428b      	cmp	r3, r1
 800207c:	d32a      	bcc.n	80020d4 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800207e:	6822      	ldr	r2, [r4, #0]
 8002080:	0793      	lsls	r3, r2, #30
 8002082:	d43b      	bmi.n	80020fc <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002084:	07d2      	lsls	r2, r2, #31
 8002086:	d448      	bmi.n	800211a <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002088:	2707      	movs	r7, #7
 800208a:	6833      	ldr	r3, [r6, #0]
 800208c:	403b      	ands	r3, r7
 800208e:	42ab      	cmp	r3, r5
 8002090:	d90a      	bls.n	80020a8 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	6833      	ldr	r3, [r6, #0]
 8002094:	43bb      	bics	r3, r7
 8002096:	432b      	orrs	r3, r5
 8002098:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800209a:	f7ff f9e5 	bl	8001468 <HAL_GetTick>
 800209e:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020a0:	6833      	ldr	r3, [r6, #0]
 80020a2:	403b      	ands	r3, r7
 80020a4:	42ab      	cmp	r3, r5
 80020a6:	d168      	bne.n	800217a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	6823      	ldr	r3, [r4, #0]
 80020aa:	4d3c      	ldr	r5, [pc, #240]	@ (800219c <HAL_RCC_ClockConfig+0x138>)
 80020ac:	075b      	lsls	r3, r3, #29
 80020ae:	d46c      	bmi.n	800218a <HAL_RCC_ClockConfig+0x126>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80020b0:	f7ff ff94 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 80020b4:	68ab      	ldr	r3, [r5, #8]
 80020b6:	493a      	ldr	r1, [pc, #232]	@ (80021a0 <HAL_RCC_ClockConfig+0x13c>)
 80020b8:	051b      	lsls	r3, r3, #20
 80020ba:	0f1b      	lsrs	r3, r3, #28
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	585b      	ldr	r3, [r3, r1]
 80020c0:	211f      	movs	r1, #31
 80020c2:	400b      	ands	r3, r1
 80020c4:	40d8      	lsrs	r0, r3
 80020c6:	4a37      	ldr	r2, [pc, #220]	@ (80021a4 <HAL_RCC_ClockConfig+0x140>)
  return HAL_InitTick(uwTickPrio);
 80020c8:	4b37      	ldr	r3, [pc, #220]	@ (80021a8 <HAL_RCC_ClockConfig+0x144>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80020ca:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	f7ff f983 	bl	80013d8 <HAL_InitTick>
 80020d2:	e7cd      	b.n	8002070 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d4:	6833      	ldr	r3, [r6, #0]
 80020d6:	43bb      	bics	r3, r7
 80020d8:	430b      	orrs	r3, r1
 80020da:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80020dc:	f7ff f9c4 	bl	8001468 <HAL_GetTick>
 80020e0:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020e2:	6833      	ldr	r3, [r6, #0]
 80020e4:	403b      	ands	r3, r7
 80020e6:	42ab      	cmp	r3, r5
 80020e8:	d0c9      	beq.n	800207e <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ea:	f7ff f9bd 	bl	8001468 <HAL_GetTick>
 80020ee:	9b01      	ldr	r3, [sp, #4]
 80020f0:	1ac0      	subs	r0, r0, r3
 80020f2:	4b2e      	ldr	r3, [pc, #184]	@ (80021ac <HAL_RCC_ClockConfig+0x148>)
 80020f4:	4298      	cmp	r0, r3
 80020f6:	d9f4      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 80020f8:	2003      	movs	r0, #3
 80020fa:	e7b9      	b.n	8002070 <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fc:	4927      	ldr	r1, [pc, #156]	@ (800219c <HAL_RCC_ClockConfig+0x138>)
 80020fe:	0753      	lsls	r3, r2, #29
 8002100:	d504      	bpl.n	800210c <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002102:	23e0      	movs	r3, #224	@ 0xe0
 8002104:	6888      	ldr	r0, [r1, #8]
 8002106:	01db      	lsls	r3, r3, #7
 8002108:	4303      	orrs	r3, r0
 800210a:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800210c:	688b      	ldr	r3, [r1, #8]
 800210e:	4828      	ldr	r0, [pc, #160]	@ (80021b0 <HAL_RCC_ClockConfig+0x14c>)
 8002110:	4003      	ands	r3, r0
 8002112:	68a0      	ldr	r0, [r4, #8]
 8002114:	4303      	orrs	r3, r0
 8002116:	608b      	str	r3, [r1, #8]
 8002118:	e7b4      	b.n	8002084 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211a:	6860      	ldr	r0, [r4, #4]
 800211c:	4f1f      	ldr	r7, [pc, #124]	@ (800219c <HAL_RCC_ClockConfig+0x138>)
 800211e:	2803      	cmp	r0, #3
 8002120:	d829      	bhi.n	8002176 <HAL_RCC_ClockConfig+0x112>
 8002122:	f7fd ffff 	bl	8000124 <__gnu_thumb1_case_uqi>
 8002126:	0220      	.short	0x0220
 8002128:	241c      	.short	0x241c
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	039b      	lsls	r3, r3, #14
 800212e:	d59e      	bpl.n	800206e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002130:	2207      	movs	r2, #7
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	4393      	bics	r3, r2
 8002136:	4303      	orrs	r3, r0
 8002138:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 800213a:	f7ff f995 	bl	8001468 <HAL_GetTick>
 800213e:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002140:	2338      	movs	r3, #56	@ 0x38
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	401a      	ands	r2, r3
 8002146:	6863      	ldr	r3, [r4, #4]
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	429a      	cmp	r2, r3
 800214c:	d09c      	beq.n	8002088 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214e:	f7ff f98b 	bl	8001468 <HAL_GetTick>
 8002152:	9b01      	ldr	r3, [sp, #4]
 8002154:	1ac0      	subs	r0, r0, r3
 8002156:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <HAL_RCC_ClockConfig+0x148>)
 8002158:	4298      	cmp	r0, r3
 800215a:	d9f1      	bls.n	8002140 <HAL_RCC_ClockConfig+0xdc>
 800215c:	e7cc      	b.n	80020f8 <HAL_RCC_ClockConfig+0x94>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	019b      	lsls	r3, r3, #6
 8002162:	d4e5      	bmi.n	8002130 <HAL_RCC_ClockConfig+0xcc>
 8002164:	e783      	b.n	800206e <HAL_RCC_ClockConfig+0xa>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	055b      	lsls	r3, r3, #21
 800216a:	d4e1      	bmi.n	8002130 <HAL_RCC_ClockConfig+0xcc>
 800216c:	e77f      	b.n	800206e <HAL_RCC_ClockConfig+0xa>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800216e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002170:	079b      	lsls	r3, r3, #30
 8002172:	d4dd      	bmi.n	8002130 <HAL_RCC_ClockConfig+0xcc>
 8002174:	e77b      	b.n	800206e <HAL_RCC_ClockConfig+0xa>
 8002176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002178:	e7fa      	b.n	8002170 <HAL_RCC_ClockConfig+0x10c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800217a:	f7ff f975 	bl	8001468 <HAL_GetTick>
 800217e:	9b01      	ldr	r3, [sp, #4]
 8002180:	1ac0      	subs	r0, r0, r3
 8002182:	4b0a      	ldr	r3, [pc, #40]	@ (80021ac <HAL_RCC_ClockConfig+0x148>)
 8002184:	4298      	cmp	r0, r3
 8002186:	d98b      	bls.n	80020a0 <HAL_RCC_ClockConfig+0x3c>
 8002188:	e7b6      	b.n	80020f8 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800218a:	68ab      	ldr	r3, [r5, #8]
 800218c:	4a09      	ldr	r2, [pc, #36]	@ (80021b4 <HAL_RCC_ClockConfig+0x150>)
 800218e:	4013      	ands	r3, r2
 8002190:	68e2      	ldr	r2, [r4, #12]
 8002192:	4313      	orrs	r3, r2
 8002194:	60ab      	str	r3, [r5, #8]
 8002196:	e78b      	b.n	80020b0 <HAL_RCC_ClockConfig+0x4c>
 8002198:	40022000 	.word	0x40022000
 800219c:	40021000 	.word	0x40021000
 80021a0:	08004a04 	.word	0x08004a04
 80021a4:	20000000 	.word	0x20000000
 80021a8:	20000008 	.word	0x20000008
 80021ac:	00001388 	.word	0x00001388
 80021b0:	fffff0ff 	.word	0xfffff0ff
 80021b4:	ffff8fff 	.word	0xffff8fff

080021b8 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80021b8:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80021ba:	4907      	ldr	r1, [pc, #28]	@ (80021d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021bc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80021be:	4a07      	ldr	r2, [pc, #28]	@ (80021dc <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80021c0:	045b      	lsls	r3, r3, #17
 80021c2:	0f5b      	lsrs	r3, r3, #29
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	585b      	ldr	r3, [r3, r1]
 80021c8:	211f      	movs	r1, #31
 80021ca:	6810      	ldr	r0, [r2, #0]
 80021cc:	400b      	ands	r3, r1
 80021ce:	40d8      	lsrs	r0, r3
}
 80021d0:	4770      	bx	lr
 80021d2:	46c0      	nop			@ (mov r8, r8)
 80021d4:	40021000 	.word	0x40021000
 80021d8:	080049e4 	.word	0x080049e4
 80021dc:	20000000 	.word	0x20000000

080021e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021e0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021e2:	6803      	ldr	r3, [r0, #0]
{
 80021e4:	0005      	movs	r5, r0
 80021e6:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021e8:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021ea:	039b      	lsls	r3, r3, #14
 80021ec:	d551      	bpl.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0xb2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ee:	2280      	movs	r2, #128	@ 0x80
 80021f0:	4c48      	ldr	r4, [pc, #288]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021f2:	0552      	lsls	r2, r2, #21
 80021f4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80021f6:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f8:	4213      	tst	r3, r2
 80021fa:	d108      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80021fe:	4313      	orrs	r3, r2
 8002200:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002202:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002204:	4013      	ands	r3, r2
 8002206:	9303      	str	r3, [sp, #12]
 8002208:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800220a:	2301      	movs	r3, #1
 800220c:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800220e:	2780      	movs	r7, #128	@ 0x80
 8002210:	4e41      	ldr	r6, [pc, #260]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002212:	007f      	lsls	r7, r7, #1
 8002214:	6833      	ldr	r3, [r6, #0]
 8002216:	433b      	orrs	r3, r7
 8002218:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800221a:	f7ff f925 	bl	8001468 <HAL_GetTick>
 800221e:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002220:	6833      	ldr	r3, [r6, #0]
 8002222:	423b      	tst	r3, r7
 8002224:	d027      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x96>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002226:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002228:	23c0      	movs	r3, #192	@ 0xc0
 800222a:	0010      	movs	r0, r2
 800222c:	009b      	lsls	r3, r3, #2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800222e:	6969      	ldr	r1, [r5, #20]
 8002230:	4e3a      	ldr	r6, [pc, #232]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002232:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002234:	421a      	tst	r2, r3
 8002236:	d017      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8002238:	4281      	cmp	r1, r0
 800223a:	d015      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800223c:	2280      	movs	r2, #128	@ 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800223e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8002240:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002242:	0019      	movs	r1, r3
        __HAL_RCC_BACKUPRESET_FORCE();
 8002244:	0252      	lsls	r2, r2, #9
 8002246:	4302      	orrs	r2, r0
 8002248:	65e2      	str	r2, [r4, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800224a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800224c:	4834      	ldr	r0, [pc, #208]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x140>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800224e:	4031      	ands	r1, r6
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002250:	4002      	ands	r2, r0
 8002252:	65e2      	str	r2, [r4, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002254:	65e1      	str	r1, [r4, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002256:	07db      	lsls	r3, r3, #31
 8002258:	d506      	bpl.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225a:	f7ff f905 	bl	8001468 <HAL_GetTick>
 800225e:	0007      	movs	r7, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002260:	2202      	movs	r2, #2
 8002262:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002264:	4213      	tst	r3, r2
 8002266:	d04d      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x124>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002268:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800226a:	696a      	ldr	r2, [r5, #20]
 800226c:	4033      	ands	r3, r6
 800226e:	4313      	orrs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002270:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002272:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8002274:	e006      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002276:	f7ff f8f7 	bl	8001468 <HAL_GetTick>
 800227a:	9b01      	ldr	r3, [sp, #4]
 800227c:	1ac0      	subs	r0, r0, r3
 800227e:	2802      	cmp	r0, #2
 8002280:	d9ce      	bls.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x40>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002282:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002284:	9b00      	ldr	r3, [sp, #0]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d103      	bne.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800228c:	4a25      	ldr	r2, [pc, #148]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800228e:	4013      	ands	r3, r2
 8002290:	63e3      	str	r3, [r4, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002292:	682a      	ldr	r2, [r5, #0]
 8002294:	07d3      	lsls	r3, r2, #31
 8002296:	d506      	bpl.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002298:	2403      	movs	r4, #3
 800229a:	491e      	ldr	r1, [pc, #120]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800229c:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 800229e:	43a3      	bics	r3, r4
 80022a0:	686c      	ldr	r4, [r5, #4]
 80022a2:	4323      	orrs	r3, r4
 80022a4:	654b      	str	r3, [r1, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022a6:	0693      	lsls	r3, r2, #26
 80022a8:	d506      	bpl.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022aa:	491a      	ldr	r1, [pc, #104]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022ac:	4c1e      	ldr	r4, [pc, #120]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80022ae:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 80022b0:	4023      	ands	r3, r4
 80022b2:	68ac      	ldr	r4, [r5, #8]
 80022b4:	4323      	orrs	r3, r4
 80022b6:	654b      	str	r3, [r1, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022b8:	0453      	lsls	r3, r2, #17
 80022ba:	d50f      	bpl.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022bc:	4915      	ldr	r1, [pc, #84]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022be:	692c      	ldr	r4, [r5, #16]
 80022c0:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	089b      	lsrs	r3, r3, #2
 80022c6:	4323      	orrs	r3, r4
 80022c8:	654b      	str	r3, [r1, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80022ca:	2380      	movs	r3, #128	@ 0x80
 80022cc:	05db      	lsls	r3, r3, #23
 80022ce:	429c      	cmp	r4, r3
 80022d0:	d104      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0xfc>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022d2:	2380      	movs	r3, #128	@ 0x80
 80022d4:	68cc      	ldr	r4, [r1, #12]
 80022d6:	025b      	lsls	r3, r3, #9
 80022d8:	4323      	orrs	r3, r4
 80022da:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80022dc:	0512      	lsls	r2, r2, #20
 80022de:	d50f      	bpl.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80022e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022e2:	4c12      	ldr	r4, [pc, #72]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022e4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80022e6:	68e9      	ldr	r1, [r5, #12]
 80022e8:	4023      	ands	r3, r4
 80022ea:	430b      	orrs	r3, r1
 80022ec:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80022ee:	2380      	movs	r3, #128	@ 0x80
 80022f0:	01db      	lsls	r3, r3, #7
 80022f2:	4299      	cmp	r1, r3
 80022f4:	d104      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022f6:	2380      	movs	r3, #128	@ 0x80
 80022f8:	68d1      	ldr	r1, [r2, #12]
 80022fa:	025b      	lsls	r3, r3, #9
 80022fc:	430b      	orrs	r3, r1
 80022fe:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8002300:	b005      	add	sp, #20
 8002302:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002304:	f7ff f8b0 	bl	8001468 <HAL_GetTick>
 8002308:	4b09      	ldr	r3, [pc, #36]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800230a:	1bc0      	subs	r0, r0, r7
 800230c:	4298      	cmp	r0, r3
 800230e:	d9a7      	bls.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8002310:	e7b7      	b.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002312:	46c0      	nop			@ (mov r8, r8)
 8002314:	40021000 	.word	0x40021000
 8002318:	40007000 	.word	0x40007000
 800231c:	fffffcff 	.word	0xfffffcff
 8002320:	fffeffff 	.word	0xfffeffff
 8002324:	efffffff 	.word	0xefffffff
 8002328:	ffffcfff 	.word	0xffffcfff
 800232c:	ffff3fff 	.word	0xffff3fff
 8002330:	00001388 	.word	0x00001388

08002334 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002334:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002336:	2401      	movs	r4, #1
  tmpccer = TIMx->CCER;
 8002338:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800233a:	6a02      	ldr	r2, [r0, #32]
 800233c:	43a2      	bics	r2, r4
 800233e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002340:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002342:	4a12      	ldr	r2, [pc, #72]	@ (800238c <TIM_OC1_SetConfig+0x58>)
  tmpccmrx = TIMx->CCMR1;
 8002344:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002346:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002348:	680a      	ldr	r2, [r1, #0]
 800234a:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800234c:	2202      	movs	r2, #2
 800234e:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002350:	688a      	ldr	r2, [r1, #8]
 8002352:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002354:	4a0e      	ldr	r2, [pc, #56]	@ (8002390 <TIM_OC1_SetConfig+0x5c>)
 8002356:	4290      	cmp	r0, r2
 8002358:	d005      	beq.n	8002366 <TIM_OC1_SetConfig+0x32>
 800235a:	4a0e      	ldr	r2, [pc, #56]	@ (8002394 <TIM_OC1_SetConfig+0x60>)
 800235c:	4290      	cmp	r0, r2
 800235e:	d002      	beq.n	8002366 <TIM_OC1_SetConfig+0x32>
 8002360:	4a0d      	ldr	r2, [pc, #52]	@ (8002398 <TIM_OC1_SetConfig+0x64>)
 8002362:	4290      	cmp	r0, r2
 8002364:	d10b      	bne.n	800237e <TIM_OC1_SetConfig+0x4a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002366:	2208      	movs	r2, #8
 8002368:	4393      	bics	r3, r2
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800236a:	68ca      	ldr	r2, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800236c:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 800236e:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 8002370:	2204      	movs	r2, #4
 8002372:	4393      	bics	r3, r2
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002374:	4a09      	ldr	r2, [pc, #36]	@ (800239c <TIM_OC1_SetConfig+0x68>)
 8002376:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002378:	694c      	ldr	r4, [r1, #20]
 800237a:	4334      	orrs	r4, r6
 800237c:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800237e:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002380:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002382:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002384:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002386:	6203      	str	r3, [r0, #32]
}
 8002388:	bd70      	pop	{r4, r5, r6, pc}
 800238a:	46c0      	nop			@ (mov r8, r8)
 800238c:	fffeff8c 	.word	0xfffeff8c
 8002390:	40012c00 	.word	0x40012c00
 8002394:	40014400 	.word	0x40014400
 8002398:	40014800 	.word	0x40014800
 800239c:	fffffcff 	.word	0xfffffcff

080023a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023a0:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023a2:	4a17      	ldr	r2, [pc, #92]	@ (8002400 <TIM_OC3_SetConfig+0x60>)
  tmpccer = TIMx->CCER;
 80023a4:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023a6:	6a03      	ldr	r3, [r0, #32]
 80023a8:	4013      	ands	r3, r2
 80023aa:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023ac:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023ae:	4b15      	ldr	r3, [pc, #84]	@ (8002404 <TIM_OC3_SetConfig+0x64>)
  tmpccmrx = TIMx->CCMR2;
 80023b0:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023b2:	401c      	ands	r4, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023b4:	680b      	ldr	r3, [r1, #0]
 80023b6:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023b8:	4b13      	ldr	r3, [pc, #76]	@ (8002408 <TIM_OC3_SetConfig+0x68>)
 80023ba:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023bc:	688b      	ldr	r3, [r1, #8]
 80023be:	021b      	lsls	r3, r3, #8
 80023c0:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023c2:	4d12      	ldr	r5, [pc, #72]	@ (800240c <TIM_OC3_SetConfig+0x6c>)
 80023c4:	42a8      	cmp	r0, r5
 80023c6:	d10e      	bne.n	80023e6 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023c8:	4d11      	ldr	r5, [pc, #68]	@ (8002410 <TIM_OC3_SetConfig+0x70>)
 80023ca:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023cc:	68cb      	ldr	r3, [r1, #12]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023d2:	4d10      	ldr	r5, [pc, #64]	@ (8002414 <TIM_OC3_SetConfig+0x74>)
 80023d4:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023d6:	4d10      	ldr	r5, [pc, #64]	@ (8002418 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023d8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023da:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023dc:	694a      	ldr	r2, [r1, #20]
 80023de:	4332      	orrs	r2, r6
 80023e0:	0112      	lsls	r2, r2, #4
 80023e2:	432a      	orrs	r2, r5
 80023e4:	e005      	b.n	80023f2 <TIM_OC3_SetConfig+0x52>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023e6:	4d0d      	ldr	r5, [pc, #52]	@ (800241c <TIM_OC3_SetConfig+0x7c>)
 80023e8:	42a8      	cmp	r0, r5
 80023ea:	d0f4      	beq.n	80023d6 <TIM_OC3_SetConfig+0x36>
 80023ec:	4d0c      	ldr	r5, [pc, #48]	@ (8002420 <TIM_OC3_SetConfig+0x80>)
 80023ee:	42a8      	cmp	r0, r5
 80023f0:	d0f1      	beq.n	80023d6 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023f2:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023f4:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80023f6:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80023f8:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023fa:	6203      	str	r3, [r0, #32]
}
 80023fc:	bd70      	pop	{r4, r5, r6, pc}
 80023fe:	46c0      	nop			@ (mov r8, r8)
 8002400:	fffffeff 	.word	0xfffffeff
 8002404:	fffeff8c 	.word	0xfffeff8c
 8002408:	fffffdff 	.word	0xfffffdff
 800240c:	40012c00 	.word	0x40012c00
 8002410:	fffff7ff 	.word	0xfffff7ff
 8002414:	fffffbff 	.word	0xfffffbff
 8002418:	ffffcfff 	.word	0xffffcfff
 800241c:	40014400 	.word	0x40014400
 8002420:	40014800 	.word	0x40014800

08002424 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002424:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002426:	4a12      	ldr	r2, [pc, #72]	@ (8002470 <TIM_OC4_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 8002428:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800242a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800242c:	4d11      	ldr	r5, [pc, #68]	@ (8002474 <TIM_OC4_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800242e:	4013      	ands	r3, r2
 8002430:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002432:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002434:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002436:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002438:	680d      	ldr	r5, [r1, #0]
 800243a:	022d      	lsls	r5, r5, #8
 800243c:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800243e:	4a0e      	ldr	r2, [pc, #56]	@ (8002478 <TIM_OC4_SetConfig+0x54>)
 8002440:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002442:	688a      	ldr	r2, [r1, #8]
 8002444:	0312      	lsls	r2, r2, #12
 8002446:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002448:	4c0c      	ldr	r4, [pc, #48]	@ (800247c <TIM_OC4_SetConfig+0x58>)
 800244a:	42a0      	cmp	r0, r4
 800244c:	d005      	beq.n	800245a <TIM_OC4_SetConfig+0x36>
 800244e:	4c0c      	ldr	r4, [pc, #48]	@ (8002480 <TIM_OC4_SetConfig+0x5c>)
 8002450:	42a0      	cmp	r0, r4
 8002452:	d002      	beq.n	800245a <TIM_OC4_SetConfig+0x36>
 8002454:	4c0b      	ldr	r4, [pc, #44]	@ (8002484 <TIM_OC4_SetConfig+0x60>)
 8002456:	42a0      	cmp	r0, r4
 8002458:	d104      	bne.n	8002464 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800245a:	4c0b      	ldr	r4, [pc, #44]	@ (8002488 <TIM_OC4_SetConfig+0x64>)
 800245c:	401c      	ands	r4, r3

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800245e:	694b      	ldr	r3, [r1, #20]
 8002460:	019b      	lsls	r3, r3, #6
 8002462:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002464:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002466:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002468:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800246a:	6403      	str	r3, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800246c:	6202      	str	r2, [r0, #32]
}
 800246e:	bd30      	pop	{r4, r5, pc}
 8002470:	ffffefff 	.word	0xffffefff
 8002474:	feff8cff 	.word	0xfeff8cff
 8002478:	ffffdfff 	.word	0xffffdfff
 800247c:	40012c00 	.word	0x40012c00
 8002480:	40014400 	.word	0x40014400
 8002484:	40014800 	.word	0x40014800
 8002488:	ffffbfff 	.word	0xffffbfff

0800248c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800248c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800248e:	6a06      	ldr	r6, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002490:	4c10      	ldr	r4, [pc, #64]	@ (80024d4 <TIM_OC5_SetConfig+0x48>)
 8002492:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002494:	4a10      	ldr	r2, [pc, #64]	@ (80024d8 <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002496:	4023      	ands	r3, r4
 8002498:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800249a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 800249c:	6d45      	ldr	r5, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800249e:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024a0:	680a      	ldr	r2, [r1, #0]
 80024a2:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80024a4:	4a0d      	ldr	r2, [pc, #52]	@ (80024dc <TIM_OC5_SetConfig+0x50>)
 80024a6:	4016      	ands	r6, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80024a8:	688a      	ldr	r2, [r1, #8]
 80024aa:	0412      	lsls	r2, r2, #16
 80024ac:	4332      	orrs	r2, r6

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024ae:	4e0c      	ldr	r6, [pc, #48]	@ (80024e0 <TIM_OC5_SetConfig+0x54>)
 80024b0:	42b0      	cmp	r0, r6
 80024b2:	d005      	beq.n	80024c0 <TIM_OC5_SetConfig+0x34>
 80024b4:	4e0b      	ldr	r6, [pc, #44]	@ (80024e4 <TIM_OC5_SetConfig+0x58>)
 80024b6:	42b0      	cmp	r0, r6
 80024b8:	d002      	beq.n	80024c0 <TIM_OC5_SetConfig+0x34>
 80024ba:	4e0b      	ldr	r6, [pc, #44]	@ (80024e8 <TIM_OC5_SetConfig+0x5c>)
 80024bc:	42b0      	cmp	r0, r6
 80024be:	d103      	bne.n	80024c8 <TIM_OC5_SetConfig+0x3c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80024c0:	401c      	ands	r4, r3
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80024c2:	694b      	ldr	r3, [r1, #20]
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	4323      	orrs	r3, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024c8:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80024ca:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 80024cc:	6545      	str	r5, [r0, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 80024ce:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024d0:	6202      	str	r2, [r0, #32]
}
 80024d2:	bd70      	pop	{r4, r5, r6, pc}
 80024d4:	fffeffff 	.word	0xfffeffff
 80024d8:	fffeff8f 	.word	0xfffeff8f
 80024dc:	fffdffff 	.word	0xfffdffff
 80024e0:	40012c00 	.word	0x40012c00
 80024e4:	40014400 	.word	0x40014400
 80024e8:	40014800 	.word	0x40014800

080024ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80024ec:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80024ee:	4a12      	ldr	r2, [pc, #72]	@ (8002538 <TIM_OC6_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 80024f0:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80024f2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80024f4:	4d11      	ldr	r5, [pc, #68]	@ (800253c <TIM_OC6_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80024f6:	4013      	ands	r3, r2
 80024f8:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80024fa:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 80024fc:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80024fe:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002500:	680d      	ldr	r5, [r1, #0]
 8002502:	022d      	lsls	r5, r5, #8
 8002504:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002506:	4a0e      	ldr	r2, [pc, #56]	@ (8002540 <TIM_OC6_SetConfig+0x54>)
 8002508:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800250a:	688a      	ldr	r2, [r1, #8]
 800250c:	0512      	lsls	r2, r2, #20
 800250e:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002510:	4c0c      	ldr	r4, [pc, #48]	@ (8002544 <TIM_OC6_SetConfig+0x58>)
 8002512:	42a0      	cmp	r0, r4
 8002514:	d005      	beq.n	8002522 <TIM_OC6_SetConfig+0x36>
 8002516:	4c0c      	ldr	r4, [pc, #48]	@ (8002548 <TIM_OC6_SetConfig+0x5c>)
 8002518:	42a0      	cmp	r0, r4
 800251a:	d002      	beq.n	8002522 <TIM_OC6_SetConfig+0x36>
 800251c:	4c0b      	ldr	r4, [pc, #44]	@ (800254c <TIM_OC6_SetConfig+0x60>)
 800251e:	42a0      	cmp	r0, r4
 8002520:	d104      	bne.n	800252c <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002522:	4c0b      	ldr	r4, [pc, #44]	@ (8002550 <TIM_OC6_SetConfig+0x64>)
 8002524:	401c      	ands	r4, r3
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002526:	694b      	ldr	r3, [r1, #20]
 8002528:	029b      	lsls	r3, r3, #10
 800252a:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800252c:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800252e:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 8002530:	6545      	str	r5, [r0, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8002532:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002534:	6202      	str	r2, [r0, #32]
}
 8002536:	bd30      	pop	{r4, r5, pc}
 8002538:	ffefffff 	.word	0xffefffff
 800253c:	feff8fff 	.word	0xfeff8fff
 8002540:	ffdfffff 	.word	0xffdfffff
 8002544:	40012c00 	.word	0x40012c00
 8002548:	40014400 	.word	0x40014400
 800254c:	40014800 	.word	0x40014800
 8002550:	fffbffff 	.word	0xfffbffff

08002554 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8002554:	4770      	bx	lr

08002556 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8002556:	4770      	bx	lr

08002558 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8002558:	4770      	bx	lr

0800255a <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800255a:	4770      	bx	lr

0800255c <TIM_DMADelayPulseCplt>:
{
 800255c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800255e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002560:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002562:	4282      	cmp	r2, r0
 8002564:	d10d      	bne.n	8002582 <TIM_DMADelayPulseCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002566:	2301      	movs	r3, #1
 8002568:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800256a:	69d2      	ldr	r2, [r2, #28]
 800256c:	2a00      	cmp	r2, #0
 800256e:	d102      	bne.n	8002576 <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002570:	0022      	movs	r2, r4
 8002572:	323e      	adds	r2, #62	@ 0x3e
 8002574:	7013      	strb	r3, [r2, #0]
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002576:	0020      	movs	r0, r4
 8002578:	f7fe fa4e 	bl	8000a18 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257c:	2300      	movs	r3, #0
 800257e:	7723      	strb	r3, [r4, #28]
}
 8002580:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002582:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002584:	4283      	cmp	r3, r0
 8002586:	d109      	bne.n	800259c <TIM_DMADelayPulseCplt+0x40>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002588:	2202      	movs	r2, #2
 800258a:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f1      	bne.n	8002576 <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002592:	0023      	movs	r3, r4
 8002594:	3a01      	subs	r2, #1
 8002596:	333f      	adds	r3, #63	@ 0x3f
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002598:	701a      	strb	r2, [r3, #0]
 800259a:	e7ec      	b.n	8002576 <TIM_DMADelayPulseCplt+0x1a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800259c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800259e:	4283      	cmp	r3, r0
 80025a0:	d108      	bne.n	80025b4 <TIM_DMADelayPulseCplt+0x58>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025a2:	2204      	movs	r2, #4
 80025a4:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1e4      	bne.n	8002576 <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80025ac:	0023      	movs	r3, r4
 80025ae:	3a03      	subs	r2, #3
 80025b0:	3340      	adds	r3, #64	@ 0x40
 80025b2:	e7f1      	b.n	8002598 <TIM_DMADelayPulseCplt+0x3c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80025b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80025b6:	4283      	cmp	r3, r0
 80025b8:	d1dd      	bne.n	8002576 <TIM_DMADelayPulseCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ba:	2208      	movs	r2, #8
 80025bc:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1d8      	bne.n	8002576 <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80025c4:	0023      	movs	r3, r4
 80025c6:	3a07      	subs	r2, #7
 80025c8:	3341      	adds	r3, #65	@ 0x41
 80025ca:	e7e5      	b.n	8002598 <TIM_DMADelayPulseCplt+0x3c>

080025cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
 80025cc:	4770      	bx	lr

080025ce <TIM_DMADelayPulseHalfCplt>:
{
 80025ce:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025d0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80025d2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80025d4:	4283      	cmp	r3, r0
 80025d6:	d107      	bne.n	80025e8 <TIM_DMADelayPulseHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025d8:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025da:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80025dc:	0020      	movs	r0, r4
 80025de:	f7ff fff5 	bl	80025cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e2:	2300      	movs	r3, #0
 80025e4:	7723      	strb	r3, [r4, #28]
}
 80025e6:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80025e8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80025ea:	4283      	cmp	r3, r0
 80025ec:	d101      	bne.n	80025f2 <TIM_DMADelayPulseHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ee:	2302      	movs	r3, #2
 80025f0:	e7f3      	b.n	80025da <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80025f2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80025f4:	4283      	cmp	r3, r0
 80025f6:	d101      	bne.n	80025fc <TIM_DMADelayPulseHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025f8:	2304      	movs	r3, #4
 80025fa:	e7ee      	b.n	80025da <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80025fc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80025fe:	4283      	cmp	r3, r0
 8002600:	d1ec      	bne.n	80025dc <TIM_DMADelayPulseHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002602:	2308      	movs	r3, #8
 8002604:	e7e9      	b.n	80025da <TIM_DMADelayPulseHalfCplt+0xc>

08002606 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8002606:	4770      	bx	lr

08002608 <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002608:	2202      	movs	r2, #2
  uint32_t itsource = htim->Instance->DIER;
 800260a:	6803      	ldr	r3, [r0, #0]
{
 800260c:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800260e:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002610:	691e      	ldr	r6, [r3, #16]
{
 8002612:	0004      	movs	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002614:	4216      	tst	r6, r2
 8002616:	d00d      	beq.n	8002634 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002618:	4215      	tst	r5, r2
 800261a:	d00b      	beq.n	8002634 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800261c:	3a05      	subs	r2, #5
 800261e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002620:	3204      	adds	r2, #4
 8002622:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	079b      	lsls	r3, r3, #30
 8002628:	d100      	bne.n	800262c <HAL_TIM_IRQHandler+0x24>
 800262a:	e07c      	b.n	8002726 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800262c:	f7ff ff95 	bl	800255a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002630:	2300      	movs	r3, #0
 8002632:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002634:	2304      	movs	r3, #4
 8002636:	421e      	tst	r6, r3
 8002638:	d012      	beq.n	8002660 <HAL_TIM_IRQHandler+0x58>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800263a:	421d      	tst	r5, r3
 800263c:	d010      	beq.n	8002660 <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800263e:	2205      	movs	r2, #5
 8002640:	6823      	ldr	r3, [r4, #0]
 8002642:	4252      	negs	r2, r2
 8002644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002646:	3207      	adds	r2, #7
 8002648:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800264a:	699a      	ldr	r2, [r3, #24]
 800264c:	23c0      	movs	r3, #192	@ 0xc0
 800264e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002650:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002652:	421a      	tst	r2, r3
 8002654:	d100      	bne.n	8002658 <HAL_TIM_IRQHandler+0x50>
 8002656:	e06c      	b.n	8002732 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002658:	f7ff ff7f 	bl	800255a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265c:	2300      	movs	r3, #0
 800265e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002660:	2308      	movs	r3, #8
 8002662:	421e      	tst	r6, r3
 8002664:	d00f      	beq.n	8002686 <HAL_TIM_IRQHandler+0x7e>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002666:	421d      	tst	r5, r3
 8002668:	d00d      	beq.n	8002686 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800266a:	2209      	movs	r2, #9
 800266c:	6823      	ldr	r3, [r4, #0]
 800266e:	4252      	negs	r2, r2
 8002670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002672:	320d      	adds	r2, #13
 8002674:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002676:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002678:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800267a:	079b      	lsls	r3, r3, #30
 800267c:	d05f      	beq.n	800273e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800267e:	f7ff ff6c 	bl	800255a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002682:	2300      	movs	r3, #0
 8002684:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002686:	2310      	movs	r3, #16
 8002688:	421e      	tst	r6, r3
 800268a:	d011      	beq.n	80026b0 <HAL_TIM_IRQHandler+0xa8>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800268c:	421d      	tst	r5, r3
 800268e:	d00f      	beq.n	80026b0 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002690:	2211      	movs	r2, #17
 8002692:	6823      	ldr	r3, [r4, #0]
 8002694:	4252      	negs	r2, r2
 8002696:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002698:	3219      	adds	r2, #25
 800269a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800269c:	69da      	ldr	r2, [r3, #28]
 800269e:	23c0      	movs	r3, #192	@ 0xc0
 80026a0:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80026a2:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026a4:	421a      	tst	r2, r3
 80026a6:	d050      	beq.n	800274a <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 80026a8:	f7ff ff57 	bl	800255a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ac:	2300      	movs	r3, #0
 80026ae:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026b0:	2301      	movs	r3, #1
 80026b2:	421e      	tst	r6, r3
 80026b4:	d008      	beq.n	80026c8 <HAL_TIM_IRQHandler+0xc0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026b6:	421d      	tst	r5, r3
 80026b8:	d006      	beq.n	80026c8 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026ba:	2202      	movs	r2, #2
 80026bc:	6823      	ldr	r3, [r4, #0]
 80026be:	4252      	negs	r2, r2
      HAL_TIM_PeriodElapsedCallback(htim);
 80026c0:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80026c4:	f7ff ff47 	bl	8002556 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80026c8:	2382      	movs	r3, #130	@ 0x82
 80026ca:	019b      	lsls	r3, r3, #6
 80026cc:	421e      	tst	r6, r3
 80026ce:	d007      	beq.n	80026e0 <HAL_TIM_IRQHandler+0xd8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026d0:	062b      	lsls	r3, r5, #24
 80026d2:	d505      	bpl.n	80026e0 <HAL_TIM_IRQHandler+0xd8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	4a20      	ldr	r2, [pc, #128]	@ (8002758 <HAL_TIM_IRQHandler+0x150>)
      HAL_TIMEx_BreakCallback(htim);
 80026d8:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80026da:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80026dc:	f000 fba9 	bl	8002e32 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80026e0:	05f3      	lsls	r3, r6, #23
 80026e2:	d507      	bpl.n	80026f4 <HAL_TIM_IRQHandler+0xec>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026e4:	062b      	lsls	r3, r5, #24
 80026e6:	d505      	bpl.n	80026f4 <HAL_TIM_IRQHandler+0xec>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80026e8:	6823      	ldr	r3, [r4, #0]
 80026ea:	4a1c      	ldr	r2, [pc, #112]	@ (800275c <HAL_TIM_IRQHandler+0x154>)
      HAL_TIMEx_Break2Callback(htim);
 80026ec:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80026ee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80026f0:	f000 fba0 	bl	8002e34 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026f4:	2340      	movs	r3, #64	@ 0x40
 80026f6:	421e      	tst	r6, r3
 80026f8:	d008      	beq.n	800270c <HAL_TIM_IRQHandler+0x104>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026fa:	421d      	tst	r5, r3
 80026fc:	d006      	beq.n	800270c <HAL_TIM_IRQHandler+0x104>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026fe:	2241      	movs	r2, #65	@ 0x41
 8002700:	6823      	ldr	r3, [r4, #0]
 8002702:	4252      	negs	r2, r2
      HAL_TIM_TriggerCallback(htim);
 8002704:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002706:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002708:	f7ff ff7d 	bl	8002606 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800270c:	2320      	movs	r3, #32
 800270e:	421e      	tst	r6, r3
 8002710:	d008      	beq.n	8002724 <HAL_TIM_IRQHandler+0x11c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002712:	421d      	tst	r5, r3
 8002714:	d006      	beq.n	8002724 <HAL_TIM_IRQHandler+0x11c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002716:	2221      	movs	r2, #33	@ 0x21
 8002718:	6823      	ldr	r3, [r4, #0]
 800271a:	4252      	negs	r2, r2
      HAL_TIMEx_CommutCallback(htim);
 800271c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800271e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002720:	f000 fb86 	bl	8002e30 <HAL_TIMEx_CommutCallback>
}
 8002724:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002726:	f7ff ff17 	bl	8002558 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272a:	0020      	movs	r0, r4
 800272c:	f7fe f974 	bl	8000a18 <HAL_TIM_PWM_PulseFinishedCallback>
 8002730:	e77e      	b.n	8002630 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002732:	f7ff ff11 	bl	8002558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002736:	0020      	movs	r0, r4
 8002738:	f7fe f96e 	bl	8000a18 <HAL_TIM_PWM_PulseFinishedCallback>
 800273c:	e78e      	b.n	800265c <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800273e:	f7ff ff0b 	bl	8002558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002742:	0020      	movs	r0, r4
 8002744:	f7fe f968 	bl	8000a18 <HAL_TIM_PWM_PulseFinishedCallback>
 8002748:	e79b      	b.n	8002682 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800274a:	f7ff ff05 	bl	8002558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800274e:	0020      	movs	r0, r4
 8002750:	f7fe f962 	bl	8000a18 <HAL_TIM_PWM_PulseFinishedCallback>
 8002754:	e7aa      	b.n	80026ac <HAL_TIM_IRQHandler+0xa4>
 8002756:	46c0      	nop			@ (mov r8, r8)
 8002758:	ffffdf7f 	.word	0xffffdf7f
 800275c:	fffffeff 	.word	0xfffffeff

08002760 <HAL_TIM_ErrorCallback>:
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
 8002760:	4770      	bx	lr

08002762 <TIM_DMAError>:
{
 8002762:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002764:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002766:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002768:	4283      	cmp	r3, r0
 800276a:	d105      	bne.n	8002778 <TIM_DMAError+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800276c:	2301      	movs	r3, #1
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800276e:	0022      	movs	r2, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002770:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002772:	323e      	adds	r2, #62	@ 0x3e
    htim->State = HAL_TIM_STATE_READY;
 8002774:	7013      	strb	r3, [r2, #0]
 8002776:	e008      	b.n	800278a <TIM_DMAError+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002778:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800277a:	4283      	cmp	r3, r0
 800277c:	d10b      	bne.n	8002796 <TIM_DMAError+0x34>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800277e:	2302      	movs	r3, #2
 8002780:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002782:	0023      	movs	r3, r4
 8002784:	2201      	movs	r2, #1
 8002786:	333f      	adds	r3, #63	@ 0x3f
 8002788:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ErrorCallback(htim);
 800278a:	0020      	movs	r0, r4
 800278c:	f7ff ffe8 	bl	8002760 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002790:	2300      	movs	r3, #0
 8002792:	7723      	strb	r3, [r4, #28]
}
 8002794:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002796:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002798:	2301      	movs	r3, #1
 800279a:	4282      	cmp	r2, r0
 800279c:	d104      	bne.n	80027a8 <TIM_DMAError+0x46>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800279e:	2204      	movs	r2, #4
 80027a0:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80027a2:	0022      	movs	r2, r4
 80027a4:	3240      	adds	r2, #64	@ 0x40
 80027a6:	e7e5      	b.n	8002774 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80027a8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80027aa:	4282      	cmp	r2, r0
 80027ac:	d104      	bne.n	80027b8 <TIM_DMAError+0x56>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027ae:	2208      	movs	r2, #8
 80027b0:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80027b2:	0022      	movs	r2, r4
 80027b4:	3241      	adds	r2, #65	@ 0x41
 80027b6:	e7dd      	b.n	8002774 <TIM_DMAError+0x12>
    htim->State = HAL_TIM_STATE_READY;
 80027b8:	0022      	movs	r2, r4
 80027ba:	323d      	adds	r2, #61	@ 0x3d
 80027bc:	e7da      	b.n	8002774 <TIM_DMAError+0x12>
	...

080027c0 <TIM_Base_SetConfig>:
{
 80027c0:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027c2:	4c1b      	ldr	r4, [pc, #108]	@ (8002830 <TIM_Base_SetConfig+0x70>)
  tmpcr1 = TIMx->CR1;
 80027c4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027c6:	42a0      	cmp	r0, r4
 80027c8:	d00a      	beq.n	80027e0 <TIM_Base_SetConfig+0x20>
 80027ca:	4a1a      	ldr	r2, [pc, #104]	@ (8002834 <TIM_Base_SetConfig+0x74>)
 80027cc:	4290      	cmp	r0, r2
 80027ce:	d007      	beq.n	80027e0 <TIM_Base_SetConfig+0x20>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027d0:	4a19      	ldr	r2, [pc, #100]	@ (8002838 <TIM_Base_SetConfig+0x78>)
 80027d2:	4290      	cmp	r0, r2
 80027d4:	d109      	bne.n	80027ea <TIM_Base_SetConfig+0x2a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80027d6:	4a19      	ldr	r2, [pc, #100]	@ (800283c <TIM_Base_SetConfig+0x7c>)
 80027d8:	401a      	ands	r2, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027da:	68cb      	ldr	r3, [r1, #12]
 80027dc:	4313      	orrs	r3, r2
 80027de:	e00a      	b.n	80027f6 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027e0:	2270      	movs	r2, #112	@ 0x70
 80027e2:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80027e4:	684a      	ldr	r2, [r1, #4]
 80027e6:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027e8:	e7f5      	b.n	80027d6 <TIM_Base_SetConfig+0x16>
 80027ea:	4a15      	ldr	r2, [pc, #84]	@ (8002840 <TIM_Base_SetConfig+0x80>)
 80027ec:	4290      	cmp	r0, r2
 80027ee:	d0f2      	beq.n	80027d6 <TIM_Base_SetConfig+0x16>
 80027f0:	4a14      	ldr	r2, [pc, #80]	@ (8002844 <TIM_Base_SetConfig+0x84>)
 80027f2:	4290      	cmp	r0, r2
 80027f4:	d0ef      	beq.n	80027d6 <TIM_Base_SetConfig+0x16>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027f6:	2280      	movs	r2, #128	@ 0x80
 80027f8:	4393      	bics	r3, r2
 80027fa:	694a      	ldr	r2, [r1, #20]
 80027fc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80027fe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002800:	688b      	ldr	r3, [r1, #8]
 8002802:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002804:	680b      	ldr	r3, [r1, #0]
 8002806:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002808:	42a0      	cmp	r0, r4
 800280a:	d005      	beq.n	8002818 <TIM_Base_SetConfig+0x58>
 800280c:	4b0c      	ldr	r3, [pc, #48]	@ (8002840 <TIM_Base_SetConfig+0x80>)
 800280e:	4298      	cmp	r0, r3
 8002810:	d002      	beq.n	8002818 <TIM_Base_SetConfig+0x58>
 8002812:	4b0c      	ldr	r3, [pc, #48]	@ (8002844 <TIM_Base_SetConfig+0x84>)
 8002814:	4298      	cmp	r0, r3
 8002816:	d101      	bne.n	800281c <TIM_Base_SetConfig+0x5c>
    TIMx->RCR = Structure->RepetitionCounter;
 8002818:	690b      	ldr	r3, [r1, #16]
 800281a:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800281c:	2201      	movs	r2, #1
 800281e:	6142      	str	r2, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002820:	6903      	ldr	r3, [r0, #16]
 8002822:	4213      	tst	r3, r2
 8002824:	d002      	beq.n	800282c <TIM_Base_SetConfig+0x6c>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002826:	6903      	ldr	r3, [r0, #16]
 8002828:	4393      	bics	r3, r2
 800282a:	6103      	str	r3, [r0, #16]
}
 800282c:	bd10      	pop	{r4, pc}
 800282e:	46c0      	nop			@ (mov r8, r8)
 8002830:	40012c00 	.word	0x40012c00
 8002834:	40000400 	.word	0x40000400
 8002838:	40002000 	.word	0x40002000
 800283c:	fffffcff 	.word	0xfffffcff
 8002840:	40014400 	.word	0x40014400
 8002844:	40014800 	.word	0x40014800

08002848 <HAL_TIM_Base_Init>:
{
 8002848:	b570      	push	{r4, r5, r6, lr}
 800284a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800284c:	2001      	movs	r0, #1
  if (htim == NULL)
 800284e:	2c00      	cmp	r4, #0
 8002850:	d023      	beq.n	800289a <HAL_TIM_Base_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002852:	0025      	movs	r5, r4
 8002854:	353d      	adds	r5, #61	@ 0x3d
 8002856:	782b      	ldrb	r3, [r5, #0]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d105      	bne.n	800286a <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800285e:	0023      	movs	r3, r4
 8002860:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002862:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8002864:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8002866:	f7fe fcb1 	bl	80011cc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800286a:	2302      	movs	r3, #2
 800286c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800286e:	6820      	ldr	r0, [r4, #0]
 8002870:	1d21      	adds	r1, r4, #4
 8002872:	f7ff ffa5 	bl	80027c0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002876:	0022      	movs	r2, r4
 8002878:	2301      	movs	r3, #1
  return HAL_OK;
 800287a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800287c:	3248      	adds	r2, #72	@ 0x48
 800287e:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002880:	3447      	adds	r4, #71	@ 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002882:	3a0a      	subs	r2, #10
 8002884:	7013      	strb	r3, [r2, #0]
 8002886:	7053      	strb	r3, [r2, #1]
 8002888:	7093      	strb	r3, [r2, #2]
 800288a:	70d3      	strb	r3, [r2, #3]
 800288c:	7113      	strb	r3, [r2, #4]
 800288e:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002890:	7193      	strb	r3, [r2, #6]
 8002892:	71d3      	strb	r3, [r2, #7]
 8002894:	7213      	strb	r3, [r2, #8]
 8002896:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002898:	702b      	strb	r3, [r5, #0]
}
 800289a:	bd70      	pop	{r4, r5, r6, pc}

0800289c <HAL_TIM_PWM_Init>:
{
 800289c:	b570      	push	{r4, r5, r6, lr}
 800289e:	0004      	movs	r4, r0
    return HAL_ERROR;
 80028a0:	2001      	movs	r0, #1
  if (htim == NULL)
 80028a2:	2c00      	cmp	r4, #0
 80028a4:	d023      	beq.n	80028ee <HAL_TIM_PWM_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 80028a6:	0025      	movs	r5, r4
 80028a8:	353d      	adds	r5, #61	@ 0x3d
 80028aa:	782b      	ldrb	r3, [r5, #0]
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d105      	bne.n	80028be <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80028b2:	0023      	movs	r3, r4
 80028b4:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80028b6:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80028b8:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 80028ba:	f7ff fe4b 	bl	8002554 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80028be:	2302      	movs	r3, #2
 80028c0:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c2:	6820      	ldr	r0, [r4, #0]
 80028c4:	1d21      	adds	r1, r4, #4
 80028c6:	f7ff ff7b 	bl	80027c0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ca:	0022      	movs	r2, r4
 80028cc:	2301      	movs	r3, #1
  return HAL_OK;
 80028ce:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028d0:	3248      	adds	r2, #72	@ 0x48
 80028d2:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d4:	3447      	adds	r4, #71	@ 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d6:	3a0a      	subs	r2, #10
 80028d8:	7013      	strb	r3, [r2, #0]
 80028da:	7053      	strb	r3, [r2, #1]
 80028dc:	7093      	strb	r3, [r2, #2]
 80028de:	70d3      	strb	r3, [r2, #3]
 80028e0:	7113      	strb	r3, [r2, #4]
 80028e2:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e4:	7193      	strb	r3, [r2, #6]
 80028e6:	71d3      	strb	r3, [r2, #7]
 80028e8:	7213      	strb	r3, [r2, #8]
 80028ea:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80028ec:	702b      	strb	r3, [r5, #0]
}
 80028ee:	bd70      	pop	{r4, r5, r6, pc}

080028f0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028f0:	2210      	movs	r2, #16
{
 80028f2:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 80028f4:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028f6:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028f8:	4c16      	ldr	r4, [pc, #88]	@ (8002954 <TIM_OC2_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028fa:	4393      	bics	r3, r2
 80028fc:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80028fe:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002900:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002902:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002904:	680c      	ldr	r4, [r1, #0]
 8002906:	0224      	lsls	r4, r4, #8
 8002908:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 800290a:	2320      	movs	r3, #32
 800290c:	439d      	bics	r5, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800290e:	688b      	ldr	r3, [r1, #8]
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	432b      	orrs	r3, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002914:	4d10      	ldr	r5, [pc, #64]	@ (8002958 <TIM_OC2_SetConfig+0x68>)
 8002916:	42a8      	cmp	r0, r5
 8002918:	d10f      	bne.n	800293a <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 800291a:	2580      	movs	r5, #128	@ 0x80
 800291c:	43ab      	bics	r3, r5
 800291e:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002920:	68cb      	ldr	r3, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 8002922:	3d40      	subs	r5, #64	@ 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002928:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800292a:	4d0c      	ldr	r5, [pc, #48]	@ (800295c <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800292c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800292e:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002930:	694a      	ldr	r2, [r1, #20]
 8002932:	4332      	orrs	r2, r6
 8002934:	0092      	lsls	r2, r2, #2
 8002936:	432a      	orrs	r2, r5
 8002938:	e005      	b.n	8002946 <TIM_OC2_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800293a:	4d09      	ldr	r5, [pc, #36]	@ (8002960 <TIM_OC2_SetConfig+0x70>)
 800293c:	42a8      	cmp	r0, r5
 800293e:	d0f4      	beq.n	800292a <TIM_OC2_SetConfig+0x3a>
 8002940:	4d08      	ldr	r5, [pc, #32]	@ (8002964 <TIM_OC2_SetConfig+0x74>)
 8002942:	42a8      	cmp	r0, r5
 8002944:	d0f1      	beq.n	800292a <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8002946:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8002948:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800294a:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800294c:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800294e:	6203      	str	r3, [r0, #32]
}
 8002950:	bd70      	pop	{r4, r5, r6, pc}
 8002952:	46c0      	nop			@ (mov r8, r8)
 8002954:	feff8cff 	.word	0xfeff8cff
 8002958:	40012c00 	.word	0x40012c00
 800295c:	fffff3ff 	.word	0xfffff3ff
 8002960:	40014400 	.word	0x40014400
 8002964:	40014800 	.word	0x40014800

08002968 <HAL_TIM_PWM_ConfigChannel>:
{
 8002968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800296a:	0007      	movs	r7, r0
 800296c:	373c      	adds	r7, #60	@ 0x3c
{
 800296e:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 8002970:	783a      	ldrb	r2, [r7, #0]
{
 8002972:	0003      	movs	r3, r0
 8002974:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 8002976:	2002      	movs	r0, #2
 8002978:	2a01      	cmp	r2, #1
 800297a:	d00c      	beq.n	8002996 <HAL_TIM_PWM_ConfigChannel+0x2e>
 800297c:	3801      	subs	r0, #1
 800297e:	7038      	strb	r0, [r7, #0]
  switch (Channel)
 8002980:	2d0c      	cmp	r5, #12
 8002982:	d051      	beq.n	8002a28 <HAL_TIM_PWM_ConfigChannel+0xc0>
 8002984:	d808      	bhi.n	8002998 <HAL_TIM_PWM_ConfigChannel+0x30>
 8002986:	2d04      	cmp	r5, #4
 8002988:	d02d      	beq.n	80029e6 <HAL_TIM_PWM_ConfigChannel+0x7e>
 800298a:	2d08      	cmp	r5, #8
 800298c:	d03c      	beq.n	8002a08 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800298e:	2d00      	cmp	r5, #0
 8002990:	d017      	beq.n	80029c2 <HAL_TIM_PWM_ConfigChannel+0x5a>
  __HAL_UNLOCK(htim);
 8002992:	2300      	movs	r3, #0
 8002994:	703b      	strb	r3, [r7, #0]
}
 8002996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8002998:	2d10      	cmp	r5, #16
 800299a:	d058      	beq.n	8002a4e <HAL_TIM_PWM_ConfigChannel+0xe6>
 800299c:	2d14      	cmp	r5, #20
 800299e:	d1f8      	bne.n	8002992 <HAL_TIM_PWM_ConfigChannel+0x2a>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80029a0:	681d      	ldr	r5, [r3, #0]
 80029a2:	0028      	movs	r0, r5
 80029a4:	f7ff fda2 	bl	80024ec <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80029a8:	2380      	movs	r3, #128	@ 0x80
 80029aa:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	4313      	orrs	r3, r2
 80029b0:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80029b2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80029b4:	4a2e      	ldr	r2, [pc, #184]	@ (8002a70 <HAL_TIM_PWM_ConfigChannel+0x108>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80029ba:	6923      	ldr	r3, [r4, #16]
 80029bc:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 80029be:	021b      	lsls	r3, r3, #8
 80029c0:	e053      	b.n	8002a6a <HAL_TIM_PWM_ConfigChannel+0x102>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029c2:	681d      	ldr	r5, [r3, #0]
 80029c4:	0028      	movs	r0, r5
 80029c6:	f7ff fcb5 	bl	8002334 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029ca:	2308      	movs	r3, #8
 80029cc:	69aa      	ldr	r2, [r5, #24]
 80029ce:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029d0:	2204      	movs	r2, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029d2:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029d4:	69ab      	ldr	r3, [r5, #24]
 80029d6:	4393      	bics	r3, r2
 80029d8:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029da:	69ab      	ldr	r3, [r5, #24]
 80029dc:	6922      	ldr	r2, [r4, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029de:	4313      	orrs	r3, r2
 80029e0:	61ab      	str	r3, [r5, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80029e2:	2000      	movs	r0, #0
 80029e4:	e7d5      	b.n	8002992 <HAL_TIM_PWM_ConfigChannel+0x2a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029e6:	681d      	ldr	r5, [r3, #0]
 80029e8:	0028      	movs	r0, r5
 80029ea:	f7ff ff81 	bl	80028f0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029ee:	2380      	movs	r3, #128	@ 0x80
 80029f0:	69aa      	ldr	r2, [r5, #24]
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029f8:	69ab      	ldr	r3, [r5, #24]
 80029fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002a70 <HAL_TIM_PWM_ConfigChannel+0x108>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a00:	6923      	ldr	r3, [r4, #16]
 8002a02:	69aa      	ldr	r2, [r5, #24]
 8002a04:	021b      	lsls	r3, r3, #8
 8002a06:	e7ea      	b.n	80029de <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a08:	681e      	ldr	r6, [r3, #0]
 8002a0a:	0030      	movs	r0, r6
 8002a0c:	f7ff fcc8 	bl	80023a0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a10:	2204      	movs	r2, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a12:	69f3      	ldr	r3, [r6, #28]
 8002a14:	431d      	orrs	r5, r3
 8002a16:	61f5      	str	r5, [r6, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a18:	69f3      	ldr	r3, [r6, #28]
 8002a1a:	4393      	bics	r3, r2
 8002a1c:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a1e:	69f3      	ldr	r3, [r6, #28]
 8002a20:	6922      	ldr	r2, [r4, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61f3      	str	r3, [r6, #28]
      break;
 8002a26:	e7dc      	b.n	80029e2 <HAL_TIM_PWM_ConfigChannel+0x7a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a28:	681d      	ldr	r5, [r3, #0]
 8002a2a:	0028      	movs	r0, r5
 8002a2c:	f7ff fcfa 	bl	8002424 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a30:	2380      	movs	r3, #128	@ 0x80
 8002a32:	69ea      	ldr	r2, [r5, #28]
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a3a:	69eb      	ldr	r3, [r5, #28]
 8002a3c:	4a0c      	ldr	r2, [pc, #48]	@ (8002a70 <HAL_TIM_PWM_ConfigChannel+0x108>)
 8002a3e:	4013      	ands	r3, r2
 8002a40:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a42:	6923      	ldr	r3, [r4, #16]
 8002a44:	69ea      	ldr	r2, [r5, #28]
 8002a46:	021b      	lsls	r3, r3, #8
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61eb      	str	r3, [r5, #28]
      break;
 8002a4c:	e7c9      	b.n	80029e2 <HAL_TIM_PWM_ConfigChannel+0x7a>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002a4e:	681d      	ldr	r5, [r3, #0]
 8002a50:	0028      	movs	r0, r5
 8002a52:	f7ff fd1b 	bl	800248c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002a56:	2308      	movs	r3, #8
 8002a58:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8002a5a:	4313      	orrs	r3, r2
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002a5c:	2204      	movs	r2, #4
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002a5e:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002a60:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8002a62:	4393      	bics	r3, r2
 8002a64:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002a66:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8002a68:	6922      	ldr	r2, [r4, #16]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	656b      	str	r3, [r5, #84]	@ 0x54
      break;
 8002a6e:	e7b8      	b.n	80029e2 <HAL_TIM_PWM_ConfigChannel+0x7a>
 8002a70:	fffffbff 	.word	0xfffffbff

08002a74 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a74:	231f      	movs	r3, #31
{
 8002a76:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a78:	2401      	movs	r4, #1
 8002a7a:	4019      	ands	r1, r3
 8002a7c:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a7e:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8002a80:	6a03      	ldr	r3, [r0, #32]
 8002a82:	43a3      	bics	r3, r4
 8002a84:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a86:	6a03      	ldr	r3, [r0, #32]
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	6202      	str	r2, [r0, #32]
}
 8002a8c:	bd10      	pop	{r4, pc}
	...

08002a90 <HAL_TIM_OC_Start_DMA>:
{
 8002a90:	b570      	push	{r4, r5, r6, lr}
 8002a92:	000e      	movs	r6, r1
 8002a94:	0005      	movs	r5, r0
 8002a96:	0011      	movs	r1, r2
 8002a98:	2e08      	cmp	r6, #8
 8002a9a:	d01c      	beq.n	8002ad6 <HAL_TIM_OC_Start_DMA+0x46>
 8002a9c:	d806      	bhi.n	8002aac <HAL_TIM_OC_Start_DMA+0x1c>
 8002a9e:	2e00      	cmp	r6, #0
 8002aa0:	d00b      	beq.n	8002aba <HAL_TIM_OC_Start_DMA+0x2a>
 8002aa2:	2e04      	cmp	r6, #4
 8002aa4:	d014      	beq.n	8002ad0 <HAL_TIM_OC_Start_DMA+0x40>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002aa6:	002a      	movs	r2, r5
 8002aa8:	3243      	adds	r2, #67	@ 0x43
 8002aaa:	e008      	b.n	8002abe <HAL_TIM_OC_Start_DMA+0x2e>
 8002aac:	2e0c      	cmp	r6, #12
 8002aae:	d015      	beq.n	8002adc <HAL_TIM_OC_Start_DMA+0x4c>
 8002ab0:	2e10      	cmp	r6, #16
 8002ab2:	d1f8      	bne.n	8002aa6 <HAL_TIM_OC_Start_DMA+0x16>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	3242      	adds	r2, #66	@ 0x42
 8002ab8:	e001      	b.n	8002abe <HAL_TIM_OC_Start_DMA+0x2e>
 8002aba:	0002      	movs	r2, r0
 8002abc:	323e      	adds	r2, #62	@ 0x3e
 8002abe:	7814      	ldrb	r4, [r2, #0]
    return HAL_BUSY;
 8002ac0:	2002      	movs	r0, #2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002ac2:	3c02      	subs	r4, #2
 8002ac4:	4262      	negs	r2, r4
 8002ac6:	4154      	adcs	r4, r2
 8002ac8:	b2e4      	uxtb	r4, r4
 8002aca:	2c00      	cmp	r4, #0
 8002acc:	d009      	beq.n	8002ae2 <HAL_TIM_OC_Start_DMA+0x52>
}
 8002ace:	bd70      	pop	{r4, r5, r6, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002ad0:	0002      	movs	r2, r0
 8002ad2:	323f      	adds	r2, #63	@ 0x3f
 8002ad4:	e7f3      	b.n	8002abe <HAL_TIM_OC_Start_DMA+0x2e>
 8002ad6:	0002      	movs	r2, r0
 8002ad8:	3240      	adds	r2, #64	@ 0x40
 8002ada:	e7f0      	b.n	8002abe <HAL_TIM_OC_Start_DMA+0x2e>
 8002adc:	0002      	movs	r2, r0
 8002ade:	3241      	adds	r2, #65	@ 0x41
 8002ae0:	e7ed      	b.n	8002abe <HAL_TIM_OC_Start_DMA+0x2e>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002ae2:	2e08      	cmp	r6, #8
 8002ae4:	d024      	beq.n	8002b30 <HAL_TIM_OC_Start_DMA+0xa0>
 8002ae6:	d806      	bhi.n	8002af6 <HAL_TIM_OC_Start_DMA+0x66>
 8002ae8:	2e00      	cmp	r6, #0
 8002aea:	d00b      	beq.n	8002b04 <HAL_TIM_OC_Start_DMA+0x74>
 8002aec:	2e04      	cmp	r6, #4
 8002aee:	d01c      	beq.n	8002b2a <HAL_TIM_OC_Start_DMA+0x9a>
 8002af0:	002a      	movs	r2, r5
 8002af2:	3243      	adds	r2, #67	@ 0x43
 8002af4:	e008      	b.n	8002b08 <HAL_TIM_OC_Start_DMA+0x78>
 8002af6:	2e0c      	cmp	r6, #12
 8002af8:	d025      	beq.n	8002b46 <HAL_TIM_OC_Start_DMA+0xb6>
 8002afa:	2e10      	cmp	r6, #16
 8002afc:	d1f8      	bne.n	8002af0 <HAL_TIM_OC_Start_DMA+0x60>
 8002afe:	002a      	movs	r2, r5
 8002b00:	3242      	adds	r2, #66	@ 0x42
 8002b02:	e017      	b.n	8002b34 <HAL_TIM_OC_Start_DMA+0xa4>
 8002b04:	002a      	movs	r2, r5
 8002b06:	323e      	adds	r2, #62	@ 0x3e
 8002b08:	7812      	ldrb	r2, [r2, #0]
 8002b0a:	2a01      	cmp	r2, #1
 8002b0c:	d119      	bne.n	8002b42 <HAL_TIM_OC_Start_DMA+0xb2>
    if ((pData == NULL) || (Length == 0U))
 8002b0e:	2900      	cmp	r1, #0
 8002b10:	d017      	beq.n	8002b42 <HAL_TIM_OC_Start_DMA+0xb2>
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d015      	beq.n	8002b42 <HAL_TIM_OC_Start_DMA+0xb2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b16:	2202      	movs	r2, #2
 8002b18:	2e08      	cmp	r6, #8
 8002b1a:	d066      	beq.n	8002bea <HAL_TIM_OC_Start_DMA+0x15a>
 8002b1c:	d816      	bhi.n	8002b4c <HAL_TIM_OC_Start_DMA+0xbc>
 8002b1e:	2e00      	cmp	r6, #0
 8002b20:	d01b      	beq.n	8002b5a <HAL_TIM_OC_Start_DMA+0xca>
 8002b22:	2e04      	cmp	r6, #4
 8002b24:	d04c      	beq.n	8002bc0 <HAL_TIM_OC_Start_DMA+0x130>
 8002b26:	3543      	adds	r5, #67	@ 0x43
 8002b28:	e015      	b.n	8002b56 <HAL_TIM_OC_Start_DMA+0xc6>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002b2a:	002a      	movs	r2, r5
 8002b2c:	323f      	adds	r2, #63	@ 0x3f
 8002b2e:	e7eb      	b.n	8002b08 <HAL_TIM_OC_Start_DMA+0x78>
 8002b30:	002a      	movs	r2, r5
 8002b32:	3240      	adds	r2, #64	@ 0x40
 8002b34:	7812      	ldrb	r2, [r2, #0]
 8002b36:	3a01      	subs	r2, #1
 8002b38:	4250      	negs	r0, r2
 8002b3a:	4142      	adcs	r2, r0
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	2a00      	cmp	r2, #0
 8002b40:	d1e5      	bne.n	8002b0e <HAL_TIM_OC_Start_DMA+0x7e>
      return HAL_ERROR;
 8002b42:	2001      	movs	r0, #1
 8002b44:	e7c3      	b.n	8002ace <HAL_TIM_OC_Start_DMA+0x3e>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002b46:	002a      	movs	r2, r5
 8002b48:	3241      	adds	r2, #65	@ 0x41
 8002b4a:	e7f3      	b.n	8002b34 <HAL_TIM_OC_Start_DMA+0xa4>
 8002b4c:	2e0c      	cmp	r6, #12
 8002b4e:	d061      	beq.n	8002c14 <HAL_TIM_OC_Start_DMA+0x184>
 8002b50:	2e10      	cmp	r6, #16
 8002b52:	d1e8      	bne.n	8002b26 <HAL_TIM_OC_Start_DMA+0x96>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b54:	3542      	adds	r5, #66	@ 0x42
 8002b56:	702a      	strb	r2, [r5, #0]
  switch (Channel)
 8002b58:	e7f3      	b.n	8002b42 <HAL_TIM_OC_Start_DMA+0xb2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b5a:	0028      	movs	r0, r5
 8002b5c:	303e      	adds	r0, #62	@ 0x3e
 8002b5e:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002b60:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002b62:	4a3d      	ldr	r2, [pc, #244]	@ (8002c58 <HAL_TIM_OC_Start_DMA+0x1c8>)
 8002b64:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002b66:	4a3d      	ldr	r2, [pc, #244]	@ (8002c5c <HAL_TIM_OC_Start_DMA+0x1cc>)
 8002b68:	6302      	str	r2, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002b6a:	4a3d      	ldr	r2, [pc, #244]	@ (8002c60 <HAL_TIM_OC_Start_DMA+0x1d0>)
 8002b6c:	6342      	str	r2, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002b6e:	682a      	ldr	r2, [r5, #0]
 8002b70:	3234      	adds	r2, #52	@ 0x34
 8002b72:	f7fe fd75 	bl	8001660 <HAL_DMA_Start_IT>
 8002b76:	2800      	cmp	r0, #0
 8002b78:	d1e3      	bne.n	8002b42 <HAL_TIM_OC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002b7a:	2380      	movs	r3, #128	@ 0x80
 8002b7c:	682a      	ldr	r2, [r5, #0]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	68d1      	ldr	r1, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b82:	682c      	ldr	r4, [r5, #0]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002b84:	430b      	orrs	r3, r1
 8002b86:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b88:	0031      	movs	r1, r6
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	0020      	movs	r0, r4
 8002b8e:	f7ff ff71 	bl	8002a74 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b92:	4a34      	ldr	r2, [pc, #208]	@ (8002c64 <HAL_TIM_OC_Start_DMA+0x1d4>)
 8002b94:	4294      	cmp	r4, r2
 8002b96:	d005      	beq.n	8002ba4 <HAL_TIM_OC_Start_DMA+0x114>
 8002b98:	4b33      	ldr	r3, [pc, #204]	@ (8002c68 <HAL_TIM_OC_Start_DMA+0x1d8>)
 8002b9a:	429c      	cmp	r4, r3
 8002b9c:	d002      	beq.n	8002ba4 <HAL_TIM_OC_Start_DMA+0x114>
 8002b9e:	4b33      	ldr	r3, [pc, #204]	@ (8002c6c <HAL_TIM_OC_Start_DMA+0x1dc>)
 8002ba0:	429c      	cmp	r4, r3
 8002ba2:	d14c      	bne.n	8002c3e <HAL_TIM_OC_Start_DMA+0x1ae>
      __HAL_TIM_MOE_ENABLE(htim);
 8002ba4:	2380      	movs	r3, #128	@ 0x80
 8002ba6:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	430b      	orrs	r3, r1
 8002bac:	6463      	str	r3, [r4, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bae:	4294      	cmp	r4, r2
 8002bb0:	d148      	bne.n	8002c44 <HAL_TIM_OC_Start_DMA+0x1b4>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bb2:	68a3      	ldr	r3, [r4, #8]
 8002bb4:	4a2e      	ldr	r2, [pc, #184]	@ (8002c70 <HAL_TIM_OC_Start_DMA+0x1e0>)
 8002bb6:	4013      	ands	r3, r2
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb8:	2b06      	cmp	r3, #6
 8002bba:	d148      	bne.n	8002c4e <HAL_TIM_OC_Start_DMA+0x1be>
    return HAL_BUSY;
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	e786      	b.n	8002ace <HAL_TIM_OC_Start_DMA+0x3e>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bc0:	0028      	movs	r0, r5
 8002bc2:	303f      	adds	r0, #63	@ 0x3f
 8002bc4:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002bc6:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8002bc8:	4a23      	ldr	r2, [pc, #140]	@ (8002c58 <HAL_TIM_OC_Start_DMA+0x1c8>)
 8002bca:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002bcc:	4a23      	ldr	r2, [pc, #140]	@ (8002c5c <HAL_TIM_OC_Start_DMA+0x1cc>)
 8002bce:	6302      	str	r2, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002bd0:	4a23      	ldr	r2, [pc, #140]	@ (8002c60 <HAL_TIM_OC_Start_DMA+0x1d0>)
 8002bd2:	6342      	str	r2, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002bd4:	682a      	ldr	r2, [r5, #0]
 8002bd6:	3238      	adds	r2, #56	@ 0x38
 8002bd8:	f7fe fd42 	bl	8001660 <HAL_DMA_Start_IT>
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	d1b0      	bne.n	8002b42 <HAL_TIM_OC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002be0:	2380      	movs	r3, #128	@ 0x80
 8002be2:	682a      	ldr	r2, [r5, #0]
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	68d1      	ldr	r1, [r2, #12]
 8002be8:	e7cb      	b.n	8002b82 <HAL_TIM_OC_Start_DMA+0xf2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bea:	0028      	movs	r0, r5
 8002bec:	3040      	adds	r0, #64	@ 0x40
 8002bee:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002bf0:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8002bf2:	4a19      	ldr	r2, [pc, #100]	@ (8002c58 <HAL_TIM_OC_Start_DMA+0x1c8>)
 8002bf4:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002bf6:	4a19      	ldr	r2, [pc, #100]	@ (8002c5c <HAL_TIM_OC_Start_DMA+0x1cc>)
 8002bf8:	6302      	str	r2, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002bfa:	4a19      	ldr	r2, [pc, #100]	@ (8002c60 <HAL_TIM_OC_Start_DMA+0x1d0>)
 8002bfc:	6342      	str	r2, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002bfe:	682a      	ldr	r2, [r5, #0]
 8002c00:	323c      	adds	r2, #60	@ 0x3c
 8002c02:	f7fe fd2d 	bl	8001660 <HAL_DMA_Start_IT>
 8002c06:	2800      	cmp	r0, #0
 8002c08:	d19b      	bne.n	8002b42 <HAL_TIM_OC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002c0a:	2380      	movs	r3, #128	@ 0x80
 8002c0c:	682a      	ldr	r2, [r5, #0]
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	68d1      	ldr	r1, [r2, #12]
 8002c12:	e7b6      	b.n	8002b82 <HAL_TIM_OC_Start_DMA+0xf2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c14:	0028      	movs	r0, r5
 8002c16:	3041      	adds	r0, #65	@ 0x41
 8002c18:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c1a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8002c1c:	4a0e      	ldr	r2, [pc, #56]	@ (8002c58 <HAL_TIM_OC_Start_DMA+0x1c8>)
 8002c1e:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002c20:	4a0e      	ldr	r2, [pc, #56]	@ (8002c5c <HAL_TIM_OC_Start_DMA+0x1cc>)
 8002c22:	6302      	str	r2, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002c24:	4a0e      	ldr	r2, [pc, #56]	@ (8002c60 <HAL_TIM_OC_Start_DMA+0x1d0>)
 8002c26:	6342      	str	r2, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002c28:	682a      	ldr	r2, [r5, #0]
 8002c2a:	3240      	adds	r2, #64	@ 0x40
 8002c2c:	f7fe fd18 	bl	8001660 <HAL_DMA_Start_IT>
 8002c30:	2800      	cmp	r0, #0
 8002c32:	d186      	bne.n	8002b42 <HAL_TIM_OC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002c34:	2380      	movs	r3, #128	@ 0x80
 8002c36:	682a      	ldr	r2, [r5, #0]
 8002c38:	015b      	lsls	r3, r3, #5
 8002c3a:	68d1      	ldr	r1, [r2, #12]
 8002c3c:	e7a1      	b.n	8002b82 <HAL_TIM_OC_Start_DMA+0xf2>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c74 <HAL_TIM_OC_Start_DMA+0x1e4>)
 8002c40:	429c      	cmp	r4, r3
 8002c42:	d0b6      	beq.n	8002bb2 <HAL_TIM_OC_Start_DMA+0x122>
      __HAL_TIM_ENABLE(htim);
 8002c44:	2301      	movs	r3, #1
 8002c46:	6822      	ldr	r2, [r4, #0]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	6023      	str	r3, [r4, #0]
 8002c4c:	e7b6      	b.n	8002bbc <HAL_TIM_OC_Start_DMA+0x12c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4e:	2280      	movs	r2, #128	@ 0x80
 8002c50:	0252      	lsls	r2, r2, #9
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d1f6      	bne.n	8002c44 <HAL_TIM_OC_Start_DMA+0x1b4>
 8002c56:	e7b1      	b.n	8002bbc <HAL_TIM_OC_Start_DMA+0x12c>
 8002c58:	0800255d 	.word	0x0800255d
 8002c5c:	080025cf 	.word	0x080025cf
 8002c60:	08002763 	.word	0x08002763
 8002c64:	40012c00 	.word	0x40012c00
 8002c68:	40014400 	.word	0x40014400
 8002c6c:	40014800 	.word	0x40014800
 8002c70:	00010007 	.word	0x00010007
 8002c74:	40000400 	.word	0x40000400

08002c78 <HAL_TIM_PWM_Start_DMA>:
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
 8002c78:	b510      	push	{r4, lr}
 8002c7a:	f7ff ff09 	bl	8002a90 <HAL_TIM_OC_Start_DMA>
 8002c7e:	bd10      	pop	{r4, pc}

08002c80 <HAL_TIM_OC_Stop_DMA>:
{
 8002c80:	b570      	push	{r4, r5, r6, lr}
 8002c82:	0004      	movs	r4, r0
 8002c84:	000e      	movs	r6, r1
  switch (Channel)
 8002c86:	2908      	cmp	r1, #8
 8002c88:	d04b      	beq.n	8002d22 <HAL_TIM_OC_Stop_DMA+0xa2>
 8002c8a:	d805      	bhi.n	8002c98 <HAL_TIM_OC_Stop_DMA+0x18>
 8002c8c:	2900      	cmp	r1, #0
 8002c8e:	d00c      	beq.n	8002caa <HAL_TIM_OC_Stop_DMA+0x2a>
 8002c90:	2904      	cmp	r1, #4
 8002c92:	d03f      	beq.n	8002d14 <HAL_TIM_OC_Stop_DMA+0x94>
 8002c94:	2001      	movs	r0, #1
}
 8002c96:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8002c98:	290c      	cmp	r1, #12
 8002c9a:	d1fb      	bne.n	8002c94 <HAL_TIM_OC_Stop_DMA+0x14>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002c9c:	6802      	ldr	r2, [r0, #0]
 8002c9e:	4929      	ldr	r1, [pc, #164]	@ (8002d44 <HAL_TIM_OC_Stop_DMA+0xc4>)
 8002ca0:	68d3      	ldr	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002ca2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002ca4:	400b      	ands	r3, r1
 8002ca6:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002ca8:	e005      	b.n	8002cb6 <HAL_TIM_OC_Stop_DMA+0x36>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002caa:	6802      	ldr	r2, [r0, #0]
 8002cac:	4926      	ldr	r1, [pc, #152]	@ (8002d48 <HAL_TIM_OC_Stop_DMA+0xc8>)
 8002cae:	68d3      	ldr	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002cb0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002cb2:	400b      	ands	r3, r1
 8002cb4:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002cb6:	f7fe fd55 	bl	8001764 <HAL_DMA_Abort_IT>
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002cba:	6825      	ldr	r5, [r4, #0]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	0031      	movs	r1, r6
 8002cc0:	0028      	movs	r0, r5
 8002cc2:	f7ff fed7 	bl	8002a74 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cc6:	4b21      	ldr	r3, [pc, #132]	@ (8002d4c <HAL_TIM_OC_Stop_DMA+0xcc>)
 8002cc8:	4a21      	ldr	r2, [pc, #132]	@ (8002d50 <HAL_TIM_OC_Stop_DMA+0xd0>)
 8002cca:	429d      	cmp	r5, r3
 8002ccc:	d005      	beq.n	8002cda <HAL_TIM_OC_Stop_DMA+0x5a>
 8002cce:	4b21      	ldr	r3, [pc, #132]	@ (8002d54 <HAL_TIM_OC_Stop_DMA+0xd4>)
 8002cd0:	429d      	cmp	r5, r3
 8002cd2:	d002      	beq.n	8002cda <HAL_TIM_OC_Stop_DMA+0x5a>
 8002cd4:	4b20      	ldr	r3, [pc, #128]	@ (8002d58 <HAL_TIM_OC_Stop_DMA+0xd8>)
 8002cd6:	429d      	cmp	r5, r3
 8002cd8:	d10a      	bne.n	8002cf0 <HAL_TIM_OC_Stop_DMA+0x70>
      __HAL_TIM_MOE_DISABLE(htim);
 8002cda:	6a2b      	ldr	r3, [r5, #32]
 8002cdc:	4213      	tst	r3, r2
 8002cde:	d107      	bne.n	8002cf0 <HAL_TIM_OC_Stop_DMA+0x70>
 8002ce0:	6a29      	ldr	r1, [r5, #32]
 8002ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d5c <HAL_TIM_OC_Stop_DMA+0xdc>)
 8002ce4:	4219      	tst	r1, r3
 8002ce6:	d103      	bne.n	8002cf0 <HAL_TIM_OC_Stop_DMA+0x70>
 8002ce8:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8002cea:	491d      	ldr	r1, [pc, #116]	@ (8002d60 <HAL_TIM_OC_Stop_DMA+0xe0>)
 8002cec:	400b      	ands	r3, r1
 8002cee:	646b      	str	r3, [r5, #68]	@ 0x44
    __HAL_TIM_DISABLE(htim);
 8002cf0:	6a2b      	ldr	r3, [r5, #32]
 8002cf2:	4213      	tst	r3, r2
 8002cf4:	d107      	bne.n	8002d06 <HAL_TIM_OC_Stop_DMA+0x86>
 8002cf6:	6a2a      	ldr	r2, [r5, #32]
 8002cf8:	4b18      	ldr	r3, [pc, #96]	@ (8002d5c <HAL_TIM_OC_Stop_DMA+0xdc>)
 8002cfa:	421a      	tst	r2, r3
 8002cfc:	d103      	bne.n	8002d06 <HAL_TIM_OC_Stop_DMA+0x86>
 8002cfe:	2201      	movs	r2, #1
 8002d00:	682b      	ldr	r3, [r5, #0]
 8002d02:	4393      	bics	r3, r2
 8002d04:	602b      	str	r3, [r5, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002d06:	2301      	movs	r3, #1
 8002d08:	2e00      	cmp	r6, #0
 8002d0a:	d111      	bne.n	8002d30 <HAL_TIM_OC_Stop_DMA+0xb0>
 8002d0c:	343e      	adds	r4, #62	@ 0x3e
  switch (Channel)
 8002d0e:	2000      	movs	r0, #0
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002d10:	7023      	strb	r3, [r4, #0]
 8002d12:	e7c0      	b.n	8002c96 <HAL_TIM_OC_Stop_DMA+0x16>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002d14:	6802      	ldr	r2, [r0, #0]
 8002d16:	4913      	ldr	r1, [pc, #76]	@ (8002d64 <HAL_TIM_OC_Stop_DMA+0xe4>)
 8002d18:	68d3      	ldr	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002d1a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002d1c:	400b      	ands	r3, r1
 8002d1e:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002d20:	e7c9      	b.n	8002cb6 <HAL_TIM_OC_Stop_DMA+0x36>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002d22:	6802      	ldr	r2, [r0, #0]
 8002d24:	4910      	ldr	r1, [pc, #64]	@ (8002d68 <HAL_TIM_OC_Stop_DMA+0xe8>)
 8002d26:	68d3      	ldr	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002d28:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002d2a:	400b      	ands	r3, r1
 8002d2c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002d2e:	e7c2      	b.n	8002cb6 <HAL_TIM_OC_Stop_DMA+0x36>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002d30:	2e04      	cmp	r6, #4
 8002d32:	d101      	bne.n	8002d38 <HAL_TIM_OC_Stop_DMA+0xb8>
 8002d34:	343f      	adds	r4, #63	@ 0x3f
 8002d36:	e7ea      	b.n	8002d0e <HAL_TIM_OC_Stop_DMA+0x8e>
 8002d38:	2e08      	cmp	r6, #8
 8002d3a:	d101      	bne.n	8002d40 <HAL_TIM_OC_Stop_DMA+0xc0>
 8002d3c:	3440      	adds	r4, #64	@ 0x40
 8002d3e:	e7e6      	b.n	8002d0e <HAL_TIM_OC_Stop_DMA+0x8e>
 8002d40:	3441      	adds	r4, #65	@ 0x41
 8002d42:	e7e4      	b.n	8002d0e <HAL_TIM_OC_Stop_DMA+0x8e>
 8002d44:	ffffefff 	.word	0xffffefff
 8002d48:	fffffdff 	.word	0xfffffdff
 8002d4c:	40012c00 	.word	0x40012c00
 8002d50:	00001111 	.word	0x00001111
 8002d54:	40014400 	.word	0x40014400
 8002d58:	40014800 	.word	0x40014800
 8002d5c:	00000444 	.word	0x00000444
 8002d60:	ffff7fff 	.word	0xffff7fff
 8002d64:	fffffbff 	.word	0xfffffbff
 8002d68:	fffff7ff 	.word	0xfffff7ff

08002d6c <HAL_TIM_PWM_Stop_DMA>:
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
 8002d6c:	b510      	push	{r4, lr}
 8002d6e:	f7ff ff87 	bl	8002c80 <HAL_TIM_OC_Stop_DMA>
 8002d72:	bd10      	pop	{r4, pc}

08002d74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002d74:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d76:	0004      	movs	r4, r0
 8002d78:	343c      	adds	r4, #60	@ 0x3c
 8002d7a:	7823      	ldrb	r3, [r4, #0]
{
 8002d7c:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8002d7e:	2002      	movs	r0, #2
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d039      	beq.n	8002df8 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002d84:	481d      	ldr	r0, [pc, #116]	@ (8002dfc <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8002d86:	68cb      	ldr	r3, [r1, #12]
 8002d88:	4003      	ands	r3, r0
 8002d8a:	6888      	ldr	r0, [r1, #8]
 8002d8c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d8e:	481c      	ldr	r0, [pc, #112]	@ (8002e00 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8002d90:	4003      	ands	r3, r0
 8002d92:	6848      	ldr	r0, [r1, #4]
 8002d94:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d96:	481b      	ldr	r0, [pc, #108]	@ (8002e04 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8002d98:	4003      	ands	r3, r0
 8002d9a:	6808      	ldr	r0, [r1, #0]
 8002d9c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d9e:	481a      	ldr	r0, [pc, #104]	@ (8002e08 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8002da0:	4003      	ands	r3, r0
 8002da2:	6908      	ldr	r0, [r1, #16]
 8002da4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002da6:	4819      	ldr	r0, [pc, #100]	@ (8002e0c <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8002da8:	4003      	ands	r3, r0
 8002daa:	6948      	ldr	r0, [r1, #20]
 8002dac:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002dae:	4818      	ldr	r0, [pc, #96]	@ (8002e10 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8002db0:	4003      	ands	r3, r0
 8002db2:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 8002db4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002db6:	4817      	ldr	r0, [pc, #92]	@ (8002e14 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8002db8:	4003      	ands	r3, r0
 8002dba:	6988      	ldr	r0, [r1, #24]
 8002dbc:	0400      	lsls	r0, r0, #16
 8002dbe:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002dc0:	4815      	ldr	r0, [pc, #84]	@ (8002e18 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002dc2:	4003      	ands	r3, r0
 8002dc4:	69c8      	ldr	r0, [r1, #28]
 8002dc6:	4303      	orrs	r3, r0

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002dc8:	6810      	ldr	r0, [r2, #0]
 8002dca:	4a14      	ldr	r2, [pc, #80]	@ (8002e1c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002dcc:	4290      	cmp	r0, r2
 8002dce:	d110      	bne.n	8002df2 <HAL_TIMEx_ConfigBreakDeadTime+0x7e>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002dd0:	4a13      	ldr	r2, [pc, #76]	@ (8002e20 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8002dd6:	0512      	lsls	r2, r2, #20
 8002dd8:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002dda:	4b12      	ldr	r3, [pc, #72]	@ (8002e24 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002ddc:	401a      	ands	r2, r3
 8002dde:	6a0b      	ldr	r3, [r1, #32]
 8002de0:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002de2:	4b11      	ldr	r3, [pc, #68]	@ (8002e28 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002de4:	401a      	ands	r2, r3
 8002de6:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8002de8:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002dea:	4b10      	ldr	r3, [pc, #64]	@ (8002e2c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002dec:	401a      	ands	r2, r3
 8002dee:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8002df0:	4313      	orrs	r3, r2
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002df2:	6443      	str	r3, [r0, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002df4:	2000      	movs	r0, #0
 8002df6:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8002df8:	bd10      	pop	{r4, pc}
 8002dfa:	46c0      	nop			@ (mov r8, r8)
 8002dfc:	fffffcff 	.word	0xfffffcff
 8002e00:	fffffbff 	.word	0xfffffbff
 8002e04:	fffff7ff 	.word	0xfffff7ff
 8002e08:	ffffefff 	.word	0xffffefff
 8002e0c:	ffffdfff 	.word	0xffffdfff
 8002e10:	ffffbfff 	.word	0xffffbfff
 8002e14:	fff0ffff 	.word	0xfff0ffff
 8002e18:	efffffff 	.word	0xefffffff
 8002e1c:	40012c00 	.word	0x40012c00
 8002e20:	ff0fffff 	.word	0xff0fffff
 8002e24:	feffffff 	.word	0xfeffffff
 8002e28:	fdffffff 	.word	0xfdffffff
 8002e2c:	dfffffff 	.word	0xdfffffff

08002e30 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8002e30:	4770      	bx	lr

08002e32 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8002e32:	4770      	bx	lr

08002e34 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8002e34:	4770      	bx	lr
	...

08002e38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e38:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e3a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e44:	6801      	ldr	r1, [r0, #0]
 8002e46:	4d13      	ldr	r5, [pc, #76]	@ (8002e94 <UART_EndRxTransfer+0x5c>)
 8002e48:	680b      	ldr	r3, [r1, #0]
 8002e4a:	402b      	ands	r3, r5
 8002e4c:	600b      	str	r3, [r1, #0]
 8002e4e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e52:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e56:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002e5a:	6802      	ldr	r2, [r0, #0]
 8002e5c:	4c0e      	ldr	r4, [pc, #56]	@ (8002e98 <UART_EndRxTransfer+0x60>)
 8002e5e:	6893      	ldr	r3, [r2, #8]
 8002e60:	4023      	ands	r3, r4
 8002e62:	6093      	str	r3, [r2, #8]
 8002e64:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e68:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d10a      	bne.n	8002e84 <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e6e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e72:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e76:	2410      	movs	r4, #16
 8002e78:	6802      	ldr	r2, [r0, #0]
 8002e7a:	6813      	ldr	r3, [r2, #0]
 8002e7c:	43a3      	bics	r3, r4
 8002e7e:	6013      	str	r3, [r2, #0]
 8002e80:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e84:	0003      	movs	r3, r0
 8002e86:	2220      	movs	r2, #32
 8002e88:	338c      	adds	r3, #140	@ 0x8c
 8002e8a:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e90:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8002e92:	bd30      	pop	{r4, r5, pc}
 8002e94:	fffffedf 	.word	0xfffffedf
 8002e98:	effffffe 	.word	0xeffffffe

08002e9c <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8002e9c:	4770      	bx	lr

08002e9e <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8002e9e:	4770      	bx	lr

08002ea0 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002ea0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	0002      	movs	r2, r0
{
 8002ea6:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8002ea8:	325e      	adds	r2, #94	@ 0x5e
 8002eaa:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8002eac:	3a08      	subs	r2, #8
 8002eae:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002eb0:	f7ff fff5 	bl	8002e9e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002eb4:	bd10      	pop	{r4, pc}

08002eb6 <HAL_UARTEx_RxEventCallback>:
}
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_UART_IRQHandler>:
{
 8002eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002eba:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ebc:	4dc1      	ldr	r5, [pc, #772]	@ (80031c4 <HAL_UART_IRQHandler+0x30c>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ebe:	69cb      	ldr	r3, [r1, #28]
{
 8002ec0:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ec2:	680a      	ldr	r2, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ec4:	6888      	ldr	r0, [r1, #8]
  if (errorflags == 0U)
 8002ec6:	422b      	tst	r3, r5
 8002ec8:	d110      	bne.n	8002eec <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002eca:	2520      	movs	r5, #32
 8002ecc:	422b      	tst	r3, r5
 8002ece:	d100      	bne.n	8002ed2 <HAL_UART_IRQHandler+0x1a>
 8002ed0:	e09b      	b.n	800300a <HAL_UART_IRQHandler+0x152>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002ed2:	2680      	movs	r6, #128	@ 0x80
 8002ed4:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002ed6:	4015      	ands	r5, r2
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002ed8:	4006      	ands	r6, r0
 8002eda:	4335      	orrs	r5, r6
 8002edc:	d100      	bne.n	8002ee0 <HAL_UART_IRQHandler+0x28>
 8002ede:	e094      	b.n	800300a <HAL_UART_IRQHandler+0x152>
      if (huart->RxISR != NULL)
 8002ee0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
      huart->TxISR(huart);
 8002ee2:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d000      	beq.n	8002eea <HAL_UART_IRQHandler+0x32>
 8002ee8:	e085      	b.n	8002ff6 <HAL_UART_IRQHandler+0x13e>
 8002eea:	e085      	b.n	8002ff8 <HAL_UART_IRQHandler+0x140>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002eec:	4db6      	ldr	r5, [pc, #728]	@ (80031c8 <HAL_UART_IRQHandler+0x310>)
 8002eee:	4005      	ands	r5, r0
 8002ef0:	9500      	str	r5, [sp, #0]
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ef2:	4db6      	ldr	r5, [pc, #728]	@ (80031cc <HAL_UART_IRQHandler+0x314>)
 8002ef4:	9e00      	ldr	r6, [sp, #0]
 8002ef6:	4015      	ands	r5, r2
 8002ef8:	4335      	orrs	r5, r6
 8002efa:	d100      	bne.n	8002efe <HAL_UART_IRQHandler+0x46>
 8002efc:	e085      	b.n	800300a <HAL_UART_IRQHandler+0x152>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002efe:	0025      	movs	r5, r4
 8002f00:	2601      	movs	r6, #1
 8002f02:	3590      	adds	r5, #144	@ 0x90
 8002f04:	4233      	tst	r3, r6
 8002f06:	d005      	beq.n	8002f14 <HAL_UART_IRQHandler+0x5c>
 8002f08:	05d7      	lsls	r7, r2, #23
 8002f0a:	d503      	bpl.n	8002f14 <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f0c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f0e:	682f      	ldr	r7, [r5, #0]
 8002f10:	433e      	orrs	r6, r7
 8002f12:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f14:	2602      	movs	r6, #2
 8002f16:	4233      	tst	r3, r6
 8002f18:	d00c      	beq.n	8002f34 <HAL_UART_IRQHandler+0x7c>
 8002f1a:	07c7      	lsls	r7, r0, #31
 8002f1c:	d50a      	bpl.n	8002f34 <HAL_UART_IRQHandler+0x7c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f1e:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f20:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f22:	3790      	adds	r7, #144	@ 0x90
 8002f24:	683e      	ldr	r6, [r7, #0]
 8002f26:	9701      	str	r7, [sp, #4]
 8002f28:	46b4      	mov	ip, r6
 8002f2a:	2604      	movs	r6, #4
 8002f2c:	4667      	mov	r7, ip
 8002f2e:	433e      	orrs	r6, r7
 8002f30:	9f01      	ldr	r7, [sp, #4]
 8002f32:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f34:	2604      	movs	r6, #4
 8002f36:	4233      	tst	r3, r6
 8002f38:	d00c      	beq.n	8002f54 <HAL_UART_IRQHandler+0x9c>
 8002f3a:	07c7      	lsls	r7, r0, #31
 8002f3c:	d50a      	bpl.n	8002f54 <HAL_UART_IRQHandler+0x9c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f3e:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f40:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f42:	3790      	adds	r7, #144	@ 0x90
 8002f44:	683e      	ldr	r6, [r7, #0]
 8002f46:	9701      	str	r7, [sp, #4]
 8002f48:	46b4      	mov	ip, r6
 8002f4a:	2602      	movs	r6, #2
 8002f4c:	4667      	mov	r7, ip
 8002f4e:	433e      	orrs	r6, r7
 8002f50:	9f01      	ldr	r7, [sp, #4]
 8002f52:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f54:	2608      	movs	r6, #8
 8002f56:	46b4      	mov	ip, r6
 8002f58:	4233      	tst	r3, r6
 8002f5a:	d009      	beq.n	8002f70 <HAL_UART_IRQHandler+0xb8>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002f5c:	2720      	movs	r7, #32
 8002f5e:	9e00      	ldr	r6, [sp, #0]
 8002f60:	4017      	ands	r7, r2
 8002f62:	4337      	orrs	r7, r6
 8002f64:	d004      	beq.n	8002f70 <HAL_UART_IRQHandler+0xb8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f66:	4666      	mov	r6, ip
 8002f68:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f6a:	682f      	ldr	r7, [r5, #0]
 8002f6c:	433e      	orrs	r6, r7
 8002f6e:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f70:	2680      	movs	r6, #128	@ 0x80
 8002f72:	0136      	lsls	r6, r6, #4
 8002f74:	4233      	tst	r3, r6
 8002f76:	d006      	beq.n	8002f86 <HAL_UART_IRQHandler+0xce>
 8002f78:	0157      	lsls	r7, r2, #5
 8002f7a:	d504      	bpl.n	8002f86 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f7c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f7e:	2120      	movs	r1, #32
 8002f80:	682e      	ldr	r6, [r5, #0]
 8002f82:	4331      	orrs	r1, r6
 8002f84:	6029      	str	r1, [r5, #0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f86:	6829      	ldr	r1, [r5, #0]
 8002f88:	2900      	cmp	r1, #0
 8002f8a:	d035      	beq.n	8002ff8 <HAL_UART_IRQHandler+0x140>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002f8c:	2120      	movs	r1, #32
 8002f8e:	420b      	tst	r3, r1
 8002f90:	d00a      	beq.n	8002fa8 <HAL_UART_IRQHandler+0xf0>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002f92:	2380      	movs	r3, #128	@ 0x80
 8002f94:	055b      	lsls	r3, r3, #21
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002f96:	4011      	ands	r1, r2
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002f98:	4003      	ands	r3, r0
 8002f9a:	4319      	orrs	r1, r3
 8002f9c:	d004      	beq.n	8002fa8 <HAL_UART_IRQHandler+0xf0>
        if (huart->RxISR != NULL)
 8002f9e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_UART_IRQHandler+0xf0>
          huart->RxISR(huart);
 8002fa4:	0020      	movs	r0, r4
 8002fa6:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fa8:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8002faa:	682b      	ldr	r3, [r5, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fac:	2740      	movs	r7, #64	@ 0x40
 8002fae:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002fb0:	2228      	movs	r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fb2:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002fb4:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8002fb6:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fb8:	431e      	orrs	r6, r3
 8002fba:	d022      	beq.n	8003002 <HAL_UART_IRQHandler+0x14a>
        UART_EndRxTransfer(huart);
 8002fbc:	f7ff ff3c 	bl	8002e38 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc0:	6823      	ldr	r3, [r4, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	423b      	tst	r3, r7
 8002fc6:	d018      	beq.n	8002ffa <HAL_UART_IRQHandler+0x142>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fc8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fcc:	2301      	movs	r3, #1
 8002fce:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fd2:	0025      	movs	r5, r4
 8002fd4:	cd04      	ldmia	r5!, {r2}
 8002fd6:	6893      	ldr	r3, [r2, #8]
 8002fd8:	43bb      	bics	r3, r7
 8002fda:	6093      	str	r3, [r2, #8]
 8002fdc:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8002fe0:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d009      	beq.n	8002ffa <HAL_UART_IRQHandler+0x142>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fe6:	4b7a      	ldr	r3, [pc, #488]	@ (80031d0 <HAL_UART_IRQHandler+0x318>)
 8002fe8:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fea:	f7fe fbbb 	bl	8001764 <HAL_DMA_Abort_IT>
 8002fee:	2800      	cmp	r0, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_UART_IRQHandler+0x140>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ff2:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 8002ff4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002ff6:	4798      	blx	r3
}
 8002ff8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8002ffa:	0020      	movs	r0, r4
 8002ffc:	f7ff ff4f 	bl	8002e9e <HAL_UART_ErrorCallback>
 8003000:	e7fa      	b.n	8002ff8 <HAL_UART_IRQHandler+0x140>
        HAL_UART_ErrorCallback(huart);
 8003002:	f7ff ff4c 	bl	8002e9e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003006:	602e      	str	r6, [r5, #0]
 8003008:	e7f6      	b.n	8002ff8 <HAL_UART_IRQHandler+0x140>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800300a:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 800300c:	2d01      	cmp	r5, #1
 800300e:	d000      	beq.n	8003012 <HAL_UART_IRQHandler+0x15a>
 8003010:	e09f      	b.n	8003152 <HAL_UART_IRQHandler+0x29a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003012:	2610      	movs	r6, #16
 8003014:	4233      	tst	r3, r6
 8003016:	d100      	bne.n	800301a <HAL_UART_IRQHandler+0x162>
 8003018:	e09b      	b.n	8003152 <HAL_UART_IRQHandler+0x29a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800301a:	4232      	tst	r2, r6
 800301c:	d100      	bne.n	8003020 <HAL_UART_IRQHandler+0x168>
 800301e:	e098      	b.n	8003152 <HAL_UART_IRQHandler+0x29a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003020:	620e      	str	r6, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003022:	6889      	ldr	r1, [r1, #8]
 8003024:	2340      	movs	r3, #64	@ 0x40
 8003026:	000a      	movs	r2, r1
 8003028:	401a      	ands	r2, r3
 800302a:	4219      	tst	r1, r3
 800302c:	d057      	beq.n	80030de <HAL_UART_IRQHandler+0x226>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800302e:	1d21      	adds	r1, r4, #4
 8003030:	6fca      	ldr	r2, [r1, #124]	@ 0x7c
 8003032:	6810      	ldr	r0, [r2, #0]
 8003034:	6842      	ldr	r2, [r0, #4]
 8003036:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8003038:	2a00      	cmp	r2, #0
 800303a:	d0dd      	beq.n	8002ff8 <HAL_UART_IRQHandler+0x140>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800303c:	0027      	movs	r7, r4
 800303e:	375c      	adds	r7, #92	@ 0x5c
 8003040:	883f      	ldrh	r7, [r7, #0]
 8003042:	4297      	cmp	r7, r2
 8003044:	d9d8      	bls.n	8002ff8 <HAL_UART_IRQHandler+0x140>
        huart->RxXferCount = nb_remaining_rx_data;
 8003046:	0027      	movs	r7, r4
 8003048:	375e      	adds	r7, #94	@ 0x5e
 800304a:	803a      	strh	r2, [r7, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800304c:	6802      	ldr	r2, [r0, #0]
 800304e:	2020      	movs	r0, #32
 8003050:	4684      	mov	ip, r0
 8003052:	4010      	ands	r0, r2
 8003054:	9000      	str	r0, [sp, #0]
 8003056:	4660      	mov	r0, ip
 8003058:	4202      	tst	r2, r0
 800305a:	d132      	bne.n	80030c2 <HAL_UART_IRQHandler+0x20a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800305c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003060:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003064:	6820      	ldr	r0, [r4, #0]
 8003066:	4e5b      	ldr	r6, [pc, #364]	@ (80031d4 <HAL_UART_IRQHandler+0x31c>)
 8003068:	6802      	ldr	r2, [r0, #0]
 800306a:	4032      	ands	r2, r6
 800306c:	6002      	str	r2, [r0, #0]
 800306e:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003072:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003076:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800307a:	6820      	ldr	r0, [r4, #0]
 800307c:	6882      	ldr	r2, [r0, #8]
 800307e:	43aa      	bics	r2, r5
 8003080:	6082      	str	r2, [r0, #8]
 8003082:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003086:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800308a:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800308e:	6820      	ldr	r0, [r4, #0]
 8003090:	6882      	ldr	r2, [r0, #8]
 8003092:	439a      	bics	r2, r3
 8003094:	6082      	str	r2, [r0, #8]
 8003096:	f387 8810 	msr	PRIMASK, r7
          huart->RxState = HAL_UART_STATE_READY;
 800309a:	0023      	movs	r3, r4
 800309c:	4662      	mov	r2, ip
 800309e:	338c      	adds	r3, #140	@ 0x8c
 80030a0:	601a      	str	r2, [r3, #0]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a2:	9b00      	ldr	r3, [sp, #0]
 80030a4:	66e3      	str	r3, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030aa:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ae:	6822      	ldr	r2, [r4, #0]
 80030b0:	350f      	adds	r5, #15
 80030b2:	6813      	ldr	r3, [r2, #0]
 80030b4:	43ab      	bics	r3, r5
 80030b6:	6013      	str	r3, [r2, #0]
 80030b8:	f380 8810 	msr	PRIMASK, r0
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030bc:	6fc8      	ldr	r0, [r1, #124]	@ 0x7c
 80030be:	f7fe fb17 	bl	80016f0 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030c2:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030c4:	0022      	movs	r2, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030c6:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030c8:	0023      	movs	r3, r4
 80030ca:	325c      	adds	r2, #92	@ 0x5c
 80030cc:	335e      	adds	r3, #94	@ 0x5e
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	8811      	ldrh	r1, [r2, #0]
 80030d2:	1ac9      	subs	r1, r1, r3
 80030d4:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030d6:	0020      	movs	r0, r4
 80030d8:	f7ff feed 	bl	8002eb6 <HAL_UARTEx_RxEventCallback>
 80030dc:	e78c      	b.n	8002ff8 <HAL_UART_IRQHandler+0x140>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030de:	0023      	movs	r3, r4
 80030e0:	0020      	movs	r0, r4
 80030e2:	335c      	adds	r3, #92	@ 0x5c
 80030e4:	305e      	adds	r0, #94	@ 0x5e
 80030e6:	8819      	ldrh	r1, [r3, #0]
 80030e8:	8803      	ldrh	r3, [r0, #0]
      if ((huart->RxXferCount > 0U)
 80030ea:	8800      	ldrh	r0, [r0, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030ec:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 80030ee:	2800      	cmp	r0, #0
 80030f0:	d100      	bne.n	80030f4 <HAL_UART_IRQHandler+0x23c>
 80030f2:	e781      	b.n	8002ff8 <HAL_UART_IRQHandler+0x140>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030f4:	1ac9      	subs	r1, r1, r3
 80030f6:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80030f8:	2900      	cmp	r1, #0
 80030fa:	d100      	bne.n	80030fe <HAL_UART_IRQHandler+0x246>
 80030fc:	e77c      	b.n	8002ff8 <HAL_UART_IRQHandler+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030fe:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003102:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003106:	6820      	ldr	r0, [r4, #0]
 8003108:	4e33      	ldr	r6, [pc, #204]	@ (80031d8 <HAL_UART_IRQHandler+0x320>)
 800310a:	6803      	ldr	r3, [r0, #0]
 800310c:	4033      	ands	r3, r6
 800310e:	6003      	str	r3, [r0, #0]
 8003110:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003114:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003118:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800311c:	6820      	ldr	r0, [r4, #0]
 800311e:	4e2f      	ldr	r6, [pc, #188]	@ (80031dc <HAL_UART_IRQHandler+0x324>)
 8003120:	6883      	ldr	r3, [r0, #8]
 8003122:	4033      	ands	r3, r6
 8003124:	6083      	str	r3, [r0, #8]
 8003126:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 800312a:	0023      	movs	r3, r4
 800312c:	2020      	movs	r0, #32
 800312e:	338c      	adds	r3, #140	@ 0x8c
 8003130:	6018      	str	r0, [r3, #0]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003132:	66e2      	str	r2, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8003134:	6762      	str	r2, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003136:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313a:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800313e:	2510      	movs	r5, #16
 8003140:	6822      	ldr	r2, [r4, #0]
 8003142:	6813      	ldr	r3, [r2, #0]
 8003144:	43ab      	bics	r3, r5
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800314c:	2302      	movs	r3, #2
 800314e:	6723      	str	r3, [r4, #112]	@ 0x70
 8003150:	e7c1      	b.n	80030d6 <HAL_UART_IRQHandler+0x21e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003152:	2580      	movs	r5, #128	@ 0x80
 8003154:	036d      	lsls	r5, r5, #13
 8003156:	422b      	tst	r3, r5
 8003158:	d006      	beq.n	8003168 <HAL_UART_IRQHandler+0x2b0>
 800315a:	0246      	lsls	r6, r0, #9
 800315c:	d504      	bpl.n	8003168 <HAL_UART_IRQHandler+0x2b0>
    HAL_UARTEx_WakeupCallback(huart);
 800315e:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003160:	620d      	str	r5, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8003162:	f000 fe1b 	bl	8003d9c <HAL_UARTEx_WakeupCallback>
    return;
 8003166:	e747      	b.n	8002ff8 <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003168:	2180      	movs	r1, #128	@ 0x80
 800316a:	420b      	tst	r3, r1
 800316c:	d007      	beq.n	800317e <HAL_UART_IRQHandler+0x2c6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800316e:	2580      	movs	r5, #128	@ 0x80
 8003170:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003172:	4011      	ands	r1, r2
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003174:	4028      	ands	r0, r5
 8003176:	4301      	orrs	r1, r0
 8003178:	d001      	beq.n	800317e <HAL_UART_IRQHandler+0x2c6>
    if (huart->TxISR != NULL)
 800317a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800317c:	e6b1      	b.n	8002ee2 <HAL_UART_IRQHandler+0x2a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	420b      	tst	r3, r1
 8003182:	d016      	beq.n	80031b2 <HAL_UART_IRQHandler+0x2fa>
 8003184:	420a      	tst	r2, r1
 8003186:	d014      	beq.n	80031b2 <HAL_UART_IRQHandler+0x2fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003188:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800318c:	2301      	movs	r3, #1
 800318e:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003192:	6822      	ldr	r2, [r4, #0]
 8003194:	6813      	ldr	r3, [r2, #0]
 8003196:	438b      	bics	r3, r1
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800319e:	0023      	movs	r3, r4
 80031a0:	2220      	movs	r2, #32
 80031a2:	3388      	adds	r3, #136	@ 0x88
 80031a4:	601a      	str	r2, [r3, #0]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80031a6:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031a8:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 80031aa:	67a3      	str	r3, [r4, #120]	@ 0x78
  HAL_UART_TxCpltCallback(huart);
 80031ac:	f7ff fe76 	bl	8002e9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031b0:	e722      	b.n	8002ff8 <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80031b2:	0219      	lsls	r1, r3, #8
 80031b4:	d514      	bpl.n	80031e0 <HAL_UART_IRQHandler+0x328>
 80031b6:	0051      	lsls	r1, r2, #1
 80031b8:	d512      	bpl.n	80031e0 <HAL_UART_IRQHandler+0x328>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80031ba:	0020      	movs	r0, r4
 80031bc:	f000 fdf0 	bl	8003da0 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80031c0:	e71a      	b.n	8002ff8 <HAL_UART_IRQHandler+0x140>
 80031c2:	46c0      	nop			@ (mov r8, r8)
 80031c4:	0000080f 	.word	0x0000080f
 80031c8:	10000001 	.word	0x10000001
 80031cc:	04000120 	.word	0x04000120
 80031d0:	08002ea1 	.word	0x08002ea1
 80031d4:	fffffeff 	.word	0xfffffeff
 80031d8:	fffffedf 	.word	0xfffffedf
 80031dc:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80031e0:	01db      	lsls	r3, r3, #7
 80031e2:	d400      	bmi.n	80031e6 <HAL_UART_IRQHandler+0x32e>
 80031e4:	e708      	b.n	8002ff8 <HAL_UART_IRQHandler+0x140>
 80031e6:	2a00      	cmp	r2, #0
 80031e8:	db00      	blt.n	80031ec <HAL_UART_IRQHandler+0x334>
 80031ea:	e705      	b.n	8002ff8 <HAL_UART_IRQHandler+0x140>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80031ec:	0020      	movs	r0, r4
 80031ee:	f000 fdd6 	bl	8003d9e <HAL_UARTEx_RxFifoFullCallback>
    return;
 80031f2:	e701      	b.n	8002ff8 <HAL_UART_IRQHandler+0x140>

080031f4 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031f4:	0001      	movs	r1, r0
{
 80031f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t uhMask = huart->Mask;
 80031f8:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031fa:	318c      	adds	r1, #140	@ 0x8c
 80031fc:	680c      	ldr	r4, [r1, #0]
  uint16_t uhMask = huart->Mask;
 80031fe:	3360      	adds	r3, #96	@ 0x60
 8003200:	881a      	ldrh	r2, [r3, #0]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003202:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003204:	2c22      	cmp	r4, #34	@ 0x22
 8003206:	d157      	bne.n	80032b8 <UART_RxISR_8BIT+0xc4>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800320a:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 800320c:	4013      	ands	r3, r2
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 800320e:	0002      	movs	r2, r0
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003210:	7023      	strb	r3, [r4, #0]
    huart->pRxBuffPtr++;
 8003212:	6d83      	ldr	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8003214:	325e      	adds	r2, #94	@ 0x5e
    huart->pRxBuffPtr++;
 8003216:	3301      	adds	r3, #1
 8003218:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 800321a:	8813      	ldrh	r3, [r2, #0]
 800321c:	3b01      	subs	r3, #1
 800321e:	b29b      	uxth	r3, r3
 8003220:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8003222:	8813      	ldrh	r3, [r2, #0]
 8003224:	b29c      	uxth	r4, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d142      	bne.n	80032b0 <UART_RxISR_8BIT+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800322a:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322e:	3301      	adds	r3, #1
 8003230:	f383 8810 	msr	PRIMASK, r3
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003234:	6805      	ldr	r5, [r0, #0]
 8003236:	4f23      	ldr	r7, [pc, #140]	@ (80032c4 <UART_RxISR_8BIT+0xd0>)
 8003238:	682a      	ldr	r2, [r5, #0]
 800323a:	403a      	ands	r2, r7
 800323c:	602a      	str	r2, [r5, #0]
 800323e:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003242:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003246:	f383 8810 	msr	PRIMASK, r3

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800324a:	6805      	ldr	r5, [r0, #0]
 800324c:	68aa      	ldr	r2, [r5, #8]
 800324e:	439a      	bics	r2, r3
 8003250:	60aa      	str	r2, [r5, #8]
 8003252:	f386 8810 	msr	PRIMASK, r6

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003256:	2220      	movs	r2, #32
 8003258:	600a      	str	r2, [r1, #0]
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800325a:	6802      	ldr	r2, [r0, #0]
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800325c:	6704      	str	r4, [r0, #112]	@ 0x70
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800325e:	6852      	ldr	r2, [r2, #4]
      huart->RxISR = NULL;
 8003260:	6744      	str	r4, [r0, #116]	@ 0x74
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003262:	0212      	lsls	r2, r2, #8
 8003264:	d50a      	bpl.n	800327c <UART_RxISR_8BIT+0x88>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003266:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800326a:	f383 8810 	msr	PRIMASK, r3
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800326e:	6802      	ldr	r2, [r0, #0]
 8003270:	4c15      	ldr	r4, [pc, #84]	@ (80032c8 <UART_RxISR_8BIT+0xd4>)
 8003272:	6813      	ldr	r3, [r2, #0]
 8003274:	4023      	ands	r3, r4
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	f381 8810 	msr	PRIMASK, r1
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800327c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800327e:	2b01      	cmp	r3, #1
 8003280:	d117      	bne.n	80032b2 <UART_RxISR_8BIT+0xbe>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003282:	2200      	movs	r2, #0
 8003284:	66c2      	str	r2, [r0, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003286:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328a:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800328e:	6801      	ldr	r1, [r0, #0]
 8003290:	330f      	adds	r3, #15
 8003292:	680a      	ldr	r2, [r1, #0]
 8003294:	439a      	bics	r2, r3
 8003296:	600a      	str	r2, [r1, #0]
 8003298:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800329c:	6802      	ldr	r2, [r0, #0]
 800329e:	69d1      	ldr	r1, [r2, #28]
 80032a0:	4219      	tst	r1, r3
 80032a2:	d000      	beq.n	80032a6 <UART_RxISR_8BIT+0xb2>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032a4:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032a6:	0003      	movs	r3, r0
 80032a8:	335c      	adds	r3, #92	@ 0x5c
 80032aa:	8819      	ldrh	r1, [r3, #0]
 80032ac:	f7ff fe03 	bl	8002eb6 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80032b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_UART_RxCpltCallback(huart);
 80032b2:	f7fd fbc1 	bl	8000a38 <HAL_UART_RxCpltCallback>
 80032b6:	e7fb      	b.n	80032b0 <UART_RxISR_8BIT+0xbc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80032b8:	2208      	movs	r2, #8
 80032ba:	6999      	ldr	r1, [r3, #24]
 80032bc:	430a      	orrs	r2, r1
 80032be:	619a      	str	r2, [r3, #24]
}
 80032c0:	e7f6      	b.n	80032b0 <UART_RxISR_8BIT+0xbc>
 80032c2:	46c0      	nop			@ (mov r8, r8)
 80032c4:	fffffedf 	.word	0xfffffedf
 80032c8:	fbffffff 	.word	0xfbffffff

080032cc <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032cc:	0002      	movs	r2, r0
{
 80032ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t uhMask = huart->Mask;
 80032d0:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032d2:	328c      	adds	r2, #140	@ 0x8c
 80032d4:	6811      	ldr	r1, [r2, #0]
  uint16_t uhMask = huart->Mask;
 80032d6:	3360      	adds	r3, #96	@ 0x60
 80032d8:	881c      	ldrh	r4, [r3, #0]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80032da:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032dc:	2922      	cmp	r1, #34	@ 0x22
 80032de:	d156      	bne.n	800338e <UART_RxISR_16BIT+0xc2>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80032e0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80032e2:	6d83      	ldr	r3, [r0, #88]	@ 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 80032e4:	4021      	ands	r1, r4
 80032e6:	8019      	strh	r1, [r3, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 80032e8:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 80032ea:	3302      	adds	r3, #2
 80032ec:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80032ee:	315e      	adds	r1, #94	@ 0x5e
 80032f0:	880b      	ldrh	r3, [r1, #0]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	800b      	strh	r3, [r1, #0]

    if (huart->RxXferCount == 0U)
 80032f8:	880b      	ldrh	r3, [r1, #0]
 80032fa:	b29c      	uxth	r4, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d142      	bne.n	8003386 <UART_RxISR_16BIT+0xba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003300:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003304:	3301      	adds	r3, #1
 8003306:	f383 8810 	msr	PRIMASK, r3
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800330a:	6805      	ldr	r5, [r0, #0]
 800330c:	4f22      	ldr	r7, [pc, #136]	@ (8003398 <UART_RxISR_16BIT+0xcc>)
 800330e:	6829      	ldr	r1, [r5, #0]
 8003310:	4039      	ands	r1, r7
 8003312:	6029      	str	r1, [r5, #0]
 8003314:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003318:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800331c:	f383 8810 	msr	PRIMASK, r3

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003320:	6805      	ldr	r5, [r0, #0]
 8003322:	68a9      	ldr	r1, [r5, #8]
 8003324:	4399      	bics	r1, r3
 8003326:	60a9      	str	r1, [r5, #8]
 8003328:	f386 8810 	msr	PRIMASK, r6

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800332c:	2120      	movs	r1, #32
 800332e:	6011      	str	r1, [r2, #0]
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003330:	6802      	ldr	r2, [r0, #0]
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003332:	6704      	str	r4, [r0, #112]	@ 0x70
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003334:	6852      	ldr	r2, [r2, #4]
      huart->RxISR = NULL;
 8003336:	6744      	str	r4, [r0, #116]	@ 0x74
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003338:	0212      	lsls	r2, r2, #8
 800333a:	d50a      	bpl.n	8003352 <UART_RxISR_16BIT+0x86>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800333c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003340:	f383 8810 	msr	PRIMASK, r3
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003344:	6802      	ldr	r2, [r0, #0]
 8003346:	4c15      	ldr	r4, [pc, #84]	@ (800339c <UART_RxISR_16BIT+0xd0>)
 8003348:	6813      	ldr	r3, [r2, #0]
 800334a:	4023      	ands	r3, r4
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	f381 8810 	msr	PRIMASK, r1
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003352:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8003354:	2b01      	cmp	r3, #1
 8003356:	d117      	bne.n	8003388 <UART_RxISR_16BIT+0xbc>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003358:	2200      	movs	r2, #0
 800335a:	66c2      	str	r2, [r0, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800335c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003360:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003364:	6801      	ldr	r1, [r0, #0]
 8003366:	330f      	adds	r3, #15
 8003368:	680a      	ldr	r2, [r1, #0]
 800336a:	439a      	bics	r2, r3
 800336c:	600a      	str	r2, [r1, #0]
 800336e:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003372:	6802      	ldr	r2, [r0, #0]
 8003374:	69d1      	ldr	r1, [r2, #28]
 8003376:	4219      	tst	r1, r3
 8003378:	d000      	beq.n	800337c <UART_RxISR_16BIT+0xb0>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800337a:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800337c:	0003      	movs	r3, r0
 800337e:	335c      	adds	r3, #92	@ 0x5c
 8003380:	8819      	ldrh	r1, [r3, #0]
 8003382:	f7ff fd98 	bl	8002eb6 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_UART_RxCpltCallback(huart);
 8003388:	f7fd fb56 	bl	8000a38 <HAL_UART_RxCpltCallback>
 800338c:	e7fb      	b.n	8003386 <UART_RxISR_16BIT+0xba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800338e:	2208      	movs	r2, #8
 8003390:	6999      	ldr	r1, [r3, #24]
 8003392:	430a      	orrs	r2, r1
 8003394:	619a      	str	r2, [r3, #24]
}
 8003396:	e7f6      	b.n	8003386 <UART_RxISR_16BIT+0xba>
 8003398:	fffffedf 	.word	0xfffffedf
 800339c:	fbffffff 	.word	0xfbffffff

080033a0 <UART_RxISR_8BIT_FIFOEN>:
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  uhMask = huart->Mask;
 80033a0:	0003      	movs	r3, r0
{
 80033a2:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t  uhMask = huart->Mask;
 80033a4:	3360      	adds	r3, #96	@ 0x60
 80033a6:	881b      	ldrh	r3, [r3, #0]
{
 80033a8:	b085      	sub	sp, #20
  uint16_t  uhMask = huart->Mask;
 80033aa:	9302      	str	r3, [sp, #8]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80033ac:	6803      	ldr	r3, [r0, #0]
{
 80033ae:	0004      	movs	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80033b0:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	9203      	str	r2, [sp, #12]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	9201      	str	r2, [sp, #4]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033ba:	0002      	movs	r2, r0
 80033bc:	328c      	adds	r2, #140	@ 0x8c
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	2a22      	cmp	r2, #34	@ 0x22
 80033c2:	d000      	beq.n	80033c6 <UART_RxISR_8BIT_FIFOEN+0x26>
 80033c4:	e0c4      	b.n	8003550 <UART_RxISR_8BIT_FIFOEN+0x1b0>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80033c6:	0003      	movs	r3, r0
 80033c8:	3368      	adds	r3, #104	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <UART_RxISR_8BIT_FIFOEN+0x36>
 80033d0:	2320      	movs	r3, #32
 80033d2:	421d      	tst	r5, r3
 80033d4:	d108      	bne.n	80033e8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80033d6:	0023      	movs	r3, r4
 80033d8:	335e      	adds	r3, #94	@ 0x5e
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d000      	beq.n	80033e4 <UART_RxISR_8BIT_FIFOEN+0x44>
 80033e2:	e095      	b.n	8003510 <UART_RxISR_8BIT_FIFOEN+0x170>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80033e4:	b005      	add	sp, #20
 80033e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->RxXferCount--;
 80033e8:	0026      	movs	r6, r4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80033ea:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80033ec:	9902      	ldr	r1, [sp, #8]
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80033ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80033f0:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80033f2:	400b      	ands	r3, r1
 80033f4:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 80033f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 80033f8:	365e      	adds	r6, #94	@ 0x5e
      huart->pRxBuffPtr++;
 80033fa:	3301      	adds	r3, #1
 80033fc:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 80033fe:	8833      	ldrh	r3, [r6, #0]
      isrflags = READ_REG(huart->Instance->ISR);
 8003400:	6822      	ldr	r2, [r4, #0]
      huart->RxXferCount--;
 8003402:	3b01      	subs	r3, #1
 8003404:	b29b      	uxth	r3, r3
 8003406:	8033      	strh	r3, [r6, #0]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003408:	2307      	movs	r3, #7
      isrflags = READ_REG(huart->Instance->ISR);
 800340a:	69d5      	ldr	r5, [r2, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800340c:	421d      	tst	r5, r3
 800340e:	d02f      	beq.n	8003470 <UART_RxISR_8BIT_FIFOEN+0xd0>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003410:	3b06      	subs	r3, #6
 8003412:	421d      	tst	r5, r3
 8003414:	d008      	beq.n	8003428 <UART_RxISR_8BIT_FIFOEN+0x88>
 8003416:	9903      	ldr	r1, [sp, #12]
 8003418:	05c9      	lsls	r1, r1, #23
 800341a:	d505      	bpl.n	8003428 <UART_RxISR_8BIT_FIFOEN+0x88>
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800341c:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800341e:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003420:	3190      	adds	r1, #144	@ 0x90
 8003422:	6808      	ldr	r0, [r1, #0]
 8003424:	4303      	orrs	r3, r0
 8003426:	600b      	str	r3, [r1, #0]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003428:	2302      	movs	r3, #2
 800342a:	421d      	tst	r5, r3
 800342c:	d009      	beq.n	8003442 <UART_RxISR_8BIT_FIFOEN+0xa2>
 800342e:	9901      	ldr	r1, [sp, #4]
 8003430:	07c9      	lsls	r1, r1, #31
 8003432:	d506      	bpl.n	8003442 <UART_RxISR_8BIT_FIFOEN+0xa2>
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003434:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003436:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003438:	3190      	adds	r1, #144	@ 0x90
 800343a:	6808      	ldr	r0, [r1, #0]
 800343c:	18db      	adds	r3, r3, r3
 800343e:	4303      	orrs	r3, r0
 8003440:	600b      	str	r3, [r1, #0]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003442:	2304      	movs	r3, #4
 8003444:	421d      	tst	r5, r3
 8003446:	d009      	beq.n	800345c <UART_RxISR_8BIT_FIFOEN+0xbc>
 8003448:	9901      	ldr	r1, [sp, #4]
 800344a:	07c9      	lsls	r1, r1, #31
 800344c:	d506      	bpl.n	800345c <UART_RxISR_8BIT_FIFOEN+0xbc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800344e:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003450:	0022      	movs	r2, r4
 8003452:	3290      	adds	r2, #144	@ 0x90
 8003454:	6811      	ldr	r1, [r2, #0]
 8003456:	3b02      	subs	r3, #2
 8003458:	430b      	orrs	r3, r1
 800345a:	6013      	str	r3, [r2, #0]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800345c:	0027      	movs	r7, r4
 800345e:	3790      	adds	r7, #144	@ 0x90
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d004      	beq.n	8003470 <UART_RxISR_8BIT_FIFOEN+0xd0>
          HAL_UART_ErrorCallback(huart);
 8003466:	0020      	movs	r0, r4
 8003468:	f7ff fd19 	bl	8002e9e <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346c:	2300      	movs	r3, #0
 800346e:	603b      	str	r3, [r7, #0]
      if (huart->RxXferCount == 0U)
 8003470:	8833      	ldrh	r3, [r6, #0]
 8003472:	b299      	uxth	r1, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1ab      	bne.n	80033d0 <UART_RxISR_8BIT_FIFOEN+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003478:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800347c:	3301      	adds	r3, #1
 800347e:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003482:	6820      	ldr	r0, [r4, #0]
 8003484:	4f35      	ldr	r7, [pc, #212]	@ (800355c <UART_RxISR_8BIT_FIFOEN+0x1bc>)
 8003486:	6802      	ldr	r2, [r0, #0]
 8003488:	403a      	ands	r2, r7
 800348a:	6002      	str	r2, [r0, #0]
 800348c:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003490:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003494:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003498:	6820      	ldr	r0, [r4, #0]
 800349a:	4f31      	ldr	r7, [pc, #196]	@ (8003560 <UART_RxISR_8BIT_FIFOEN+0x1c0>)
 800349c:	6882      	ldr	r2, [r0, #8]
 800349e:	403a      	ands	r2, r7
 80034a0:	6082      	str	r2, [r0, #8]
 80034a2:	f386 8810 	msr	PRIMASK, r6
        huart->RxState = HAL_UART_STATE_READY;
 80034a6:	0022      	movs	r2, r4
 80034a8:	2020      	movs	r0, #32
 80034aa:	328c      	adds	r2, #140	@ 0x8c
 80034ac:	6010      	str	r0, [r2, #0]
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80034ae:	6822      	ldr	r2, [r4, #0]
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034b0:	6721      	str	r1, [r4, #112]	@ 0x70
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80034b2:	6852      	ldr	r2, [r2, #4]
        huart->RxISR = NULL;
 80034b4:	6761      	str	r1, [r4, #116]	@ 0x74
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80034b6:	0212      	lsls	r2, r2, #8
 80034b8:	d50a      	bpl.n	80034d0 <UART_RxISR_8BIT_FIFOEN+0x130>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ba:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034be:	f383 8810 	msr	PRIMASK, r3
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80034c2:	6822      	ldr	r2, [r4, #0]
 80034c4:	4827      	ldr	r0, [pc, #156]	@ (8003564 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 80034c6:	6813      	ldr	r3, [r2, #0]
 80034c8:	4003      	ands	r3, r0
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	f381 8810 	msr	PRIMASK, r1
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034d0:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d118      	bne.n	8003508 <UART_RxISR_8BIT_FIFOEN+0x168>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d6:	2200      	movs	r2, #0
 80034d8:	66e2      	str	r2, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034da:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034de:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034e2:	6821      	ldr	r1, [r4, #0]
 80034e4:	330f      	adds	r3, #15
 80034e6:	680a      	ldr	r2, [r1, #0]
 80034e8:	439a      	bics	r2, r3
 80034ea:	600a      	str	r2, [r1, #0]
 80034ec:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80034f0:	6822      	ldr	r2, [r4, #0]
 80034f2:	69d1      	ldr	r1, [r2, #28]
 80034f4:	4219      	tst	r1, r3
 80034f6:	d000      	beq.n	80034fa <UART_RxISR_8BIT_FIFOEN+0x15a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80034f8:	6213      	str	r3, [r2, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034fa:	0023      	movs	r3, r4
 80034fc:	335c      	adds	r3, #92	@ 0x5c
 80034fe:	0020      	movs	r0, r4
 8003500:	8819      	ldrh	r1, [r3, #0]
 8003502:	f7ff fcd8 	bl	8002eb6 <HAL_UARTEx_RxEventCallback>
 8003506:	e763      	b.n	80033d0 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_RxCpltCallback(huart);
 8003508:	0020      	movs	r0, r4
 800350a:	f7fd fa95 	bl	8000a38 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800350e:	e75f      	b.n	80033d0 <UART_RxISR_8BIT_FIFOEN+0x30>
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003510:	0023      	movs	r3, r4
 8003512:	3368      	adds	r3, #104	@ 0x68
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	4293      	cmp	r3, r2
 8003518:	d800      	bhi.n	800351c <UART_RxISR_8BIT_FIFOEN+0x17c>
 800351a:	e763      	b.n	80033e4 <UART_RxISR_8BIT_FIFOEN+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800351c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003520:	2201      	movs	r2, #1
 8003522:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003526:	6821      	ldr	r1, [r4, #0]
 8003528:	4d0f      	ldr	r5, [pc, #60]	@ (8003568 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 800352a:	688b      	ldr	r3, [r1, #8]
 800352c:	402b      	ands	r3, r5
 800352e:	608b      	str	r3, [r1, #8]
 8003530:	f380 8810 	msr	PRIMASK, r0
      huart->RxISR = UART_RxISR_8BIT;
 8003534:	4b0d      	ldr	r3, [pc, #52]	@ (800356c <UART_RxISR_8BIT_FIFOEN+0x1cc>)
 8003536:	6763      	str	r3, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003538:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800353c:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003540:	2320      	movs	r3, #32
 8003542:	6822      	ldr	r2, [r4, #0]
 8003544:	6810      	ldr	r0, [r2, #0]
 8003546:	4303      	orrs	r3, r0
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	f381 8810 	msr	PRIMASK, r1
}
 800354e:	e749      	b.n	80033e4 <UART_RxISR_8BIT_FIFOEN+0x44>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003550:	2208      	movs	r2, #8
 8003552:	6999      	ldr	r1, [r3, #24]
 8003554:	430a      	orrs	r2, r1
 8003556:	619a      	str	r2, [r3, #24]
}
 8003558:	e744      	b.n	80033e4 <UART_RxISR_8BIT_FIFOEN+0x44>
 800355a:	46c0      	nop			@ (mov r8, r8)
 800355c:	fffffeff 	.word	0xfffffeff
 8003560:	effffffe 	.word	0xeffffffe
 8003564:	fbffffff 	.word	0xfbffffff
 8003568:	efffffff 	.word	0xefffffff
 800356c:	080031f5 	.word	0x080031f5

08003570 <UART_RxISR_16BIT_FIFOEN>:
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003570:	0003      	movs	r3, r0
{
 8003572:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t  uhMask = huart->Mask;
 8003574:	3360      	adds	r3, #96	@ 0x60
 8003576:	881b      	ldrh	r3, [r3, #0]
{
 8003578:	b085      	sub	sp, #20
  uint16_t  uhMask = huart->Mask;
 800357a:	9302      	str	r3, [sp, #8]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800357c:	6803      	ldr	r3, [r0, #0]
{
 800357e:	0004      	movs	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003580:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	9203      	str	r2, [sp, #12]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	9201      	str	r2, [sp, #4]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800358a:	0002      	movs	r2, r0
 800358c:	328c      	adds	r2, #140	@ 0x8c
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	2a22      	cmp	r2, #34	@ 0x22
 8003592:	d000      	beq.n	8003596 <UART_RxISR_16BIT_FIFOEN+0x26>
 8003594:	e0c2      	b.n	800371c <UART_RxISR_16BIT_FIFOEN+0x1ac>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003596:	0003      	movs	r3, r0
 8003598:	3368      	adds	r3, #104	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <UART_RxISR_16BIT_FIFOEN+0x36>
 80035a0:	2320      	movs	r3, #32
 80035a2:	421d      	tst	r5, r3
 80035a4:	d108      	bne.n	80035b8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80035a6:	0023      	movs	r3, r4
 80035a8:	335e      	adds	r3, #94	@ 0x5e
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d000      	beq.n	80035b4 <UART_RxISR_16BIT_FIFOEN+0x44>
 80035b2:	e093      	b.n	80036dc <UART_RxISR_16BIT_FIFOEN+0x16c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80035b4:	b005      	add	sp, #20
 80035b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->RxXferCount--;
 80035b8:	0026      	movs	r6, r4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80035ba:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 80035bc:	9802      	ldr	r0, [sp, #8]
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80035be:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80035c0:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 80035c2:	4001      	ands	r1, r0
 80035c4:	8011      	strh	r1, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80035c6:	3202      	adds	r2, #2
 80035c8:	65a2      	str	r2, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 80035ca:	365e      	adds	r6, #94	@ 0x5e
 80035cc:	8832      	ldrh	r2, [r6, #0]
 80035ce:	3a01      	subs	r2, #1
 80035d0:	b292      	uxth	r2, r2
 80035d2:	8032      	strh	r2, [r6, #0]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80035d4:	2207      	movs	r2, #7
      isrflags = READ_REG(huart->Instance->ISR);
 80035d6:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80035d8:	4215      	tst	r5, r2
 80035da:	d02f      	beq.n	800363c <UART_RxISR_16BIT_FIFOEN+0xcc>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035dc:	3a06      	subs	r2, #6
 80035de:	4215      	tst	r5, r2
 80035e0:	d008      	beq.n	80035f4 <UART_RxISR_16BIT_FIFOEN+0x84>
 80035e2:	9903      	ldr	r1, [sp, #12]
 80035e4:	05c9      	lsls	r1, r1, #23
 80035e6:	d505      	bpl.n	80035f4 <UART_RxISR_16BIT_FIFOEN+0x84>
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035e8:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035ea:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035ec:	3190      	adds	r1, #144	@ 0x90
 80035ee:	6808      	ldr	r0, [r1, #0]
 80035f0:	4302      	orrs	r2, r0
 80035f2:	600a      	str	r2, [r1, #0]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035f4:	2202      	movs	r2, #2
 80035f6:	4215      	tst	r5, r2
 80035f8:	d009      	beq.n	800360e <UART_RxISR_16BIT_FIFOEN+0x9e>
 80035fa:	9901      	ldr	r1, [sp, #4]
 80035fc:	07c9      	lsls	r1, r1, #31
 80035fe:	d506      	bpl.n	800360e <UART_RxISR_16BIT_FIFOEN+0x9e>
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003600:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003602:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003604:	3190      	adds	r1, #144	@ 0x90
 8003606:	6808      	ldr	r0, [r1, #0]
 8003608:	1892      	adds	r2, r2, r2
 800360a:	4302      	orrs	r2, r0
 800360c:	600a      	str	r2, [r1, #0]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800360e:	2204      	movs	r2, #4
 8003610:	4215      	tst	r5, r2
 8003612:	d009      	beq.n	8003628 <UART_RxISR_16BIT_FIFOEN+0xb8>
 8003614:	9901      	ldr	r1, [sp, #4]
 8003616:	07c9      	lsls	r1, r1, #31
 8003618:	d506      	bpl.n	8003628 <UART_RxISR_16BIT_FIFOEN+0xb8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800361a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800361c:	0022      	movs	r2, r4
 800361e:	2302      	movs	r3, #2
 8003620:	3290      	adds	r2, #144	@ 0x90
 8003622:	6811      	ldr	r1, [r2, #0]
 8003624:	430b      	orrs	r3, r1
 8003626:	6013      	str	r3, [r2, #0]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003628:	0027      	movs	r7, r4
 800362a:	3790      	adds	r7, #144	@ 0x90
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d004      	beq.n	800363c <UART_RxISR_16BIT_FIFOEN+0xcc>
          HAL_UART_ErrorCallback(huart);
 8003632:	0020      	movs	r0, r4
 8003634:	f7ff fc33 	bl	8002e9e <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003638:	2300      	movs	r3, #0
 800363a:	603b      	str	r3, [r7, #0]
      if (huart->RxXferCount == 0U)
 800363c:	8833      	ldrh	r3, [r6, #0]
 800363e:	b299      	uxth	r1, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1ad      	bne.n	80035a0 <UART_RxISR_16BIT_FIFOEN+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003644:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003648:	3301      	adds	r3, #1
 800364a:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800364e:	6820      	ldr	r0, [r4, #0]
 8003650:	4f35      	ldr	r7, [pc, #212]	@ (8003728 <UART_RxISR_16BIT_FIFOEN+0x1b8>)
 8003652:	6802      	ldr	r2, [r0, #0]
 8003654:	403a      	ands	r2, r7
 8003656:	6002      	str	r2, [r0, #0]
 8003658:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800365c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003660:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003664:	6820      	ldr	r0, [r4, #0]
 8003666:	4f31      	ldr	r7, [pc, #196]	@ (800372c <UART_RxISR_16BIT_FIFOEN+0x1bc>)
 8003668:	6882      	ldr	r2, [r0, #8]
 800366a:	403a      	ands	r2, r7
 800366c:	6082      	str	r2, [r0, #8]
 800366e:	f386 8810 	msr	PRIMASK, r6
        huart->RxState = HAL_UART_STATE_READY;
 8003672:	0022      	movs	r2, r4
 8003674:	2020      	movs	r0, #32
 8003676:	328c      	adds	r2, #140	@ 0x8c
 8003678:	6010      	str	r0, [r2, #0]
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800367a:	6822      	ldr	r2, [r4, #0]
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800367c:	6721      	str	r1, [r4, #112]	@ 0x70
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800367e:	6852      	ldr	r2, [r2, #4]
        huart->RxISR = NULL;
 8003680:	6761      	str	r1, [r4, #116]	@ 0x74
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003682:	0212      	lsls	r2, r2, #8
 8003684:	d50a      	bpl.n	800369c <UART_RxISR_16BIT_FIFOEN+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003686:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368a:	f383 8810 	msr	PRIMASK, r3
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800368e:	6822      	ldr	r2, [r4, #0]
 8003690:	4827      	ldr	r0, [pc, #156]	@ (8003730 <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 8003692:	6813      	ldr	r3, [r2, #0]
 8003694:	4003      	ands	r3, r0
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	f381 8810 	msr	PRIMASK, r1
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800369c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d118      	bne.n	80036d4 <UART_RxISR_16BIT_FIFOEN+0x164>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a2:	2200      	movs	r2, #0
 80036a4:	66e2      	str	r2, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036a6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036aa:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ae:	6821      	ldr	r1, [r4, #0]
 80036b0:	330f      	adds	r3, #15
 80036b2:	680a      	ldr	r2, [r1, #0]
 80036b4:	439a      	bics	r2, r3
 80036b6:	600a      	str	r2, [r1, #0]
 80036b8:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80036bc:	6822      	ldr	r2, [r4, #0]
 80036be:	69d1      	ldr	r1, [r2, #28]
 80036c0:	4219      	tst	r1, r3
 80036c2:	d000      	beq.n	80036c6 <UART_RxISR_16BIT_FIFOEN+0x156>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036c4:	6213      	str	r3, [r2, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036c6:	0023      	movs	r3, r4
 80036c8:	335c      	adds	r3, #92	@ 0x5c
 80036ca:	0020      	movs	r0, r4
 80036cc:	8819      	ldrh	r1, [r3, #0]
 80036ce:	f7ff fbf2 	bl	8002eb6 <HAL_UARTEx_RxEventCallback>
 80036d2:	e765      	b.n	80035a0 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_RxCpltCallback(huart);
 80036d4:	0020      	movs	r0, r4
 80036d6:	f7fd f9af 	bl	8000a38 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80036da:	e761      	b.n	80035a0 <UART_RxISR_16BIT_FIFOEN+0x30>
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80036dc:	0023      	movs	r3, r4
 80036de:	3368      	adds	r3, #104	@ 0x68
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d800      	bhi.n	80036e8 <UART_RxISR_16BIT_FIFOEN+0x178>
 80036e6:	e765      	b.n	80035b4 <UART_RxISR_16BIT_FIFOEN+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036e8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ec:	2201      	movs	r2, #1
 80036ee:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80036f2:	6821      	ldr	r1, [r4, #0]
 80036f4:	4d0f      	ldr	r5, [pc, #60]	@ (8003734 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 80036f6:	688b      	ldr	r3, [r1, #8]
 80036f8:	402b      	ands	r3, r5
 80036fa:	608b      	str	r3, [r1, #8]
 80036fc:	f380 8810 	msr	PRIMASK, r0
      huart->RxISR = UART_RxISR_16BIT;
 8003700:	4b0d      	ldr	r3, [pc, #52]	@ (8003738 <UART_RxISR_16BIT_FIFOEN+0x1c8>)
 8003702:	6763      	str	r3, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003704:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003708:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800370c:	2320      	movs	r3, #32
 800370e:	6822      	ldr	r2, [r4, #0]
 8003710:	6810      	ldr	r0, [r2, #0]
 8003712:	4303      	orrs	r3, r0
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	f381 8810 	msr	PRIMASK, r1
}
 800371a:	e74b      	b.n	80035b4 <UART_RxISR_16BIT_FIFOEN+0x44>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800371c:	2208      	movs	r2, #8
 800371e:	6999      	ldr	r1, [r3, #24]
 8003720:	430a      	orrs	r2, r1
 8003722:	619a      	str	r2, [r3, #24]
}
 8003724:	e746      	b.n	80035b4 <UART_RxISR_16BIT_FIFOEN+0x44>
 8003726:	46c0      	nop			@ (mov r8, r8)
 8003728:	fffffeff 	.word	0xfffffeff
 800372c:	effffffe 	.word	0xeffffffe
 8003730:	fbffffff 	.word	0xfbffffff
 8003734:	efffffff 	.word	0xefffffff
 8003738:	080032cd 	.word	0x080032cd

0800373c <UART_SetConfig>:
{
 800373c:	b570      	push	{r4, r5, r6, lr}
 800373e:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003740:	6925      	ldr	r5, [r4, #16]
 8003742:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003744:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003746:	4329      	orrs	r1, r5
 8003748:	6965      	ldr	r5, [r4, #20]
 800374a:	69c2      	ldr	r2, [r0, #28]
 800374c:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	4d49      	ldr	r5, [pc, #292]	@ (8003878 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003752:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003754:	4028      	ands	r0, r5
 8003756:	4301      	orrs	r1, r0
 8003758:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800375a:	6859      	ldr	r1, [r3, #4]
 800375c:	4847      	ldr	r0, [pc, #284]	@ (800387c <UART_SetConfig+0x140>)
    tmpreg |= huart->Init.OneBitSampling;
 800375e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003760:	4001      	ands	r1, r0
 8003762:	68e0      	ldr	r0, [r4, #12]
 8003764:	4301      	orrs	r1, r0
 8003766:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003768:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800376a:	6898      	ldr	r0, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800376c:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800376e:	4d44      	ldr	r5, [pc, #272]	@ (8003880 <UART_SetConfig+0x144>)
 8003770:	4028      	ands	r0, r5
 8003772:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003774:	200f      	movs	r0, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003776:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003778:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800377a:	4381      	bics	r1, r0
 800377c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800377e:	4301      	orrs	r1, r0
 8003780:	62d9      	str	r1, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003782:	4940      	ldr	r1, [pc, #256]	@ (8003884 <UART_SetConfig+0x148>)
 8003784:	428b      	cmp	r3, r1
 8003786:	d115      	bne.n	80037b4 <UART_SetConfig+0x78>
 8003788:	2103      	movs	r1, #3
 800378a:	4b3f      	ldr	r3, [pc, #252]	@ (8003888 <UART_SetConfig+0x14c>)
 800378c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800378e:	400b      	ands	r3, r1
 8003790:	3b01      	subs	r3, #1
 8003792:	2b02      	cmp	r3, #2
 8003794:	d860      	bhi.n	8003858 <UART_SetConfig+0x11c>
 8003796:	493d      	ldr	r1, [pc, #244]	@ (800388c <UART_SetConfig+0x150>)
 8003798:	5cc8      	ldrb	r0, [r1, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800379a:	2380      	movs	r3, #128	@ 0x80
 800379c:	021b      	lsls	r3, r3, #8
 800379e:	429a      	cmp	r2, r3
 80037a0:	d12f      	bne.n	8003802 <UART_SetConfig+0xc6>
    switch (clocksource)
 80037a2:	2808      	cmp	r0, #8
 80037a4:	d856      	bhi.n	8003854 <UART_SetConfig+0x118>
 80037a6:	f7fc fcbd 	bl	8000124 <__gnu_thumb1_case_uqi>
 80037aa:	555b      	.short	0x555b
 80037ac:	550b550e 	.word	0x550b550e
 80037b0:	5555      	.short	0x5555
 80037b2:	0f          	.byte	0x0f
 80037b3:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037b4:	4936      	ldr	r1, [pc, #216]	@ (8003890 <UART_SetConfig+0x154>)
 80037b6:	185b      	adds	r3, r3, r1
 80037b8:	1e59      	subs	r1, r3, #1
 80037ba:	418b      	sbcs	r3, r1
 80037bc:	0118      	lsls	r0, r3, #4
 80037be:	e7ec      	b.n	800379a <UART_SetConfig+0x5e>
        pclk = HAL_RCC_GetSysClockFreq();
 80037c0:	f7fe fc0c 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 80037c4:	e04e      	b.n	8003864 <UART_SetConfig+0x128>
    switch (clocksource)
 80037c6:	4a33      	ldr	r2, [pc, #204]	@ (8003894 <UART_SetConfig+0x158>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037c8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80037ca:	4b33      	ldr	r3, [pc, #204]	@ (8003898 <UART_SetConfig+0x15c>)
 80037cc:	0049      	lsls	r1, r1, #1
 80037ce:	0010      	movs	r0, r2
 80037d0:	5ac9      	ldrh	r1, [r1, r3]
 80037d2:	f7fc fcc5 	bl	8000160 <__udivsi3>
 80037d6:	6865      	ldr	r5, [r4, #4]
 80037d8:	0040      	lsls	r0, r0, #1
 80037da:	086b      	lsrs	r3, r5, #1
 80037dc:	18c0      	adds	r0, r0, r3
 80037de:	0029      	movs	r1, r5
 80037e0:	f7fc fcbe 	bl	8000160 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037e4:	0002      	movs	r2, r0
 80037e6:	4b2d      	ldr	r3, [pc, #180]	@ (800389c <UART_SetConfig+0x160>)
 80037e8:	3a10      	subs	r2, #16
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d832      	bhi.n	8003854 <UART_SetConfig+0x118>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037ee:	230f      	movs	r3, #15
 80037f0:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037f2:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037f4:	439a      	bics	r2, r3
 80037f6:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037f8:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80037fa:	6822      	ldr	r2, [r4, #0]
 80037fc:	4303      	orrs	r3, r0
 80037fe:	60d3      	str	r3, [r2, #12]
 8003800:	e032      	b.n	8003868 <UART_SetConfig+0x12c>
    switch (clocksource)
 8003802:	2808      	cmp	r0, #8
 8003804:	d826      	bhi.n	8003854 <UART_SetConfig+0x118>
 8003806:	f7fc fc8d 	bl	8000124 <__gnu_thumb1_case_uqi>
 800380a:	251a      	.short	0x251a
 800380c:	251f2505 	.word	0x251f2505
 8003810:	2525      	.short	0x2525
 8003812:	22          	.byte	0x22
 8003813:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 8003814:	481f      	ldr	r0, [pc, #124]	@ (8003894 <UART_SetConfig+0x158>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003816:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003818:	4b1f      	ldr	r3, [pc, #124]	@ (8003898 <UART_SetConfig+0x15c>)
 800381a:	0052      	lsls	r2, r2, #1
 800381c:	5ad1      	ldrh	r1, [r2, r3]
 800381e:	f7fc fc9f 	bl	8000160 <__udivsi3>
 8003822:	6865      	ldr	r5, [r4, #4]
 8003824:	086b      	lsrs	r3, r5, #1
 8003826:	18c0      	adds	r0, r0, r3
 8003828:	0029      	movs	r1, r5
 800382a:	f7fc fc99 	bl	8000160 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800382e:	0002      	movs	r2, r0
 8003830:	4b1a      	ldr	r3, [pc, #104]	@ (800389c <UART_SetConfig+0x160>)
 8003832:	3a10      	subs	r2, #16
 8003834:	429a      	cmp	r2, r3
 8003836:	d80d      	bhi.n	8003854 <UART_SetConfig+0x118>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003838:	6823      	ldr	r3, [r4, #0]
 800383a:	60d8      	str	r0, [r3, #12]
 800383c:	e014      	b.n	8003868 <UART_SetConfig+0x12c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800383e:	f7fe fcbb 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003842:	2800      	cmp	r0, #0
 8003844:	d010      	beq.n	8003868 <UART_SetConfig+0x12c>
 8003846:	e7e6      	b.n	8003816 <UART_SetConfig+0xda>
        pclk = HAL_RCC_GetSysClockFreq();
 8003848:	f7fe fbc8 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
        break;
 800384c:	e7f9      	b.n	8003842 <UART_SetConfig+0x106>
    switch (clocksource)
 800384e:	2080      	movs	r0, #128	@ 0x80
 8003850:	0200      	lsls	r0, r0, #8
 8003852:	e7e0      	b.n	8003816 <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 8003854:	2001      	movs	r0, #1
 8003856:	e008      	b.n	800386a <UART_SetConfig+0x12e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003858:	2380      	movs	r3, #128	@ 0x80
 800385a:	021b      	lsls	r3, r3, #8
 800385c:	429a      	cmp	r2, r3
 800385e:	d1ee      	bne.n	800383e <UART_SetConfig+0x102>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003860:	f7fe fcaa 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8003864:	1e02      	subs	r2, r0, #0
    if (pclk != 0U)
 8003866:	d1af      	bne.n	80037c8 <UART_SetConfig+0x8c>
        ret = HAL_ERROR;
 8003868:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 800386a:	4b0d      	ldr	r3, [pc, #52]	@ (80038a0 <UART_SetConfig+0x164>)
 800386c:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800386e:	2300      	movs	r3, #0
 8003870:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8003872:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8003874:	bd70      	pop	{r4, r5, r6, pc}
 8003876:	46c0      	nop			@ (mov r8, r8)
 8003878:	cfff69f3 	.word	0xcfff69f3
 800387c:	ffffcfff 	.word	0xffffcfff
 8003880:	11fff4ff 	.word	0x11fff4ff
 8003884:	40013800 	.word	0x40013800
 8003888:	40021000 	.word	0x40021000
 800388c:	08004a44 	.word	0x08004a44
 8003890:	bfffbc00 	.word	0xbfffbc00
 8003894:	00f42400 	.word	0x00f42400
 8003898:	08004a48 	.word	0x08004a48
 800389c:	0000ffef 	.word	0x0000ffef
 80038a0:	00010001 	.word	0x00010001

080038a4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038a4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 80038a6:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038a8:	071a      	lsls	r2, r3, #28
 80038aa:	d506      	bpl.n	80038ba <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038ac:	6801      	ldr	r1, [r0, #0]
 80038ae:	4c28      	ldr	r4, [pc, #160]	@ (8003950 <UART_AdvFeatureConfig+0xac>)
 80038b0:	684a      	ldr	r2, [r1, #4]
 80038b2:	4022      	ands	r2, r4
 80038b4:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80038b6:	4322      	orrs	r2, r4
 80038b8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038ba:	07da      	lsls	r2, r3, #31
 80038bc:	d506      	bpl.n	80038cc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038be:	6801      	ldr	r1, [r0, #0]
 80038c0:	4c24      	ldr	r4, [pc, #144]	@ (8003954 <UART_AdvFeatureConfig+0xb0>)
 80038c2:	684a      	ldr	r2, [r1, #4]
 80038c4:	4022      	ands	r2, r4
 80038c6:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80038c8:	4322      	orrs	r2, r4
 80038ca:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038cc:	079a      	lsls	r2, r3, #30
 80038ce:	d506      	bpl.n	80038de <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038d0:	6801      	ldr	r1, [r0, #0]
 80038d2:	4c21      	ldr	r4, [pc, #132]	@ (8003958 <UART_AdvFeatureConfig+0xb4>)
 80038d4:	684a      	ldr	r2, [r1, #4]
 80038d6:	4022      	ands	r2, r4
 80038d8:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80038da:	4322      	orrs	r2, r4
 80038dc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038de:	075a      	lsls	r2, r3, #29
 80038e0:	d506      	bpl.n	80038f0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038e2:	6801      	ldr	r1, [r0, #0]
 80038e4:	4c1d      	ldr	r4, [pc, #116]	@ (800395c <UART_AdvFeatureConfig+0xb8>)
 80038e6:	684a      	ldr	r2, [r1, #4]
 80038e8:	4022      	ands	r2, r4
 80038ea:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80038ec:	4322      	orrs	r2, r4
 80038ee:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038f0:	06da      	lsls	r2, r3, #27
 80038f2:	d506      	bpl.n	8003902 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038f4:	6801      	ldr	r1, [r0, #0]
 80038f6:	4c1a      	ldr	r4, [pc, #104]	@ (8003960 <UART_AdvFeatureConfig+0xbc>)
 80038f8:	688a      	ldr	r2, [r1, #8]
 80038fa:	4022      	ands	r2, r4
 80038fc:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80038fe:	4322      	orrs	r2, r4
 8003900:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003902:	069a      	lsls	r2, r3, #26
 8003904:	d506      	bpl.n	8003914 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003906:	6801      	ldr	r1, [r0, #0]
 8003908:	4c16      	ldr	r4, [pc, #88]	@ (8003964 <UART_AdvFeatureConfig+0xc0>)
 800390a:	688a      	ldr	r2, [r1, #8]
 800390c:	4022      	ands	r2, r4
 800390e:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8003910:	4322      	orrs	r2, r4
 8003912:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003914:	065a      	lsls	r2, r3, #25
 8003916:	d510      	bpl.n	800393a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003918:	6801      	ldr	r1, [r0, #0]
 800391a:	4d13      	ldr	r5, [pc, #76]	@ (8003968 <UART_AdvFeatureConfig+0xc4>)
 800391c:	684a      	ldr	r2, [r1, #4]
 800391e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8003920:	402a      	ands	r2, r5
 8003922:	4322      	orrs	r2, r4
 8003924:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003926:	2280      	movs	r2, #128	@ 0x80
 8003928:	0352      	lsls	r2, r2, #13
 800392a:	4294      	cmp	r4, r2
 800392c:	d105      	bne.n	800393a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800392e:	684a      	ldr	r2, [r1, #4]
 8003930:	4c0e      	ldr	r4, [pc, #56]	@ (800396c <UART_AdvFeatureConfig+0xc8>)
 8003932:	4022      	ands	r2, r4
 8003934:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8003936:	4322      	orrs	r2, r4
 8003938:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800393a:	061b      	lsls	r3, r3, #24
 800393c:	d506      	bpl.n	800394c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800393e:	6802      	ldr	r2, [r0, #0]
 8003940:	490b      	ldr	r1, [pc, #44]	@ (8003970 <UART_AdvFeatureConfig+0xcc>)
 8003942:	6853      	ldr	r3, [r2, #4]
 8003944:	400b      	ands	r3, r1
 8003946:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8003948:	430b      	orrs	r3, r1
 800394a:	6053      	str	r3, [r2, #4]
}
 800394c:	bd30      	pop	{r4, r5, pc}
 800394e:	46c0      	nop			@ (mov r8, r8)
 8003950:	ffff7fff 	.word	0xffff7fff
 8003954:	fffdffff 	.word	0xfffdffff
 8003958:	fffeffff 	.word	0xfffeffff
 800395c:	fffbffff 	.word	0xfffbffff
 8003960:	ffffefff 	.word	0xffffefff
 8003964:	ffffdfff 	.word	0xffffdfff
 8003968:	ffefffff 	.word	0xffefffff
 800396c:	ff9fffff 	.word	0xff9fffff
 8003970:	fff7ffff 	.word	0xfff7ffff

08003974 <UART_WaitOnFlagUntilTimeout>:
{
 8003974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003976:	0004      	movs	r4, r0
 8003978:	000d      	movs	r5, r1
 800397a:	0017      	movs	r7, r2
 800397c:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800397e:	6822      	ldr	r2, [r4, #0]
 8003980:	69d3      	ldr	r3, [r2, #28]
 8003982:	402b      	ands	r3, r5
 8003984:	1b5b      	subs	r3, r3, r5
 8003986:	4259      	negs	r1, r3
 8003988:	414b      	adcs	r3, r1
 800398a:	42bb      	cmp	r3, r7
 800398c:	d001      	beq.n	8003992 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800398e:	2000      	movs	r0, #0
 8003990:	e026      	b.n	80039e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8003992:	9b08      	ldr	r3, [sp, #32]
 8003994:	3301      	adds	r3, #1
 8003996:	d0f3      	beq.n	8003980 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003998:	f7fd fd66 	bl	8001468 <HAL_GetTick>
 800399c:	9b00      	ldr	r3, [sp, #0]
 800399e:	1ac0      	subs	r0, r0, r3
 80039a0:	9b08      	ldr	r3, [sp, #32]
 80039a2:	4298      	cmp	r0, r3
 80039a4:	d82d      	bhi.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x8e>
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d02b      	beq.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x8e>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	0752      	lsls	r2, r2, #29
 80039b0:	d5e5      	bpl.n	800397e <UART_WaitOnFlagUntilTimeout+0xa>
 80039b2:	002a      	movs	r2, r5
 80039b4:	2140      	movs	r1, #64	@ 0x40
 80039b6:	3a40      	subs	r2, #64	@ 0x40
 80039b8:	438a      	bics	r2, r1
 80039ba:	d0e0      	beq.n	800397e <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039bc:	69da      	ldr	r2, [r3, #28]
 80039be:	2608      	movs	r6, #8
 80039c0:	0011      	movs	r1, r2
 80039c2:	4031      	ands	r1, r6
 80039c4:	9101      	str	r1, [sp, #4]
 80039c6:	4232      	tst	r2, r6
 80039c8:	d00b      	beq.n	80039e2 <UART_WaitOnFlagUntilTimeout+0x6e>
          UART_EndRxTransfer(huart);
 80039ca:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039cc:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 80039ce:	f7ff fa33 	bl	8002e38 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039d2:	0023      	movs	r3, r4
 80039d4:	3390      	adds	r3, #144	@ 0x90
 80039d6:	601e      	str	r6, [r3, #0]
          __HAL_UNLOCK(huart);
 80039d8:	2300      	movs	r3, #0
          return HAL_ERROR;
 80039da:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 80039dc:	3484      	adds	r4, #132	@ 0x84
 80039de:	7023      	strb	r3, [r4, #0]
}
 80039e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039e2:	2280      	movs	r2, #128	@ 0x80
 80039e4:	69d9      	ldr	r1, [r3, #28]
 80039e6:	0112      	lsls	r2, r2, #4
 80039e8:	4211      	tst	r1, r2
 80039ea:	d0c8      	beq.n	800397e <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039ec:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80039ee:	0020      	movs	r0, r4
 80039f0:	f7ff fa22 	bl	8002e38 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039f4:	0023      	movs	r3, r4
 80039f6:	2220      	movs	r2, #32
 80039f8:	3390      	adds	r3, #144	@ 0x90
 80039fa:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(huart);
 80039fc:	9b01      	ldr	r3, [sp, #4]
 80039fe:	3484      	adds	r4, #132	@ 0x84
 8003a00:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8003a02:	2003      	movs	r0, #3
 8003a04:	e7ec      	b.n	80039e0 <UART_WaitOnFlagUntilTimeout+0x6c>

08003a06 <HAL_UART_Transmit>:
{
 8003a06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a08:	0017      	movs	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003a0a:	0002      	movs	r2, r0
{
 8003a0c:	b087      	sub	sp, #28
  if (huart->gState == HAL_UART_STATE_READY)
 8003a0e:	3288      	adds	r2, #136	@ 0x88
{
 8003a10:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8003a12:	6813      	ldr	r3, [r2, #0]
{
 8003a14:	0004      	movs	r4, r0
 8003a16:	000d      	movs	r5, r1
    return HAL_BUSY;
 8003a18:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	d139      	bne.n	8003a92 <HAL_UART_Transmit+0x8c>
      return  HAL_ERROR;
 8003a1e:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003a20:	2900      	cmp	r1, #0
 8003a22:	d036      	beq.n	8003a92 <HAL_UART_Transmit+0x8c>
 8003a24:	2f00      	cmp	r7, #0
 8003a26:	d034      	beq.n	8003a92 <HAL_UART_Transmit+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a28:	2380      	movs	r3, #128	@ 0x80
 8003a2a:	68a1      	ldr	r1, [r4, #8]
 8003a2c:	015b      	lsls	r3, r3, #5
 8003a2e:	4299      	cmp	r1, r3
 8003a30:	d104      	bne.n	8003a3c <HAL_UART_Transmit+0x36>
 8003a32:	6923      	ldr	r3, [r4, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_UART_Transmit+0x36>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a38:	4205      	tst	r5, r0
 8003a3a:	d12a      	bne.n	8003a92 <HAL_UART_Transmit+0x8c>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3c:	0023      	movs	r3, r4
 8003a3e:	2600      	movs	r6, #0
 8003a40:	3390      	adds	r3, #144	@ 0x90
 8003a42:	601e      	str	r6, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a44:	2321      	movs	r3, #33	@ 0x21
 8003a46:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003a48:	f7fd fd0e 	bl	8001468 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8003a4c:	0023      	movs	r3, r4
 8003a4e:	3354      	adds	r3, #84	@ 0x54
 8003a50:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8003a52:	3302      	adds	r3, #2
 8003a54:	9303      	str	r3, [sp, #12]
 8003a56:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a58:	2380      	movs	r3, #128	@ 0x80
 8003a5a:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8003a5c:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a5e:	015b      	lsls	r3, r3, #5
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d104      	bne.n	8003a6e <HAL_UART_Transmit+0x68>
 8003a64:	6923      	ldr	r3, [r4, #16]
 8003a66:	42b3      	cmp	r3, r6
 8003a68:	d101      	bne.n	8003a6e <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8003a6a:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8003a6c:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8003a6e:	0023      	movs	r3, r4
 8003a70:	3356      	adds	r3, #86	@ 0x56
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10d      	bne.n	8003a96 <HAL_UART_Transmit+0x90>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a7a:	9b05      	ldr	r3, [sp, #20]
 8003a7c:	0020      	movs	r0, r4
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	2140      	movs	r1, #64	@ 0x40
 8003a82:	9b04      	ldr	r3, [sp, #16]
 8003a84:	f7ff ff76 	bl	8003974 <UART_WaitOnFlagUntilTimeout>
 8003a88:	2320      	movs	r3, #32
 8003a8a:	3488      	adds	r4, #136	@ 0x88
      huart->gState = HAL_UART_STATE_READY;
 8003a8c:	6023      	str	r3, [r4, #0]
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	d10e      	bne.n	8003ab0 <HAL_UART_Transmit+0xaa>
}
 8003a92:	b007      	add	sp, #28
 8003a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a96:	9b05      	ldr	r3, [sp, #20]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	2180      	movs	r1, #128	@ 0x80
 8003a9e:	0020      	movs	r0, r4
 8003aa0:	9b04      	ldr	r3, [sp, #16]
 8003aa2:	f7ff ff67 	bl	8003974 <UART_WaitOnFlagUntilTimeout>
 8003aa6:	2800      	cmp	r0, #0
 8003aa8:	d004      	beq.n	8003ab4 <HAL_UART_Transmit+0xae>
        huart->gState = HAL_UART_STATE_READY;
 8003aaa:	2320      	movs	r3, #32
 8003aac:	3488      	adds	r4, #136	@ 0x88
 8003aae:	6023      	str	r3, [r4, #0]
        return HAL_TIMEOUT;
 8003ab0:	2003      	movs	r0, #3
 8003ab2:	e7ee      	b.n	8003a92 <HAL_UART_Transmit+0x8c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ab4:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003ab6:	2d00      	cmp	r5, #0
 8003ab8:	d10b      	bne.n	8003ad2 <HAL_UART_Transmit+0xcc>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aba:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8003abc:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003abe:	05db      	lsls	r3, r3, #23
 8003ac0:	0ddb      	lsrs	r3, r3, #23
 8003ac2:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8003ac4:	9b03      	ldr	r3, [sp, #12]
 8003ac6:	9a03      	ldr	r2, [sp, #12]
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	8013      	strh	r3, [r2, #0]
 8003ad0:	e7cd      	b.n	8003a6e <HAL_UART_Transmit+0x68>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ad2:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8003ad4:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ad6:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata8bits++;
 8003ad8:	e7f4      	b.n	8003ac4 <HAL_UART_Transmit+0xbe>
	...

08003adc <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003adc:	0003      	movs	r3, r0
{
 8003ade:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae0:	2600      	movs	r6, #0
{
 8003ae2:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae4:	3390      	adds	r3, #144	@ 0x90
 8003ae6:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8003ae8:	f7fd fcbe 	bl	8001468 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003aec:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003aee:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	071b      	lsls	r3, r3, #28
 8003af4:	d51f      	bpl.n	8003b36 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003af6:	2180      	movs	r1, #128	@ 0x80
 8003af8:	4b28      	ldr	r3, [pc, #160]	@ (8003b9c <UART_CheckIdleState+0xc0>)
 8003afa:	0032      	movs	r2, r6
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	0389      	lsls	r1, r1, #14
 8003b00:	0003      	movs	r3, r0
 8003b02:	0020      	movs	r0, r4
 8003b04:	f7ff ff36 	bl	8003974 <UART_WaitOnFlagUntilTimeout>
 8003b08:	42b0      	cmp	r0, r6
 8003b0a:	d014      	beq.n	8003b36 <UART_CheckIdleState+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b0c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b10:	2301      	movs	r3, #1
 8003b12:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003b16:	2080      	movs	r0, #128	@ 0x80
 8003b18:	6822      	ldr	r2, [r4, #0]
 8003b1a:	6813      	ldr	r3, [r2, #0]
 8003b1c:	4383      	bics	r3, r0
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8003b24:	0023      	movs	r3, r4
 8003b26:	2220      	movs	r2, #32
 8003b28:	3388      	adds	r3, #136	@ 0x88
 8003b2a:	601a      	str	r2, [r3, #0]
      return HAL_TIMEOUT;
 8003b2c:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8003b2e:	2300      	movs	r3, #0
 8003b30:	3484      	adds	r4, #132	@ 0x84
 8003b32:	7023      	strb	r3, [r4, #0]
}
 8003b34:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b36:	0026      	movs	r6, r4
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	368c      	adds	r6, #140	@ 0x8c
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	075b      	lsls	r3, r3, #29
 8003b40:	d523      	bpl.n	8003b8a <UART_CheckIdleState+0xae>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b42:	2180      	movs	r1, #128	@ 0x80
 8003b44:	4b15      	ldr	r3, [pc, #84]	@ (8003b9c <UART_CheckIdleState+0xc0>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	0020      	movs	r0, r4
 8003b4c:	002b      	movs	r3, r5
 8003b4e:	03c9      	lsls	r1, r1, #15
 8003b50:	f7ff ff10 	bl	8003974 <UART_WaitOnFlagUntilTimeout>
 8003b54:	2800      	cmp	r0, #0
 8003b56:	d018      	beq.n	8003b8a <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b58:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b62:	6821      	ldr	r1, [r4, #0]
 8003b64:	4d0e      	ldr	r5, [pc, #56]	@ (8003ba0 <UART_CheckIdleState+0xc4>)
 8003b66:	680b      	ldr	r3, [r1, #0]
 8003b68:	402b      	ands	r3, r5
 8003b6a:	600b      	str	r3, [r1, #0]
 8003b6c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b70:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b74:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b78:	6821      	ldr	r1, [r4, #0]
 8003b7a:	688b      	ldr	r3, [r1, #8]
 8003b7c:	4393      	bics	r3, r2
 8003b7e:	608b      	str	r3, [r1, #8]
 8003b80:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8003b84:	2320      	movs	r3, #32
 8003b86:	6033      	str	r3, [r6, #0]
      return HAL_TIMEOUT;
 8003b88:	e7d0      	b.n	8003b2c <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8003b8a:	0023      	movs	r3, r4
 8003b8c:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003b90:	3388      	adds	r3, #136	@ 0x88
 8003b92:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8003b94:	6032      	str	r2, [r6, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b96:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b98:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 8003b9a:	e7c8      	b.n	8003b2e <UART_CheckIdleState+0x52>
 8003b9c:	01ffffff 	.word	0x01ffffff
 8003ba0:	fffffedf 	.word	0xfffffedf

08003ba4 <HAL_UART_Init>:
{
 8003ba4:	b570      	push	{r4, r5, r6, lr}
 8003ba6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003ba8:	d101      	bne.n	8003bae <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8003baa:	2001      	movs	r0, #1
}
 8003bac:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8003bae:	0005      	movs	r5, r0
 8003bb0:	3588      	adds	r5, #136	@ 0x88
 8003bb2:	682b      	ldr	r3, [r5, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d104      	bne.n	8003bc2 <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 8003bb8:	0002      	movs	r2, r0
 8003bba:	3284      	adds	r2, #132	@ 0x84
 8003bbc:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8003bbe:	f7fd fb69 	bl	8001294 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003bc2:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003bc8:	602b      	str	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8003bca:	6813      	ldr	r3, [r2, #0]
 8003bcc:	438b      	bics	r3, r1
 8003bce:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bd0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8003bd6:	0020      	movs	r0, r4
 8003bd8:	f7ff fe64 	bl	80038a4 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bdc:	0020      	movs	r0, r4
 8003bde:	f7ff fdad 	bl	800373c <UART_SetConfig>
 8003be2:	2801      	cmp	r0, #1
 8003be4:	d0e1      	beq.n	8003baa <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003be6:	6823      	ldr	r3, [r4, #0]
 8003be8:	4907      	ldr	r1, [pc, #28]	@ (8003c08 <HAL_UART_Init+0x64>)
 8003bea:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8003bec:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bee:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bf0:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bf2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	438a      	bics	r2, r1
 8003bf8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	6819      	ldr	r1, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003c02:	f7ff ff6b 	bl	8003adc <UART_CheckIdleState>
 8003c06:	e7d1      	b.n	8003bac <HAL_UART_Init+0x8>
 8003c08:	ffffb7ff 	.word	0xffffb7ff

08003c0c <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 8003c0c:	0003      	movs	r3, r0
 8003c0e:	335c      	adds	r3, #92	@ 0x5c
{
 8003c10:	b570      	push	{r4, r5, r6, lr}
  huart->pRxBuffPtr  = pData;
 8003c12:	6581      	str	r1, [r0, #88]	@ 0x58
  UART_MASK_COMPUTATION(huart);
 8003c14:	2480      	movs	r4, #128	@ 0x80
  huart->RxXferSize  = Size;
 8003c16:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 8003c18:	805a      	strh	r2, [r3, #2]
  huart->RxISR       = NULL;
 8003c1a:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 8003c1c:	6881      	ldr	r1, [r0, #8]
  huart->RxISR       = NULL;
 8003c1e:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8003c20:	0164      	lsls	r4, r4, #5
 8003c22:	42a1      	cmp	r1, r4
 8003c24:	d13c      	bne.n	8003ca0 <UART_Start_Receive_IT+0x94>
 8003c26:	6903      	ldr	r3, [r0, #16]
 8003c28:	4259      	negs	r1, r3
 8003c2a:	414b      	adcs	r3, r1
 8003c2c:	021b      	lsls	r3, r3, #8
 8003c2e:	33ff      	adds	r3, #255	@ 0xff
 8003c30:	0001      	movs	r1, r0
 8003c32:	3160      	adds	r1, #96	@ 0x60
 8003c34:	800b      	strh	r3, [r1, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c36:	0003      	movs	r3, r0
 8003c38:	2100      	movs	r1, #0
 8003c3a:	3390      	adds	r3, #144	@ 0x90
 8003c3c:	6019      	str	r1, [r3, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c3e:	3122      	adds	r1, #34	@ 0x22
 8003c40:	3b04      	subs	r3, #4
 8003c42:	6019      	str	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c44:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c48:	2301      	movs	r3, #1
 8003c4a:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4e:	6801      	ldr	r1, [r0, #0]
 8003c50:	688d      	ldr	r5, [r1, #8]
 8003c52:	432b      	orrs	r3, r5
 8003c54:	608b      	str	r3, [r1, #8]
 8003c56:	f384 8810 	msr	PRIMASK, r4
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003c5a:	2580      	movs	r5, #128	@ 0x80
 8003c5c:	2180      	movs	r1, #128	@ 0x80
 8003c5e:	6e46      	ldr	r6, [r0, #100]	@ 0x64
 8003c60:	6884      	ldr	r4, [r0, #8]
 8003c62:	6903      	ldr	r3, [r0, #16]
 8003c64:	05ad      	lsls	r5, r5, #22
 8003c66:	0149      	lsls	r1, r1, #5
 8003c68:	42ae      	cmp	r6, r5
 8003c6a:	d13f      	bne.n	8003cec <UART_Start_Receive_IT+0xe0>
 8003c6c:	0005      	movs	r5, r0
 8003c6e:	3568      	adds	r5, #104	@ 0x68
 8003c70:	882d      	ldrh	r5, [r5, #0]
 8003c72:	4295      	cmp	r5, r2
 8003c74:	d83a      	bhi.n	8003cec <UART_Start_Receive_IT+0xe0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c76:	428c      	cmp	r4, r1
 8003c78:	d133      	bne.n	8003ce2 <UART_Start_Receive_IT+0xd6>
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d122      	bne.n	8003cc4 <UART_Start_Receive_IT+0xb8>
 8003c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8003d30 <UART_Start_Receive_IT+0x124>)
 8003c80:	6743      	str	r3, [r0, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c82:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c86:	2301      	movs	r3, #1
 8003c88:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003c8c:	2380      	movs	r3, #128	@ 0x80
 8003c8e:	6802      	ldr	r2, [r0, #0]
 8003c90:	055b      	lsls	r3, r3, #21
 8003c92:	6890      	ldr	r0, [r2, #8]
 8003c94:	4303      	orrs	r3, r0
 8003c96:	6093      	str	r3, [r2, #8]
 8003c98:	f381 8810 	msr	PRIMASK, r1
}
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	bd70      	pop	{r4, r5, r6, pc}
  UART_MASK_COMPUTATION(huart);
 8003ca0:	2900      	cmp	r1, #0
 8003ca2:	d105      	bne.n	8003cb0 <UART_Start_Receive_IT+0xa4>
 8003ca4:	6901      	ldr	r1, [r0, #16]
 8003ca6:	23ff      	movs	r3, #255	@ 0xff
 8003ca8:	2900      	cmp	r1, #0
 8003caa:	d0c1      	beq.n	8003c30 <UART_Start_Receive_IT+0x24>
 8003cac:	3b80      	subs	r3, #128	@ 0x80
 8003cae:	e7bf      	b.n	8003c30 <UART_Start_Receive_IT+0x24>
 8003cb0:	2480      	movs	r4, #128	@ 0x80
 8003cb2:	0564      	lsls	r4, r4, #21
 8003cb4:	42a1      	cmp	r1, r4
 8003cb6:	d1bb      	bne.n	8003c30 <UART_Start_Receive_IT+0x24>
 8003cb8:	6901      	ldr	r1, [r0, #16]
 8003cba:	237f      	movs	r3, #127	@ 0x7f
 8003cbc:	2900      	cmp	r1, #0
 8003cbe:	d0b7      	beq.n	8003c30 <UART_Start_Receive_IT+0x24>
 8003cc0:	3b40      	subs	r3, #64	@ 0x40
 8003cc2:	e7b5      	b.n	8003c30 <UART_Start_Receive_IT+0x24>
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d34 <UART_Start_Receive_IT+0x128>)
 8003cc6:	6743      	str	r3, [r0, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cd2:	6802      	ldr	r2, [r0, #0]
 8003cd4:	33ff      	adds	r3, #255	@ 0xff
 8003cd6:	6814      	ldr	r4, [r2, #0]
 8003cd8:	4323      	orrs	r3, r4
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	f381 8810 	msr	PRIMASK, r1
}
 8003ce0:	e7cf      	b.n	8003c82 <UART_Start_Receive_IT+0x76>
 8003ce2:	4a14      	ldr	r2, [pc, #80]	@ (8003d34 <UART_Start_Receive_IT+0x128>)
 8003ce4:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0cb      	beq.n	8003c82 <UART_Start_Receive_IT+0x76>
 8003cea:	e7ed      	b.n	8003cc8 <UART_Start_Receive_IT+0xbc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cec:	428c      	cmp	r4, r1
 8003cee:	d11a      	bne.n	8003d26 <UART_Start_Receive_IT+0x11a>
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10a      	bne.n	8003d0a <UART_Start_Receive_IT+0xfe>
 8003cf4:	4b10      	ldr	r3, [pc, #64]	@ (8003d38 <UART_Start_Receive_IT+0x12c>)
 8003cf6:	6743      	str	r3, [r0, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003d02:	6802      	ldr	r2, [r0, #0]
 8003d04:	331f      	adds	r3, #31
 8003d06:	6810      	ldr	r0, [r2, #0]
 8003d08:	e00a      	b.n	8003d20 <UART_Start_Receive_IT+0x114>
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d3c <UART_Start_Receive_IT+0x130>)
 8003d0c:	6743      	str	r3, [r0, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d0e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d12:	2301      	movs	r3, #1
 8003d14:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003d18:	6802      	ldr	r2, [r0, #0]
 8003d1a:	3320      	adds	r3, #32
 8003d1c:	6810      	ldr	r0, [r2, #0]
 8003d1e:	33ff      	adds	r3, #255	@ 0xff
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003d20:	4303      	orrs	r3, r0
 8003d22:	6013      	str	r3, [r2, #0]
 8003d24:	e7b8      	b.n	8003c98 <UART_Start_Receive_IT+0x8c>
 8003d26:	4a05      	ldr	r2, [pc, #20]	@ (8003d3c <UART_Start_Receive_IT+0x130>)
 8003d28:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1ef      	bne.n	8003d0e <UART_Start_Receive_IT+0x102>
 8003d2e:	e7e3      	b.n	8003cf8 <UART_Start_Receive_IT+0xec>
 8003d30:	08003571 	.word	0x08003571
 8003d34:	080033a1 	.word	0x080033a1
 8003d38:	080032cd 	.word	0x080032cd
 8003d3c:	080031f5 	.word	0x080031f5

08003d40 <HAL_UART_Receive_IT>:
{
 8003d40:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d42:	308c      	adds	r0, #140	@ 0x8c
{
 8003d44:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d46:	6804      	ldr	r4, [r0, #0]
    return HAL_BUSY;
 8003d48:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d4a:	2c20      	cmp	r4, #32
 8003d4c:	d125      	bne.n	8003d9a <HAL_UART_Receive_IT+0x5a>
      return HAL_ERROR;
 8003d4e:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003d50:	2900      	cmp	r1, #0
 8003d52:	d022      	beq.n	8003d9a <HAL_UART_Receive_IT+0x5a>
 8003d54:	2a00      	cmp	r2, #0
 8003d56:	d020      	beq.n	8003d9a <HAL_UART_Receive_IT+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d58:	2080      	movs	r0, #128	@ 0x80
 8003d5a:	689c      	ldr	r4, [r3, #8]
 8003d5c:	0140      	lsls	r0, r0, #5
 8003d5e:	4284      	cmp	r4, r0
 8003d60:	d105      	bne.n	8003d6e <HAL_UART_Receive_IT+0x2e>
 8003d62:	6918      	ldr	r0, [r3, #16]
 8003d64:	2800      	cmp	r0, #0
 8003d66:	d102      	bne.n	8003d6e <HAL_UART_Receive_IT+0x2e>
      return HAL_ERROR;
 8003d68:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 8003d6a:	4201      	tst	r1, r0
 8003d6c:	d115      	bne.n	8003d9a <HAL_UART_Receive_IT+0x5a>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6e:	2000      	movs	r0, #0
 8003d70:	66d8      	str	r0, [r3, #108]	@ 0x6c
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	6840      	ldr	r0, [r0, #4]
 8003d76:	0200      	lsls	r0, r0, #8
 8003d78:	d50c      	bpl.n	8003d94 <HAL_UART_Receive_IT+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d7a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d7e:	2001      	movs	r0, #1
 8003d80:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d84:	2080      	movs	r0, #128	@ 0x80
 8003d86:	681c      	ldr	r4, [r3, #0]
 8003d88:	04c0      	lsls	r0, r0, #19
 8003d8a:	6826      	ldr	r6, [r4, #0]
 8003d8c:	4330      	orrs	r0, r6
 8003d8e:	6020      	str	r0, [r4, #0]
 8003d90:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d94:	0018      	movs	r0, r3
 8003d96:	f7ff ff39 	bl	8003c0c <UART_Start_Receive_IT>
}
 8003d9a:	bd70      	pop	{r4, r5, r6, pc}

08003d9c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d9c:	4770      	bx	lr

08003d9e <HAL_UARTEx_RxFifoFullCallback>:
/**
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 8003d9e:	4770      	bx	lr

08003da0 <HAL_UARTEx_TxFifoEmptyCallback>:
/**
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 8003da0:	4770      	bx	lr
	...

08003da4 <_strtoul_l.isra.0>:
 8003da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003da6:	001e      	movs	r6, r3
 8003da8:	4b3e      	ldr	r3, [pc, #248]	@ (8003ea4 <_strtoul_l.isra.0+0x100>)
 8003daa:	0017      	movs	r7, r2
 8003dac:	000c      	movs	r4, r1
 8003dae:	469c      	mov	ip, r3
 8003db0:	2208      	movs	r2, #8
 8003db2:	b085      	sub	sp, #20
 8003db4:	9003      	str	r0, [sp, #12]
 8003db6:	9100      	str	r1, [sp, #0]
 8003db8:	0023      	movs	r3, r4
 8003dba:	4661      	mov	r1, ip
 8003dbc:	781d      	ldrb	r5, [r3, #0]
 8003dbe:	3401      	adds	r4, #1
 8003dc0:	5d48      	ldrb	r0, [r1, r5]
 8003dc2:	0001      	movs	r1, r0
 8003dc4:	4011      	ands	r1, r2
 8003dc6:	4210      	tst	r0, r2
 8003dc8:	d1f6      	bne.n	8003db8 <_strtoul_l.isra.0+0x14>
 8003dca:	2d2d      	cmp	r5, #45	@ 0x2d
 8003dcc:	d112      	bne.n	8003df4 <_strtoul_l.isra.0+0x50>
 8003dce:	7825      	ldrb	r5, [r4, #0]
 8003dd0:	1c9c      	adds	r4, r3, #2
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	9302      	str	r3, [sp, #8]
 8003dd6:	2210      	movs	r2, #16
 8003dd8:	0033      	movs	r3, r6
 8003dda:	4393      	bics	r3, r2
 8003ddc:	d116      	bne.n	8003e0c <_strtoul_l.isra.0+0x68>
 8003dde:	2d30      	cmp	r5, #48	@ 0x30
 8003de0:	d10e      	bne.n	8003e00 <_strtoul_l.isra.0+0x5c>
 8003de2:	2120      	movs	r1, #32
 8003de4:	7823      	ldrb	r3, [r4, #0]
 8003de6:	438b      	bics	r3, r1
 8003de8:	2b58      	cmp	r3, #88	@ 0x58
 8003dea:	d109      	bne.n	8003e00 <_strtoul_l.isra.0+0x5c>
 8003dec:	7865      	ldrb	r5, [r4, #1]
 8003dee:	3402      	adds	r4, #2
 8003df0:	2610      	movs	r6, #16
 8003df2:	e00b      	b.n	8003e0c <_strtoul_l.isra.0+0x68>
 8003df4:	9102      	str	r1, [sp, #8]
 8003df6:	2d2b      	cmp	r5, #43	@ 0x2b
 8003df8:	d1ed      	bne.n	8003dd6 <_strtoul_l.isra.0+0x32>
 8003dfa:	7825      	ldrb	r5, [r4, #0]
 8003dfc:	1c9c      	adds	r4, r3, #2
 8003dfe:	e7ea      	b.n	8003dd6 <_strtoul_l.isra.0+0x32>
 8003e00:	2e00      	cmp	r6, #0
 8003e02:	d1f5      	bne.n	8003df0 <_strtoul_l.isra.0+0x4c>
 8003e04:	360a      	adds	r6, #10
 8003e06:	2d30      	cmp	r5, #48	@ 0x30
 8003e08:	d100      	bne.n	8003e0c <_strtoul_l.isra.0+0x68>
 8003e0a:	3e02      	subs	r6, #2
 8003e0c:	2001      	movs	r0, #1
 8003e0e:	0031      	movs	r1, r6
 8003e10:	4240      	negs	r0, r0
 8003e12:	f7fc f9a5 	bl	8000160 <__udivsi3>
 8003e16:	9001      	str	r0, [sp, #4]
 8003e18:	2001      	movs	r0, #1
 8003e1a:	0031      	movs	r1, r6
 8003e1c:	4240      	negs	r0, r0
 8003e1e:	f7fc fa25 	bl	800026c <__aeabi_uidivmod>
 8003e22:	2300      	movs	r3, #0
 8003e24:	2201      	movs	r2, #1
 8003e26:	0018      	movs	r0, r3
 8003e28:	4694      	mov	ip, r2
 8003e2a:	002a      	movs	r2, r5
 8003e2c:	3a30      	subs	r2, #48	@ 0x30
 8003e2e:	2a09      	cmp	r2, #9
 8003e30:	d812      	bhi.n	8003e58 <_strtoul_l.isra.0+0xb4>
 8003e32:	0015      	movs	r5, r2
 8003e34:	42ae      	cmp	r6, r5
 8003e36:	dd1e      	ble.n	8003e76 <_strtoul_l.isra.0+0xd2>
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	d00a      	beq.n	8003e52 <_strtoul_l.isra.0+0xae>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	9a01      	ldr	r2, [sp, #4]
 8003e40:	425b      	negs	r3, r3
 8003e42:	4282      	cmp	r2, r0
 8003e44:	d305      	bcc.n	8003e52 <_strtoul_l.isra.0+0xae>
 8003e46:	d101      	bne.n	8003e4c <_strtoul_l.isra.0+0xa8>
 8003e48:	42a9      	cmp	r1, r5
 8003e4a:	db11      	blt.n	8003e70 <_strtoul_l.isra.0+0xcc>
 8003e4c:	4663      	mov	r3, ip
 8003e4e:	4370      	muls	r0, r6
 8003e50:	1828      	adds	r0, r5, r0
 8003e52:	7825      	ldrb	r5, [r4, #0]
 8003e54:	3401      	adds	r4, #1
 8003e56:	e7e8      	b.n	8003e2a <_strtoul_l.isra.0+0x86>
 8003e58:	002a      	movs	r2, r5
 8003e5a:	3a41      	subs	r2, #65	@ 0x41
 8003e5c:	2a19      	cmp	r2, #25
 8003e5e:	d801      	bhi.n	8003e64 <_strtoul_l.isra.0+0xc0>
 8003e60:	3d37      	subs	r5, #55	@ 0x37
 8003e62:	e7e7      	b.n	8003e34 <_strtoul_l.isra.0+0x90>
 8003e64:	002a      	movs	r2, r5
 8003e66:	3a61      	subs	r2, #97	@ 0x61
 8003e68:	2a19      	cmp	r2, #25
 8003e6a:	d804      	bhi.n	8003e76 <_strtoul_l.isra.0+0xd2>
 8003e6c:	3d57      	subs	r5, #87	@ 0x57
 8003e6e:	e7e1      	b.n	8003e34 <_strtoul_l.isra.0+0x90>
 8003e70:	2301      	movs	r3, #1
 8003e72:	425b      	negs	r3, r3
 8003e74:	e7ed      	b.n	8003e52 <_strtoul_l.isra.0+0xae>
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	d107      	bne.n	8003e8a <_strtoul_l.isra.0+0xe6>
 8003e7a:	2222      	movs	r2, #34	@ 0x22
 8003e7c:	9903      	ldr	r1, [sp, #12]
 8003e7e:	0018      	movs	r0, r3
 8003e80:	600a      	str	r2, [r1, #0]
 8003e82:	2f00      	cmp	r7, #0
 8003e84:	d109      	bne.n	8003e9a <_strtoul_l.isra.0+0xf6>
 8003e86:	b005      	add	sp, #20
 8003e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e8a:	9a02      	ldr	r2, [sp, #8]
 8003e8c:	2a00      	cmp	r2, #0
 8003e8e:	d000      	beq.n	8003e92 <_strtoul_l.isra.0+0xee>
 8003e90:	4240      	negs	r0, r0
 8003e92:	2f00      	cmp	r7, #0
 8003e94:	d0f7      	beq.n	8003e86 <_strtoul_l.isra.0+0xe2>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <_strtoul_l.isra.0+0xfa>
 8003e9a:	1e63      	subs	r3, r4, #1
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	9b00      	ldr	r3, [sp, #0]
 8003ea0:	603b      	str	r3, [r7, #0]
 8003ea2:	e7f0      	b.n	8003e86 <_strtoul_l.isra.0+0xe2>
 8003ea4:	08004a61 	.word	0x08004a61

08003ea8 <strtoul>:
 8003ea8:	b510      	push	{r4, lr}
 8003eaa:	4c04      	ldr	r4, [pc, #16]	@ (8003ebc <strtoul+0x14>)
 8003eac:	0013      	movs	r3, r2
 8003eae:	000a      	movs	r2, r1
 8003eb0:	0001      	movs	r1, r0
 8003eb2:	6820      	ldr	r0, [r4, #0]
 8003eb4:	f7ff ff76 	bl	8003da4 <_strtoul_l.isra.0>
 8003eb8:	bd10      	pop	{r4, pc}
 8003eba:	46c0      	nop			@ (mov r8, r8)
 8003ebc:	2000000c 	.word	0x2000000c

08003ec0 <sniprintf>:
 8003ec0:	b40c      	push	{r2, r3}
 8003ec2:	b530      	push	{r4, r5, lr}
 8003ec4:	4b18      	ldr	r3, [pc, #96]	@ (8003f28 <sniprintf+0x68>)
 8003ec6:	000c      	movs	r4, r1
 8003ec8:	681d      	ldr	r5, [r3, #0]
 8003eca:	b09d      	sub	sp, #116	@ 0x74
 8003ecc:	2900      	cmp	r1, #0
 8003ece:	da08      	bge.n	8003ee2 <sniprintf+0x22>
 8003ed0:	238b      	movs	r3, #139	@ 0x8b
 8003ed2:	2001      	movs	r0, #1
 8003ed4:	602b      	str	r3, [r5, #0]
 8003ed6:	4240      	negs	r0, r0
 8003ed8:	b01d      	add	sp, #116	@ 0x74
 8003eda:	bc30      	pop	{r4, r5}
 8003edc:	bc08      	pop	{r3}
 8003ede:	b002      	add	sp, #8
 8003ee0:	4718      	bx	r3
 8003ee2:	2382      	movs	r3, #130	@ 0x82
 8003ee4:	466a      	mov	r2, sp
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	8293      	strh	r3, [r2, #20]
 8003eea:	2300      	movs	r3, #0
 8003eec:	9002      	str	r0, [sp, #8]
 8003eee:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003ef0:	9006      	str	r0, [sp, #24]
 8003ef2:	4299      	cmp	r1, r3
 8003ef4:	d000      	beq.n	8003ef8 <sniprintf+0x38>
 8003ef6:	1e4b      	subs	r3, r1, #1
 8003ef8:	9304      	str	r3, [sp, #16]
 8003efa:	9307      	str	r3, [sp, #28]
 8003efc:	2301      	movs	r3, #1
 8003efe:	466a      	mov	r2, sp
 8003f00:	425b      	negs	r3, r3
 8003f02:	82d3      	strh	r3, [r2, #22]
 8003f04:	0028      	movs	r0, r5
 8003f06:	ab21      	add	r3, sp, #132	@ 0x84
 8003f08:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003f0a:	a902      	add	r1, sp, #8
 8003f0c:	9301      	str	r3, [sp, #4]
 8003f0e:	f000 f9ff 	bl	8004310 <_svfiprintf_r>
 8003f12:	1c43      	adds	r3, r0, #1
 8003f14:	da01      	bge.n	8003f1a <sniprintf+0x5a>
 8003f16:	238b      	movs	r3, #139	@ 0x8b
 8003f18:	602b      	str	r3, [r5, #0]
 8003f1a:	2c00      	cmp	r4, #0
 8003f1c:	d0dc      	beq.n	8003ed8 <sniprintf+0x18>
 8003f1e:	2200      	movs	r2, #0
 8003f20:	9b02      	ldr	r3, [sp, #8]
 8003f22:	701a      	strb	r2, [r3, #0]
 8003f24:	e7d8      	b.n	8003ed8 <sniprintf+0x18>
 8003f26:	46c0      	nop			@ (mov r8, r8)
 8003f28:	2000000c 	.word	0x2000000c

08003f2c <_vsniprintf_r>:
 8003f2c:	b530      	push	{r4, r5, lr}
 8003f2e:	0005      	movs	r5, r0
 8003f30:	0014      	movs	r4, r2
 8003f32:	0008      	movs	r0, r1
 8003f34:	001a      	movs	r2, r3
 8003f36:	b09b      	sub	sp, #108	@ 0x6c
 8003f38:	2c00      	cmp	r4, #0
 8003f3a:	da05      	bge.n	8003f48 <_vsniprintf_r+0x1c>
 8003f3c:	238b      	movs	r3, #139	@ 0x8b
 8003f3e:	2001      	movs	r0, #1
 8003f40:	602b      	str	r3, [r5, #0]
 8003f42:	4240      	negs	r0, r0
 8003f44:	b01b      	add	sp, #108	@ 0x6c
 8003f46:	bd30      	pop	{r4, r5, pc}
 8003f48:	2382      	movs	r3, #130	@ 0x82
 8003f4a:	4669      	mov	r1, sp
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	818b      	strh	r3, [r1, #12]
 8003f50:	2100      	movs	r1, #0
 8003f52:	9000      	str	r0, [sp, #0]
 8003f54:	9119      	str	r1, [sp, #100]	@ 0x64
 8003f56:	9004      	str	r0, [sp, #16]
 8003f58:	428c      	cmp	r4, r1
 8003f5a:	d000      	beq.n	8003f5e <_vsniprintf_r+0x32>
 8003f5c:	1e61      	subs	r1, r4, #1
 8003f5e:	2301      	movs	r3, #1
 8003f60:	9102      	str	r1, [sp, #8]
 8003f62:	9105      	str	r1, [sp, #20]
 8003f64:	4669      	mov	r1, sp
 8003f66:	425b      	negs	r3, r3
 8003f68:	81cb      	strh	r3, [r1, #14]
 8003f6a:	0028      	movs	r0, r5
 8003f6c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8003f6e:	f000 f9cf 	bl	8004310 <_svfiprintf_r>
 8003f72:	1c43      	adds	r3, r0, #1
 8003f74:	da01      	bge.n	8003f7a <_vsniprintf_r+0x4e>
 8003f76:	238b      	movs	r3, #139	@ 0x8b
 8003f78:	602b      	str	r3, [r5, #0]
 8003f7a:	2c00      	cmp	r4, #0
 8003f7c:	d0e2      	beq.n	8003f44 <_vsniprintf_r+0x18>
 8003f7e:	2200      	movs	r2, #0
 8003f80:	9b00      	ldr	r3, [sp, #0]
 8003f82:	701a      	strb	r2, [r3, #0]
 8003f84:	e7de      	b.n	8003f44 <_vsniprintf_r+0x18>
	...

08003f88 <vsniprintf>:
 8003f88:	b513      	push	{r0, r1, r4, lr}
 8003f8a:	4c04      	ldr	r4, [pc, #16]	@ (8003f9c <vsniprintf+0x14>)
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	0013      	movs	r3, r2
 8003f90:	000a      	movs	r2, r1
 8003f92:	0001      	movs	r1, r0
 8003f94:	6820      	ldr	r0, [r4, #0]
 8003f96:	f7ff ffc9 	bl	8003f2c <_vsniprintf_r>
 8003f9a:	bd16      	pop	{r1, r2, r4, pc}
 8003f9c:	2000000c 	.word	0x2000000c

08003fa0 <memmove>:
 8003fa0:	b510      	push	{r4, lr}
 8003fa2:	4288      	cmp	r0, r1
 8003fa4:	d902      	bls.n	8003fac <memmove+0xc>
 8003fa6:	188b      	adds	r3, r1, r2
 8003fa8:	4298      	cmp	r0, r3
 8003faa:	d308      	bcc.n	8003fbe <memmove+0x1e>
 8003fac:	2300      	movs	r3, #0
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d007      	beq.n	8003fc2 <memmove+0x22>
 8003fb2:	5ccc      	ldrb	r4, [r1, r3]
 8003fb4:	54c4      	strb	r4, [r0, r3]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	e7f9      	b.n	8003fae <memmove+0xe>
 8003fba:	5c8b      	ldrb	r3, [r1, r2]
 8003fbc:	5483      	strb	r3, [r0, r2]
 8003fbe:	3a01      	subs	r2, #1
 8003fc0:	d2fb      	bcs.n	8003fba <memmove+0x1a>
 8003fc2:	bd10      	pop	{r4, pc}

08003fc4 <memset>:
 8003fc4:	0003      	movs	r3, r0
 8003fc6:	1882      	adds	r2, r0, r2
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d100      	bne.n	8003fce <memset+0xa>
 8003fcc:	4770      	bx	lr
 8003fce:	7019      	strb	r1, [r3, #0]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	e7f9      	b.n	8003fc8 <memset+0x4>

08003fd4 <strnlen>:
 8003fd4:	0003      	movs	r3, r0
 8003fd6:	1841      	adds	r1, r0, r1
 8003fd8:	428b      	cmp	r3, r1
 8003fda:	d002      	beq.n	8003fe2 <strnlen+0xe>
 8003fdc:	781a      	ldrb	r2, [r3, #0]
 8003fde:	2a00      	cmp	r2, #0
 8003fe0:	d101      	bne.n	8003fe6 <strnlen+0x12>
 8003fe2:	1a18      	subs	r0, r3, r0
 8003fe4:	4770      	bx	lr
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	e7f6      	b.n	8003fd8 <strnlen+0x4>
	...

08003fec <__errno>:
 8003fec:	4b01      	ldr	r3, [pc, #4]	@ (8003ff4 <__errno+0x8>)
 8003fee:	6818      	ldr	r0, [r3, #0]
 8003ff0:	4770      	bx	lr
 8003ff2:	46c0      	nop			@ (mov r8, r8)
 8003ff4:	2000000c 	.word	0x2000000c

08003ff8 <__libc_init_array>:
 8003ff8:	b570      	push	{r4, r5, r6, lr}
 8003ffa:	2600      	movs	r6, #0
 8003ffc:	4c0c      	ldr	r4, [pc, #48]	@ (8004030 <__libc_init_array+0x38>)
 8003ffe:	4d0d      	ldr	r5, [pc, #52]	@ (8004034 <__libc_init_array+0x3c>)
 8004000:	1b64      	subs	r4, r4, r5
 8004002:	10a4      	asrs	r4, r4, #2
 8004004:	42a6      	cmp	r6, r4
 8004006:	d109      	bne.n	800401c <__libc_init_array+0x24>
 8004008:	2600      	movs	r6, #0
 800400a:	f000 fc51 	bl	80048b0 <_init>
 800400e:	4c0a      	ldr	r4, [pc, #40]	@ (8004038 <__libc_init_array+0x40>)
 8004010:	4d0a      	ldr	r5, [pc, #40]	@ (800403c <__libc_init_array+0x44>)
 8004012:	1b64      	subs	r4, r4, r5
 8004014:	10a4      	asrs	r4, r4, #2
 8004016:	42a6      	cmp	r6, r4
 8004018:	d105      	bne.n	8004026 <__libc_init_array+0x2e>
 800401a:	bd70      	pop	{r4, r5, r6, pc}
 800401c:	00b3      	lsls	r3, r6, #2
 800401e:	58eb      	ldr	r3, [r5, r3]
 8004020:	4798      	blx	r3
 8004022:	3601      	adds	r6, #1
 8004024:	e7ee      	b.n	8004004 <__libc_init_array+0xc>
 8004026:	00b3      	lsls	r3, r6, #2
 8004028:	58eb      	ldr	r3, [r5, r3]
 800402a:	4798      	blx	r3
 800402c:	3601      	adds	r6, #1
 800402e:	e7f2      	b.n	8004016 <__libc_init_array+0x1e>
 8004030:	08004b64 	.word	0x08004b64
 8004034:	08004b64 	.word	0x08004b64
 8004038:	08004b68 	.word	0x08004b68
 800403c:	08004b64 	.word	0x08004b64

08004040 <__retarget_lock_acquire_recursive>:
 8004040:	4770      	bx	lr

08004042 <__retarget_lock_release_recursive>:
 8004042:	4770      	bx	lr

08004044 <memcpy>:
 8004044:	2300      	movs	r3, #0
 8004046:	b510      	push	{r4, lr}
 8004048:	429a      	cmp	r2, r3
 800404a:	d100      	bne.n	800404e <memcpy+0xa>
 800404c:	bd10      	pop	{r4, pc}
 800404e:	5ccc      	ldrb	r4, [r1, r3]
 8004050:	54c4      	strb	r4, [r0, r3]
 8004052:	3301      	adds	r3, #1
 8004054:	e7f8      	b.n	8004048 <memcpy+0x4>
	...

08004058 <_free_r>:
 8004058:	b570      	push	{r4, r5, r6, lr}
 800405a:	0005      	movs	r5, r0
 800405c:	1e0c      	subs	r4, r1, #0
 800405e:	d010      	beq.n	8004082 <_free_r+0x2a>
 8004060:	3c04      	subs	r4, #4
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	da00      	bge.n	800406a <_free_r+0x12>
 8004068:	18e4      	adds	r4, r4, r3
 800406a:	0028      	movs	r0, r5
 800406c:	f000 f8e0 	bl	8004230 <__malloc_lock>
 8004070:	4a1d      	ldr	r2, [pc, #116]	@ (80040e8 <_free_r+0x90>)
 8004072:	6813      	ldr	r3, [r2, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d105      	bne.n	8004084 <_free_r+0x2c>
 8004078:	6063      	str	r3, [r4, #4]
 800407a:	6014      	str	r4, [r2, #0]
 800407c:	0028      	movs	r0, r5
 800407e:	f000 f8df 	bl	8004240 <__malloc_unlock>
 8004082:	bd70      	pop	{r4, r5, r6, pc}
 8004084:	42a3      	cmp	r3, r4
 8004086:	d908      	bls.n	800409a <_free_r+0x42>
 8004088:	6820      	ldr	r0, [r4, #0]
 800408a:	1821      	adds	r1, r4, r0
 800408c:	428b      	cmp	r3, r1
 800408e:	d1f3      	bne.n	8004078 <_free_r+0x20>
 8004090:	6819      	ldr	r1, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	1809      	adds	r1, r1, r0
 8004096:	6021      	str	r1, [r4, #0]
 8004098:	e7ee      	b.n	8004078 <_free_r+0x20>
 800409a:	001a      	movs	r2, r3
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <_free_r+0x4e>
 80040a2:	42a3      	cmp	r3, r4
 80040a4:	d9f9      	bls.n	800409a <_free_r+0x42>
 80040a6:	6811      	ldr	r1, [r2, #0]
 80040a8:	1850      	adds	r0, r2, r1
 80040aa:	42a0      	cmp	r0, r4
 80040ac:	d10b      	bne.n	80040c6 <_free_r+0x6e>
 80040ae:	6820      	ldr	r0, [r4, #0]
 80040b0:	1809      	adds	r1, r1, r0
 80040b2:	1850      	adds	r0, r2, r1
 80040b4:	6011      	str	r1, [r2, #0]
 80040b6:	4283      	cmp	r3, r0
 80040b8:	d1e0      	bne.n	800407c <_free_r+0x24>
 80040ba:	6818      	ldr	r0, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	1841      	adds	r1, r0, r1
 80040c0:	6011      	str	r1, [r2, #0]
 80040c2:	6053      	str	r3, [r2, #4]
 80040c4:	e7da      	b.n	800407c <_free_r+0x24>
 80040c6:	42a0      	cmp	r0, r4
 80040c8:	d902      	bls.n	80040d0 <_free_r+0x78>
 80040ca:	230c      	movs	r3, #12
 80040cc:	602b      	str	r3, [r5, #0]
 80040ce:	e7d5      	b.n	800407c <_free_r+0x24>
 80040d0:	6820      	ldr	r0, [r4, #0]
 80040d2:	1821      	adds	r1, r4, r0
 80040d4:	428b      	cmp	r3, r1
 80040d6:	d103      	bne.n	80040e0 <_free_r+0x88>
 80040d8:	6819      	ldr	r1, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	1809      	adds	r1, r1, r0
 80040de:	6021      	str	r1, [r4, #0]
 80040e0:	6063      	str	r3, [r4, #4]
 80040e2:	6054      	str	r4, [r2, #4]
 80040e4:	e7ca      	b.n	800407c <_free_r+0x24>
 80040e6:	46c0      	nop			@ (mov r8, r8)
 80040e8:	20000564 	.word	0x20000564

080040ec <sbrk_aligned>:
 80040ec:	b570      	push	{r4, r5, r6, lr}
 80040ee:	4e0f      	ldr	r6, [pc, #60]	@ (800412c <sbrk_aligned+0x40>)
 80040f0:	000d      	movs	r5, r1
 80040f2:	6831      	ldr	r1, [r6, #0]
 80040f4:	0004      	movs	r4, r0
 80040f6:	2900      	cmp	r1, #0
 80040f8:	d102      	bne.n	8004100 <sbrk_aligned+0x14>
 80040fa:	f000 fb83 	bl	8004804 <_sbrk_r>
 80040fe:	6030      	str	r0, [r6, #0]
 8004100:	0029      	movs	r1, r5
 8004102:	0020      	movs	r0, r4
 8004104:	f000 fb7e 	bl	8004804 <_sbrk_r>
 8004108:	1c43      	adds	r3, r0, #1
 800410a:	d103      	bne.n	8004114 <sbrk_aligned+0x28>
 800410c:	2501      	movs	r5, #1
 800410e:	426d      	negs	r5, r5
 8004110:	0028      	movs	r0, r5
 8004112:	bd70      	pop	{r4, r5, r6, pc}
 8004114:	2303      	movs	r3, #3
 8004116:	1cc5      	adds	r5, r0, #3
 8004118:	439d      	bics	r5, r3
 800411a:	42a8      	cmp	r0, r5
 800411c:	d0f8      	beq.n	8004110 <sbrk_aligned+0x24>
 800411e:	1a29      	subs	r1, r5, r0
 8004120:	0020      	movs	r0, r4
 8004122:	f000 fb6f 	bl	8004804 <_sbrk_r>
 8004126:	3001      	adds	r0, #1
 8004128:	d1f2      	bne.n	8004110 <sbrk_aligned+0x24>
 800412a:	e7ef      	b.n	800410c <sbrk_aligned+0x20>
 800412c:	20000560 	.word	0x20000560

08004130 <_malloc_r>:
 8004130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004132:	2203      	movs	r2, #3
 8004134:	1ccb      	adds	r3, r1, #3
 8004136:	4393      	bics	r3, r2
 8004138:	3308      	adds	r3, #8
 800413a:	0005      	movs	r5, r0
 800413c:	001f      	movs	r7, r3
 800413e:	2b0c      	cmp	r3, #12
 8004140:	d234      	bcs.n	80041ac <_malloc_r+0x7c>
 8004142:	270c      	movs	r7, #12
 8004144:	42b9      	cmp	r1, r7
 8004146:	d833      	bhi.n	80041b0 <_malloc_r+0x80>
 8004148:	0028      	movs	r0, r5
 800414a:	f000 f871 	bl	8004230 <__malloc_lock>
 800414e:	4e37      	ldr	r6, [pc, #220]	@ (800422c <_malloc_r+0xfc>)
 8004150:	6833      	ldr	r3, [r6, #0]
 8004152:	001c      	movs	r4, r3
 8004154:	2c00      	cmp	r4, #0
 8004156:	d12f      	bne.n	80041b8 <_malloc_r+0x88>
 8004158:	0039      	movs	r1, r7
 800415a:	0028      	movs	r0, r5
 800415c:	f7ff ffc6 	bl	80040ec <sbrk_aligned>
 8004160:	0004      	movs	r4, r0
 8004162:	1c43      	adds	r3, r0, #1
 8004164:	d15f      	bne.n	8004226 <_malloc_r+0xf6>
 8004166:	6834      	ldr	r4, [r6, #0]
 8004168:	9400      	str	r4, [sp, #0]
 800416a:	9b00      	ldr	r3, [sp, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d14a      	bne.n	8004206 <_malloc_r+0xd6>
 8004170:	2c00      	cmp	r4, #0
 8004172:	d052      	beq.n	800421a <_malloc_r+0xea>
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	0028      	movs	r0, r5
 8004178:	18e3      	adds	r3, r4, r3
 800417a:	9900      	ldr	r1, [sp, #0]
 800417c:	9301      	str	r3, [sp, #4]
 800417e:	f000 fb41 	bl	8004804 <_sbrk_r>
 8004182:	9b01      	ldr	r3, [sp, #4]
 8004184:	4283      	cmp	r3, r0
 8004186:	d148      	bne.n	800421a <_malloc_r+0xea>
 8004188:	6823      	ldr	r3, [r4, #0]
 800418a:	0028      	movs	r0, r5
 800418c:	1aff      	subs	r7, r7, r3
 800418e:	0039      	movs	r1, r7
 8004190:	f7ff ffac 	bl	80040ec <sbrk_aligned>
 8004194:	3001      	adds	r0, #1
 8004196:	d040      	beq.n	800421a <_malloc_r+0xea>
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	19db      	adds	r3, r3, r7
 800419c:	6023      	str	r3, [r4, #0]
 800419e:	6833      	ldr	r3, [r6, #0]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	2a00      	cmp	r2, #0
 80041a4:	d133      	bne.n	800420e <_malloc_r+0xde>
 80041a6:	9b00      	ldr	r3, [sp, #0]
 80041a8:	6033      	str	r3, [r6, #0]
 80041aa:	e019      	b.n	80041e0 <_malloc_r+0xb0>
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	dac9      	bge.n	8004144 <_malloc_r+0x14>
 80041b0:	230c      	movs	r3, #12
 80041b2:	602b      	str	r3, [r5, #0]
 80041b4:	2000      	movs	r0, #0
 80041b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80041b8:	6821      	ldr	r1, [r4, #0]
 80041ba:	1bc9      	subs	r1, r1, r7
 80041bc:	d420      	bmi.n	8004200 <_malloc_r+0xd0>
 80041be:	290b      	cmp	r1, #11
 80041c0:	d90a      	bls.n	80041d8 <_malloc_r+0xa8>
 80041c2:	19e2      	adds	r2, r4, r7
 80041c4:	6027      	str	r7, [r4, #0]
 80041c6:	42a3      	cmp	r3, r4
 80041c8:	d104      	bne.n	80041d4 <_malloc_r+0xa4>
 80041ca:	6032      	str	r2, [r6, #0]
 80041cc:	6863      	ldr	r3, [r4, #4]
 80041ce:	6011      	str	r1, [r2, #0]
 80041d0:	6053      	str	r3, [r2, #4]
 80041d2:	e005      	b.n	80041e0 <_malloc_r+0xb0>
 80041d4:	605a      	str	r2, [r3, #4]
 80041d6:	e7f9      	b.n	80041cc <_malloc_r+0x9c>
 80041d8:	6862      	ldr	r2, [r4, #4]
 80041da:	42a3      	cmp	r3, r4
 80041dc:	d10e      	bne.n	80041fc <_malloc_r+0xcc>
 80041de:	6032      	str	r2, [r6, #0]
 80041e0:	0028      	movs	r0, r5
 80041e2:	f000 f82d 	bl	8004240 <__malloc_unlock>
 80041e6:	0020      	movs	r0, r4
 80041e8:	2207      	movs	r2, #7
 80041ea:	300b      	adds	r0, #11
 80041ec:	1d23      	adds	r3, r4, #4
 80041ee:	4390      	bics	r0, r2
 80041f0:	1ac2      	subs	r2, r0, r3
 80041f2:	4298      	cmp	r0, r3
 80041f4:	d0df      	beq.n	80041b6 <_malloc_r+0x86>
 80041f6:	1a1b      	subs	r3, r3, r0
 80041f8:	50a3      	str	r3, [r4, r2]
 80041fa:	e7dc      	b.n	80041b6 <_malloc_r+0x86>
 80041fc:	605a      	str	r2, [r3, #4]
 80041fe:	e7ef      	b.n	80041e0 <_malloc_r+0xb0>
 8004200:	0023      	movs	r3, r4
 8004202:	6864      	ldr	r4, [r4, #4]
 8004204:	e7a6      	b.n	8004154 <_malloc_r+0x24>
 8004206:	9c00      	ldr	r4, [sp, #0]
 8004208:	6863      	ldr	r3, [r4, #4]
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	e7ad      	b.n	800416a <_malloc_r+0x3a>
 800420e:	001a      	movs	r2, r3
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	42a3      	cmp	r3, r4
 8004214:	d1fb      	bne.n	800420e <_malloc_r+0xde>
 8004216:	2300      	movs	r3, #0
 8004218:	e7da      	b.n	80041d0 <_malloc_r+0xa0>
 800421a:	230c      	movs	r3, #12
 800421c:	0028      	movs	r0, r5
 800421e:	602b      	str	r3, [r5, #0]
 8004220:	f000 f80e 	bl	8004240 <__malloc_unlock>
 8004224:	e7c6      	b.n	80041b4 <_malloc_r+0x84>
 8004226:	6007      	str	r7, [r0, #0]
 8004228:	e7da      	b.n	80041e0 <_malloc_r+0xb0>
 800422a:	46c0      	nop			@ (mov r8, r8)
 800422c:	20000564 	.word	0x20000564

08004230 <__malloc_lock>:
 8004230:	b510      	push	{r4, lr}
 8004232:	4802      	ldr	r0, [pc, #8]	@ (800423c <__malloc_lock+0xc>)
 8004234:	f7ff ff04 	bl	8004040 <__retarget_lock_acquire_recursive>
 8004238:	bd10      	pop	{r4, pc}
 800423a:	46c0      	nop			@ (mov r8, r8)
 800423c:	2000055c 	.word	0x2000055c

08004240 <__malloc_unlock>:
 8004240:	b510      	push	{r4, lr}
 8004242:	4802      	ldr	r0, [pc, #8]	@ (800424c <__malloc_unlock+0xc>)
 8004244:	f7ff fefd 	bl	8004042 <__retarget_lock_release_recursive>
 8004248:	bd10      	pop	{r4, pc}
 800424a:	46c0      	nop			@ (mov r8, r8)
 800424c:	2000055c 	.word	0x2000055c

08004250 <__ssputs_r>:
 8004250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004252:	688e      	ldr	r6, [r1, #8]
 8004254:	b085      	sub	sp, #20
 8004256:	001f      	movs	r7, r3
 8004258:	000c      	movs	r4, r1
 800425a:	680b      	ldr	r3, [r1, #0]
 800425c:	9002      	str	r0, [sp, #8]
 800425e:	9203      	str	r2, [sp, #12]
 8004260:	42be      	cmp	r6, r7
 8004262:	d830      	bhi.n	80042c6 <__ssputs_r+0x76>
 8004264:	210c      	movs	r1, #12
 8004266:	5e62      	ldrsh	r2, [r4, r1]
 8004268:	2190      	movs	r1, #144	@ 0x90
 800426a:	00c9      	lsls	r1, r1, #3
 800426c:	420a      	tst	r2, r1
 800426e:	d028      	beq.n	80042c2 <__ssputs_r+0x72>
 8004270:	2003      	movs	r0, #3
 8004272:	6921      	ldr	r1, [r4, #16]
 8004274:	1a5b      	subs	r3, r3, r1
 8004276:	9301      	str	r3, [sp, #4]
 8004278:	6963      	ldr	r3, [r4, #20]
 800427a:	4343      	muls	r3, r0
 800427c:	9801      	ldr	r0, [sp, #4]
 800427e:	0fdd      	lsrs	r5, r3, #31
 8004280:	18ed      	adds	r5, r5, r3
 8004282:	1c7b      	adds	r3, r7, #1
 8004284:	181b      	adds	r3, r3, r0
 8004286:	106d      	asrs	r5, r5, #1
 8004288:	42ab      	cmp	r3, r5
 800428a:	d900      	bls.n	800428e <__ssputs_r+0x3e>
 800428c:	001d      	movs	r5, r3
 800428e:	0552      	lsls	r2, r2, #21
 8004290:	d528      	bpl.n	80042e4 <__ssputs_r+0x94>
 8004292:	0029      	movs	r1, r5
 8004294:	9802      	ldr	r0, [sp, #8]
 8004296:	f7ff ff4b 	bl	8004130 <_malloc_r>
 800429a:	1e06      	subs	r6, r0, #0
 800429c:	d02c      	beq.n	80042f8 <__ssputs_r+0xa8>
 800429e:	9a01      	ldr	r2, [sp, #4]
 80042a0:	6921      	ldr	r1, [r4, #16]
 80042a2:	f7ff fecf 	bl	8004044 <memcpy>
 80042a6:	89a2      	ldrh	r2, [r4, #12]
 80042a8:	4b18      	ldr	r3, [pc, #96]	@ (800430c <__ssputs_r+0xbc>)
 80042aa:	401a      	ands	r2, r3
 80042ac:	2380      	movs	r3, #128	@ 0x80
 80042ae:	4313      	orrs	r3, r2
 80042b0:	81a3      	strh	r3, [r4, #12]
 80042b2:	9b01      	ldr	r3, [sp, #4]
 80042b4:	6126      	str	r6, [r4, #16]
 80042b6:	18f6      	adds	r6, r6, r3
 80042b8:	6026      	str	r6, [r4, #0]
 80042ba:	003e      	movs	r6, r7
 80042bc:	6165      	str	r5, [r4, #20]
 80042be:	1aed      	subs	r5, r5, r3
 80042c0:	60a5      	str	r5, [r4, #8]
 80042c2:	42be      	cmp	r6, r7
 80042c4:	d900      	bls.n	80042c8 <__ssputs_r+0x78>
 80042c6:	003e      	movs	r6, r7
 80042c8:	0032      	movs	r2, r6
 80042ca:	9903      	ldr	r1, [sp, #12]
 80042cc:	6820      	ldr	r0, [r4, #0]
 80042ce:	f7ff fe67 	bl	8003fa0 <memmove>
 80042d2:	2000      	movs	r0, #0
 80042d4:	68a3      	ldr	r3, [r4, #8]
 80042d6:	1b9b      	subs	r3, r3, r6
 80042d8:	60a3      	str	r3, [r4, #8]
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	199b      	adds	r3, r3, r6
 80042de:	6023      	str	r3, [r4, #0]
 80042e0:	b005      	add	sp, #20
 80042e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042e4:	002a      	movs	r2, r5
 80042e6:	9802      	ldr	r0, [sp, #8]
 80042e8:	f000 faa9 	bl	800483e <_realloc_r>
 80042ec:	1e06      	subs	r6, r0, #0
 80042ee:	d1e0      	bne.n	80042b2 <__ssputs_r+0x62>
 80042f0:	6921      	ldr	r1, [r4, #16]
 80042f2:	9802      	ldr	r0, [sp, #8]
 80042f4:	f7ff feb0 	bl	8004058 <_free_r>
 80042f8:	230c      	movs	r3, #12
 80042fa:	2001      	movs	r0, #1
 80042fc:	9a02      	ldr	r2, [sp, #8]
 80042fe:	4240      	negs	r0, r0
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	89a2      	ldrh	r2, [r4, #12]
 8004304:	3334      	adds	r3, #52	@ 0x34
 8004306:	4313      	orrs	r3, r2
 8004308:	81a3      	strh	r3, [r4, #12]
 800430a:	e7e9      	b.n	80042e0 <__ssputs_r+0x90>
 800430c:	fffffb7f 	.word	0xfffffb7f

08004310 <_svfiprintf_r>:
 8004310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004312:	b0a1      	sub	sp, #132	@ 0x84
 8004314:	9003      	str	r0, [sp, #12]
 8004316:	001d      	movs	r5, r3
 8004318:	898b      	ldrh	r3, [r1, #12]
 800431a:	000f      	movs	r7, r1
 800431c:	0016      	movs	r6, r2
 800431e:	061b      	lsls	r3, r3, #24
 8004320:	d511      	bpl.n	8004346 <_svfiprintf_r+0x36>
 8004322:	690b      	ldr	r3, [r1, #16]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10e      	bne.n	8004346 <_svfiprintf_r+0x36>
 8004328:	2140      	movs	r1, #64	@ 0x40
 800432a:	f7ff ff01 	bl	8004130 <_malloc_r>
 800432e:	6038      	str	r0, [r7, #0]
 8004330:	6138      	str	r0, [r7, #16]
 8004332:	2800      	cmp	r0, #0
 8004334:	d105      	bne.n	8004342 <_svfiprintf_r+0x32>
 8004336:	230c      	movs	r3, #12
 8004338:	9a03      	ldr	r2, [sp, #12]
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	2001      	movs	r0, #1
 800433e:	4240      	negs	r0, r0
 8004340:	e0cf      	b.n	80044e2 <_svfiprintf_r+0x1d2>
 8004342:	2340      	movs	r3, #64	@ 0x40
 8004344:	617b      	str	r3, [r7, #20]
 8004346:	2300      	movs	r3, #0
 8004348:	ac08      	add	r4, sp, #32
 800434a:	6163      	str	r3, [r4, #20]
 800434c:	3320      	adds	r3, #32
 800434e:	7663      	strb	r3, [r4, #25]
 8004350:	3310      	adds	r3, #16
 8004352:	76a3      	strb	r3, [r4, #26]
 8004354:	9507      	str	r5, [sp, #28]
 8004356:	0035      	movs	r5, r6
 8004358:	782b      	ldrb	r3, [r5, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <_svfiprintf_r+0x52>
 800435e:	2b25      	cmp	r3, #37	@ 0x25
 8004360:	d148      	bne.n	80043f4 <_svfiprintf_r+0xe4>
 8004362:	1bab      	subs	r3, r5, r6
 8004364:	9305      	str	r3, [sp, #20]
 8004366:	42b5      	cmp	r5, r6
 8004368:	d00b      	beq.n	8004382 <_svfiprintf_r+0x72>
 800436a:	0032      	movs	r2, r6
 800436c:	0039      	movs	r1, r7
 800436e:	9803      	ldr	r0, [sp, #12]
 8004370:	f7ff ff6e 	bl	8004250 <__ssputs_r>
 8004374:	3001      	adds	r0, #1
 8004376:	d100      	bne.n	800437a <_svfiprintf_r+0x6a>
 8004378:	e0ae      	b.n	80044d8 <_svfiprintf_r+0x1c8>
 800437a:	6963      	ldr	r3, [r4, #20]
 800437c:	9a05      	ldr	r2, [sp, #20]
 800437e:	189b      	adds	r3, r3, r2
 8004380:	6163      	str	r3, [r4, #20]
 8004382:	782b      	ldrb	r3, [r5, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d100      	bne.n	800438a <_svfiprintf_r+0x7a>
 8004388:	e0a6      	b.n	80044d8 <_svfiprintf_r+0x1c8>
 800438a:	2201      	movs	r2, #1
 800438c:	2300      	movs	r3, #0
 800438e:	4252      	negs	r2, r2
 8004390:	6062      	str	r2, [r4, #4]
 8004392:	a904      	add	r1, sp, #16
 8004394:	3254      	adds	r2, #84	@ 0x54
 8004396:	1852      	adds	r2, r2, r1
 8004398:	1c6e      	adds	r6, r5, #1
 800439a:	6023      	str	r3, [r4, #0]
 800439c:	60e3      	str	r3, [r4, #12]
 800439e:	60a3      	str	r3, [r4, #8]
 80043a0:	7013      	strb	r3, [r2, #0]
 80043a2:	65a3      	str	r3, [r4, #88]	@ 0x58
 80043a4:	4b54      	ldr	r3, [pc, #336]	@ (80044f8 <_svfiprintf_r+0x1e8>)
 80043a6:	2205      	movs	r2, #5
 80043a8:	0018      	movs	r0, r3
 80043aa:	7831      	ldrb	r1, [r6, #0]
 80043ac:	9305      	str	r3, [sp, #20]
 80043ae:	f000 fa3b 	bl	8004828 <memchr>
 80043b2:	1c75      	adds	r5, r6, #1
 80043b4:	2800      	cmp	r0, #0
 80043b6:	d11f      	bne.n	80043f8 <_svfiprintf_r+0xe8>
 80043b8:	6822      	ldr	r2, [r4, #0]
 80043ba:	06d3      	lsls	r3, r2, #27
 80043bc:	d504      	bpl.n	80043c8 <_svfiprintf_r+0xb8>
 80043be:	2353      	movs	r3, #83	@ 0x53
 80043c0:	a904      	add	r1, sp, #16
 80043c2:	185b      	adds	r3, r3, r1
 80043c4:	2120      	movs	r1, #32
 80043c6:	7019      	strb	r1, [r3, #0]
 80043c8:	0713      	lsls	r3, r2, #28
 80043ca:	d504      	bpl.n	80043d6 <_svfiprintf_r+0xc6>
 80043cc:	2353      	movs	r3, #83	@ 0x53
 80043ce:	a904      	add	r1, sp, #16
 80043d0:	185b      	adds	r3, r3, r1
 80043d2:	212b      	movs	r1, #43	@ 0x2b
 80043d4:	7019      	strb	r1, [r3, #0]
 80043d6:	7833      	ldrb	r3, [r6, #0]
 80043d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80043da:	d016      	beq.n	800440a <_svfiprintf_r+0xfa>
 80043dc:	0035      	movs	r5, r6
 80043de:	2100      	movs	r1, #0
 80043e0:	200a      	movs	r0, #10
 80043e2:	68e3      	ldr	r3, [r4, #12]
 80043e4:	782a      	ldrb	r2, [r5, #0]
 80043e6:	1c6e      	adds	r6, r5, #1
 80043e8:	3a30      	subs	r2, #48	@ 0x30
 80043ea:	2a09      	cmp	r2, #9
 80043ec:	d950      	bls.n	8004490 <_svfiprintf_r+0x180>
 80043ee:	2900      	cmp	r1, #0
 80043f0:	d111      	bne.n	8004416 <_svfiprintf_r+0x106>
 80043f2:	e017      	b.n	8004424 <_svfiprintf_r+0x114>
 80043f4:	3501      	adds	r5, #1
 80043f6:	e7af      	b.n	8004358 <_svfiprintf_r+0x48>
 80043f8:	9b05      	ldr	r3, [sp, #20]
 80043fa:	6822      	ldr	r2, [r4, #0]
 80043fc:	1ac0      	subs	r0, r0, r3
 80043fe:	2301      	movs	r3, #1
 8004400:	4083      	lsls	r3, r0
 8004402:	4313      	orrs	r3, r2
 8004404:	002e      	movs	r6, r5
 8004406:	6023      	str	r3, [r4, #0]
 8004408:	e7cc      	b.n	80043a4 <_svfiprintf_r+0x94>
 800440a:	9b07      	ldr	r3, [sp, #28]
 800440c:	1d19      	adds	r1, r3, #4
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	9107      	str	r1, [sp, #28]
 8004412:	2b00      	cmp	r3, #0
 8004414:	db01      	blt.n	800441a <_svfiprintf_r+0x10a>
 8004416:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004418:	e004      	b.n	8004424 <_svfiprintf_r+0x114>
 800441a:	425b      	negs	r3, r3
 800441c:	60e3      	str	r3, [r4, #12]
 800441e:	2302      	movs	r3, #2
 8004420:	4313      	orrs	r3, r2
 8004422:	6023      	str	r3, [r4, #0]
 8004424:	782b      	ldrb	r3, [r5, #0]
 8004426:	2b2e      	cmp	r3, #46	@ 0x2e
 8004428:	d10c      	bne.n	8004444 <_svfiprintf_r+0x134>
 800442a:	786b      	ldrb	r3, [r5, #1]
 800442c:	2b2a      	cmp	r3, #42	@ 0x2a
 800442e:	d134      	bne.n	800449a <_svfiprintf_r+0x18a>
 8004430:	9b07      	ldr	r3, [sp, #28]
 8004432:	3502      	adds	r5, #2
 8004434:	1d1a      	adds	r2, r3, #4
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	9207      	str	r2, [sp, #28]
 800443a:	2b00      	cmp	r3, #0
 800443c:	da01      	bge.n	8004442 <_svfiprintf_r+0x132>
 800443e:	2301      	movs	r3, #1
 8004440:	425b      	negs	r3, r3
 8004442:	9309      	str	r3, [sp, #36]	@ 0x24
 8004444:	4e2d      	ldr	r6, [pc, #180]	@ (80044fc <_svfiprintf_r+0x1ec>)
 8004446:	2203      	movs	r2, #3
 8004448:	0030      	movs	r0, r6
 800444a:	7829      	ldrb	r1, [r5, #0]
 800444c:	f000 f9ec 	bl	8004828 <memchr>
 8004450:	2800      	cmp	r0, #0
 8004452:	d006      	beq.n	8004462 <_svfiprintf_r+0x152>
 8004454:	2340      	movs	r3, #64	@ 0x40
 8004456:	1b80      	subs	r0, r0, r6
 8004458:	4083      	lsls	r3, r0
 800445a:	6822      	ldr	r2, [r4, #0]
 800445c:	3501      	adds	r5, #1
 800445e:	4313      	orrs	r3, r2
 8004460:	6023      	str	r3, [r4, #0]
 8004462:	7829      	ldrb	r1, [r5, #0]
 8004464:	2206      	movs	r2, #6
 8004466:	4826      	ldr	r0, [pc, #152]	@ (8004500 <_svfiprintf_r+0x1f0>)
 8004468:	1c6e      	adds	r6, r5, #1
 800446a:	7621      	strb	r1, [r4, #24]
 800446c:	f000 f9dc 	bl	8004828 <memchr>
 8004470:	2800      	cmp	r0, #0
 8004472:	d038      	beq.n	80044e6 <_svfiprintf_r+0x1d6>
 8004474:	4b23      	ldr	r3, [pc, #140]	@ (8004504 <_svfiprintf_r+0x1f4>)
 8004476:	2b00      	cmp	r3, #0
 8004478:	d122      	bne.n	80044c0 <_svfiprintf_r+0x1b0>
 800447a:	2207      	movs	r2, #7
 800447c:	9b07      	ldr	r3, [sp, #28]
 800447e:	3307      	adds	r3, #7
 8004480:	4393      	bics	r3, r2
 8004482:	3308      	adds	r3, #8
 8004484:	9307      	str	r3, [sp, #28]
 8004486:	6963      	ldr	r3, [r4, #20]
 8004488:	9a04      	ldr	r2, [sp, #16]
 800448a:	189b      	adds	r3, r3, r2
 800448c:	6163      	str	r3, [r4, #20]
 800448e:	e762      	b.n	8004356 <_svfiprintf_r+0x46>
 8004490:	4343      	muls	r3, r0
 8004492:	0035      	movs	r5, r6
 8004494:	2101      	movs	r1, #1
 8004496:	189b      	adds	r3, r3, r2
 8004498:	e7a4      	b.n	80043e4 <_svfiprintf_r+0xd4>
 800449a:	2300      	movs	r3, #0
 800449c:	200a      	movs	r0, #10
 800449e:	0019      	movs	r1, r3
 80044a0:	3501      	adds	r5, #1
 80044a2:	6063      	str	r3, [r4, #4]
 80044a4:	782a      	ldrb	r2, [r5, #0]
 80044a6:	1c6e      	adds	r6, r5, #1
 80044a8:	3a30      	subs	r2, #48	@ 0x30
 80044aa:	2a09      	cmp	r2, #9
 80044ac:	d903      	bls.n	80044b6 <_svfiprintf_r+0x1a6>
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0c8      	beq.n	8004444 <_svfiprintf_r+0x134>
 80044b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80044b4:	e7c6      	b.n	8004444 <_svfiprintf_r+0x134>
 80044b6:	4341      	muls	r1, r0
 80044b8:	0035      	movs	r5, r6
 80044ba:	2301      	movs	r3, #1
 80044bc:	1889      	adds	r1, r1, r2
 80044be:	e7f1      	b.n	80044a4 <_svfiprintf_r+0x194>
 80044c0:	aa07      	add	r2, sp, #28
 80044c2:	9200      	str	r2, [sp, #0]
 80044c4:	0021      	movs	r1, r4
 80044c6:	003a      	movs	r2, r7
 80044c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004508 <_svfiprintf_r+0x1f8>)
 80044ca:	9803      	ldr	r0, [sp, #12]
 80044cc:	e000      	b.n	80044d0 <_svfiprintf_r+0x1c0>
 80044ce:	bf00      	nop
 80044d0:	9004      	str	r0, [sp, #16]
 80044d2:	9b04      	ldr	r3, [sp, #16]
 80044d4:	3301      	adds	r3, #1
 80044d6:	d1d6      	bne.n	8004486 <_svfiprintf_r+0x176>
 80044d8:	89bb      	ldrh	r3, [r7, #12]
 80044da:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80044dc:	065b      	lsls	r3, r3, #25
 80044de:	d500      	bpl.n	80044e2 <_svfiprintf_r+0x1d2>
 80044e0:	e72c      	b.n	800433c <_svfiprintf_r+0x2c>
 80044e2:	b021      	add	sp, #132	@ 0x84
 80044e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044e6:	aa07      	add	r2, sp, #28
 80044e8:	9200      	str	r2, [sp, #0]
 80044ea:	0021      	movs	r1, r4
 80044ec:	003a      	movs	r2, r7
 80044ee:	4b06      	ldr	r3, [pc, #24]	@ (8004508 <_svfiprintf_r+0x1f8>)
 80044f0:	9803      	ldr	r0, [sp, #12]
 80044f2:	f000 f87b 	bl	80045ec <_printf_i>
 80044f6:	e7eb      	b.n	80044d0 <_svfiprintf_r+0x1c0>
 80044f8:	0800496e 	.word	0x0800496e
 80044fc:	08004974 	.word	0x08004974
 8004500:	08004978 	.word	0x08004978
 8004504:	00000000 	.word	0x00000000
 8004508:	08004251 	.word	0x08004251

0800450c <_printf_common>:
 800450c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800450e:	0016      	movs	r6, r2
 8004510:	9301      	str	r3, [sp, #4]
 8004512:	688a      	ldr	r2, [r1, #8]
 8004514:	690b      	ldr	r3, [r1, #16]
 8004516:	000c      	movs	r4, r1
 8004518:	9000      	str	r0, [sp, #0]
 800451a:	4293      	cmp	r3, r2
 800451c:	da00      	bge.n	8004520 <_printf_common+0x14>
 800451e:	0013      	movs	r3, r2
 8004520:	0022      	movs	r2, r4
 8004522:	6033      	str	r3, [r6, #0]
 8004524:	3243      	adds	r2, #67	@ 0x43
 8004526:	7812      	ldrb	r2, [r2, #0]
 8004528:	2a00      	cmp	r2, #0
 800452a:	d001      	beq.n	8004530 <_printf_common+0x24>
 800452c:	3301      	adds	r3, #1
 800452e:	6033      	str	r3, [r6, #0]
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	069b      	lsls	r3, r3, #26
 8004534:	d502      	bpl.n	800453c <_printf_common+0x30>
 8004536:	6833      	ldr	r3, [r6, #0]
 8004538:	3302      	adds	r3, #2
 800453a:	6033      	str	r3, [r6, #0]
 800453c:	6822      	ldr	r2, [r4, #0]
 800453e:	2306      	movs	r3, #6
 8004540:	0015      	movs	r5, r2
 8004542:	401d      	ands	r5, r3
 8004544:	421a      	tst	r2, r3
 8004546:	d027      	beq.n	8004598 <_printf_common+0x8c>
 8004548:	0023      	movs	r3, r4
 800454a:	3343      	adds	r3, #67	@ 0x43
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	1e5a      	subs	r2, r3, #1
 8004550:	4193      	sbcs	r3, r2
 8004552:	6822      	ldr	r2, [r4, #0]
 8004554:	0692      	lsls	r2, r2, #26
 8004556:	d430      	bmi.n	80045ba <_printf_common+0xae>
 8004558:	0022      	movs	r2, r4
 800455a:	9901      	ldr	r1, [sp, #4]
 800455c:	9800      	ldr	r0, [sp, #0]
 800455e:	9d08      	ldr	r5, [sp, #32]
 8004560:	3243      	adds	r2, #67	@ 0x43
 8004562:	47a8      	blx	r5
 8004564:	3001      	adds	r0, #1
 8004566:	d025      	beq.n	80045b4 <_printf_common+0xa8>
 8004568:	2206      	movs	r2, #6
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	2500      	movs	r5, #0
 800456e:	4013      	ands	r3, r2
 8004570:	2b04      	cmp	r3, #4
 8004572:	d105      	bne.n	8004580 <_printf_common+0x74>
 8004574:	6833      	ldr	r3, [r6, #0]
 8004576:	68e5      	ldr	r5, [r4, #12]
 8004578:	1aed      	subs	r5, r5, r3
 800457a:	43eb      	mvns	r3, r5
 800457c:	17db      	asrs	r3, r3, #31
 800457e:	401d      	ands	r5, r3
 8004580:	68a3      	ldr	r3, [r4, #8]
 8004582:	6922      	ldr	r2, [r4, #16]
 8004584:	4293      	cmp	r3, r2
 8004586:	dd01      	ble.n	800458c <_printf_common+0x80>
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	18ed      	adds	r5, r5, r3
 800458c:	2600      	movs	r6, #0
 800458e:	42b5      	cmp	r5, r6
 8004590:	d120      	bne.n	80045d4 <_printf_common+0xc8>
 8004592:	2000      	movs	r0, #0
 8004594:	e010      	b.n	80045b8 <_printf_common+0xac>
 8004596:	3501      	adds	r5, #1
 8004598:	68e3      	ldr	r3, [r4, #12]
 800459a:	6832      	ldr	r2, [r6, #0]
 800459c:	1a9b      	subs	r3, r3, r2
 800459e:	42ab      	cmp	r3, r5
 80045a0:	ddd2      	ble.n	8004548 <_printf_common+0x3c>
 80045a2:	0022      	movs	r2, r4
 80045a4:	2301      	movs	r3, #1
 80045a6:	9901      	ldr	r1, [sp, #4]
 80045a8:	9800      	ldr	r0, [sp, #0]
 80045aa:	9f08      	ldr	r7, [sp, #32]
 80045ac:	3219      	adds	r2, #25
 80045ae:	47b8      	blx	r7
 80045b0:	3001      	adds	r0, #1
 80045b2:	d1f0      	bne.n	8004596 <_printf_common+0x8a>
 80045b4:	2001      	movs	r0, #1
 80045b6:	4240      	negs	r0, r0
 80045b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80045ba:	2030      	movs	r0, #48	@ 0x30
 80045bc:	18e1      	adds	r1, r4, r3
 80045be:	3143      	adds	r1, #67	@ 0x43
 80045c0:	7008      	strb	r0, [r1, #0]
 80045c2:	0021      	movs	r1, r4
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	3145      	adds	r1, #69	@ 0x45
 80045c8:	7809      	ldrb	r1, [r1, #0]
 80045ca:	18a2      	adds	r2, r4, r2
 80045cc:	3243      	adds	r2, #67	@ 0x43
 80045ce:	3302      	adds	r3, #2
 80045d0:	7011      	strb	r1, [r2, #0]
 80045d2:	e7c1      	b.n	8004558 <_printf_common+0x4c>
 80045d4:	0022      	movs	r2, r4
 80045d6:	2301      	movs	r3, #1
 80045d8:	9901      	ldr	r1, [sp, #4]
 80045da:	9800      	ldr	r0, [sp, #0]
 80045dc:	9f08      	ldr	r7, [sp, #32]
 80045de:	321a      	adds	r2, #26
 80045e0:	47b8      	blx	r7
 80045e2:	3001      	adds	r0, #1
 80045e4:	d0e6      	beq.n	80045b4 <_printf_common+0xa8>
 80045e6:	3601      	adds	r6, #1
 80045e8:	e7d1      	b.n	800458e <_printf_common+0x82>
	...

080045ec <_printf_i>:
 80045ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ee:	b08b      	sub	sp, #44	@ 0x2c
 80045f0:	9206      	str	r2, [sp, #24]
 80045f2:	000a      	movs	r2, r1
 80045f4:	3243      	adds	r2, #67	@ 0x43
 80045f6:	9307      	str	r3, [sp, #28]
 80045f8:	9005      	str	r0, [sp, #20]
 80045fa:	9203      	str	r2, [sp, #12]
 80045fc:	7e0a      	ldrb	r2, [r1, #24]
 80045fe:	000c      	movs	r4, r1
 8004600:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004602:	2a78      	cmp	r2, #120	@ 0x78
 8004604:	d809      	bhi.n	800461a <_printf_i+0x2e>
 8004606:	2a62      	cmp	r2, #98	@ 0x62
 8004608:	d80b      	bhi.n	8004622 <_printf_i+0x36>
 800460a:	2a00      	cmp	r2, #0
 800460c:	d100      	bne.n	8004610 <_printf_i+0x24>
 800460e:	e0ba      	b.n	8004786 <_printf_i+0x19a>
 8004610:	497a      	ldr	r1, [pc, #488]	@ (80047fc <_printf_i+0x210>)
 8004612:	9104      	str	r1, [sp, #16]
 8004614:	2a58      	cmp	r2, #88	@ 0x58
 8004616:	d100      	bne.n	800461a <_printf_i+0x2e>
 8004618:	e08e      	b.n	8004738 <_printf_i+0x14c>
 800461a:	0025      	movs	r5, r4
 800461c:	3542      	adds	r5, #66	@ 0x42
 800461e:	702a      	strb	r2, [r5, #0]
 8004620:	e022      	b.n	8004668 <_printf_i+0x7c>
 8004622:	0010      	movs	r0, r2
 8004624:	3863      	subs	r0, #99	@ 0x63
 8004626:	2815      	cmp	r0, #21
 8004628:	d8f7      	bhi.n	800461a <_printf_i+0x2e>
 800462a:	f7fb fd85 	bl	8000138 <__gnu_thumb1_case_shi>
 800462e:	0016      	.short	0x0016
 8004630:	fff6001f 	.word	0xfff6001f
 8004634:	fff6fff6 	.word	0xfff6fff6
 8004638:	001ffff6 	.word	0x001ffff6
 800463c:	fff6fff6 	.word	0xfff6fff6
 8004640:	fff6fff6 	.word	0xfff6fff6
 8004644:	0036009f 	.word	0x0036009f
 8004648:	fff6007e 	.word	0xfff6007e
 800464c:	00b0fff6 	.word	0x00b0fff6
 8004650:	0036fff6 	.word	0x0036fff6
 8004654:	fff6fff6 	.word	0xfff6fff6
 8004658:	0082      	.short	0x0082
 800465a:	0025      	movs	r5, r4
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	3542      	adds	r5, #66	@ 0x42
 8004660:	1d11      	adds	r1, r2, #4
 8004662:	6019      	str	r1, [r3, #0]
 8004664:	6813      	ldr	r3, [r2, #0]
 8004666:	702b      	strb	r3, [r5, #0]
 8004668:	2301      	movs	r3, #1
 800466a:	e09e      	b.n	80047aa <_printf_i+0x1be>
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	6809      	ldr	r1, [r1, #0]
 8004670:	1d02      	adds	r2, r0, #4
 8004672:	060d      	lsls	r5, r1, #24
 8004674:	d50b      	bpl.n	800468e <_printf_i+0xa2>
 8004676:	6806      	ldr	r6, [r0, #0]
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	2e00      	cmp	r6, #0
 800467c:	da03      	bge.n	8004686 <_printf_i+0x9a>
 800467e:	232d      	movs	r3, #45	@ 0x2d
 8004680:	9a03      	ldr	r2, [sp, #12]
 8004682:	4276      	negs	r6, r6
 8004684:	7013      	strb	r3, [r2, #0]
 8004686:	4b5d      	ldr	r3, [pc, #372]	@ (80047fc <_printf_i+0x210>)
 8004688:	270a      	movs	r7, #10
 800468a:	9304      	str	r3, [sp, #16]
 800468c:	e018      	b.n	80046c0 <_printf_i+0xd4>
 800468e:	6806      	ldr	r6, [r0, #0]
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	0649      	lsls	r1, r1, #25
 8004694:	d5f1      	bpl.n	800467a <_printf_i+0x8e>
 8004696:	b236      	sxth	r6, r6
 8004698:	e7ef      	b.n	800467a <_printf_i+0x8e>
 800469a:	6808      	ldr	r0, [r1, #0]
 800469c:	6819      	ldr	r1, [r3, #0]
 800469e:	c940      	ldmia	r1!, {r6}
 80046a0:	0605      	lsls	r5, r0, #24
 80046a2:	d402      	bmi.n	80046aa <_printf_i+0xbe>
 80046a4:	0640      	lsls	r0, r0, #25
 80046a6:	d500      	bpl.n	80046aa <_printf_i+0xbe>
 80046a8:	b2b6      	uxth	r6, r6
 80046aa:	6019      	str	r1, [r3, #0]
 80046ac:	4b53      	ldr	r3, [pc, #332]	@ (80047fc <_printf_i+0x210>)
 80046ae:	270a      	movs	r7, #10
 80046b0:	9304      	str	r3, [sp, #16]
 80046b2:	2a6f      	cmp	r2, #111	@ 0x6f
 80046b4:	d100      	bne.n	80046b8 <_printf_i+0xcc>
 80046b6:	3f02      	subs	r7, #2
 80046b8:	0023      	movs	r3, r4
 80046ba:	2200      	movs	r2, #0
 80046bc:	3343      	adds	r3, #67	@ 0x43
 80046be:	701a      	strb	r2, [r3, #0]
 80046c0:	6863      	ldr	r3, [r4, #4]
 80046c2:	60a3      	str	r3, [r4, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	db06      	blt.n	80046d6 <_printf_i+0xea>
 80046c8:	2104      	movs	r1, #4
 80046ca:	6822      	ldr	r2, [r4, #0]
 80046cc:	9d03      	ldr	r5, [sp, #12]
 80046ce:	438a      	bics	r2, r1
 80046d0:	6022      	str	r2, [r4, #0]
 80046d2:	4333      	orrs	r3, r6
 80046d4:	d00c      	beq.n	80046f0 <_printf_i+0x104>
 80046d6:	9d03      	ldr	r5, [sp, #12]
 80046d8:	0030      	movs	r0, r6
 80046da:	0039      	movs	r1, r7
 80046dc:	f7fb fdc6 	bl	800026c <__aeabi_uidivmod>
 80046e0:	9b04      	ldr	r3, [sp, #16]
 80046e2:	3d01      	subs	r5, #1
 80046e4:	5c5b      	ldrb	r3, [r3, r1]
 80046e6:	702b      	strb	r3, [r5, #0]
 80046e8:	0033      	movs	r3, r6
 80046ea:	0006      	movs	r6, r0
 80046ec:	429f      	cmp	r7, r3
 80046ee:	d9f3      	bls.n	80046d8 <_printf_i+0xec>
 80046f0:	2f08      	cmp	r7, #8
 80046f2:	d109      	bne.n	8004708 <_printf_i+0x11c>
 80046f4:	6823      	ldr	r3, [r4, #0]
 80046f6:	07db      	lsls	r3, r3, #31
 80046f8:	d506      	bpl.n	8004708 <_printf_i+0x11c>
 80046fa:	6862      	ldr	r2, [r4, #4]
 80046fc:	6923      	ldr	r3, [r4, #16]
 80046fe:	429a      	cmp	r2, r3
 8004700:	dc02      	bgt.n	8004708 <_printf_i+0x11c>
 8004702:	2330      	movs	r3, #48	@ 0x30
 8004704:	3d01      	subs	r5, #1
 8004706:	702b      	strb	r3, [r5, #0]
 8004708:	9b03      	ldr	r3, [sp, #12]
 800470a:	1b5b      	subs	r3, r3, r5
 800470c:	6123      	str	r3, [r4, #16]
 800470e:	9b07      	ldr	r3, [sp, #28]
 8004710:	0021      	movs	r1, r4
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	9805      	ldr	r0, [sp, #20]
 8004716:	9b06      	ldr	r3, [sp, #24]
 8004718:	aa09      	add	r2, sp, #36	@ 0x24
 800471a:	f7ff fef7 	bl	800450c <_printf_common>
 800471e:	3001      	adds	r0, #1
 8004720:	d148      	bne.n	80047b4 <_printf_i+0x1c8>
 8004722:	2001      	movs	r0, #1
 8004724:	4240      	negs	r0, r0
 8004726:	b00b      	add	sp, #44	@ 0x2c
 8004728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800472a:	2220      	movs	r2, #32
 800472c:	6809      	ldr	r1, [r1, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	6022      	str	r2, [r4, #0]
 8004732:	2278      	movs	r2, #120	@ 0x78
 8004734:	4932      	ldr	r1, [pc, #200]	@ (8004800 <_printf_i+0x214>)
 8004736:	9104      	str	r1, [sp, #16]
 8004738:	0021      	movs	r1, r4
 800473a:	3145      	adds	r1, #69	@ 0x45
 800473c:	700a      	strb	r2, [r1, #0]
 800473e:	6819      	ldr	r1, [r3, #0]
 8004740:	6822      	ldr	r2, [r4, #0]
 8004742:	c940      	ldmia	r1!, {r6}
 8004744:	0610      	lsls	r0, r2, #24
 8004746:	d402      	bmi.n	800474e <_printf_i+0x162>
 8004748:	0650      	lsls	r0, r2, #25
 800474a:	d500      	bpl.n	800474e <_printf_i+0x162>
 800474c:	b2b6      	uxth	r6, r6
 800474e:	6019      	str	r1, [r3, #0]
 8004750:	07d3      	lsls	r3, r2, #31
 8004752:	d502      	bpl.n	800475a <_printf_i+0x16e>
 8004754:	2320      	movs	r3, #32
 8004756:	4313      	orrs	r3, r2
 8004758:	6023      	str	r3, [r4, #0]
 800475a:	2e00      	cmp	r6, #0
 800475c:	d001      	beq.n	8004762 <_printf_i+0x176>
 800475e:	2710      	movs	r7, #16
 8004760:	e7aa      	b.n	80046b8 <_printf_i+0xcc>
 8004762:	2220      	movs	r2, #32
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	4393      	bics	r3, r2
 8004768:	6023      	str	r3, [r4, #0]
 800476a:	e7f8      	b.n	800475e <_printf_i+0x172>
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	680d      	ldr	r5, [r1, #0]
 8004770:	1d10      	adds	r0, r2, #4
 8004772:	6949      	ldr	r1, [r1, #20]
 8004774:	6018      	str	r0, [r3, #0]
 8004776:	6813      	ldr	r3, [r2, #0]
 8004778:	062e      	lsls	r6, r5, #24
 800477a:	d501      	bpl.n	8004780 <_printf_i+0x194>
 800477c:	6019      	str	r1, [r3, #0]
 800477e:	e002      	b.n	8004786 <_printf_i+0x19a>
 8004780:	066d      	lsls	r5, r5, #25
 8004782:	d5fb      	bpl.n	800477c <_printf_i+0x190>
 8004784:	8019      	strh	r1, [r3, #0]
 8004786:	2300      	movs	r3, #0
 8004788:	9d03      	ldr	r5, [sp, #12]
 800478a:	6123      	str	r3, [r4, #16]
 800478c:	e7bf      	b.n	800470e <_printf_i+0x122>
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	1d11      	adds	r1, r2, #4
 8004792:	6019      	str	r1, [r3, #0]
 8004794:	6815      	ldr	r5, [r2, #0]
 8004796:	2100      	movs	r1, #0
 8004798:	0028      	movs	r0, r5
 800479a:	6862      	ldr	r2, [r4, #4]
 800479c:	f000 f844 	bl	8004828 <memchr>
 80047a0:	2800      	cmp	r0, #0
 80047a2:	d001      	beq.n	80047a8 <_printf_i+0x1bc>
 80047a4:	1b40      	subs	r0, r0, r5
 80047a6:	6060      	str	r0, [r4, #4]
 80047a8:	6863      	ldr	r3, [r4, #4]
 80047aa:	6123      	str	r3, [r4, #16]
 80047ac:	2300      	movs	r3, #0
 80047ae:	9a03      	ldr	r2, [sp, #12]
 80047b0:	7013      	strb	r3, [r2, #0]
 80047b2:	e7ac      	b.n	800470e <_printf_i+0x122>
 80047b4:	002a      	movs	r2, r5
 80047b6:	6923      	ldr	r3, [r4, #16]
 80047b8:	9906      	ldr	r1, [sp, #24]
 80047ba:	9805      	ldr	r0, [sp, #20]
 80047bc:	9d07      	ldr	r5, [sp, #28]
 80047be:	47a8      	blx	r5
 80047c0:	3001      	adds	r0, #1
 80047c2:	d0ae      	beq.n	8004722 <_printf_i+0x136>
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	079b      	lsls	r3, r3, #30
 80047c8:	d415      	bmi.n	80047f6 <_printf_i+0x20a>
 80047ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047cc:	68e0      	ldr	r0, [r4, #12]
 80047ce:	4298      	cmp	r0, r3
 80047d0:	daa9      	bge.n	8004726 <_printf_i+0x13a>
 80047d2:	0018      	movs	r0, r3
 80047d4:	e7a7      	b.n	8004726 <_printf_i+0x13a>
 80047d6:	0022      	movs	r2, r4
 80047d8:	2301      	movs	r3, #1
 80047da:	9906      	ldr	r1, [sp, #24]
 80047dc:	9805      	ldr	r0, [sp, #20]
 80047de:	9e07      	ldr	r6, [sp, #28]
 80047e0:	3219      	adds	r2, #25
 80047e2:	47b0      	blx	r6
 80047e4:	3001      	adds	r0, #1
 80047e6:	d09c      	beq.n	8004722 <_printf_i+0x136>
 80047e8:	3501      	adds	r5, #1
 80047ea:	68e3      	ldr	r3, [r4, #12]
 80047ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	42ab      	cmp	r3, r5
 80047f2:	dcf0      	bgt.n	80047d6 <_printf_i+0x1ea>
 80047f4:	e7e9      	b.n	80047ca <_printf_i+0x1de>
 80047f6:	2500      	movs	r5, #0
 80047f8:	e7f7      	b.n	80047ea <_printf_i+0x1fe>
 80047fa:	46c0      	nop			@ (mov r8, r8)
 80047fc:	0800497f 	.word	0x0800497f
 8004800:	08004990 	.word	0x08004990

08004804 <_sbrk_r>:
 8004804:	2300      	movs	r3, #0
 8004806:	b570      	push	{r4, r5, r6, lr}
 8004808:	4d06      	ldr	r5, [pc, #24]	@ (8004824 <_sbrk_r+0x20>)
 800480a:	0004      	movs	r4, r0
 800480c:	0008      	movs	r0, r1
 800480e:	602b      	str	r3, [r5, #0]
 8004810:	f7fc fd96 	bl	8001340 <_sbrk>
 8004814:	1c43      	adds	r3, r0, #1
 8004816:	d103      	bne.n	8004820 <_sbrk_r+0x1c>
 8004818:	682b      	ldr	r3, [r5, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d000      	beq.n	8004820 <_sbrk_r+0x1c>
 800481e:	6023      	str	r3, [r4, #0]
 8004820:	bd70      	pop	{r4, r5, r6, pc}
 8004822:	46c0      	nop			@ (mov r8, r8)
 8004824:	20000558 	.word	0x20000558

08004828 <memchr>:
 8004828:	b2c9      	uxtb	r1, r1
 800482a:	1882      	adds	r2, r0, r2
 800482c:	4290      	cmp	r0, r2
 800482e:	d101      	bne.n	8004834 <memchr+0xc>
 8004830:	2000      	movs	r0, #0
 8004832:	4770      	bx	lr
 8004834:	7803      	ldrb	r3, [r0, #0]
 8004836:	428b      	cmp	r3, r1
 8004838:	d0fb      	beq.n	8004832 <memchr+0xa>
 800483a:	3001      	adds	r0, #1
 800483c:	e7f6      	b.n	800482c <memchr+0x4>

0800483e <_realloc_r>:
 800483e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004840:	0006      	movs	r6, r0
 8004842:	000c      	movs	r4, r1
 8004844:	0015      	movs	r5, r2
 8004846:	2900      	cmp	r1, #0
 8004848:	d105      	bne.n	8004856 <_realloc_r+0x18>
 800484a:	0011      	movs	r1, r2
 800484c:	f7ff fc70 	bl	8004130 <_malloc_r>
 8004850:	0004      	movs	r4, r0
 8004852:	0020      	movs	r0, r4
 8004854:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004856:	2a00      	cmp	r2, #0
 8004858:	d103      	bne.n	8004862 <_realloc_r+0x24>
 800485a:	f7ff fbfd 	bl	8004058 <_free_r>
 800485e:	002c      	movs	r4, r5
 8004860:	e7f7      	b.n	8004852 <_realloc_r+0x14>
 8004862:	f000 f81c 	bl	800489e <_malloc_usable_size_r>
 8004866:	0007      	movs	r7, r0
 8004868:	4285      	cmp	r5, r0
 800486a:	d802      	bhi.n	8004872 <_realloc_r+0x34>
 800486c:	0843      	lsrs	r3, r0, #1
 800486e:	42ab      	cmp	r3, r5
 8004870:	d3ef      	bcc.n	8004852 <_realloc_r+0x14>
 8004872:	0029      	movs	r1, r5
 8004874:	0030      	movs	r0, r6
 8004876:	f7ff fc5b 	bl	8004130 <_malloc_r>
 800487a:	9001      	str	r0, [sp, #4]
 800487c:	2800      	cmp	r0, #0
 800487e:	d101      	bne.n	8004884 <_realloc_r+0x46>
 8004880:	9c01      	ldr	r4, [sp, #4]
 8004882:	e7e6      	b.n	8004852 <_realloc_r+0x14>
 8004884:	002a      	movs	r2, r5
 8004886:	42bd      	cmp	r5, r7
 8004888:	d900      	bls.n	800488c <_realloc_r+0x4e>
 800488a:	003a      	movs	r2, r7
 800488c:	0021      	movs	r1, r4
 800488e:	9801      	ldr	r0, [sp, #4]
 8004890:	f7ff fbd8 	bl	8004044 <memcpy>
 8004894:	0021      	movs	r1, r4
 8004896:	0030      	movs	r0, r6
 8004898:	f7ff fbde 	bl	8004058 <_free_r>
 800489c:	e7f0      	b.n	8004880 <_realloc_r+0x42>

0800489e <_malloc_usable_size_r>:
 800489e:	1f0b      	subs	r3, r1, #4
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	1f18      	subs	r0, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	da01      	bge.n	80048ac <_malloc_usable_size_r+0xe>
 80048a8:	580b      	ldr	r3, [r1, r0]
 80048aa:	18c0      	adds	r0, r0, r3
 80048ac:	4770      	bx	lr
	...

080048b0 <_init>:
 80048b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b2:	46c0      	nop			@ (mov r8, r8)
 80048b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b6:	bc08      	pop	{r3}
 80048b8:	469e      	mov	lr, r3
 80048ba:	4770      	bx	lr

080048bc <_fini>:
 80048bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048be:	46c0      	nop			@ (mov r8, r8)
 80048c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c2:	bc08      	pop	{r3}
 80048c4:	469e      	mov	lr, r3
 80048c6:	4770      	bx	lr
