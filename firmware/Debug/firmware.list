
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043a8  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004460  08004460  00005460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800452c  0800452c  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800452c  0800452c  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800452c  0800452c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800452c  0800452c  0000552c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004530  08004530  00005530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004534  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ed8  2000000c  08004540  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ee4  08004540  00006ee4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a1b  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000256f  00000000  00000000  00018a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  0001afc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d28  00000000  00000000  0001c048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f09  00000000  00000000  0001cd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c58  00000000  00000000  00031c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c84a  00000000  00000000  000468d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d311b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c80  00000000  00000000  000d3160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000d6de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004448 	.word	0x08004448

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08004448 	.word	0x08004448

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <updateBuffer>:

// -------------------------------------------------------------------
// Remplit le buffer PWM Ã  partir du tableau "colors"
// -------------------------------------------------------------------
void updateBuffer(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
    for(int led = 0; led < LED_NUMBER; led++)
 800021e:	2300      	movs	r3, #0
 8000220:	60fb      	str	r3, [r7, #12]
 8000222:	e049      	b.n	80002b8 <updateBuffer+0xa0>
    {
        uint32_t color = ((uint32_t)colors[led][1] << 16) |  // R
 8000224:	4930      	ldr	r1, [pc, #192]	@ (80002e8 <updateBuffer+0xd0>)
 8000226:	68fa      	ldr	r2, [r7, #12]
 8000228:	0013      	movs	r3, r2
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	189b      	adds	r3, r3, r2
 800022e:	18cb      	adds	r3, r1, r3
 8000230:	3301      	adds	r3, #1
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	0419      	lsls	r1, r3, #16
        				 ((uint32_t)colors[led][0] << 8) |  // G
 8000236:	482c      	ldr	r0, [pc, #176]	@ (80002e8 <updateBuffer+0xd0>)
 8000238:	68fa      	ldr	r2, [r7, #12]
 800023a:	0013      	movs	r3, r2
 800023c:	005b      	lsls	r3, r3, #1
 800023e:	189b      	adds	r3, r3, r2
 8000240:	5c1b      	ldrb	r3, [r3, r0]
 8000242:	021b      	lsls	r3, r3, #8
        uint32_t color = ((uint32_t)colors[led][1] << 16) |  // R
 8000244:	4319      	orrs	r1, r3
                         ((uint32_t)colors[led][2] << 0);  // R
 8000246:	4828      	ldr	r0, [pc, #160]	@ (80002e8 <updateBuffer+0xd0>)
 8000248:	68fa      	ldr	r2, [r7, #12]
 800024a:	0013      	movs	r3, r2
 800024c:	005b      	lsls	r3, r3, #1
 800024e:	189b      	adds	r3, r3, r2
 8000250:	18c3      	adds	r3, r0, r3
 8000252:	3302      	adds	r3, #2
 8000254:	781b      	ldrb	r3, [r3, #0]
        uint32_t color = ((uint32_t)colors[led][1] << 16) |  // R
 8000256:	430b      	orrs	r3, r1
 8000258:	603b      	str	r3, [r7, #0]
        for(int i = 0; i < 24; i++)
 800025a:	2300      	movs	r3, #0
 800025c:	60bb      	str	r3, [r7, #8]
 800025e:	e025      	b.n	80002ac <updateBuffer+0x94>
        {
            if(color & (1 << (23-i)))
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	2217      	movs	r2, #23
 8000264:	1ad3      	subs	r3, r2, r3
 8000266:	2201      	movs	r2, #1
 8000268:	409a      	lsls	r2, r3
 800026a:	0013      	movs	r3, r2
 800026c:	001a      	movs	r2, r3
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	4013      	ands	r3, r2
 8000272:	d00c      	beq.n	800028e <updateBuffer+0x76>
                pwmData[led*24 + i] = HIGH_DUTY;
 8000274:	68fa      	ldr	r2, [r7, #12]
 8000276:	0013      	movs	r3, r2
 8000278:	005b      	lsls	r3, r3, #1
 800027a:	189b      	adds	r3, r3, r2
 800027c:	00db      	lsls	r3, r3, #3
 800027e:	001a      	movs	r2, r3
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	18d2      	adds	r2, r2, r3
 8000284:	4b19      	ldr	r3, [pc, #100]	@ (80002ec <updateBuffer+0xd4>)
 8000286:	0052      	lsls	r2, r2, #1
 8000288:	211a      	movs	r1, #26
 800028a:	52d1      	strh	r1, [r2, r3]
 800028c:	e00b      	b.n	80002a6 <updateBuffer+0x8e>
            else
                pwmData[led*24 + i] = LOW_DUTY;
 800028e:	68fa      	ldr	r2, [r7, #12]
 8000290:	0013      	movs	r3, r2
 8000292:	005b      	lsls	r3, r3, #1
 8000294:	189b      	adds	r3, r3, r2
 8000296:	00db      	lsls	r3, r3, #3
 8000298:	001a      	movs	r2, r3
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	18d2      	adds	r2, r2, r3
 800029e:	4b13      	ldr	r3, [pc, #76]	@ (80002ec <updateBuffer+0xd4>)
 80002a0:	0052      	lsls	r2, r2, #1
 80002a2:	210d      	movs	r1, #13
 80002a4:	52d1      	strh	r1, [r2, r3]
        for(int i = 0; i < 24; i++)
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	3301      	adds	r3, #1
 80002aa:	60bb      	str	r3, [r7, #8]
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	2b17      	cmp	r3, #23
 80002b0:	ddd6      	ble.n	8000260 <updateBuffer+0x48>
    for(int led = 0; led < LED_NUMBER; led++)
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	3301      	adds	r3, #1
 80002b6:	60fb      	str	r3, [r7, #12]
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80002bc:	ddb2      	ble.n	8000224 <updateBuffer+0xc>
        }
    }

    // Ajoute les zÃ©ros pour le reset (>50Âµs)
    for(int i = 24*LED_NUMBER; i < LED_BUFFER_SIZE; i++)
 80002be:	23c0      	movs	r3, #192	@ 0xc0
 80002c0:	00db      	lsls	r3, r3, #3
 80002c2:	607b      	str	r3, [r7, #4]
 80002c4:	e007      	b.n	80002d6 <updateBuffer+0xbe>
    {
        pwmData[i] = 0;
 80002c6:	4b09      	ldr	r3, [pc, #36]	@ (80002ec <updateBuffer+0xd4>)
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	0052      	lsls	r2, r2, #1
 80002cc:	2100      	movs	r1, #0
 80002ce:	52d1      	strh	r1, [r2, r3]
    for(int i = 24*LED_NUMBER; i < LED_BUFFER_SIZE; i++)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	3301      	adds	r3, #1
 80002d4:	607b      	str	r3, [r7, #4]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a05      	ldr	r2, [pc, #20]	@ (80002f0 <updateBuffer+0xd8>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	ddf3      	ble.n	80002c6 <updateBuffer+0xae>
    }
}
 80002de:	46c0      	nop			@ (mov r8, r8)
 80002e0:	46c0      	nop			@ (mov r8, r8)
 80002e2:	46bd      	mov	sp, r7
 80002e4:	b004      	add	sp, #16
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20000e1c 	.word	0x20000e1c
 80002ec:	200001b8 	.word	0x200001b8
 80002f0:	00000631 	.word	0x00000631

080002f4 <WS2812_Send>:

// -------------------------------------------------------------------
// Lance lâenvoi vers la bande LED
// -------------------------------------------------------------------
void WS2812_Send(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
    ws2812_transfer_complete = 0;
 80002f8:	4b09      	ldr	r3, [pc, #36]	@ (8000320 <WS2812_Send+0x2c>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t*)pwmData, LED_BUFFER_SIZE);
 80002fe:	4b09      	ldr	r3, [pc, #36]	@ (8000324 <WS2812_Send+0x30>)
 8000300:	4a09      	ldr	r2, [pc, #36]	@ (8000328 <WS2812_Send+0x34>)
 8000302:	480a      	ldr	r0, [pc, #40]	@ (800032c <WS2812_Send+0x38>)
 8000304:	2100      	movs	r1, #0
 8000306:	f002 faad 	bl	8002864 <HAL_TIM_PWM_Start_DMA>

    while(!ws2812_transfer_complete) {}
 800030a:	46c0      	nop			@ (mov r8, r8)
 800030c:	4b04      	ldr	r3, [pc, #16]	@ (8000320 <WS2812_Send+0x2c>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	b2db      	uxtb	r3, r3
 8000312:	2b00      	cmp	r3, #0
 8000314:	d0fa      	beq.n	800030c <WS2812_Send+0x18>
}
 8000316:	46c0      	nop			@ (mov r8, r8)
 8000318:	46c0      	nop			@ (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	46c0      	nop			@ (mov r8, r8)
 8000320:	20000edc 	.word	0x20000edc
 8000324:	00000632 	.word	0x00000632
 8000328:	200001b8 	.word	0x200001b8
 800032c:	2000007c 	.word	0x2000007c

08000330 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM17)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a07      	ldr	r2, [pc, #28]	@ (800035c <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d107      	bne.n	8000352 <HAL_TIM_PWM_PulseFinishedCallback+0x22>
    {
        HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	2100      	movs	r1, #0
 8000346:	0018      	movs	r0, r3
 8000348:	f002 fc7a 	bl	8002c40 <HAL_TIM_PWM_Stop_DMA>
        ws2812_transfer_complete = 1;
 800034c:	4b04      	ldr	r3, [pc, #16]	@ (8000360 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 800034e:	2201      	movs	r2, #1
 8000350:	701a      	strb	r2, [r3, #0]
    }
}
 8000352:	46c0      	nop			@ (mov r8, r8)
 8000354:	46bd      	mov	sp, r7
 8000356:	b002      	add	sp, #8
 8000358:	bd80      	pop	{r7, pc}
 800035a:	46c0      	nop			@ (mov r8, r8)
 800035c:	40014800 	.word	0x40014800
 8000360:	20000edc 	.word	0x20000edc

08000364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint64_t board_bitmap = 0;
 800036a:	2200      	movs	r2, #0
 800036c:	2300      	movs	r3, #0
 800036e:	603a      	str	r2, [r7, #0]
 8000370:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000372:	f000 fc8f 	bl	8000c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000376:	f000 f89b 	bl	80004b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800037a:	f000 fa0b 	bl	8000794 <MX_GPIO_Init>
  MX_DMA_Init();
 800037e:	f000 f9eb 	bl	8000758 <MX_DMA_Init>
  MX_I2C1_Init();
 8000382:	f000 f8ef 	bl	8000564 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000386:	f000 f9b3 	bl	80006f0 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 800038a:	f000 f92b 	bl	80005e4 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  UART_Flush(&huart2);
 800038e:	4b46      	ldr	r3, [pc, #280]	@ (80004a8 <main+0x144>)
 8000390:	0018      	movs	r0, r3
 8000392:	f000 fa81 	bl	8000898 <UART_Flush>

  memset(colors, 0, sizeof(colors));
 8000396:	4b45      	ldr	r3, [pc, #276]	@ (80004ac <main+0x148>)
 8000398:	22c0      	movs	r2, #192	@ 0xc0
 800039a:	2100      	movs	r1, #0
 800039c:	0018      	movs	r0, r3
 800039e:	f004 f827 	bl	80043f0 <memset>
  uint8_t red = 64;
 80003a2:	2317      	movs	r3, #23
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	2240      	movs	r2, #64	@ 0x40
 80003a8:	701a      	strb	r2, [r3, #0]
  uint8_t green = 0;
 80003aa:	2316      	movs	r3, #22
 80003ac:	18fb      	adds	r3, r7, r3
 80003ae:	2200      	movs	r2, #0
 80003b0:	701a      	strb	r2, [r3, #0]
  uint8_t blue = 0;
 80003b2:	2315      	movs	r3, #21
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	2200      	movs	r2, #0
 80003b8:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int j = 0; j < 3;++j){
 80003ba:	2300      	movs	r3, #0
 80003bc:	613b      	str	r3, [r7, #16]
 80003be:	e06e      	b.n	800049e <main+0x13a>

		  do{
			  for(int i = 0; i < LED_NUMBER; ++i){
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	e021      	b.n	800040a <main+0xa6>
				  colors[i][0] = red;   colors[i][1] = green; colors[i][2] = blue;
 80003c6:	4939      	ldr	r1, [pc, #228]	@ (80004ac <main+0x148>)
 80003c8:	68fa      	ldr	r2, [r7, #12]
 80003ca:	0013      	movs	r3, r2
 80003cc:	005b      	lsls	r3, r3, #1
 80003ce:	189b      	adds	r3, r3, r2
 80003d0:	2217      	movs	r2, #23
 80003d2:	18ba      	adds	r2, r7, r2
 80003d4:	7812      	ldrb	r2, [r2, #0]
 80003d6:	545a      	strb	r2, [r3, r1]
 80003d8:	4934      	ldr	r1, [pc, #208]	@ (80004ac <main+0x148>)
 80003da:	68fa      	ldr	r2, [r7, #12]
 80003dc:	0013      	movs	r3, r2
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	189b      	adds	r3, r3, r2
 80003e2:	18cb      	adds	r3, r1, r3
 80003e4:	3301      	adds	r3, #1
 80003e6:	2216      	movs	r2, #22
 80003e8:	18ba      	adds	r2, r7, r2
 80003ea:	7812      	ldrb	r2, [r2, #0]
 80003ec:	701a      	strb	r2, [r3, #0]
 80003ee:	492f      	ldr	r1, [pc, #188]	@ (80004ac <main+0x148>)
 80003f0:	68fa      	ldr	r2, [r7, #12]
 80003f2:	0013      	movs	r3, r2
 80003f4:	005b      	lsls	r3, r3, #1
 80003f6:	189b      	adds	r3, r3, r2
 80003f8:	18cb      	adds	r3, r1, r3
 80003fa:	3302      	adds	r3, #2
 80003fc:	2215      	movs	r2, #21
 80003fe:	18ba      	adds	r2, r7, r2
 8000400:	7812      	ldrb	r2, [r2, #0]
 8000402:	701a      	strb	r2, [r3, #0]
			  for(int i = 0; i < LED_NUMBER; ++i){
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	3301      	adds	r3, #1
 8000408:	60fb      	str	r3, [r7, #12]
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	2b3f      	cmp	r3, #63	@ 0x3f
 800040e:	ddda      	ble.n	80003c6 <main+0x62>
			  }
			  switch(j){
 8000410:	693b      	ldr	r3, [r7, #16]
 8000412:	2b02      	cmp	r3, #2
 8000414:	d017      	beq.n	8000446 <main+0xe2>
 8000416:	693b      	ldr	r3, [r7, #16]
 8000418:	2b02      	cmp	r3, #2
 800041a:	dc1b      	bgt.n	8000454 <main+0xf0>
 800041c:	693b      	ldr	r3, [r7, #16]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d003      	beq.n	800042a <main+0xc6>
 8000422:	693b      	ldr	r3, [r7, #16]
 8000424:	2b01      	cmp	r3, #1
 8000426:	d007      	beq.n	8000438 <main+0xd4>
 8000428:	e014      	b.n	8000454 <main+0xf0>
				  case 0:
					  red++;
 800042a:	2117      	movs	r1, #23
 800042c:	187b      	adds	r3, r7, r1
 800042e:	781a      	ldrb	r2, [r3, #0]
 8000430:	187b      	adds	r3, r7, r1
 8000432:	3201      	adds	r2, #1
 8000434:	701a      	strb	r2, [r3, #0]
					  break;
 8000436:	e00d      	b.n	8000454 <main+0xf0>
				  case 1:
					  green++;
 8000438:	2116      	movs	r1, #22
 800043a:	187b      	adds	r3, r7, r1
 800043c:	781a      	ldrb	r2, [r3, #0]
 800043e:	187b      	adds	r3, r7, r1
 8000440:	3201      	adds	r2, #1
 8000442:	701a      	strb	r2, [r3, #0]
					  break;
 8000444:	e006      	b.n	8000454 <main+0xf0>
				  case 2:
					  blue++;
 8000446:	2115      	movs	r1, #21
 8000448:	187b      	adds	r3, r7, r1
 800044a:	781a      	ldrb	r2, [r3, #0]
 800044c:	187b      	adds	r3, r7, r1
 800044e:	3201      	adds	r2, #1
 8000450:	701a      	strb	r2, [r3, #0]
					  break;
 8000452:	46c0      	nop			@ (mov r8, r8)
			  }

			  updateBuffer();
 8000454:	f7ff fee0 	bl	8000218 <updateBuffer>
			  WS2812_Send();
 8000458:	f7ff ff4c 	bl	80002f4 <WS2812_Send>
			  HAL_Delay(10);
 800045c:	200a      	movs	r0, #10
 800045e:	f000 fc9f 	bl	8000da0 <HAL_Delay>
	  }while(red != 255 && green != 255 && blue != 255);
 8000462:	2317      	movs	r3, #23
 8000464:	18fb      	adds	r3, r7, r3
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2bff      	cmp	r3, #255	@ 0xff
 800046a:	d009      	beq.n	8000480 <main+0x11c>
 800046c:	2316      	movs	r3, #22
 800046e:	18fb      	adds	r3, r7, r3
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2bff      	cmp	r3, #255	@ 0xff
 8000474:	d004      	beq.n	8000480 <main+0x11c>
 8000476:	2315      	movs	r3, #21
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2bff      	cmp	r3, #255	@ 0xff
 800047e:	d19f      	bne.n	80003c0 <main+0x5c>
		  red = 0;
 8000480:	2317      	movs	r3, #23
 8000482:	18fb      	adds	r3, r7, r3
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]
		  green = 0;
 8000488:	2316      	movs	r3, #22
 800048a:	18fb      	adds	r3, r7, r3
 800048c:	2200      	movs	r2, #0
 800048e:	701a      	strb	r2, [r3, #0]
		  blue = 0;
 8000490:	2315      	movs	r3, #21
 8000492:	18fb      	adds	r3, r7, r3
 8000494:	2200      	movs	r2, #0
 8000496:	701a      	strb	r2, [r3, #0]
	  for(int j = 0; j < 3;++j){
 8000498:	693b      	ldr	r3, [r7, #16]
 800049a:	3301      	adds	r3, #1
 800049c:	613b      	str	r3, [r7, #16]
 800049e:	693b      	ldr	r3, [r7, #16]
 80004a0:	2b02      	cmp	r3, #2
 80004a2:	dd8d      	ble.n	80003c0 <main+0x5c>
 80004a4:	e789      	b.n	80003ba <main+0x56>
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	20000124 	.word	0x20000124
 80004ac:	20000e1c 	.word	0x20000e1c

080004b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b093      	sub	sp, #76	@ 0x4c
 80004b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b6:	2414      	movs	r4, #20
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	0018      	movs	r0, r3
 80004bc:	2334      	movs	r3, #52	@ 0x34
 80004be:	001a      	movs	r2, r3
 80004c0:	2100      	movs	r1, #0
 80004c2:	f003 ff95 	bl	80043f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	0018      	movs	r0, r3
 80004ca:	2310      	movs	r3, #16
 80004cc:	001a      	movs	r2, r3
 80004ce:	2100      	movs	r1, #0
 80004d0:	f003 ff8e 	bl	80043f0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004d4:	2380      	movs	r3, #128	@ 0x80
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	0018      	movs	r0, r3
 80004da:	f001 fadf 	bl	8001a9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004de:	193b      	adds	r3, r7, r4
 80004e0:	2202      	movs	r2, #2
 80004e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	2280      	movs	r2, #128	@ 0x80
 80004e8:	0052      	lsls	r2, r2, #1
 80004ea:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004ec:	0021      	movs	r1, r4
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2200      	movs	r2, #0
 80004f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2240      	movs	r2, #64	@ 0x40
 80004f8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2202      	movs	r2, #2
 80004fe:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2202      	movs	r2, #2
 8000504:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2200      	movs	r2, #0
 800050a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2208      	movs	r2, #8
 8000510:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2280      	movs	r2, #128	@ 0x80
 8000516:	0292      	lsls	r2, r2, #10
 8000518:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	22c0      	movs	r2, #192	@ 0xc0
 800051e:	05d2      	lsls	r2, r2, #23
 8000520:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000522:	187b      	adds	r3, r7, r1
 8000524:	0018      	movs	r0, r3
 8000526:	f001 fb05 	bl	8001b34 <HAL_RCC_OscConfig>
 800052a:	1e03      	subs	r3, r0, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800052e:	f000 f9e4 	bl	80008fa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	2207      	movs	r2, #7
 8000536:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2202      	movs	r2, #2
 800053c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2101      	movs	r1, #1
 800054e:	0018      	movs	r0, r3
 8000550:	f001 fe00 	bl	8002154 <HAL_RCC_ClockConfig>
 8000554:	1e03      	subs	r3, r0, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000558:	f000 f9cf 	bl	80008fa <Error_Handler>
  }
}
 800055c:	46c0      	nop			@ (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b013      	add	sp, #76	@ 0x4c
 8000562:	bd90      	pop	{r4, r7, pc}

08000564 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000568:	4b1b      	ldr	r3, [pc, #108]	@ (80005d8 <MX_I2C1_Init+0x74>)
 800056a:	4a1c      	ldr	r2, [pc, #112]	@ (80005dc <MX_I2C1_Init+0x78>)
 800056c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 800056e:	4b1a      	ldr	r3, [pc, #104]	@ (80005d8 <MX_I2C1_Init+0x74>)
 8000570:	4a1b      	ldr	r2, [pc, #108]	@ (80005e0 <MX_I2C1_Init+0x7c>)
 8000572:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000574:	4b18      	ldr	r3, [pc, #96]	@ (80005d8 <MX_I2C1_Init+0x74>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800057a:	4b17      	ldr	r3, [pc, #92]	@ (80005d8 <MX_I2C1_Init+0x74>)
 800057c:	2201      	movs	r2, #1
 800057e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000580:	4b15      	ldr	r3, [pc, #84]	@ (80005d8 <MX_I2C1_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000586:	4b14      	ldr	r3, [pc, #80]	@ (80005d8 <MX_I2C1_Init+0x74>)
 8000588:	2200      	movs	r2, #0
 800058a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800058c:	4b12      	ldr	r3, [pc, #72]	@ (80005d8 <MX_I2C1_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000592:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <MX_I2C1_Init+0x74>)
 8000594:	2200      	movs	r2, #0
 8000596:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000598:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <MX_I2C1_Init+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800059e:	4b0e      	ldr	r3, [pc, #56]	@ (80005d8 <MX_I2C1_Init+0x74>)
 80005a0:	0018      	movs	r0, r3
 80005a2:	f001 f93d 	bl	8001820 <HAL_I2C_Init>
 80005a6:	1e03      	subs	r3, r0, #0
 80005a8:	d001      	beq.n	80005ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005aa:	f000 f9a6 	bl	80008fa <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005ae:	4b0a      	ldr	r3, [pc, #40]	@ (80005d8 <MX_I2C1_Init+0x74>)
 80005b0:	2100      	movs	r1, #0
 80005b2:	0018      	movs	r0, r3
 80005b4:	f001 f9da 	bl	800196c <HAL_I2CEx_ConfigAnalogFilter>
 80005b8:	1e03      	subs	r3, r0, #0
 80005ba:	d001      	beq.n	80005c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005bc:	f000 f99d 	bl	80008fa <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005c0:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <MX_I2C1_Init+0x74>)
 80005c2:	2100      	movs	r1, #0
 80005c4:	0018      	movs	r0, r3
 80005c6:	f001 fa1d 	bl	8001a04 <HAL_I2CEx_ConfigDigitalFilter>
 80005ca:	1e03      	subs	r3, r0, #0
 80005cc:	d001      	beq.n	80005d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005ce:	f000 f994 	bl	80008fa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000028 	.word	0x20000028
 80005dc:	40005400 	.word	0x40005400
 80005e0:	00b07cb4 	.word	0x00b07cb4

080005e4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	@ 0x50
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ea:	2334      	movs	r3, #52	@ 0x34
 80005ec:	18fb      	adds	r3, r7, r3
 80005ee:	0018      	movs	r0, r3
 80005f0:	231c      	movs	r3, #28
 80005f2:	001a      	movs	r2, r3
 80005f4:	2100      	movs	r1, #0
 80005f6:	f003 fefb 	bl	80043f0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005fa:	003b      	movs	r3, r7
 80005fc:	0018      	movs	r0, r3
 80005fe:	2334      	movs	r3, #52	@ 0x34
 8000600:	001a      	movs	r2, r3
 8000602:	2100      	movs	r1, #0
 8000604:	f003 fef4 	bl	80043f0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000608:	4b37      	ldr	r3, [pc, #220]	@ (80006e8 <MX_TIM17_Init+0x104>)
 800060a:	4a38      	ldr	r2, [pc, #224]	@ (80006ec <MX_TIM17_Init+0x108>)
 800060c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800060e:	4b36      	ldr	r3, [pc, #216]	@ (80006e8 <MX_TIM17_Init+0x104>)
 8000610:	2200      	movs	r2, #0
 8000612:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000614:	4b34      	ldr	r3, [pc, #208]	@ (80006e8 <MX_TIM17_Init+0x104>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 39;
 800061a:	4b33      	ldr	r3, [pc, #204]	@ (80006e8 <MX_TIM17_Init+0x104>)
 800061c:	2227      	movs	r2, #39	@ 0x27
 800061e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000620:	4b31      	ldr	r3, [pc, #196]	@ (80006e8 <MX_TIM17_Init+0x104>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000626:	4b30      	ldr	r3, [pc, #192]	@ (80006e8 <MX_TIM17_Init+0x104>)
 8000628:	2200      	movs	r2, #0
 800062a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800062c:	4b2e      	ldr	r3, [pc, #184]	@ (80006e8 <MX_TIM17_Init+0x104>)
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000632:	4b2d      	ldr	r3, [pc, #180]	@ (80006e8 <MX_TIM17_Init+0x104>)
 8000634:	0018      	movs	r0, r3
 8000636:	f002 f85d 	bl	80026f4 <HAL_TIM_Base_Init>
 800063a:	1e03      	subs	r3, r0, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800063e:	f000 f95c 	bl	80008fa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000642:	4b29      	ldr	r3, [pc, #164]	@ (80006e8 <MX_TIM17_Init+0x104>)
 8000644:	0018      	movs	r0, r3
 8000646:	f002 f8ad 	bl	80027a4 <HAL_TIM_PWM_Init>
 800064a:	1e03      	subs	r3, r0, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 800064e:	f000 f954 	bl	80008fa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000652:	2134      	movs	r1, #52	@ 0x34
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2260      	movs	r2, #96	@ 0x60
 8000658:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2200      	movs	r2, #0
 800065e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800067e:	1879      	adds	r1, r7, r1
 8000680:	4b19      	ldr	r3, [pc, #100]	@ (80006e8 <MX_TIM17_Init+0x104>)
 8000682:	2200      	movs	r2, #0
 8000684:	0018      	movs	r0, r3
 8000686:	f002 fccd 	bl	8003024 <HAL_TIM_PWM_ConfigChannel>
 800068a:	1e03      	subs	r3, r0, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 800068e:	f000 f934 	bl	80008fa <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000692:	003b      	movs	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000698:	003b      	movs	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800069e:	003b      	movs	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006a4:	003b      	movs	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006aa:	003b      	movs	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006b0:	003b      	movs	r3, r7
 80006b2:	2280      	movs	r2, #128	@ 0x80
 80006b4:	0192      	lsls	r2, r2, #6
 80006b6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006b8:	003b      	movs	r3, r7
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006be:	003b      	movs	r3, r7
 80006c0:	2200      	movs	r2, #0
 80006c2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80006c4:	003a      	movs	r2, r7
 80006c6:	4b08      	ldr	r3, [pc, #32]	@ (80006e8 <MX_TIM17_Init+0x104>)
 80006c8:	0011      	movs	r1, r2
 80006ca:	0018      	movs	r0, r3
 80006cc:	f003 f9e8 	bl	8003aa0 <HAL_TIMEx_ConfigBreakDeadTime>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 80006d4:	f000 f911 	bl	80008fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80006d8:	4b03      	ldr	r3, [pc, #12]	@ (80006e8 <MX_TIM17_Init+0x104>)
 80006da:	0018      	movs	r0, r3
 80006dc:	f000 f9f2 	bl	8000ac4 <HAL_TIM_MspPostInit>

}
 80006e0:	46c0      	nop			@ (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b014      	add	sp, #80	@ 0x50
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	2000007c 	.word	0x2000007c
 80006ec:	40014800 	.word	0x40014800

080006f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f4:	4b16      	ldr	r3, [pc, #88]	@ (8000750 <MX_USART2_UART_Init+0x60>)
 80006f6:	4a17      	ldr	r2, [pc, #92]	@ (8000754 <MX_USART2_UART_Init+0x64>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fa:	4b15      	ldr	r3, [pc, #84]	@ (8000750 <MX_USART2_UART_Init+0x60>)
 80006fc:	22e1      	movs	r2, #225	@ 0xe1
 80006fe:	0252      	lsls	r2, r2, #9
 8000700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <MX_USART2_UART_Init+0x60>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <MX_USART2_UART_Init+0x60>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070e:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <MX_USART2_UART_Init+0x60>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <MX_USART2_UART_Init+0x60>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800071a:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <MX_USART2_UART_Init+0x60>)
 800071c:	22c0      	movs	r2, #192	@ 0xc0
 800071e:	0092      	lsls	r2, r2, #2
 8000720:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000722:	4b0b      	ldr	r3, [pc, #44]	@ (8000750 <MX_USART2_UART_Init+0x60>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000728:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_USART2_UART_Init+0x60>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800072e:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <MX_USART2_UART_Init+0x60>)
 8000730:	2200      	movs	r2, #0
 8000732:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000734:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_USART2_UART_Init+0x60>)
 8000736:	2200      	movs	r2, #0
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073a:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <MX_USART2_UART_Init+0x60>)
 800073c:	0018      	movs	r0, r3
 800073e:	f003 fa63 	bl	8003c08 <HAL_UART_Init>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000746:	f000 f8d8 	bl	80008fa <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000124 	.word	0x20000124
 8000754:	40004400 	.word	0x40004400

08000758 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800075e:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <MX_DMA_Init+0x38>)
 8000760:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <MX_DMA_Init+0x38>)
 8000764:	2101      	movs	r1, #1
 8000766:	430a      	orrs	r2, r1
 8000768:	639a      	str	r2, [r3, #56]	@ 0x38
 800076a:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <MX_DMA_Init+0x38>)
 800076c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800076e:	2201      	movs	r2, #1
 8000770:	4013      	ands	r3, r2
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	2009      	movs	r0, #9
 800077c:	f000 fbe0 	bl	8000f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000780:	2009      	movs	r0, #9
 8000782:	f000 fbf2 	bl	8000f6a <HAL_NVIC_EnableIRQ>

}
 8000786:	46c0      	nop			@ (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b002      	add	sp, #8
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	40021000 	.word	0x40021000

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b089      	sub	sp, #36	@ 0x24
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	240c      	movs	r4, #12
 800079c:	193b      	adds	r3, r7, r4
 800079e:	0018      	movs	r0, r3
 80007a0:	2314      	movs	r3, #20
 80007a2:	001a      	movs	r2, r3
 80007a4:	2100      	movs	r1, #0
 80007a6:	f003 fe23 	bl	80043f0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	4b37      	ldr	r3, [pc, #220]	@ (8000888 <MX_GPIO_Init+0xf4>)
 80007ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007ae:	4b36      	ldr	r3, [pc, #216]	@ (8000888 <MX_GPIO_Init+0xf4>)
 80007b0:	2102      	movs	r1, #2
 80007b2:	430a      	orrs	r2, r1
 80007b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80007b6:	4b34      	ldr	r3, [pc, #208]	@ (8000888 <MX_GPIO_Init+0xf4>)
 80007b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007ba:	2202      	movs	r2, #2
 80007bc:	4013      	ands	r3, r2
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b31      	ldr	r3, [pc, #196]	@ (8000888 <MX_GPIO_Init+0xf4>)
 80007c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007c6:	4b30      	ldr	r3, [pc, #192]	@ (8000888 <MX_GPIO_Init+0xf4>)
 80007c8:	2104      	movs	r1, #4
 80007ca:	430a      	orrs	r2, r1
 80007cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80007ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000888 <MX_GPIO_Init+0xf4>)
 80007d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007d2:	2204      	movs	r2, #4
 80007d4:	4013      	ands	r3, r2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b2b      	ldr	r3, [pc, #172]	@ (8000888 <MX_GPIO_Init+0xf4>)
 80007dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007de:	4b2a      	ldr	r3, [pc, #168]	@ (8000888 <MX_GPIO_Init+0xf4>)
 80007e0:	2101      	movs	r1, #1
 80007e2:	430a      	orrs	r2, r1
 80007e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80007e6:	4b28      	ldr	r3, [pc, #160]	@ (8000888 <MX_GPIO_Init+0xf4>)
 80007e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007ea:	2201      	movs	r2, #1
 80007ec:	4013      	ands	r3, r2
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80007f2:	2380      	movs	r3, #128	@ 0x80
 80007f4:	021b      	lsls	r3, r3, #8
 80007f6:	4825      	ldr	r0, [pc, #148]	@ (800088c <MX_GPIO_Init+0xf8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	0019      	movs	r1, r3
 80007fc:	f000 fff2 	bl	80017e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 8000800:	4923      	ldr	r1, [pc, #140]	@ (8000890 <MX_GPIO_Init+0xfc>)
 8000802:	23a0      	movs	r3, #160	@ 0xa0
 8000804:	05db      	lsls	r3, r3, #23
 8000806:	2200      	movs	r2, #0
 8000808:	0018      	movs	r0, r3
 800080a:	f000 ffeb 	bl	80017e4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB7 PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0;
 800080e:	193b      	adds	r3, r7, r4
 8000810:	2281      	movs	r2, #129	@ 0x81
 8000812:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000814:	193b      	adds	r3, r7, r4
 8000816:	2200      	movs	r2, #0
 8000818:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	193b      	adds	r3, r7, r4
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000820:	193b      	adds	r3, r7, r4
 8000822:	4a1c      	ldr	r2, [pc, #112]	@ (8000894 <MX_GPIO_Init+0x100>)
 8000824:	0019      	movs	r1, r3
 8000826:	0010      	movs	r0, r2
 8000828:	f000 fe78 	bl	800151c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800082c:	0021      	movs	r1, r4
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2280      	movs	r2, #128	@ 0x80
 8000832:	0212      	lsls	r2, r2, #8
 8000834:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	000c      	movs	r4, r1
 8000838:	193b      	adds	r3, r7, r4
 800083a:	2201      	movs	r2, #1
 800083c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	193b      	adds	r3, r7, r4
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	193b      	adds	r3, r7, r4
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084a:	193b      	adds	r3, r7, r4
 800084c:	4a0f      	ldr	r2, [pc, #60]	@ (800088c <MX_GPIO_Init+0xf8>)
 800084e:	0019      	movs	r1, r3
 8000850:	0010      	movs	r0, r2
 8000852:	f000 fe63 	bl	800151c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 8000856:	0021      	movs	r1, r4
 8000858:	187b      	adds	r3, r7, r1
 800085a:	4a0d      	ldr	r2, [pc, #52]	@ (8000890 <MX_GPIO_Init+0xfc>)
 800085c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2201      	movs	r2, #1
 8000862:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	187a      	adds	r2, r7, r1
 8000872:	23a0      	movs	r3, #160	@ 0xa0
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	0011      	movs	r1, r2
 8000878:	0018      	movs	r0, r3
 800087a:	f000 fe4f 	bl	800151c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800087e:	46c0      	nop			@ (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	b009      	add	sp, #36	@ 0x24
 8000884:	bd90      	pop	{r4, r7, pc}
 8000886:	46c0      	nop			@ (mov r8, r8)
 8000888:	40021000 	.word	0x40021000
 800088c:	50000800 	.word	0x50000800
 8000890:	00001870 	.word	0x00001870
 8000894:	50000400 	.word	0x50000400

08000898 <UART_Flush>:

/* USER CODE BEGIN 4 */
void UART_Flush(UART_HandleTypeDef *huart)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
    // Vider le registre RX tant quâil reste des donnÃ©es
    __HAL_UART_FLUSH_DRREGISTER(huart);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	699a      	ldr	r2, [r3, #24]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2108      	movs	r1, #8
 80008ac:	430a      	orrs	r2, r1
 80008ae:	619a      	str	r2, [r3, #24]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	699a      	ldr	r2, [r3, #24]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2110      	movs	r1, #16
 80008bc:	430a      	orrs	r2, r1
 80008be:	619a      	str	r2, [r3, #24]

    // Effacer les flags dâerreur Ã©ventuels (Overrun, Framing, Noise, Parity)
    __HAL_UART_CLEAR_OREFLAG(huart);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2208      	movs	r2, #8
 80008c6:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(huart);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2202      	movs	r2, #2
 80008ce:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_NEFLAG(huart);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2204      	movs	r2, #4
 80008d6:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_PEFLAG(huart);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2201      	movs	r2, #1
 80008de:	621a      	str	r2, [r3, #32]

    // Attendre que la transmission en cours (TX) soit terminÃ©e
    while(__HAL_UART_GET_FLAG(huart, UART_FLAG_TC) == RESET);
 80008e0:	46c0      	nop			@ (mov r8, r8)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	69db      	ldr	r3, [r3, #28]
 80008e8:	2240      	movs	r2, #64	@ 0x40
 80008ea:	4013      	ands	r3, r2
 80008ec:	2b40      	cmp	r3, #64	@ 0x40
 80008ee:	d1f8      	bne.n	80008e2 <UART_Flush+0x4a>

}
 80008f0:	46c0      	nop			@ (mov r8, r8)
 80008f2:	46c0      	nop			@ (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b002      	add	sp, #8
 80008f8:	bd80      	pop	{r7, pc}

080008fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fe:	b672      	cpsid	i
}
 8000900:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	e7fd      	b.n	8000902 <Error_Handler+0x8>
	...

08000908 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <HAL_MspInit+0x44>)
 8000910:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <HAL_MspInit+0x44>)
 8000914:	2101      	movs	r1, #1
 8000916:	430a      	orrs	r2, r1
 8000918:	641a      	str	r2, [r3, #64]	@ 0x40
 800091a:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <HAL_MspInit+0x44>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091e:	2201      	movs	r2, #1
 8000920:	4013      	ands	r3, r2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	4b09      	ldr	r3, [pc, #36]	@ (800094c <HAL_MspInit+0x44>)
 8000928:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <HAL_MspInit+0x44>)
 800092c:	2180      	movs	r1, #128	@ 0x80
 800092e:	0549      	lsls	r1, r1, #21
 8000930:	430a      	orrs	r2, r1
 8000932:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000934:	4b05      	ldr	r3, [pc, #20]	@ (800094c <HAL_MspInit+0x44>)
 8000936:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000938:	2380      	movs	r3, #128	@ 0x80
 800093a:	055b      	lsls	r3, r3, #21
 800093c:	4013      	ands	r3, r2
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	46c0      	nop			@ (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	b002      	add	sp, #8
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			@ (mov r8, r8)
 800094c:	40021000 	.word	0x40021000

08000950 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b091      	sub	sp, #68	@ 0x44
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	232c      	movs	r3, #44	@ 0x2c
 800095a:	18fb      	adds	r3, r7, r3
 800095c:	0018      	movs	r0, r3
 800095e:	2314      	movs	r3, #20
 8000960:	001a      	movs	r2, r3
 8000962:	2100      	movs	r1, #0
 8000964:	f003 fd44 	bl	80043f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000968:	2414      	movs	r4, #20
 800096a:	193b      	adds	r3, r7, r4
 800096c:	0018      	movs	r0, r3
 800096e:	2318      	movs	r3, #24
 8000970:	001a      	movs	r2, r3
 8000972:	2100      	movs	r1, #0
 8000974:	f003 fd3c 	bl	80043f0 <memset>
  if(hi2c->Instance==I2C1)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a22      	ldr	r2, [pc, #136]	@ (8000a08 <HAL_I2C_MspInit+0xb8>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d13e      	bne.n	8000a00 <HAL_I2C_MspInit+0xb0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000982:	193b      	adds	r3, r7, r4
 8000984:	2220      	movs	r2, #32
 8000986:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000988:	193b      	adds	r3, r7, r4
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800098e:	193b      	adds	r3, r7, r4
 8000990:	0018      	movs	r0, r3
 8000992:	f001 fd89 	bl	80024a8 <HAL_RCCEx_PeriphCLKConfig>
 8000996:	1e03      	subs	r3, r0, #0
 8000998:	d001      	beq.n	800099e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800099a:	f7ff ffae 	bl	80008fa <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <HAL_I2C_MspInit+0xbc>)
 80009a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009a2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <HAL_I2C_MspInit+0xbc>)
 80009a4:	2102      	movs	r1, #2
 80009a6:	430a      	orrs	r2, r1
 80009a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80009aa:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <HAL_I2C_MspInit+0xbc>)
 80009ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009ae:	2202      	movs	r2, #2
 80009b0:	4013      	ands	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 80009b6:	212c      	movs	r1, #44	@ 0x2c
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2290      	movs	r2, #144	@ 0x90
 80009bc:	0092      	lsls	r2, r2, #2
 80009be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2212      	movs	r2, #18
 80009c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2206      	movs	r2, #6
 80009d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	4a0d      	ldr	r2, [pc, #52]	@ (8000a10 <HAL_I2C_MspInit+0xc0>)
 80009dc:	0019      	movs	r1, r3
 80009de:	0010      	movs	r0, r2
 80009e0:	f000 fd9c 	bl	800151c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009e4:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <HAL_I2C_MspInit+0xbc>)
 80009e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009e8:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <HAL_I2C_MspInit+0xbc>)
 80009ea:	2180      	movs	r1, #128	@ 0x80
 80009ec:	0389      	lsls	r1, r1, #14
 80009ee:	430a      	orrs	r2, r1
 80009f0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <HAL_I2C_MspInit+0xbc>)
 80009f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009f6:	2380      	movs	r3, #128	@ 0x80
 80009f8:	039b      	lsls	r3, r3, #14
 80009fa:	4013      	ands	r3, r2
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a00:	46c0      	nop			@ (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b011      	add	sp, #68	@ 0x44
 8000a06:	bd90      	pop	{r4, r7, pc}
 8000a08:	40005400 	.word	0x40005400
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	50000400 	.word	0x50000400

08000a14 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a24      	ldr	r2, [pc, #144]	@ (8000ab4 <HAL_TIM_Base_MspInit+0xa0>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d141      	bne.n	8000aaa <HAL_TIM_Base_MspInit+0x96>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000a26:	4b24      	ldr	r3, [pc, #144]	@ (8000ab8 <HAL_TIM_Base_MspInit+0xa4>)
 8000a28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a2a:	4b23      	ldr	r3, [pc, #140]	@ (8000ab8 <HAL_TIM_Base_MspInit+0xa4>)
 8000a2c:	2180      	movs	r1, #128	@ 0x80
 8000a2e:	02c9      	lsls	r1, r1, #11
 8000a30:	430a      	orrs	r2, r1
 8000a32:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a34:	4b20      	ldr	r3, [pc, #128]	@ (8000ab8 <HAL_TIM_Base_MspInit+0xa4>)
 8000a36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a38:	2380      	movs	r3, #128	@ 0x80
 8000a3a:	02db      	lsls	r3, r3, #11
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]

    /* TIM17 DMA Init */
    /* TIM17_CH1 Init */
    hdma_tim17_ch1.Instance = DMA1_Channel1;
 8000a42:	4b1e      	ldr	r3, [pc, #120]	@ (8000abc <HAL_TIM_Base_MspInit+0xa8>)
 8000a44:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac0 <HAL_TIM_Base_MspInit+0xac>)
 8000a46:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
 8000a48:	4b1c      	ldr	r3, [pc, #112]	@ (8000abc <HAL_TIM_Base_MspInit+0xa8>)
 8000a4a:	222f      	movs	r2, #47	@ 0x2f
 8000a4c:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000abc <HAL_TIM_Base_MspInit+0xa8>)
 8000a50:	2210      	movs	r2, #16
 8000a52:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a54:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <HAL_TIM_Base_MspInit+0xa8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000a5a:	4b18      	ldr	r3, [pc, #96]	@ (8000abc <HAL_TIM_Base_MspInit+0xa8>)
 8000a5c:	2280      	movs	r2, #128	@ 0x80
 8000a5e:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a60:	4b16      	ldr	r3, [pc, #88]	@ (8000abc <HAL_TIM_Base_MspInit+0xa8>)
 8000a62:	2280      	movs	r2, #128	@ 0x80
 8000a64:	0052      	lsls	r2, r2, #1
 8000a66:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a68:	4b14      	ldr	r3, [pc, #80]	@ (8000abc <HAL_TIM_Base_MspInit+0xa8>)
 8000a6a:	2280      	movs	r2, #128	@ 0x80
 8000a6c:	00d2      	lsls	r2, r2, #3
 8000a6e:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1.Init.Mode = DMA_NORMAL;
 8000a70:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <HAL_TIM_Base_MspInit+0xa8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000a76:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <HAL_TIM_Base_MspInit+0xa8>)
 8000a78:	2280      	movs	r2, #128	@ 0x80
 8000a7a:	0152      	lsls	r2, r2, #5
 8000a7c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <HAL_TIM_Base_MspInit+0xa8>)
 8000a80:	0018      	movs	r0, r3
 8000a82:	f000 fa8f 	bl	8000fa4 <HAL_DMA_Init>
 8000a86:	1e03      	subs	r3, r0, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_TIM_Base_MspInit+0x7a>
    {
      Error_Handler();
 8000a8a:	f7ff ff36 	bl	80008fa <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a0a      	ldr	r2, [pc, #40]	@ (8000abc <HAL_TIM_Base_MspInit+0xa8>)
 8000a92:	625a      	str	r2, [r3, #36]	@ 0x24
 8000a94:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <HAL_TIM_Base_MspInit+0xa8>)
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	629a      	str	r2, [r3, #40]	@ 0x28

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2016      	movs	r0, #22
 8000aa0:	f000 fa4e 	bl	8000f40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000aa4:	2016      	movs	r0, #22
 8000aa6:	f000 fa60 	bl	8000f6a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b004      	add	sp, #16
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	40014800 	.word	0x40014800
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	200000c8 	.word	0x200000c8
 8000ac0:	40020008 	.word	0x40020008

08000ac4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b089      	sub	sp, #36	@ 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	240c      	movs	r4, #12
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	2314      	movs	r3, #20
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	f003 fc8a 	bl	80043f0 <memset>
  if(htim->Instance==TIM17)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a14      	ldr	r2, [pc, #80]	@ (8000b34 <HAL_TIM_MspPostInit+0x70>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d122      	bne.n	8000b2c <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <HAL_TIM_MspPostInit+0x74>)
 8000ae8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000aea:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <HAL_TIM_MspPostInit+0x74>)
 8000aec:	2101      	movs	r1, #1
 8000aee:	430a      	orrs	r2, r1
 8000af0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <HAL_TIM_MspPostInit+0x74>)
 8000af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000af6:	2201      	movs	r2, #1
 8000af8:	4013      	ands	r3, r2
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000afe:	0021      	movs	r1, r4
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2280      	movs	r2, #128	@ 0x80
 8000b04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2202      	movs	r2, #2
 8000b0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2200      	movs	r2, #0
 8000b16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2205      	movs	r2, #5
 8000b1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1e:	187a      	adds	r2, r7, r1
 8000b20:	23a0      	movs	r3, #160	@ 0xa0
 8000b22:	05db      	lsls	r3, r3, #23
 8000b24:	0011      	movs	r1, r2
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 fcf8 	bl	800151c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000b2c:	46c0      	nop			@ (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b009      	add	sp, #36	@ 0x24
 8000b32:	bd90      	pop	{r4, r7, pc}
 8000b34:	40014800 	.word	0x40014800
 8000b38:	40021000 	.word	0x40021000

08000b3c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b08b      	sub	sp, #44	@ 0x2c
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	2414      	movs	r4, #20
 8000b46:	193b      	adds	r3, r7, r4
 8000b48:	0018      	movs	r0, r3
 8000b4a:	2314      	movs	r3, #20
 8000b4c:	001a      	movs	r2, r3
 8000b4e:	2100      	movs	r1, #0
 8000b50:	f003 fc4e 	bl	80043f0 <memset>
  if(huart->Instance==USART2)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a1b      	ldr	r2, [pc, #108]	@ (8000bc8 <HAL_UART_MspInit+0x8c>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d130      	bne.n	8000bc0 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bcc <HAL_UART_MspInit+0x90>)
 8000b60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b62:	4b1a      	ldr	r3, [pc, #104]	@ (8000bcc <HAL_UART_MspInit+0x90>)
 8000b64:	2180      	movs	r1, #128	@ 0x80
 8000b66:	0289      	lsls	r1, r1, #10
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b6c:	4b17      	ldr	r3, [pc, #92]	@ (8000bcc <HAL_UART_MspInit+0x90>)
 8000b6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b70:	2380      	movs	r3, #128	@ 0x80
 8000b72:	029b      	lsls	r3, r3, #10
 8000b74:	4013      	ands	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <HAL_UART_MspInit+0x90>)
 8000b7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b7e:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <HAL_UART_MspInit+0x90>)
 8000b80:	2101      	movs	r1, #1
 8000b82:	430a      	orrs	r2, r1
 8000b84:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b86:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <HAL_UART_MspInit+0x90>)
 8000b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b92:	0021      	movs	r1, r4
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	220f      	movs	r2, #15
 8000b98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2200      	movs	r2, #0
 8000baa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2201      	movs	r2, #1
 8000bb0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	187a      	adds	r2, r7, r1
 8000bb4:	23a0      	movs	r3, #160	@ 0xa0
 8000bb6:	05db      	lsls	r3, r3, #23
 8000bb8:	0011      	movs	r1, r2
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f000 fcae 	bl	800151c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bc0:	46c0      	nop			@ (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b00b      	add	sp, #44	@ 0x2c
 8000bc6:	bd90      	pop	{r4, r7, pc}
 8000bc8:	40004400 	.word	0x40004400
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd4:	46c0      	nop			@ (mov r8, r8)
 8000bd6:	e7fd      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bdc:	46c0      	nop			@ (mov r8, r8)
 8000bde:	e7fd      	b.n	8000bdc <HardFault_Handler+0x4>

08000be0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000be4:	46c0      	nop			@ (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf8:	f000 f8b6 	bl	8000d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfc:	46c0      	nop			@ (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1);
 8000c08:	4b03      	ldr	r3, [pc, #12]	@ (8000c18 <DMA1_Channel1_IRQHandler+0x14>)
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f000 fb44 	bl	8001298 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c10:	46c0      	nop			@ (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	200000c8 	.word	0x200000c8

08000c1c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000c20:	4b03      	ldr	r3, [pc, #12]	@ (8000c30 <TIM17_IRQHandler+0x14>)
 8000c22:	0018      	movs	r0, r3
 8000c24:	f002 f8f6 	bl	8002e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000c28:	46c0      	nop			@ (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	2000007c 	.word	0x2000007c

08000c34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c38:	46c0      	nop			@ (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c40:	480d      	ldr	r0, [pc, #52]	@ (8000c78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c42:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c44:	f7ff fff6 	bl	8000c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c48:	480c      	ldr	r0, [pc, #48]	@ (8000c7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c4a:	490d      	ldr	r1, [pc, #52]	@ (8000c80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c84 <LoopForever+0xe>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c60:	4c0a      	ldr	r4, [pc, #40]	@ (8000c8c <LoopForever+0x16>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c6e:	f003 fbc7 	bl	8004400 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c72:	f7ff fb77 	bl	8000364 <main>

08000c76 <LoopForever>:

LoopForever:
  b LoopForever
 8000c76:	e7fe      	b.n	8000c76 <LoopForever>
  ldr   r0, =_estack
 8000c78:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c84:	08004534 	.word	0x08004534
  ldr r2, =_sbss
 8000c88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c8c:	20000ee4 	.word	0x20000ee4

08000c90 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC1_IRQHandler>
	...

08000c94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd0 <HAL_Init+0x3c>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <HAL_Init+0x3c>)
 8000ca6:	2180      	movs	r1, #128	@ 0x80
 8000ca8:	0049      	lsls	r1, r1, #1
 8000caa:	430a      	orrs	r2, r1
 8000cac:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cae:	2003      	movs	r0, #3
 8000cb0:	f000 f810 	bl	8000cd4 <HAL_InitTick>
 8000cb4:	1e03      	subs	r3, r0, #0
 8000cb6:	d003      	beq.n	8000cc0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000cb8:	1dfb      	adds	r3, r7, #7
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
 8000cbe:	e001      	b.n	8000cc4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff fe22 	bl	8000908 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cc4:	1dfb      	adds	r3, r7, #7
 8000cc6:	781b      	ldrb	r3, [r3, #0]
}
 8000cc8:	0018      	movs	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b002      	add	sp, #8
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40022000 	.word	0x40022000

08000cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cdc:	230f      	movs	r3, #15
 8000cde:	18fb      	adds	r3, r7, r3
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d5c <HAL_InitTick+0x88>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d02b      	beq.n	8000d44 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000cec:	4b1c      	ldr	r3, [pc, #112]	@ (8000d60 <HAL_InitTick+0x8c>)
 8000cee:	681c      	ldr	r4, [r3, #0]
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <HAL_InitTick+0x88>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	0019      	movs	r1, r3
 8000cf6:	23fa      	movs	r3, #250	@ 0xfa
 8000cf8:	0098      	lsls	r0, r3, #2
 8000cfa:	f7ff fa01 	bl	8000100 <__udivsi3>
 8000cfe:	0003      	movs	r3, r0
 8000d00:	0019      	movs	r1, r3
 8000d02:	0020      	movs	r0, r4
 8000d04:	f7ff f9fc 	bl	8000100 <__udivsi3>
 8000d08:	0003      	movs	r3, r0
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f000 f93d 	bl	8000f8a <HAL_SYSTICK_Config>
 8000d10:	1e03      	subs	r3, r0, #0
 8000d12:	d112      	bne.n	8000d3a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b03      	cmp	r3, #3
 8000d18:	d80a      	bhi.n	8000d30 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	425b      	negs	r3, r3
 8000d20:	2200      	movs	r2, #0
 8000d22:	0018      	movs	r0, r3
 8000d24:	f000 f90c 	bl	8000f40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d28:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <HAL_InitTick+0x90>)
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	e00d      	b.n	8000d4c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d30:	230f      	movs	r3, #15
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	2201      	movs	r2, #1
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	e008      	b.n	8000d4c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d3a:	230f      	movs	r3, #15
 8000d3c:	18fb      	adds	r3, r7, r3
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
 8000d42:	e003      	b.n	8000d4c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d44:	230f      	movs	r3, #15
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	2201      	movs	r2, #1
 8000d4a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	781b      	ldrb	r3, [r3, #0]
}
 8000d52:	0018      	movs	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b005      	add	sp, #20
 8000d58:	bd90      	pop	{r4, r7, pc}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20000000 	.word	0x20000000
 8000d64:	20000004 	.word	0x20000004

08000d68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d6c:	4b05      	ldr	r3, [pc, #20]	@ (8000d84 <HAL_IncTick+0x1c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	001a      	movs	r2, r3
 8000d72:	4b05      	ldr	r3, [pc, #20]	@ (8000d88 <HAL_IncTick+0x20>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	18d2      	adds	r2, r2, r3
 8000d78:	4b03      	ldr	r3, [pc, #12]	@ (8000d88 <HAL_IncTick+0x20>)
 8000d7a:	601a      	str	r2, [r3, #0]
}
 8000d7c:	46c0      	nop			@ (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			@ (mov r8, r8)
 8000d84:	20000008 	.word	0x20000008
 8000d88:	20000ee0 	.word	0x20000ee0

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b02      	ldr	r3, [pc, #8]	@ (8000d9c <HAL_GetTick+0x10>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	0018      	movs	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	20000ee0 	.word	0x20000ee0

08000da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da8:	f7ff fff0 	bl	8000d8c <HAL_GetTick>
 8000dac:	0003      	movs	r3, r0
 8000dae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	3301      	adds	r3, #1
 8000db8:	d005      	beq.n	8000dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dba:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <HAL_Delay+0x44>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	001a      	movs	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	189b      	adds	r3, r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dc6:	46c0      	nop			@ (mov r8, r8)
 8000dc8:	f7ff ffe0 	bl	8000d8c <HAL_GetTick>
 8000dcc:	0002      	movs	r2, r0
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d8f7      	bhi.n	8000dc8 <HAL_Delay+0x28>
  {
  }
}
 8000dd8:	46c0      	nop			@ (mov r8, r8)
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b004      	add	sp, #16
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	20000008 	.word	0x20000008

08000de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	0002      	movs	r2, r0
 8000df0:	1dfb      	adds	r3, r7, #7
 8000df2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	1dfb      	adds	r3, r7, #7
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000dfa:	d809      	bhi.n	8000e10 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfc:	1dfb      	adds	r3, r7, #7
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	001a      	movs	r2, r3
 8000e02:	231f      	movs	r3, #31
 8000e04:	401a      	ands	r2, r3
 8000e06:	4b04      	ldr	r3, [pc, #16]	@ (8000e18 <__NVIC_EnableIRQ+0x30>)
 8000e08:	2101      	movs	r1, #1
 8000e0a:	4091      	lsls	r1, r2
 8000e0c:	000a      	movs	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000e10:	46c0      	nop			@ (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b002      	add	sp, #8
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	e000e100 	.word	0xe000e100

08000e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	0002      	movs	r2, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	1dfb      	adds	r3, r7, #7
 8000e28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e2a:	1dfb      	adds	r3, r7, #7
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e30:	d828      	bhi.n	8000e84 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e32:	4a2f      	ldr	r2, [pc, #188]	@ (8000ef0 <__NVIC_SetPriority+0xd4>)
 8000e34:	1dfb      	adds	r3, r7, #7
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b25b      	sxtb	r3, r3
 8000e3a:	089b      	lsrs	r3, r3, #2
 8000e3c:	33c0      	adds	r3, #192	@ 0xc0
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	589b      	ldr	r3, [r3, r2]
 8000e42:	1dfa      	adds	r2, r7, #7
 8000e44:	7812      	ldrb	r2, [r2, #0]
 8000e46:	0011      	movs	r1, r2
 8000e48:	2203      	movs	r2, #3
 8000e4a:	400a      	ands	r2, r1
 8000e4c:	00d2      	lsls	r2, r2, #3
 8000e4e:	21ff      	movs	r1, #255	@ 0xff
 8000e50:	4091      	lsls	r1, r2
 8000e52:	000a      	movs	r2, r1
 8000e54:	43d2      	mvns	r2, r2
 8000e56:	401a      	ands	r2, r3
 8000e58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	019b      	lsls	r3, r3, #6
 8000e5e:	22ff      	movs	r2, #255	@ 0xff
 8000e60:	401a      	ands	r2, r3
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	0018      	movs	r0, r3
 8000e68:	2303      	movs	r3, #3
 8000e6a:	4003      	ands	r3, r0
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e70:	481f      	ldr	r0, [pc, #124]	@ (8000ef0 <__NVIC_SetPriority+0xd4>)
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	b25b      	sxtb	r3, r3
 8000e78:	089b      	lsrs	r3, r3, #2
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	33c0      	adds	r3, #192	@ 0xc0
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e82:	e031      	b.n	8000ee8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e84:	4a1b      	ldr	r2, [pc, #108]	@ (8000ef4 <__NVIC_SetPriority+0xd8>)
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	400b      	ands	r3, r1
 8000e90:	3b08      	subs	r3, #8
 8000e92:	089b      	lsrs	r3, r3, #2
 8000e94:	3306      	adds	r3, #6
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	18d3      	adds	r3, r2, r3
 8000e9a:	3304      	adds	r3, #4
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	1dfa      	adds	r2, r7, #7
 8000ea0:	7812      	ldrb	r2, [r2, #0]
 8000ea2:	0011      	movs	r1, r2
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	400a      	ands	r2, r1
 8000ea8:	00d2      	lsls	r2, r2, #3
 8000eaa:	21ff      	movs	r1, #255	@ 0xff
 8000eac:	4091      	lsls	r1, r2
 8000eae:	000a      	movs	r2, r1
 8000eb0:	43d2      	mvns	r2, r2
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	019b      	lsls	r3, r3, #6
 8000eba:	22ff      	movs	r2, #255	@ 0xff
 8000ebc:	401a      	ands	r2, r3
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	4003      	ands	r3, r0
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ecc:	4809      	ldr	r0, [pc, #36]	@ (8000ef4 <__NVIC_SetPriority+0xd8>)
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	001c      	movs	r4, r3
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	4023      	ands	r3, r4
 8000ed8:	3b08      	subs	r3, #8
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	430a      	orrs	r2, r1
 8000ede:	3306      	adds	r3, #6
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	18c3      	adds	r3, r0, r3
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	601a      	str	r2, [r3, #0]
}
 8000ee8:	46c0      	nop			@ (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b003      	add	sp, #12
 8000eee:	bd90      	pop	{r4, r7, pc}
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	1e5a      	subs	r2, r3, #1
 8000f04:	2380      	movs	r3, #128	@ 0x80
 8000f06:	045b      	lsls	r3, r3, #17
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d301      	bcc.n	8000f10 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e010      	b.n	8000f32 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f10:	4b0a      	ldr	r3, [pc, #40]	@ (8000f3c <SysTick_Config+0x44>)
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	3a01      	subs	r2, #1
 8000f16:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f18:	2301      	movs	r3, #1
 8000f1a:	425b      	negs	r3, r3
 8000f1c:	2103      	movs	r1, #3
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f7ff ff7c 	bl	8000e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f24:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <SysTick_Config+0x44>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2a:	4b04      	ldr	r3, [pc, #16]	@ (8000f3c <SysTick_Config+0x44>)
 8000f2c:	2207      	movs	r2, #7
 8000f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	0018      	movs	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b002      	add	sp, #8
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	46c0      	nop			@ (mov r8, r8)
 8000f3c:	e000e010 	.word	0xe000e010

08000f40 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	210f      	movs	r1, #15
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	1c02      	adds	r2, r0, #0
 8000f50:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	187b      	adds	r3, r7, r1
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b25b      	sxtb	r3, r3
 8000f5a:	0011      	movs	r1, r2
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f7ff ff5d 	bl	8000e1c <__NVIC_SetPriority>
}
 8000f62:	46c0      	nop			@ (mov r8, r8)
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b004      	add	sp, #16
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	0002      	movs	r2, r0
 8000f72:	1dfb      	adds	r3, r7, #7
 8000f74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f76:	1dfb      	adds	r3, r7, #7
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b25b      	sxtb	r3, r3
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f7ff ff33 	bl	8000de8 <__NVIC_EnableIRQ>
}
 8000f82:	46c0      	nop			@ (mov r8, r8)
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b002      	add	sp, #8
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	0018      	movs	r0, r3
 8000f96:	f7ff ffaf 	bl	8000ef8 <SysTick_Config>
 8000f9a:	0003      	movs	r3, r0
}
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b002      	add	sp, #8
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e077      	b.n	80010a6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a3d      	ldr	r2, [pc, #244]	@ (80010b0 <HAL_DMA_Init+0x10c>)
 8000fbc:	4694      	mov	ip, r2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	2114      	movs	r1, #20
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f7ff f89c 	bl	8000100 <__udivsi3>
 8000fc8:	0003      	movs	r3, r0
 8000fca:	009a      	lsls	r2, r3, #2
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2225      	movs	r2, #37	@ 0x25
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4934      	ldr	r1, [pc, #208]	@ (80010b4 <HAL_DMA_Init+0x110>)
 8000fe4:	400a      	ands	r2, r1
 8000fe6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6819      	ldr	r1, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	431a      	orrs	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	431a      	orrs	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	431a      	orrs	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	430a      	orrs	r2, r1
 800101c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	0018      	movs	r0, r3
 8001022:	f000 fa2b 	bl	800147c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	2380      	movs	r3, #128	@ 0x80
 800102c:	01db      	lsls	r3, r3, #7
 800102e:	429a      	cmp	r2, r3
 8001030:	d102      	bne.n	8001038 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001040:	213f      	movs	r1, #63	@ 0x3f
 8001042:	400a      	ands	r2, r1
 8001044:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800104e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d011      	beq.n	800107c <HAL_DMA_Init+0xd8>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b04      	cmp	r3, #4
 800105e:	d80d      	bhi.n	800107c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	0018      	movs	r0, r3
 8001064:	f000 fa36 	bl	80014d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	e008      	b.n	800108e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2225      	movs	r2, #37	@ 0x25
 8001098:	2101      	movs	r1, #1
 800109a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2224      	movs	r2, #36	@ 0x24
 80010a0:	2100      	movs	r1, #0
 80010a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	0018      	movs	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b002      	add	sp, #8
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	46c0      	nop			@ (mov r8, r8)
 80010b0:	bffdfff8 	.word	0xbffdfff8
 80010b4:	ffff800f 	.word	0xffff800f

080010b8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010c6:	2317      	movs	r3, #23
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2224      	movs	r2, #36	@ 0x24
 80010d2:	5c9b      	ldrb	r3, [r3, r2]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d101      	bne.n	80010dc <HAL_DMA_Start_IT+0x24>
 80010d8:	2302      	movs	r3, #2
 80010da:	e06f      	b.n	80011bc <HAL_DMA_Start_IT+0x104>
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2224      	movs	r2, #36	@ 0x24
 80010e0:	2101      	movs	r1, #1
 80010e2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2225      	movs	r2, #37	@ 0x25
 80010e8:	5c9b      	ldrb	r3, [r3, r2]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d157      	bne.n	80011a0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2225      	movs	r2, #37	@ 0x25
 80010f4:	2102      	movs	r1, #2
 80010f6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2200      	movs	r2, #0
 80010fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2101      	movs	r1, #1
 800110a:	438a      	bics	r2, r1
 800110c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	68b9      	ldr	r1, [r7, #8]
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f000 f971 	bl	80013fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	2b00      	cmp	r3, #0
 8001120:	d008      	beq.n	8001134 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	210e      	movs	r1, #14
 800112e:	430a      	orrs	r2, r1
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	e00f      	b.n	8001154 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2104      	movs	r1, #4
 8001140:	438a      	bics	r2, r1
 8001142:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	210a      	movs	r1, #10
 8001150:	430a      	orrs	r2, r1
 8001152:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	2380      	movs	r3, #128	@ 0x80
 800115c:	025b      	lsls	r3, r3, #9
 800115e:	4013      	ands	r3, r2
 8001160:	d008      	beq.n	8001174 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116c:	2180      	movs	r1, #128	@ 0x80
 800116e:	0049      	lsls	r1, r1, #1
 8001170:	430a      	orrs	r2, r1
 8001172:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001178:	2b00      	cmp	r3, #0
 800117a:	d008      	beq.n	800118e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001186:	2180      	movs	r1, #128	@ 0x80
 8001188:	0049      	lsls	r1, r1, #1
 800118a:	430a      	orrs	r2, r1
 800118c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2101      	movs	r1, #1
 800119a:	430a      	orrs	r2, r1
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	e00a      	b.n	80011b6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2280      	movs	r2, #128	@ 0x80
 80011a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2224      	movs	r2, #36	@ 0x24
 80011aa:	2100      	movs	r1, #0
 80011ac:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80011ae:	2317      	movs	r3, #23
 80011b0:	18fb      	adds	r3, r7, r3
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80011b6:	2317      	movs	r3, #23
 80011b8:	18fb      	adds	r3, r7, r3
 80011ba:	781b      	ldrb	r3, [r3, #0]
}
 80011bc:	0018      	movs	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	b006      	add	sp, #24
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011cc:	210f      	movs	r1, #15
 80011ce:	187b      	adds	r3, r7, r1
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2225      	movs	r2, #37	@ 0x25
 80011d8:	5c9b      	ldrb	r3, [r3, r2]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d006      	beq.n	80011ee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2204      	movs	r2, #4
 80011e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80011e6:	187b      	adds	r3, r7, r1
 80011e8:	2201      	movs	r2, #1
 80011ea:	701a      	strb	r2, [r3, #0]
 80011ec:	e049      	b.n	8001282 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	210e      	movs	r1, #14
 80011fa:	438a      	bics	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2101      	movs	r1, #1
 800120a:	438a      	bics	r2, r1
 800120c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001218:	491d      	ldr	r1, [pc, #116]	@ (8001290 <HAL_DMA_Abort_IT+0xcc>)
 800121a:	400a      	ands	r2, r1
 800121c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800121e:	4b1d      	ldr	r3, [pc, #116]	@ (8001294 <HAL_DMA_Abort_IT+0xd0>)
 8001220:	6859      	ldr	r1, [r3, #4]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001226:	221c      	movs	r2, #28
 8001228:	4013      	ands	r3, r2
 800122a:	2201      	movs	r2, #1
 800122c:	409a      	lsls	r2, r3
 800122e:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <HAL_DMA_Abort_IT+0xd0>)
 8001230:	430a      	orrs	r2, r1
 8001232:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800123c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00c      	beq.n	8001260 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001250:	490f      	ldr	r1, [pc, #60]	@ (8001290 <HAL_DMA_Abort_IT+0xcc>)
 8001252:	400a      	ands	r2, r1
 8001254:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800125e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2225      	movs	r2, #37	@ 0x25
 8001264:	2101      	movs	r1, #1
 8001266:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2224      	movs	r2, #36	@ 0x24
 800126c:	2100      	movs	r1, #0
 800126e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001274:	2b00      	cmp	r3, #0
 8001276:	d004      	beq.n	8001282 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	0010      	movs	r0, r2
 8001280:	4798      	blx	r3
    }
  }
  return status;
 8001282:	230f      	movs	r3, #15
 8001284:	18fb      	adds	r3, r7, r3
 8001286:	781b      	ldrb	r3, [r3, #0]
}
 8001288:	0018      	movs	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	b004      	add	sp, #16
 800128e:	bd80      	pop	{r7, pc}
 8001290:	fffffeff 	.word	0xfffffeff
 8001294:	40020000 	.word	0x40020000

08001298 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80012a0:	4b55      	ldr	r3, [pc, #340]	@ (80013f8 <HAL_DMA_IRQHandler+0x160>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b2:	221c      	movs	r2, #28
 80012b4:	4013      	ands	r3, r2
 80012b6:	2204      	movs	r2, #4
 80012b8:	409a      	lsls	r2, r3
 80012ba:	0013      	movs	r3, r2
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	4013      	ands	r3, r2
 80012c0:	d027      	beq.n	8001312 <HAL_DMA_IRQHandler+0x7a>
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	2204      	movs	r2, #4
 80012c6:	4013      	ands	r3, r2
 80012c8:	d023      	beq.n	8001312 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2220      	movs	r2, #32
 80012d2:	4013      	ands	r3, r2
 80012d4:	d107      	bne.n	80012e6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2104      	movs	r1, #4
 80012e2:	438a      	bics	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80012e6:	4b44      	ldr	r3, [pc, #272]	@ (80013f8 <HAL_DMA_IRQHandler+0x160>)
 80012e8:	6859      	ldr	r1, [r3, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	221c      	movs	r2, #28
 80012f0:	4013      	ands	r3, r2
 80012f2:	2204      	movs	r2, #4
 80012f4:	409a      	lsls	r2, r3
 80012f6:	4b40      	ldr	r3, [pc, #256]	@ (80013f8 <HAL_DMA_IRQHandler+0x160>)
 80012f8:	430a      	orrs	r2, r1
 80012fa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001300:	2b00      	cmp	r3, #0
 8001302:	d100      	bne.n	8001306 <HAL_DMA_IRQHandler+0x6e>
 8001304:	e073      	b.n	80013ee <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	0010      	movs	r0, r2
 800130e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001310:	e06d      	b.n	80013ee <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001316:	221c      	movs	r2, #28
 8001318:	4013      	ands	r3, r2
 800131a:	2202      	movs	r2, #2
 800131c:	409a      	lsls	r2, r3
 800131e:	0013      	movs	r3, r2
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	4013      	ands	r3, r2
 8001324:	d02e      	beq.n	8001384 <HAL_DMA_IRQHandler+0xec>
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	2202      	movs	r2, #2
 800132a:	4013      	ands	r3, r2
 800132c:	d02a      	beq.n	8001384 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2220      	movs	r2, #32
 8001336:	4013      	ands	r3, r2
 8001338:	d10b      	bne.n	8001352 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	210a      	movs	r1, #10
 8001346:	438a      	bics	r2, r1
 8001348:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2225      	movs	r2, #37	@ 0x25
 800134e:	2101      	movs	r1, #1
 8001350:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001352:	4b29      	ldr	r3, [pc, #164]	@ (80013f8 <HAL_DMA_IRQHandler+0x160>)
 8001354:	6859      	ldr	r1, [r3, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	221c      	movs	r2, #28
 800135c:	4013      	ands	r3, r2
 800135e:	2202      	movs	r2, #2
 8001360:	409a      	lsls	r2, r3
 8001362:	4b25      	ldr	r3, [pc, #148]	@ (80013f8 <HAL_DMA_IRQHandler+0x160>)
 8001364:	430a      	orrs	r2, r1
 8001366:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2224      	movs	r2, #36	@ 0x24
 800136c:	2100      	movs	r1, #0
 800136e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001374:	2b00      	cmp	r3, #0
 8001376:	d03a      	beq.n	80013ee <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	0010      	movs	r0, r2
 8001380:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001382:	e034      	b.n	80013ee <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001388:	221c      	movs	r2, #28
 800138a:	4013      	ands	r3, r2
 800138c:	2208      	movs	r2, #8
 800138e:	409a      	lsls	r2, r3
 8001390:	0013      	movs	r3, r2
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	4013      	ands	r3, r2
 8001396:	d02b      	beq.n	80013f0 <HAL_DMA_IRQHandler+0x158>
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	2208      	movs	r2, #8
 800139c:	4013      	ands	r3, r2
 800139e:	d027      	beq.n	80013f0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	210e      	movs	r1, #14
 80013ac:	438a      	bics	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80013b0:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <HAL_DMA_IRQHandler+0x160>)
 80013b2:	6859      	ldr	r1, [r3, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b8:	221c      	movs	r2, #28
 80013ba:	4013      	ands	r3, r2
 80013bc:	2201      	movs	r2, #1
 80013be:	409a      	lsls	r2, r3
 80013c0:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <HAL_DMA_IRQHandler+0x160>)
 80013c2:	430a      	orrs	r2, r1
 80013c4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2201      	movs	r2, #1
 80013ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2225      	movs	r2, #37	@ 0x25
 80013d0:	2101      	movs	r1, #1
 80013d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2224      	movs	r2, #36	@ 0x24
 80013d8:	2100      	movs	r1, #0
 80013da:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	0010      	movs	r0, r2
 80013ec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80013ee:	46c0      	nop			@ (mov r8, r8)
 80013f0:	46c0      	nop			@ (mov r8, r8)
}
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b004      	add	sp, #16
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40020000 	.word	0x40020000

080013fc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001412:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001418:	2b00      	cmp	r3, #0
 800141a:	d004      	beq.n	8001426 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001424:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001426:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <DMA_SetConfig+0x7c>)
 8001428:	6859      	ldr	r1, [r3, #4]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142e:	221c      	movs	r2, #28
 8001430:	4013      	ands	r3, r2
 8001432:	2201      	movs	r2, #1
 8001434:	409a      	lsls	r2, r3
 8001436:	4b10      	ldr	r3, [pc, #64]	@ (8001478 <DMA_SetConfig+0x7c>)
 8001438:	430a      	orrs	r2, r1
 800143a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2b10      	cmp	r3, #16
 800144a:	d108      	bne.n	800145e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68ba      	ldr	r2, [r7, #8]
 800145a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800145c:	e007      	b.n	800146e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	60da      	str	r2, [r3, #12]
}
 800146e:	46c0      	nop			@ (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	b004      	add	sp, #16
 8001474:	bd80      	pop	{r7, pc}
 8001476:	46c0      	nop			@ (mov r8, r8)
 8001478:	40020000 	.word	0x40020000

0800147c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	4a10      	ldr	r2, [pc, #64]	@ (80014cc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800148c:	4694      	mov	ip, r2
 800148e:	4463      	add	r3, ip
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	001a      	movs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	001a      	movs	r2, r3
 800149e:	23ff      	movs	r3, #255	@ 0xff
 80014a0:	4013      	ands	r3, r2
 80014a2:	3b08      	subs	r3, #8
 80014a4:	2114      	movs	r1, #20
 80014a6:	0018      	movs	r0, r3
 80014a8:	f7fe fe2a 	bl	8000100 <__udivsi3>
 80014ac:	0003      	movs	r3, r0
 80014ae:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a07      	ldr	r2, [pc, #28]	@ (80014d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80014b4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	221f      	movs	r2, #31
 80014ba:	4013      	ands	r3, r2
 80014bc:	2201      	movs	r2, #1
 80014be:	409a      	lsls	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80014c4:	46c0      	nop			@ (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b004      	add	sp, #16
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	10008200 	.word	0x10008200
 80014d0:	40020880 	.word	0x40020880

080014d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	223f      	movs	r2, #63	@ 0x3f
 80014e2:	4013      	ands	r3, r2
 80014e4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80014ea:	4694      	mov	ip, r2
 80014ec:	4463      	add	r3, ip
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	001a      	movs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a07      	ldr	r2, [pc, #28]	@ (8001518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80014fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	3b01      	subs	r3, #1
 8001500:	2203      	movs	r2, #3
 8001502:	4013      	ands	r3, r2
 8001504:	2201      	movs	r2, #1
 8001506:	409a      	lsls	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800150c:	46c0      	nop			@ (mov r8, r8)
 800150e:	46bd      	mov	sp, r7
 8001510:	b004      	add	sp, #16
 8001512:	bd80      	pop	{r7, pc}
 8001514:	1000823f 	.word	0x1000823f
 8001518:	40020940 	.word	0x40020940

0800151c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800152a:	e147      	b.n	80017bc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2101      	movs	r1, #1
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	4091      	lsls	r1, r2
 8001536:	000a      	movs	r2, r1
 8001538:	4013      	ands	r3, r2
 800153a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d100      	bne.n	8001544 <HAL_GPIO_Init+0x28>
 8001542:	e138      	b.n	80017b6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2203      	movs	r2, #3
 800154a:	4013      	ands	r3, r2
 800154c:	2b01      	cmp	r3, #1
 800154e:	d005      	beq.n	800155c <HAL_GPIO_Init+0x40>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2203      	movs	r2, #3
 8001556:	4013      	ands	r3, r2
 8001558:	2b02      	cmp	r3, #2
 800155a:	d130      	bne.n	80015be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	409a      	lsls	r2, r3
 800156a:	0013      	movs	r3, r2
 800156c:	43da      	mvns	r2, r3
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	409a      	lsls	r2, r3
 800157e:	0013      	movs	r3, r2
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001592:	2201      	movs	r2, #1
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	409a      	lsls	r2, r3
 8001598:	0013      	movs	r3, r2
 800159a:	43da      	mvns	r2, r3
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	091b      	lsrs	r3, r3, #4
 80015a8:	2201      	movs	r2, #1
 80015aa:	401a      	ands	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	409a      	lsls	r2, r3
 80015b0:	0013      	movs	r3, r2
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2203      	movs	r2, #3
 80015c4:	4013      	ands	r3, r2
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d017      	beq.n	80015fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	2203      	movs	r2, #3
 80015d6:	409a      	lsls	r2, r3
 80015d8:	0013      	movs	r3, r2
 80015da:	43da      	mvns	r2, r3
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	409a      	lsls	r2, r3
 80015ec:	0013      	movs	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2203      	movs	r2, #3
 8001600:	4013      	ands	r3, r2
 8001602:	2b02      	cmp	r3, #2
 8001604:	d123      	bne.n	800164e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	08da      	lsrs	r2, r3, #3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3208      	adds	r2, #8
 800160e:	0092      	lsls	r2, r2, #2
 8001610:	58d3      	ldr	r3, [r2, r3]
 8001612:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	2207      	movs	r2, #7
 8001618:	4013      	ands	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	220f      	movs	r2, #15
 800161e:	409a      	lsls	r2, r3
 8001620:	0013      	movs	r3, r2
 8001622:	43da      	mvns	r2, r3
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	691a      	ldr	r2, [r3, #16]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	2107      	movs	r1, #7
 8001632:	400b      	ands	r3, r1
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	409a      	lsls	r2, r3
 8001638:	0013      	movs	r3, r2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	08da      	lsrs	r2, r3, #3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3208      	adds	r2, #8
 8001648:	0092      	lsls	r2, r2, #2
 800164a:	6939      	ldr	r1, [r7, #16]
 800164c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	2203      	movs	r2, #3
 800165a:	409a      	lsls	r2, r3
 800165c:	0013      	movs	r3, r2
 800165e:	43da      	mvns	r2, r3
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2203      	movs	r2, #3
 800166c:	401a      	ands	r2, r3
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	409a      	lsls	r2, r3
 8001674:	0013      	movs	r3, r2
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	23c0      	movs	r3, #192	@ 0xc0
 8001688:	029b      	lsls	r3, r3, #10
 800168a:	4013      	ands	r3, r2
 800168c:	d100      	bne.n	8001690 <HAL_GPIO_Init+0x174>
 800168e:	e092      	b.n	80017b6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001690:	4a50      	ldr	r2, [pc, #320]	@ (80017d4 <HAL_GPIO_Init+0x2b8>)
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	089b      	lsrs	r3, r3, #2
 8001696:	3318      	adds	r3, #24
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	589b      	ldr	r3, [r3, r2]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	2203      	movs	r2, #3
 80016a2:	4013      	ands	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	220f      	movs	r2, #15
 80016a8:	409a      	lsls	r2, r3
 80016aa:	0013      	movs	r3, r2
 80016ac:	43da      	mvns	r2, r3
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	23a0      	movs	r3, #160	@ 0xa0
 80016b8:	05db      	lsls	r3, r3, #23
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d013      	beq.n	80016e6 <HAL_GPIO_Init+0x1ca>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a45      	ldr	r2, [pc, #276]	@ (80017d8 <HAL_GPIO_Init+0x2bc>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d00d      	beq.n	80016e2 <HAL_GPIO_Init+0x1c6>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a44      	ldr	r2, [pc, #272]	@ (80017dc <HAL_GPIO_Init+0x2c0>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d007      	beq.n	80016de <HAL_GPIO_Init+0x1c2>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a43      	ldr	r2, [pc, #268]	@ (80017e0 <HAL_GPIO_Init+0x2c4>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d101      	bne.n	80016da <HAL_GPIO_Init+0x1be>
 80016d6:	2303      	movs	r3, #3
 80016d8:	e006      	b.n	80016e8 <HAL_GPIO_Init+0x1cc>
 80016da:	2305      	movs	r3, #5
 80016dc:	e004      	b.n	80016e8 <HAL_GPIO_Init+0x1cc>
 80016de:	2302      	movs	r3, #2
 80016e0:	e002      	b.n	80016e8 <HAL_GPIO_Init+0x1cc>
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <HAL_GPIO_Init+0x1cc>
 80016e6:	2300      	movs	r3, #0
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	2103      	movs	r1, #3
 80016ec:	400a      	ands	r2, r1
 80016ee:	00d2      	lsls	r2, r2, #3
 80016f0:	4093      	lsls	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80016f8:	4936      	ldr	r1, [pc, #216]	@ (80017d4 <HAL_GPIO_Init+0x2b8>)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	089b      	lsrs	r3, r3, #2
 80016fe:	3318      	adds	r3, #24
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001706:	4b33      	ldr	r3, [pc, #204]	@ (80017d4 <HAL_GPIO_Init+0x2b8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	43da      	mvns	r2, r3
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	2380      	movs	r3, #128	@ 0x80
 800171c:	035b      	lsls	r3, r3, #13
 800171e:	4013      	ands	r3, r2
 8001720:	d003      	beq.n	800172a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800172a:	4b2a      	ldr	r3, [pc, #168]	@ (80017d4 <HAL_GPIO_Init+0x2b8>)
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001730:	4b28      	ldr	r3, [pc, #160]	@ (80017d4 <HAL_GPIO_Init+0x2b8>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	43da      	mvns	r2, r3
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	2380      	movs	r3, #128	@ 0x80
 8001746:	039b      	lsls	r3, r3, #14
 8001748:	4013      	ands	r3, r2
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001754:	4b1f      	ldr	r3, [pc, #124]	@ (80017d4 <HAL_GPIO_Init+0x2b8>)
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800175a:	4a1e      	ldr	r2, [pc, #120]	@ (80017d4 <HAL_GPIO_Init+0x2b8>)
 800175c:	2384      	movs	r3, #132	@ 0x84
 800175e:	58d3      	ldr	r3, [r2, r3]
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	43da      	mvns	r2, r3
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4013      	ands	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	2380      	movs	r3, #128	@ 0x80
 8001772:	029b      	lsls	r3, r3, #10
 8001774:	4013      	ands	r3, r2
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001780:	4914      	ldr	r1, [pc, #80]	@ (80017d4 <HAL_GPIO_Init+0x2b8>)
 8001782:	2284      	movs	r2, #132	@ 0x84
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001788:	4a12      	ldr	r2, [pc, #72]	@ (80017d4 <HAL_GPIO_Init+0x2b8>)
 800178a:	2380      	movs	r3, #128	@ 0x80
 800178c:	58d3      	ldr	r3, [r2, r3]
 800178e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	43da      	mvns	r2, r3
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	2380      	movs	r3, #128	@ 0x80
 80017a0:	025b      	lsls	r3, r3, #9
 80017a2:	4013      	ands	r3, r2
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017ae:	4909      	ldr	r1, [pc, #36]	@ (80017d4 <HAL_GPIO_Init+0x2b8>)
 80017b0:	2280      	movs	r2, #128	@ 0x80
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	3301      	adds	r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	40da      	lsrs	r2, r3
 80017c4:	1e13      	subs	r3, r2, #0
 80017c6:	d000      	beq.n	80017ca <HAL_GPIO_Init+0x2ae>
 80017c8:	e6b0      	b.n	800152c <HAL_GPIO_Init+0x10>
  }
}
 80017ca:	46c0      	nop			@ (mov r8, r8)
 80017cc:	46c0      	nop			@ (mov r8, r8)
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b006      	add	sp, #24
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40021800 	.word	0x40021800
 80017d8:	50000400 	.word	0x50000400
 80017dc:	50000800 	.word	0x50000800
 80017e0:	50000c00 	.word	0x50000c00

080017e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	0008      	movs	r0, r1
 80017ee:	0011      	movs	r1, r2
 80017f0:	1cbb      	adds	r3, r7, #2
 80017f2:	1c02      	adds	r2, r0, #0
 80017f4:	801a      	strh	r2, [r3, #0]
 80017f6:	1c7b      	adds	r3, r7, #1
 80017f8:	1c0a      	adds	r2, r1, #0
 80017fa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017fc:	1c7b      	adds	r3, r7, #1
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d004      	beq.n	800180e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001804:	1cbb      	adds	r3, r7, #2
 8001806:	881a      	ldrh	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800180c:	e003      	b.n	8001816 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800180e:	1cbb      	adds	r3, r7, #2
 8001810:	881a      	ldrh	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001816:	46c0      	nop			@ (mov r8, r8)
 8001818:	46bd      	mov	sp, r7
 800181a:	b002      	add	sp, #8
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e08f      	b.n	8001952 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2241      	movs	r2, #65	@ 0x41
 8001836:	5c9b      	ldrb	r3, [r3, r2]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d107      	bne.n	800184e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2240      	movs	r2, #64	@ 0x40
 8001842:	2100      	movs	r1, #0
 8001844:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	0018      	movs	r0, r3
 800184a:	f7ff f881 	bl	8000950 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2241      	movs	r2, #65	@ 0x41
 8001852:	2124      	movs	r1, #36	@ 0x24
 8001854:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2101      	movs	r1, #1
 8001862:	438a      	bics	r2, r1
 8001864:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	493b      	ldr	r1, [pc, #236]	@ (800195c <HAL_I2C_Init+0x13c>)
 8001870:	400a      	ands	r2, r1
 8001872:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4938      	ldr	r1, [pc, #224]	@ (8001960 <HAL_I2C_Init+0x140>)
 8001880:	400a      	ands	r2, r1
 8001882:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d108      	bne.n	800189e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2180      	movs	r1, #128	@ 0x80
 8001896:	0209      	lsls	r1, r1, #8
 8001898:	430a      	orrs	r2, r1
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	e007      	b.n	80018ae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2184      	movs	r1, #132	@ 0x84
 80018a8:	0209      	lsls	r1, r1, #8
 80018aa:	430a      	orrs	r2, r1
 80018ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d109      	bne.n	80018ca <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2180      	movs	r1, #128	@ 0x80
 80018c2:	0109      	lsls	r1, r1, #4
 80018c4:	430a      	orrs	r2, r1
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	e007      	b.n	80018da <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4923      	ldr	r1, [pc, #140]	@ (8001964 <HAL_I2C_Init+0x144>)
 80018d6:	400a      	ands	r2, r1
 80018d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4920      	ldr	r1, [pc, #128]	@ (8001968 <HAL_I2C_Init+0x148>)
 80018e6:	430a      	orrs	r2, r1
 80018e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	491a      	ldr	r1, [pc, #104]	@ (8001960 <HAL_I2C_Init+0x140>)
 80018f6:	400a      	ands	r2, r1
 80018f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691a      	ldr	r2, [r3, #16]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	431a      	orrs	r2, r3
 8001904:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69d9      	ldr	r1, [r3, #28]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a1a      	ldr	r2, [r3, #32]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2101      	movs	r1, #1
 8001930:	430a      	orrs	r2, r1
 8001932:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2241      	movs	r2, #65	@ 0x41
 800193e:	2120      	movs	r1, #32
 8001940:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2242      	movs	r2, #66	@ 0x42
 800194c:	2100      	movs	r1, #0
 800194e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	0018      	movs	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	b002      	add	sp, #8
 8001958:	bd80      	pop	{r7, pc}
 800195a:	46c0      	nop			@ (mov r8, r8)
 800195c:	f0ffffff 	.word	0xf0ffffff
 8001960:	ffff7fff 	.word	0xffff7fff
 8001964:	fffff7ff 	.word	0xfffff7ff
 8001968:	02008000 	.word	0x02008000

0800196c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2241      	movs	r2, #65	@ 0x41
 800197a:	5c9b      	ldrb	r3, [r3, r2]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b20      	cmp	r3, #32
 8001980:	d138      	bne.n	80019f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2240      	movs	r2, #64	@ 0x40
 8001986:	5c9b      	ldrb	r3, [r3, r2]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800198c:	2302      	movs	r3, #2
 800198e:	e032      	b.n	80019f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2240      	movs	r2, #64	@ 0x40
 8001994:	2101      	movs	r1, #1
 8001996:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2241      	movs	r2, #65	@ 0x41
 800199c:	2124      	movs	r1, #36	@ 0x24
 800199e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2101      	movs	r1, #1
 80019ac:	438a      	bics	r2, r1
 80019ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4911      	ldr	r1, [pc, #68]	@ (8001a00 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80019bc:	400a      	ands	r2, r1
 80019be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6819      	ldr	r1, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2101      	movs	r1, #1
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2241      	movs	r2, #65	@ 0x41
 80019e4:	2120      	movs	r1, #32
 80019e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2240      	movs	r2, #64	@ 0x40
 80019ec:	2100      	movs	r1, #0
 80019ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	e000      	b.n	80019f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019f4:	2302      	movs	r3, #2
  }
}
 80019f6:	0018      	movs	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	b002      	add	sp, #8
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	46c0      	nop			@ (mov r8, r8)
 8001a00:	ffffefff 	.word	0xffffefff

08001a04 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2241      	movs	r2, #65	@ 0x41
 8001a12:	5c9b      	ldrb	r3, [r3, r2]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	d139      	bne.n	8001a8e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2240      	movs	r2, #64	@ 0x40
 8001a1e:	5c9b      	ldrb	r3, [r3, r2]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e033      	b.n	8001a90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2240      	movs	r2, #64	@ 0x40
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2241      	movs	r2, #65	@ 0x41
 8001a34:	2124      	movs	r1, #36	@ 0x24
 8001a36:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2101      	movs	r1, #1
 8001a44:	438a      	bics	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4a11      	ldr	r2, [pc, #68]	@ (8001a98 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	021b      	lsls	r3, r3, #8
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2101      	movs	r1, #1
 8001a76:	430a      	orrs	r2, r1
 8001a78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2241      	movs	r2, #65	@ 0x41
 8001a7e:	2120      	movs	r1, #32
 8001a80:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2240      	movs	r2, #64	@ 0x40
 8001a86:	2100      	movs	r1, #0
 8001a88:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e000      	b.n	8001a90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a8e:	2302      	movs	r3, #2
  }
}
 8001a90:	0018      	movs	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b004      	add	sp, #16
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	fffff0ff 	.word	0xfffff0ff

08001a9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001aa4:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a19      	ldr	r2, [pc, #100]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	0019      	movs	r1, r3
 8001aae:	4b17      	ldr	r3, [pc, #92]	@ (8001b0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	2380      	movs	r3, #128	@ 0x80
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d11f      	bne.n	8001b00 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001ac0:	4b14      	ldr	r3, [pc, #80]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	0013      	movs	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	189b      	adds	r3, r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4912      	ldr	r1, [pc, #72]	@ (8001b18 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f7fe fb16 	bl	8000100 <__udivsi3>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ada:	e008      	b.n	8001aee <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	e001      	b.n	8001aee <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e009      	b.n	8001b02 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aee:	4b07      	ldr	r3, [pc, #28]	@ (8001b0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001af0:	695a      	ldr	r2, [r3, #20]
 8001af2:	2380      	movs	r3, #128	@ 0x80
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	401a      	ands	r2, r3
 8001af8:	2380      	movs	r3, #128	@ 0x80
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d0ed      	beq.n	8001adc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	0018      	movs	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	b004      	add	sp, #16
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	46c0      	nop			@ (mov r8, r8)
 8001b0c:	40007000 	.word	0x40007000
 8001b10:	fffff9ff 	.word	0xfffff9ff
 8001b14:	20000000 	.word	0x20000000
 8001b18:	000f4240 	.word	0x000f4240

08001b1c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001b20:	4b03      	ldr	r3, [pc, #12]	@ (8001b30 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	23e0      	movs	r3, #224	@ 0xe0
 8001b26:	01db      	lsls	r3, r3, #7
 8001b28:	4013      	ands	r3, r2
}
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40021000 	.word	0x40021000

08001b34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e2f3      	b.n	800212e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d100      	bne.n	8001b52 <HAL_RCC_OscConfig+0x1e>
 8001b50:	e07c      	b.n	8001c4c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b52:	4bc3      	ldr	r3, [pc, #780]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2238      	movs	r2, #56	@ 0x38
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b5c:	4bc0      	ldr	r3, [pc, #768]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	2203      	movs	r2, #3
 8001b62:	4013      	ands	r3, r2
 8001b64:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	2b10      	cmp	r3, #16
 8001b6a:	d102      	bne.n	8001b72 <HAL_RCC_OscConfig+0x3e>
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	d002      	beq.n	8001b78 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d10b      	bne.n	8001b90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b78:	4bb9      	ldr	r3, [pc, #740]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	2380      	movs	r3, #128	@ 0x80
 8001b7e:	029b      	lsls	r3, r3, #10
 8001b80:	4013      	ands	r3, r2
 8001b82:	d062      	beq.n	8001c4a <HAL_RCC_OscConfig+0x116>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d15e      	bne.n	8001c4a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e2ce      	b.n	800212e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	2380      	movs	r3, #128	@ 0x80
 8001b96:	025b      	lsls	r3, r3, #9
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d107      	bne.n	8001bac <HAL_RCC_OscConfig+0x78>
 8001b9c:	4bb0      	ldr	r3, [pc, #704]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4baf      	ldr	r3, [pc, #700]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001ba2:	2180      	movs	r1, #128	@ 0x80
 8001ba4:	0249      	lsls	r1, r1, #9
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	e020      	b.n	8001bee <HAL_RCC_OscConfig+0xba>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	23a0      	movs	r3, #160	@ 0xa0
 8001bb2:	02db      	lsls	r3, r3, #11
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d10e      	bne.n	8001bd6 <HAL_RCC_OscConfig+0xa2>
 8001bb8:	4ba9      	ldr	r3, [pc, #676]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4ba8      	ldr	r3, [pc, #672]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001bbe:	2180      	movs	r1, #128	@ 0x80
 8001bc0:	02c9      	lsls	r1, r1, #11
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	4ba6      	ldr	r3, [pc, #664]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4ba5      	ldr	r3, [pc, #660]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001bcc:	2180      	movs	r1, #128	@ 0x80
 8001bce:	0249      	lsls	r1, r1, #9
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	e00b      	b.n	8001bee <HAL_RCC_OscConfig+0xba>
 8001bd6:	4ba2      	ldr	r3, [pc, #648]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4ba1      	ldr	r3, [pc, #644]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001bdc:	49a1      	ldr	r1, [pc, #644]	@ (8001e64 <HAL_RCC_OscConfig+0x330>)
 8001bde:	400a      	ands	r2, r1
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	4b9f      	ldr	r3, [pc, #636]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	4b9e      	ldr	r3, [pc, #632]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001be8:	499f      	ldr	r1, [pc, #636]	@ (8001e68 <HAL_RCC_OscConfig+0x334>)
 8001bea:	400a      	ands	r2, r1
 8001bec:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d014      	beq.n	8001c20 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf6:	f7ff f8c9 	bl	8000d8c <HAL_GetTick>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c00:	f7ff f8c4 	bl	8000d8c <HAL_GetTick>
 8001c04:	0002      	movs	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b64      	cmp	r3, #100	@ 0x64
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e28d      	b.n	800212e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c12:	4b93      	ldr	r3, [pc, #588]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	2380      	movs	r3, #128	@ 0x80
 8001c18:	029b      	lsls	r3, r3, #10
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0xcc>
 8001c1e:	e015      	b.n	8001c4c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff f8b4 	bl	8000d8c <HAL_GetTick>
 8001c24:	0003      	movs	r3, r0
 8001c26:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c2a:	f7ff f8af 	bl	8000d8c <HAL_GetTick>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b64      	cmp	r3, #100	@ 0x64
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e278      	b.n	800212e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c3c:	4b88      	ldr	r3, [pc, #544]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	2380      	movs	r3, #128	@ 0x80
 8001c42:	029b      	lsls	r3, r3, #10
 8001c44:	4013      	ands	r3, r2
 8001c46:	d1f0      	bne.n	8001c2a <HAL_RCC_OscConfig+0xf6>
 8001c48:	e000      	b.n	8001c4c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2202      	movs	r2, #2
 8001c52:	4013      	ands	r3, r2
 8001c54:	d100      	bne.n	8001c58 <HAL_RCC_OscConfig+0x124>
 8001c56:	e099      	b.n	8001d8c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c58:	4b81      	ldr	r3, [pc, #516]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2238      	movs	r2, #56	@ 0x38
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c62:	4b7f      	ldr	r3, [pc, #508]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	2203      	movs	r2, #3
 8001c68:	4013      	ands	r3, r2
 8001c6a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	2b10      	cmp	r3, #16
 8001c70:	d102      	bne.n	8001c78 <HAL_RCC_OscConfig+0x144>
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d002      	beq.n	8001c7e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d135      	bne.n	8001cea <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c7e:	4b78      	ldr	r3, [pc, #480]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	2380      	movs	r3, #128	@ 0x80
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4013      	ands	r3, r2
 8001c88:	d005      	beq.n	8001c96 <HAL_RCC_OscConfig+0x162>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e24b      	b.n	800212e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c96:	4b72      	ldr	r3, [pc, #456]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	4a74      	ldr	r2, [pc, #464]	@ (8001e6c <HAL_RCC_OscConfig+0x338>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	0019      	movs	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	021a      	lsls	r2, r3, #8
 8001ca6:	4b6e      	ldr	r3, [pc, #440]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d112      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001cb2:	4b6b      	ldr	r3, [pc, #428]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a6e      	ldr	r2, [pc, #440]	@ (8001e70 <HAL_RCC_OscConfig+0x33c>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	0019      	movs	r1, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	4b67      	ldr	r3, [pc, #412]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001cc6:	4b66      	ldr	r3, [pc, #408]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	0adb      	lsrs	r3, r3, #11
 8001ccc:	2207      	movs	r2, #7
 8001cce:	4013      	ands	r3, r2
 8001cd0:	4a68      	ldr	r2, [pc, #416]	@ (8001e74 <HAL_RCC_OscConfig+0x340>)
 8001cd2:	40da      	lsrs	r2, r3
 8001cd4:	4b68      	ldr	r3, [pc, #416]	@ (8001e78 <HAL_RCC_OscConfig+0x344>)
 8001cd6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cd8:	4b68      	ldr	r3, [pc, #416]	@ (8001e7c <HAL_RCC_OscConfig+0x348>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f7fe fff9 	bl	8000cd4 <HAL_InitTick>
 8001ce2:	1e03      	subs	r3, r0, #0
 8001ce4:	d051      	beq.n	8001d8a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e221      	b.n	800212e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d030      	beq.n	8001d54 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001cf2:	4b5b      	ldr	r3, [pc, #364]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a5e      	ldr	r2, [pc, #376]	@ (8001e70 <HAL_RCC_OscConfig+0x33c>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	4b57      	ldr	r3, [pc, #348]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001d02:	430a      	orrs	r2, r1
 8001d04:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001d06:	4b56      	ldr	r3, [pc, #344]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	4b55      	ldr	r3, [pc, #340]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001d0c:	2180      	movs	r1, #128	@ 0x80
 8001d0e:	0049      	lsls	r1, r1, #1
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff f83a 	bl	8000d8c <HAL_GetTick>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1e:	f7ff f835 	bl	8000d8c <HAL_GetTick>
 8001d22:	0002      	movs	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e1fe      	b.n	800212e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d30:	4b4b      	ldr	r3, [pc, #300]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2380      	movs	r3, #128	@ 0x80
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3c:	4b48      	ldr	r3, [pc, #288]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	4a4a      	ldr	r2, [pc, #296]	@ (8001e6c <HAL_RCC_OscConfig+0x338>)
 8001d42:	4013      	ands	r3, r2
 8001d44:	0019      	movs	r1, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	021a      	lsls	r2, r3, #8
 8001d4c:	4b44      	ldr	r3, [pc, #272]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	e01b      	b.n	8001d8c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001d54:	4b42      	ldr	r3, [pc, #264]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b41      	ldr	r3, [pc, #260]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001d5a:	4949      	ldr	r1, [pc, #292]	@ (8001e80 <HAL_RCC_OscConfig+0x34c>)
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d60:	f7ff f814 	bl	8000d8c <HAL_GetTick>
 8001d64:	0003      	movs	r3, r0
 8001d66:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d6a:	f7ff f80f 	bl	8000d8c <HAL_GetTick>
 8001d6e:	0002      	movs	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e1d8      	b.n	800212e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d7c:	4b38      	ldr	r3, [pc, #224]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	2380      	movs	r3, #128	@ 0x80
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4013      	ands	r3, r2
 8001d86:	d1f0      	bne.n	8001d6a <HAL_RCC_OscConfig+0x236>
 8001d88:	e000      	b.n	8001d8c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d8a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2208      	movs	r2, #8
 8001d92:	4013      	ands	r3, r2
 8001d94:	d047      	beq.n	8001e26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d96:	4b32      	ldr	r3, [pc, #200]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2238      	movs	r2, #56	@ 0x38
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b18      	cmp	r3, #24
 8001da0:	d10a      	bne.n	8001db8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001da2:	4b2f      	ldr	r3, [pc, #188]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001da6:	2202      	movs	r2, #2
 8001da8:	4013      	ands	r3, r2
 8001daa:	d03c      	beq.n	8001e26 <HAL_RCC_OscConfig+0x2f2>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d138      	bne.n	8001e26 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e1ba      	b.n	800212e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d019      	beq.n	8001df4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001dc0:	4b27      	ldr	r3, [pc, #156]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001dc2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001dc4:	4b26      	ldr	r3, [pc, #152]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7fe ffde 	bl	8000d8c <HAL_GetTick>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd6:	f7fe ffd9 	bl	8000d8c <HAL_GetTick>
 8001dda:	0002      	movs	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e1a2      	b.n	800212e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001de8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001dea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dec:	2202      	movs	r2, #2
 8001dee:	4013      	ands	r3, r2
 8001df0:	d0f1      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x2a2>
 8001df2:	e018      	b.n	8001e26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001df4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001df6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001df8:	4b19      	ldr	r3, [pc, #100]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	438a      	bics	r2, r1
 8001dfe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7fe ffc4 	bl	8000d8c <HAL_GetTick>
 8001e04:	0003      	movs	r3, r0
 8001e06:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e0a:	f7fe ffbf 	bl	8000d8c <HAL_GetTick>
 8001e0e:	0002      	movs	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e188      	b.n	800212e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e1c:	4b10      	ldr	r3, [pc, #64]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001e1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e20:	2202      	movs	r2, #2
 8001e22:	4013      	ands	r3, r2
 8001e24:	d1f1      	bne.n	8001e0a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d100      	bne.n	8001e32 <HAL_RCC_OscConfig+0x2fe>
 8001e30:	e0c6      	b.n	8001fc0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e32:	231f      	movs	r3, #31
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e3a:	4b09      	ldr	r3, [pc, #36]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2238      	movs	r2, #56	@ 0x38
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b20      	cmp	r3, #32
 8001e44:	d11e      	bne.n	8001e84 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001e46:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <HAL_RCC_OscConfig+0x32c>)
 8001e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d100      	bne.n	8001e52 <HAL_RCC_OscConfig+0x31e>
 8001e50:	e0b6      	b.n	8001fc0 <HAL_RCC_OscConfig+0x48c>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d000      	beq.n	8001e5c <HAL_RCC_OscConfig+0x328>
 8001e5a:	e0b1      	b.n	8001fc0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e166      	b.n	800212e <HAL_RCC_OscConfig+0x5fa>
 8001e60:	40021000 	.word	0x40021000
 8001e64:	fffeffff 	.word	0xfffeffff
 8001e68:	fffbffff 	.word	0xfffbffff
 8001e6c:	ffff80ff 	.word	0xffff80ff
 8001e70:	ffffc7ff 	.word	0xffffc7ff
 8001e74:	00f42400 	.word	0x00f42400
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	20000004 	.word	0x20000004
 8001e80:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e84:	4bac      	ldr	r3, [pc, #688]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8001e86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e88:	2380      	movs	r3, #128	@ 0x80
 8001e8a:	055b      	lsls	r3, r3, #21
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d101      	bne.n	8001e94 <HAL_RCC_OscConfig+0x360>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <HAL_RCC_OscConfig+0x362>
 8001e94:	2300      	movs	r3, #0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d011      	beq.n	8001ebe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001e9a:	4ba7      	ldr	r3, [pc, #668]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8001e9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e9e:	4ba6      	ldr	r3, [pc, #664]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8001ea0:	2180      	movs	r1, #128	@ 0x80
 8001ea2:	0549      	lsls	r1, r1, #21
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ea8:	4ba3      	ldr	r3, [pc, #652]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8001eaa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001eac:	2380      	movs	r3, #128	@ 0x80
 8001eae:	055b      	lsls	r3, r3, #21
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001eb6:	231f      	movs	r3, #31
 8001eb8:	18fb      	adds	r3, r7, r3
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ebe:	4b9f      	ldr	r3, [pc, #636]	@ (800213c <HAL_RCC_OscConfig+0x608>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	2380      	movs	r3, #128	@ 0x80
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d11a      	bne.n	8001f00 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eca:	4b9c      	ldr	r3, [pc, #624]	@ (800213c <HAL_RCC_OscConfig+0x608>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4b9b      	ldr	r3, [pc, #620]	@ (800213c <HAL_RCC_OscConfig+0x608>)
 8001ed0:	2180      	movs	r1, #128	@ 0x80
 8001ed2:	0049      	lsls	r1, r1, #1
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001ed8:	f7fe ff58 	bl	8000d8c <HAL_GetTick>
 8001edc:	0003      	movs	r3, r0
 8001ede:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee2:	f7fe ff53 	bl	8000d8c <HAL_GetTick>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e11c      	b.n	800212e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef4:	4b91      	ldr	r3, [pc, #580]	@ (800213c <HAL_RCC_OscConfig+0x608>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	2380      	movs	r3, #128	@ 0x80
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4013      	ands	r3, r2
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d106      	bne.n	8001f16 <HAL_RCC_OscConfig+0x3e2>
 8001f08:	4b8b      	ldr	r3, [pc, #556]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8001f0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f0c:	4b8a      	ldr	r3, [pc, #552]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8001f0e:	2101      	movs	r1, #1
 8001f10:	430a      	orrs	r2, r1
 8001f12:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f14:	e01c      	b.n	8001f50 <HAL_RCC_OscConfig+0x41c>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b05      	cmp	r3, #5
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x404>
 8001f1e:	4b86      	ldr	r3, [pc, #536]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8001f20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f22:	4b85      	ldr	r3, [pc, #532]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8001f24:	2104      	movs	r1, #4
 8001f26:	430a      	orrs	r2, r1
 8001f28:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f2a:	4b83      	ldr	r3, [pc, #524]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8001f2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f2e:	4b82      	ldr	r3, [pc, #520]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8001f30:	2101      	movs	r1, #1
 8001f32:	430a      	orrs	r2, r1
 8001f34:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f36:	e00b      	b.n	8001f50 <HAL_RCC_OscConfig+0x41c>
 8001f38:	4b7f      	ldr	r3, [pc, #508]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8001f3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f3c:	4b7e      	ldr	r3, [pc, #504]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8001f3e:	2101      	movs	r1, #1
 8001f40:	438a      	bics	r2, r1
 8001f42:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f44:	4b7c      	ldr	r3, [pc, #496]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8001f46:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f48:	4b7b      	ldr	r3, [pc, #492]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8001f4a:	2104      	movs	r1, #4
 8001f4c:	438a      	bics	r2, r1
 8001f4e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d014      	beq.n	8001f82 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f58:	f7fe ff18 	bl	8000d8c <HAL_GetTick>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f60:	e009      	b.n	8001f76 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f7fe ff13 	bl	8000d8c <HAL_GetTick>
 8001f66:	0002      	movs	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	4a74      	ldr	r2, [pc, #464]	@ (8002140 <HAL_RCC_OscConfig+0x60c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e0db      	b.n	800212e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f76:	4b70      	ldr	r3, [pc, #448]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8001f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x42e>
 8001f80:	e013      	b.n	8001faa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7fe ff03 	bl	8000d8c <HAL_GetTick>
 8001f86:	0003      	movs	r3, r0
 8001f88:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f8a:	e009      	b.n	8001fa0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8c:	f7fe fefe 	bl	8000d8c <HAL_GetTick>
 8001f90:	0002      	movs	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	4a6a      	ldr	r2, [pc, #424]	@ (8002140 <HAL_RCC_OscConfig+0x60c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e0c6      	b.n	800212e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fa0:	4b65      	ldr	r3, [pc, #404]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8001fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001faa:	231f      	movs	r3, #31
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d105      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001fb4:	4b60      	ldr	r3, [pc, #384]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8001fb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fb8:	4b5f      	ldr	r3, [pc, #380]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8001fba:	4962      	ldr	r1, [pc, #392]	@ (8002144 <HAL_RCC_OscConfig+0x610>)
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d100      	bne.n	8001fca <HAL_RCC_OscConfig+0x496>
 8001fc8:	e0b0      	b.n	800212c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fca:	4b5b      	ldr	r3, [pc, #364]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	2238      	movs	r2, #56	@ 0x38
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b10      	cmp	r3, #16
 8001fd4:	d100      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x4a4>
 8001fd6:	e078      	b.n	80020ca <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d153      	bne.n	8002088 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe0:	4b55      	ldr	r3, [pc, #340]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b54      	ldr	r3, [pc, #336]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8001fe6:	4958      	ldr	r1, [pc, #352]	@ (8002148 <HAL_RCC_OscConfig+0x614>)
 8001fe8:	400a      	ands	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7fe fece 	bl	8000d8c <HAL_GetTick>
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff6:	f7fe fec9 	bl	8000d8c <HAL_GetTick>
 8001ffa:	0002      	movs	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e092      	b.n	800212e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002008:	4b4b      	ldr	r3, [pc, #300]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2380      	movs	r3, #128	@ 0x80
 800200e:	049b      	lsls	r3, r3, #18
 8002010:	4013      	ands	r3, r2
 8002012:	d1f0      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002014:	4b48      	ldr	r3, [pc, #288]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	4a4c      	ldr	r2, [pc, #304]	@ (800214c <HAL_RCC_OscConfig+0x618>)
 800201a:	4013      	ands	r3, r2
 800201c:	0019      	movs	r1, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a1a      	ldr	r2, [r3, #32]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	431a      	orrs	r2, r3
 800203c:	4b3e      	ldr	r3, [pc, #248]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 800203e:	430a      	orrs	r2, r1
 8002040:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002042:	4b3d      	ldr	r3, [pc, #244]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	4b3c      	ldr	r3, [pc, #240]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8002048:	2180      	movs	r1, #128	@ 0x80
 800204a:	0449      	lsls	r1, r1, #17
 800204c:	430a      	orrs	r2, r1
 800204e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002050:	4b39      	ldr	r3, [pc, #228]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	4b38      	ldr	r3, [pc, #224]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 8002056:	2180      	movs	r1, #128	@ 0x80
 8002058:	0549      	lsls	r1, r1, #21
 800205a:	430a      	orrs	r2, r1
 800205c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205e:	f7fe fe95 	bl	8000d8c <HAL_GetTick>
 8002062:	0003      	movs	r3, r0
 8002064:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002068:	f7fe fe90 	bl	8000d8c <HAL_GetTick>
 800206c:	0002      	movs	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e059      	b.n	800212e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800207a:	4b2f      	ldr	r3, [pc, #188]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	2380      	movs	r3, #128	@ 0x80
 8002080:	049b      	lsls	r3, r3, #18
 8002082:	4013      	ands	r3, r2
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0x534>
 8002086:	e051      	b.n	800212c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002088:	4b2b      	ldr	r3, [pc, #172]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b2a      	ldr	r3, [pc, #168]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 800208e:	492e      	ldr	r1, [pc, #184]	@ (8002148 <HAL_RCC_OscConfig+0x614>)
 8002090:	400a      	ands	r2, r1
 8002092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7fe fe7a 	bl	8000d8c <HAL_GetTick>
 8002098:	0003      	movs	r3, r0
 800209a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209e:	f7fe fe75 	bl	8000d8c <HAL_GetTick>
 80020a2:	0002      	movs	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e03e      	b.n	800212e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b0:	4b21      	ldr	r3, [pc, #132]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	2380      	movs	r3, #128	@ 0x80
 80020b6:	049b      	lsls	r3, r3, #18
 80020b8:	4013      	ands	r3, r2
 80020ba:	d1f0      	bne.n	800209e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80020bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 80020c2:	4923      	ldr	r1, [pc, #140]	@ (8002150 <HAL_RCC_OscConfig+0x61c>)
 80020c4:	400a      	ands	r2, r1
 80020c6:	60da      	str	r2, [r3, #12]
 80020c8:	e030      	b.n	800212c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e02b      	b.n	800212e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80020d6:	4b18      	ldr	r3, [pc, #96]	@ (8002138 <HAL_RCC_OscConfig+0x604>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	2203      	movs	r2, #3
 80020e0:	401a      	ands	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d11e      	bne.n	8002128 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	2270      	movs	r2, #112	@ 0x70
 80020ee:	401a      	ands	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d117      	bne.n	8002128 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	23fe      	movs	r3, #254	@ 0xfe
 80020fc:	01db      	lsls	r3, r3, #7
 80020fe:	401a      	ands	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002104:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002106:	429a      	cmp	r2, r3
 8002108:	d10e      	bne.n	8002128 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	23f8      	movs	r3, #248	@ 0xf8
 800210e:	039b      	lsls	r3, r3, #14
 8002110:	401a      	ands	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002116:	429a      	cmp	r2, r3
 8002118:	d106      	bne.n	8002128 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	0f5b      	lsrs	r3, r3, #29
 800211e:	075a      	lsls	r2, r3, #29
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	0018      	movs	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	b008      	add	sp, #32
 8002134:	bd80      	pop	{r7, pc}
 8002136:	46c0      	nop			@ (mov r8, r8)
 8002138:	40021000 	.word	0x40021000
 800213c:	40007000 	.word	0x40007000
 8002140:	00001388 	.word	0x00001388
 8002144:	efffffff 	.word	0xefffffff
 8002148:	feffffff 	.word	0xfeffffff
 800214c:	1fc1808c 	.word	0x1fc1808c
 8002150:	effefffc 	.word	0xeffefffc

08002154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e0e9      	b.n	800233c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002168:	4b76      	ldr	r3, [pc, #472]	@ (8002344 <HAL_RCC_ClockConfig+0x1f0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2207      	movs	r2, #7
 800216e:	4013      	ands	r3, r2
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d91e      	bls.n	80021b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002176:	4b73      	ldr	r3, [pc, #460]	@ (8002344 <HAL_RCC_ClockConfig+0x1f0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2207      	movs	r2, #7
 800217c:	4393      	bics	r3, r2
 800217e:	0019      	movs	r1, r3
 8002180:	4b70      	ldr	r3, [pc, #448]	@ (8002344 <HAL_RCC_ClockConfig+0x1f0>)
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002188:	f7fe fe00 	bl	8000d8c <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002190:	e009      	b.n	80021a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002192:	f7fe fdfb 	bl	8000d8c <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	4a6a      	ldr	r2, [pc, #424]	@ (8002348 <HAL_RCC_ClockConfig+0x1f4>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e0ca      	b.n	800233c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021a6:	4b67      	ldr	r3, [pc, #412]	@ (8002344 <HAL_RCC_ClockConfig+0x1f0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2207      	movs	r2, #7
 80021ac:	4013      	ands	r3, r2
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d1ee      	bne.n	8002192 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2202      	movs	r2, #2
 80021ba:	4013      	ands	r3, r2
 80021bc:	d015      	beq.n	80021ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2204      	movs	r2, #4
 80021c4:	4013      	ands	r3, r2
 80021c6:	d006      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80021c8:	4b60      	ldr	r3, [pc, #384]	@ (800234c <HAL_RCC_ClockConfig+0x1f8>)
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	4b5f      	ldr	r3, [pc, #380]	@ (800234c <HAL_RCC_ClockConfig+0x1f8>)
 80021ce:	21e0      	movs	r1, #224	@ 0xe0
 80021d0:	01c9      	lsls	r1, r1, #7
 80021d2:	430a      	orrs	r2, r1
 80021d4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d6:	4b5d      	ldr	r3, [pc, #372]	@ (800234c <HAL_RCC_ClockConfig+0x1f8>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	4a5d      	ldr	r2, [pc, #372]	@ (8002350 <HAL_RCC_ClockConfig+0x1fc>)
 80021dc:	4013      	ands	r3, r2
 80021de:	0019      	movs	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	4b59      	ldr	r3, [pc, #356]	@ (800234c <HAL_RCC_ClockConfig+0x1f8>)
 80021e6:	430a      	orrs	r2, r1
 80021e8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2201      	movs	r2, #1
 80021f0:	4013      	ands	r3, r2
 80021f2:	d057      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d107      	bne.n	800220c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021fc:	4b53      	ldr	r3, [pc, #332]	@ (800234c <HAL_RCC_ClockConfig+0x1f8>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	2380      	movs	r3, #128	@ 0x80
 8002202:	029b      	lsls	r3, r3, #10
 8002204:	4013      	ands	r3, r2
 8002206:	d12b      	bne.n	8002260 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e097      	b.n	800233c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b02      	cmp	r3, #2
 8002212:	d107      	bne.n	8002224 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002214:	4b4d      	ldr	r3, [pc, #308]	@ (800234c <HAL_RCC_ClockConfig+0x1f8>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	2380      	movs	r3, #128	@ 0x80
 800221a:	049b      	lsls	r3, r3, #18
 800221c:	4013      	ands	r3, r2
 800221e:	d11f      	bne.n	8002260 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e08b      	b.n	800233c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d107      	bne.n	800223c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800222c:	4b47      	ldr	r3, [pc, #284]	@ (800234c <HAL_RCC_ClockConfig+0x1f8>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	2380      	movs	r3, #128	@ 0x80
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4013      	ands	r3, r2
 8002236:	d113      	bne.n	8002260 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e07f      	b.n	800233c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b03      	cmp	r3, #3
 8002242:	d106      	bne.n	8002252 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002244:	4b41      	ldr	r3, [pc, #260]	@ (800234c <HAL_RCC_ClockConfig+0x1f8>)
 8002246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002248:	2202      	movs	r2, #2
 800224a:	4013      	ands	r3, r2
 800224c:	d108      	bne.n	8002260 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e074      	b.n	800233c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002252:	4b3e      	ldr	r3, [pc, #248]	@ (800234c <HAL_RCC_ClockConfig+0x1f8>)
 8002254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002256:	2202      	movs	r2, #2
 8002258:	4013      	ands	r3, r2
 800225a:	d101      	bne.n	8002260 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e06d      	b.n	800233c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002260:	4b3a      	ldr	r3, [pc, #232]	@ (800234c <HAL_RCC_ClockConfig+0x1f8>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2207      	movs	r2, #7
 8002266:	4393      	bics	r3, r2
 8002268:	0019      	movs	r1, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	4b37      	ldr	r3, [pc, #220]	@ (800234c <HAL_RCC_ClockConfig+0x1f8>)
 8002270:	430a      	orrs	r2, r1
 8002272:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002274:	f7fe fd8a 	bl	8000d8c <HAL_GetTick>
 8002278:	0003      	movs	r3, r0
 800227a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227c:	e009      	b.n	8002292 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800227e:	f7fe fd85 	bl	8000d8c <HAL_GetTick>
 8002282:	0002      	movs	r2, r0
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	4a2f      	ldr	r2, [pc, #188]	@ (8002348 <HAL_RCC_ClockConfig+0x1f4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e054      	b.n	800233c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002292:	4b2e      	ldr	r3, [pc, #184]	@ (800234c <HAL_RCC_ClockConfig+0x1f8>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2238      	movs	r2, #56	@ 0x38
 8002298:	401a      	ands	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d1ec      	bne.n	800227e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022a4:	4b27      	ldr	r3, [pc, #156]	@ (8002344 <HAL_RCC_ClockConfig+0x1f0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2207      	movs	r2, #7
 80022aa:	4013      	ands	r3, r2
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d21e      	bcs.n	80022f0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b2:	4b24      	ldr	r3, [pc, #144]	@ (8002344 <HAL_RCC_ClockConfig+0x1f0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2207      	movs	r2, #7
 80022b8:	4393      	bics	r3, r2
 80022ba:	0019      	movs	r1, r3
 80022bc:	4b21      	ldr	r3, [pc, #132]	@ (8002344 <HAL_RCC_ClockConfig+0x1f0>)
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022c4:	f7fe fd62 	bl	8000d8c <HAL_GetTick>
 80022c8:	0003      	movs	r3, r0
 80022ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022cc:	e009      	b.n	80022e2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ce:	f7fe fd5d 	bl	8000d8c <HAL_GetTick>
 80022d2:	0002      	movs	r2, r0
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002348 <HAL_RCC_ClockConfig+0x1f4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e02c      	b.n	800233c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022e2:	4b18      	ldr	r3, [pc, #96]	@ (8002344 <HAL_RCC_ClockConfig+0x1f0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2207      	movs	r2, #7
 80022e8:	4013      	ands	r3, r2
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d1ee      	bne.n	80022ce <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2204      	movs	r2, #4
 80022f6:	4013      	ands	r3, r2
 80022f8:	d009      	beq.n	800230e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80022fa:	4b14      	ldr	r3, [pc, #80]	@ (800234c <HAL_RCC_ClockConfig+0x1f8>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	4a15      	ldr	r2, [pc, #84]	@ (8002354 <HAL_RCC_ClockConfig+0x200>)
 8002300:	4013      	ands	r3, r2
 8002302:	0019      	movs	r1, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	4b10      	ldr	r3, [pc, #64]	@ (800234c <HAL_RCC_ClockConfig+0x1f8>)
 800230a:	430a      	orrs	r2, r1
 800230c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800230e:	f000 f829 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8002312:	0001      	movs	r1, r0
 8002314:	4b0d      	ldr	r3, [pc, #52]	@ (800234c <HAL_RCC_ClockConfig+0x1f8>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	220f      	movs	r2, #15
 800231c:	401a      	ands	r2, r3
 800231e:	4b0e      	ldr	r3, [pc, #56]	@ (8002358 <HAL_RCC_ClockConfig+0x204>)
 8002320:	0092      	lsls	r2, r2, #2
 8002322:	58d3      	ldr	r3, [r2, r3]
 8002324:	221f      	movs	r2, #31
 8002326:	4013      	ands	r3, r2
 8002328:	000a      	movs	r2, r1
 800232a:	40da      	lsrs	r2, r3
 800232c:	4b0b      	ldr	r3, [pc, #44]	@ (800235c <HAL_RCC_ClockConfig+0x208>)
 800232e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002330:	4b0b      	ldr	r3, [pc, #44]	@ (8002360 <HAL_RCC_ClockConfig+0x20c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	0018      	movs	r0, r3
 8002336:	f7fe fccd 	bl	8000cd4 <HAL_InitTick>
 800233a:	0003      	movs	r3, r0
}
 800233c:	0018      	movs	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	b004      	add	sp, #16
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40022000 	.word	0x40022000
 8002348:	00001388 	.word	0x00001388
 800234c:	40021000 	.word	0x40021000
 8002350:	fffff0ff 	.word	0xfffff0ff
 8002354:	ffff8fff 	.word	0xffff8fff
 8002358:	08004460 	.word	0x08004460
 800235c:	20000000 	.word	0x20000000
 8002360:	20000004 	.word	0x20000004

08002364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800236a:	4b3c      	ldr	r3, [pc, #240]	@ (800245c <HAL_RCC_GetSysClockFreq+0xf8>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2238      	movs	r2, #56	@ 0x38
 8002370:	4013      	ands	r3, r2
 8002372:	d10f      	bne.n	8002394 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002374:	4b39      	ldr	r3, [pc, #228]	@ (800245c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	0adb      	lsrs	r3, r3, #11
 800237a:	2207      	movs	r2, #7
 800237c:	4013      	ands	r3, r2
 800237e:	2201      	movs	r2, #1
 8002380:	409a      	lsls	r2, r3
 8002382:	0013      	movs	r3, r2
 8002384:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002386:	6839      	ldr	r1, [r7, #0]
 8002388:	4835      	ldr	r0, [pc, #212]	@ (8002460 <HAL_RCC_GetSysClockFreq+0xfc>)
 800238a:	f7fd feb9 	bl	8000100 <__udivsi3>
 800238e:	0003      	movs	r3, r0
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	e05d      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002394:	4b31      	ldr	r3, [pc, #196]	@ (800245c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2238      	movs	r2, #56	@ 0x38
 800239a:	4013      	ands	r3, r2
 800239c:	2b08      	cmp	r3, #8
 800239e:	d102      	bne.n	80023a6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023a0:	4b30      	ldr	r3, [pc, #192]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x100>)
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	e054      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023a6:	4b2d      	ldr	r3, [pc, #180]	@ (800245c <HAL_RCC_GetSysClockFreq+0xf8>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2238      	movs	r2, #56	@ 0x38
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b10      	cmp	r3, #16
 80023b0:	d138      	bne.n	8002424 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80023b2:	4b2a      	ldr	r3, [pc, #168]	@ (800245c <HAL_RCC_GetSysClockFreq+0xf8>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	2203      	movs	r2, #3
 80023b8:	4013      	ands	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023bc:	4b27      	ldr	r3, [pc, #156]	@ (800245c <HAL_RCC_GetSysClockFreq+0xf8>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	2207      	movs	r2, #7
 80023c4:	4013      	ands	r3, r2
 80023c6:	3301      	adds	r3, #1
 80023c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d10d      	bne.n	80023ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	4824      	ldr	r0, [pc, #144]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x100>)
 80023d4:	f7fd fe94 	bl	8000100 <__udivsi3>
 80023d8:	0003      	movs	r3, r0
 80023da:	0019      	movs	r1, r3
 80023dc:	4b1f      	ldr	r3, [pc, #124]	@ (800245c <HAL_RCC_GetSysClockFreq+0xf8>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	227f      	movs	r2, #127	@ 0x7f
 80023e4:	4013      	ands	r3, r2
 80023e6:	434b      	muls	r3, r1
 80023e8:	617b      	str	r3, [r7, #20]
        break;
 80023ea:	e00d      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	481c      	ldr	r0, [pc, #112]	@ (8002460 <HAL_RCC_GetSysClockFreq+0xfc>)
 80023f0:	f7fd fe86 	bl	8000100 <__udivsi3>
 80023f4:	0003      	movs	r3, r0
 80023f6:	0019      	movs	r1, r3
 80023f8:	4b18      	ldr	r3, [pc, #96]	@ (800245c <HAL_RCC_GetSysClockFreq+0xf8>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	227f      	movs	r2, #127	@ 0x7f
 8002400:	4013      	ands	r3, r2
 8002402:	434b      	muls	r3, r1
 8002404:	617b      	str	r3, [r7, #20]
        break;
 8002406:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002408:	4b14      	ldr	r3, [pc, #80]	@ (800245c <HAL_RCC_GetSysClockFreq+0xf8>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	0f5b      	lsrs	r3, r3, #29
 800240e:	2207      	movs	r2, #7
 8002410:	4013      	ands	r3, r2
 8002412:	3301      	adds	r3, #1
 8002414:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	6978      	ldr	r0, [r7, #20]
 800241a:	f7fd fe71 	bl	8000100 <__udivsi3>
 800241e:	0003      	movs	r3, r0
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	e015      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002424:	4b0d      	ldr	r3, [pc, #52]	@ (800245c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2238      	movs	r2, #56	@ 0x38
 800242a:	4013      	ands	r3, r2
 800242c:	2b20      	cmp	r3, #32
 800242e:	d103      	bne.n	8002438 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002430:	2380      	movs	r3, #128	@ 0x80
 8002432:	021b      	lsls	r3, r3, #8
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	e00b      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002438:	4b08      	ldr	r3, [pc, #32]	@ (800245c <HAL_RCC_GetSysClockFreq+0xf8>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	2238      	movs	r2, #56	@ 0x38
 800243e:	4013      	ands	r3, r2
 8002440:	2b18      	cmp	r3, #24
 8002442:	d103      	bne.n	800244c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002444:	23fa      	movs	r3, #250	@ 0xfa
 8002446:	01db      	lsls	r3, r3, #7
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	e001      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002450:	693b      	ldr	r3, [r7, #16]
}
 8002452:	0018      	movs	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	b006      	add	sp, #24
 8002458:	bd80      	pop	{r7, pc}
 800245a:	46c0      	nop			@ (mov r8, r8)
 800245c:	40021000 	.word	0x40021000
 8002460:	00f42400 	.word	0x00f42400
 8002464:	007a1200 	.word	0x007a1200

08002468 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800246c:	4b02      	ldr	r3, [pc, #8]	@ (8002478 <HAL_RCC_GetHCLKFreq+0x10>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	0018      	movs	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			@ (mov r8, r8)
 8002478:	20000000 	.word	0x20000000

0800247c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800247c:	b5b0      	push	{r4, r5, r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002480:	f7ff fff2 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 8002484:	0004      	movs	r4, r0
 8002486:	f7ff fb49 	bl	8001b1c <LL_RCC_GetAPB1Prescaler>
 800248a:	0003      	movs	r3, r0
 800248c:	0b1a      	lsrs	r2, r3, #12
 800248e:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002490:	0092      	lsls	r2, r2, #2
 8002492:	58d3      	ldr	r3, [r2, r3]
 8002494:	221f      	movs	r2, #31
 8002496:	4013      	ands	r3, r2
 8002498:	40dc      	lsrs	r4, r3
 800249a:	0023      	movs	r3, r4
}
 800249c:	0018      	movs	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	bdb0      	pop	{r4, r5, r7, pc}
 80024a2:	46c0      	nop			@ (mov r8, r8)
 80024a4:	080044a0 	.word	0x080044a0

080024a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80024b0:	2313      	movs	r3, #19
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024b8:	2312      	movs	r3, #18
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	2380      	movs	r3, #128	@ 0x80
 80024c6:	029b      	lsls	r3, r3, #10
 80024c8:	4013      	ands	r3, r2
 80024ca:	d100      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x26>
 80024cc:	e0a3      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ce:	2011      	movs	r0, #17
 80024d0:	183b      	adds	r3, r7, r0
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024d6:	4b7f      	ldr	r3, [pc, #508]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80024d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024da:	2380      	movs	r3, #128	@ 0x80
 80024dc:	055b      	lsls	r3, r3, #21
 80024de:	4013      	ands	r3, r2
 80024e0:	d110      	bne.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e2:	4b7c      	ldr	r3, [pc, #496]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80024e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024e6:	4b7b      	ldr	r3, [pc, #492]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80024e8:	2180      	movs	r1, #128	@ 0x80
 80024ea:	0549      	lsls	r1, r1, #21
 80024ec:	430a      	orrs	r2, r1
 80024ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80024f0:	4b78      	ldr	r3, [pc, #480]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80024f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024f4:	2380      	movs	r3, #128	@ 0x80
 80024f6:	055b      	lsls	r3, r3, #21
 80024f8:	4013      	ands	r3, r2
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024fe:	183b      	adds	r3, r7, r0
 8002500:	2201      	movs	r2, #1
 8002502:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002504:	4b74      	ldr	r3, [pc, #464]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b73      	ldr	r3, [pc, #460]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800250a:	2180      	movs	r1, #128	@ 0x80
 800250c:	0049      	lsls	r1, r1, #1
 800250e:	430a      	orrs	r2, r1
 8002510:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002512:	f7fe fc3b 	bl	8000d8c <HAL_GetTick>
 8002516:	0003      	movs	r3, r0
 8002518:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800251a:	e00b      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800251c:	f7fe fc36 	bl	8000d8c <HAL_GetTick>
 8002520:	0002      	movs	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d904      	bls.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800252a:	2313      	movs	r3, #19
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	2203      	movs	r2, #3
 8002530:	701a      	strb	r2, [r3, #0]
        break;
 8002532:	e005      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002534:	4b68      	ldr	r3, [pc, #416]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	2380      	movs	r3, #128	@ 0x80
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4013      	ands	r3, r2
 800253e:	d0ed      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002540:	2313      	movs	r3, #19
 8002542:	18fb      	adds	r3, r7, r3
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d154      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800254a:	4b62      	ldr	r3, [pc, #392]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800254c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800254e:	23c0      	movs	r3, #192	@ 0xc0
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4013      	ands	r3, r2
 8002554:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d019      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	429a      	cmp	r2, r3
 8002564:	d014      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002566:	4b5b      	ldr	r3, [pc, #364]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256a:	4a5c      	ldr	r2, [pc, #368]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800256c:	4013      	ands	r3, r2
 800256e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002570:	4b58      	ldr	r3, [pc, #352]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002572:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002574:	4b57      	ldr	r3, [pc, #348]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002576:	2180      	movs	r1, #128	@ 0x80
 8002578:	0249      	lsls	r1, r1, #9
 800257a:	430a      	orrs	r2, r1
 800257c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800257e:	4b55      	ldr	r3, [pc, #340]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002580:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002582:	4b54      	ldr	r3, [pc, #336]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002584:	4956      	ldr	r1, [pc, #344]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002586:	400a      	ands	r2, r1
 8002588:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800258a:	4b52      	ldr	r3, [pc, #328]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2201      	movs	r2, #1
 8002594:	4013      	ands	r3, r2
 8002596:	d016      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7fe fbf8 	bl	8000d8c <HAL_GetTick>
 800259c:	0003      	movs	r3, r0
 800259e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a0:	e00c      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7fe fbf3 	bl	8000d8c <HAL_GetTick>
 80025a6:	0002      	movs	r2, r0
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	4a4d      	ldr	r2, [pc, #308]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d904      	bls.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80025b2:	2313      	movs	r3, #19
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	2203      	movs	r2, #3
 80025b8:	701a      	strb	r2, [r3, #0]
            break;
 80025ba:	e004      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025bc:	4b45      	ldr	r3, [pc, #276]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c0:	2202      	movs	r2, #2
 80025c2:	4013      	ands	r3, r2
 80025c4:	d0ed      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80025c6:	2313      	movs	r3, #19
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10a      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025d0:	4b40      	ldr	r3, [pc, #256]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d4:	4a41      	ldr	r2, [pc, #260]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	0019      	movs	r1, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	4b3d      	ldr	r3, [pc, #244]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025e0:	430a      	orrs	r2, r1
 80025e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025e4:	e00c      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025e6:	2312      	movs	r3, #18
 80025e8:	18fb      	adds	r3, r7, r3
 80025ea:	2213      	movs	r2, #19
 80025ec:	18ba      	adds	r2, r7, r2
 80025ee:	7812      	ldrb	r2, [r2, #0]
 80025f0:	701a      	strb	r2, [r3, #0]
 80025f2:	e005      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f4:	2312      	movs	r3, #18
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	2213      	movs	r2, #19
 80025fa:	18ba      	adds	r2, r7, r2
 80025fc:	7812      	ldrb	r2, [r2, #0]
 80025fe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002600:	2311      	movs	r3, #17
 8002602:	18fb      	adds	r3, r7, r3
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d105      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800260a:	4b32      	ldr	r3, [pc, #200]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800260c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800260e:	4b31      	ldr	r3, [pc, #196]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002610:	4935      	ldr	r1, [pc, #212]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002612:	400a      	ands	r2, r1
 8002614:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2201      	movs	r2, #1
 800261c:	4013      	ands	r3, r2
 800261e:	d009      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002620:	4b2c      	ldr	r3, [pc, #176]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002624:	2203      	movs	r2, #3
 8002626:	4393      	bics	r3, r2
 8002628:	0019      	movs	r1, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	4b29      	ldr	r3, [pc, #164]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002630:	430a      	orrs	r2, r1
 8002632:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2220      	movs	r2, #32
 800263a:	4013      	ands	r3, r2
 800263c:	d009      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800263e:	4b25      	ldr	r3, [pc, #148]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002642:	4a2a      	ldr	r2, [pc, #168]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002644:	4013      	ands	r3, r2
 8002646:	0019      	movs	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	4b21      	ldr	r3, [pc, #132]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800264e:	430a      	orrs	r2, r1
 8002650:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	2380      	movs	r3, #128	@ 0x80
 8002658:	01db      	lsls	r3, r3, #7
 800265a:	4013      	ands	r3, r2
 800265c:	d015      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800265e:	4b1d      	ldr	r3, [pc, #116]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	0899      	lsrs	r1, r3, #2
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691a      	ldr	r2, [r3, #16]
 800266a:	4b1a      	ldr	r3, [pc, #104]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800266c:	430a      	orrs	r2, r1
 800266e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	2380      	movs	r3, #128	@ 0x80
 8002676:	05db      	lsls	r3, r3, #23
 8002678:	429a      	cmp	r2, r3
 800267a:	d106      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800267c:	4b15      	ldr	r3, [pc, #84]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	4b14      	ldr	r3, [pc, #80]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002682:	2180      	movs	r1, #128	@ 0x80
 8002684:	0249      	lsls	r1, r1, #9
 8002686:	430a      	orrs	r2, r1
 8002688:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	2380      	movs	r3, #128	@ 0x80
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	4013      	ands	r3, r2
 8002694:	d016      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002696:	4b0f      	ldr	r3, [pc, #60]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800269a:	4a15      	ldr	r2, [pc, #84]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800269c:	4013      	ands	r3, r2
 800269e:	0019      	movs	r1, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	4b0b      	ldr	r3, [pc, #44]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026a6:	430a      	orrs	r2, r1
 80026a8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	2380      	movs	r3, #128	@ 0x80
 80026b0:	01db      	lsls	r3, r3, #7
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d106      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80026b6:	4b07      	ldr	r3, [pc, #28]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026bc:	2180      	movs	r1, #128	@ 0x80
 80026be:	0249      	lsls	r1, r1, #9
 80026c0:	430a      	orrs	r2, r1
 80026c2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80026c4:	2312      	movs	r3, #18
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	781b      	ldrb	r3, [r3, #0]
}
 80026ca:	0018      	movs	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b006      	add	sp, #24
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	46c0      	nop			@ (mov r8, r8)
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40007000 	.word	0x40007000
 80026dc:	fffffcff 	.word	0xfffffcff
 80026e0:	fffeffff 	.word	0xfffeffff
 80026e4:	00001388 	.word	0x00001388
 80026e8:	efffffff 	.word	0xefffffff
 80026ec:	ffffcfff 	.word	0xffffcfff
 80026f0:	ffff3fff 	.word	0xffff3fff

080026f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e04a      	b.n	800279c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	223d      	movs	r2, #61	@ 0x3d
 800270a:	5c9b      	ldrb	r3, [r3, r2]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d107      	bne.n	8002722 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	223c      	movs	r2, #60	@ 0x3c
 8002716:	2100      	movs	r1, #0
 8002718:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	0018      	movs	r0, r3
 800271e:	f7fe f979 	bl	8000a14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	223d      	movs	r2, #61	@ 0x3d
 8002726:	2102      	movs	r1, #2
 8002728:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3304      	adds	r3, #4
 8002732:	0019      	movs	r1, r3
 8002734:	0010      	movs	r0, r2
 8002736:	f000 fe79 	bl	800342c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2248      	movs	r2, #72	@ 0x48
 800273e:	2101      	movs	r1, #1
 8002740:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	223e      	movs	r2, #62	@ 0x3e
 8002746:	2101      	movs	r1, #1
 8002748:	5499      	strb	r1, [r3, r2]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	223f      	movs	r2, #63	@ 0x3f
 800274e:	2101      	movs	r1, #1
 8002750:	5499      	strb	r1, [r3, r2]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2240      	movs	r2, #64	@ 0x40
 8002756:	2101      	movs	r1, #1
 8002758:	5499      	strb	r1, [r3, r2]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2241      	movs	r2, #65	@ 0x41
 800275e:	2101      	movs	r1, #1
 8002760:	5499      	strb	r1, [r3, r2]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2242      	movs	r2, #66	@ 0x42
 8002766:	2101      	movs	r1, #1
 8002768:	5499      	strb	r1, [r3, r2]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2243      	movs	r2, #67	@ 0x43
 800276e:	2101      	movs	r1, #1
 8002770:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2244      	movs	r2, #68	@ 0x44
 8002776:	2101      	movs	r1, #1
 8002778:	5499      	strb	r1, [r3, r2]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2245      	movs	r2, #69	@ 0x45
 800277e:	2101      	movs	r1, #1
 8002780:	5499      	strb	r1, [r3, r2]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2246      	movs	r2, #70	@ 0x46
 8002786:	2101      	movs	r1, #1
 8002788:	5499      	strb	r1, [r3, r2]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2247      	movs	r2, #71	@ 0x47
 800278e:	2101      	movs	r1, #1
 8002790:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	223d      	movs	r2, #61	@ 0x3d
 8002796:	2101      	movs	r1, #1
 8002798:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	0018      	movs	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	b002      	add	sp, #8
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e04a      	b.n	800284c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	223d      	movs	r2, #61	@ 0x3d
 80027ba:	5c9b      	ldrb	r3, [r3, r2]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d107      	bne.n	80027d2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	223c      	movs	r2, #60	@ 0x3c
 80027c6:	2100      	movs	r1, #0
 80027c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	0018      	movs	r0, r3
 80027ce:	f000 f841 	bl	8002854 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	223d      	movs	r2, #61	@ 0x3d
 80027d6:	2102      	movs	r1, #2
 80027d8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3304      	adds	r3, #4
 80027e2:	0019      	movs	r1, r3
 80027e4:	0010      	movs	r0, r2
 80027e6:	f000 fe21 	bl	800342c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2248      	movs	r2, #72	@ 0x48
 80027ee:	2101      	movs	r1, #1
 80027f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	223e      	movs	r2, #62	@ 0x3e
 80027f6:	2101      	movs	r1, #1
 80027f8:	5499      	strb	r1, [r3, r2]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	223f      	movs	r2, #63	@ 0x3f
 80027fe:	2101      	movs	r1, #1
 8002800:	5499      	strb	r1, [r3, r2]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2240      	movs	r2, #64	@ 0x40
 8002806:	2101      	movs	r1, #1
 8002808:	5499      	strb	r1, [r3, r2]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2241      	movs	r2, #65	@ 0x41
 800280e:	2101      	movs	r1, #1
 8002810:	5499      	strb	r1, [r3, r2]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2242      	movs	r2, #66	@ 0x42
 8002816:	2101      	movs	r1, #1
 8002818:	5499      	strb	r1, [r3, r2]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2243      	movs	r2, #67	@ 0x43
 800281e:	2101      	movs	r1, #1
 8002820:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2244      	movs	r2, #68	@ 0x44
 8002826:	2101      	movs	r1, #1
 8002828:	5499      	strb	r1, [r3, r2]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2245      	movs	r2, #69	@ 0x45
 800282e:	2101      	movs	r1, #1
 8002830:	5499      	strb	r1, [r3, r2]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2246      	movs	r2, #70	@ 0x46
 8002836:	2101      	movs	r1, #1
 8002838:	5499      	strb	r1, [r3, r2]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2247      	movs	r2, #71	@ 0x47
 800283e:	2101      	movs	r1, #1
 8002840:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	223d      	movs	r2, #61	@ 0x3d
 8002846:	2101      	movs	r1, #1
 8002848:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	0018      	movs	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	b002      	add	sp, #8
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800285c:	46c0      	nop			@ (mov r8, r8)
 800285e:	46bd      	mov	sp, r7
 8002860:	b002      	add	sp, #8
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
 8002870:	001a      	movs	r2, r3
 8002872:	1cbb      	adds	r3, r7, #2
 8002874:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002876:	2317      	movs	r3, #23
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	2200      	movs	r2, #0
 800287c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d108      	bne.n	8002896 <HAL_TIM_PWM_Start_DMA+0x32>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	223e      	movs	r2, #62	@ 0x3e
 8002888:	5c9b      	ldrb	r3, [r3, r2]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	3b02      	subs	r3, #2
 800288e:	425a      	negs	r2, r3
 8002890:	4153      	adcs	r3, r2
 8002892:	b2db      	uxtb	r3, r3
 8002894:	e037      	b.n	8002906 <HAL_TIM_PWM_Start_DMA+0xa2>
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b04      	cmp	r3, #4
 800289a:	d108      	bne.n	80028ae <HAL_TIM_PWM_Start_DMA+0x4a>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	223f      	movs	r2, #63	@ 0x3f
 80028a0:	5c9b      	ldrb	r3, [r3, r2]
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	3b02      	subs	r3, #2
 80028a6:	425a      	negs	r2, r3
 80028a8:	4153      	adcs	r3, r2
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	e02b      	b.n	8002906 <HAL_TIM_PWM_Start_DMA+0xa2>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d108      	bne.n	80028c6 <HAL_TIM_PWM_Start_DMA+0x62>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2240      	movs	r2, #64	@ 0x40
 80028b8:	5c9b      	ldrb	r3, [r3, r2]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	3b02      	subs	r3, #2
 80028be:	425a      	negs	r2, r3
 80028c0:	4153      	adcs	r3, r2
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	e01f      	b.n	8002906 <HAL_TIM_PWM_Start_DMA+0xa2>
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b0c      	cmp	r3, #12
 80028ca:	d108      	bne.n	80028de <HAL_TIM_PWM_Start_DMA+0x7a>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2241      	movs	r2, #65	@ 0x41
 80028d0:	5c9b      	ldrb	r3, [r3, r2]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	3b02      	subs	r3, #2
 80028d6:	425a      	negs	r2, r3
 80028d8:	4153      	adcs	r3, r2
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	e013      	b.n	8002906 <HAL_TIM_PWM_Start_DMA+0xa2>
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b10      	cmp	r3, #16
 80028e2:	d108      	bne.n	80028f6 <HAL_TIM_PWM_Start_DMA+0x92>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2242      	movs	r2, #66	@ 0x42
 80028e8:	5c9b      	ldrb	r3, [r3, r2]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	3b02      	subs	r3, #2
 80028ee:	425a      	negs	r2, r3
 80028f0:	4153      	adcs	r3, r2
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	e007      	b.n	8002906 <HAL_TIM_PWM_Start_DMA+0xa2>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2243      	movs	r2, #67	@ 0x43
 80028fa:	5c9b      	ldrb	r3, [r3, r2]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	3b02      	subs	r3, #2
 8002900:	425a      	negs	r2, r3
 8002902:	4153      	adcs	r3, r2
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 800290a:	2302      	movs	r3, #2
 800290c:	e183      	b.n	8002c16 <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d108      	bne.n	8002926 <HAL_TIM_PWM_Start_DMA+0xc2>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	223e      	movs	r2, #62	@ 0x3e
 8002918:	5c9b      	ldrb	r3, [r3, r2]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	3b01      	subs	r3, #1
 800291e:	425a      	negs	r2, r3
 8002920:	4153      	adcs	r3, r2
 8002922:	b2db      	uxtb	r3, r3
 8002924:	e037      	b.n	8002996 <HAL_TIM_PWM_Start_DMA+0x132>
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b04      	cmp	r3, #4
 800292a:	d108      	bne.n	800293e <HAL_TIM_PWM_Start_DMA+0xda>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	223f      	movs	r2, #63	@ 0x3f
 8002930:	5c9b      	ldrb	r3, [r3, r2]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	3b01      	subs	r3, #1
 8002936:	425a      	negs	r2, r3
 8002938:	4153      	adcs	r3, r2
 800293a:	b2db      	uxtb	r3, r3
 800293c:	e02b      	b.n	8002996 <HAL_TIM_PWM_Start_DMA+0x132>
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b08      	cmp	r3, #8
 8002942:	d108      	bne.n	8002956 <HAL_TIM_PWM_Start_DMA+0xf2>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2240      	movs	r2, #64	@ 0x40
 8002948:	5c9b      	ldrb	r3, [r3, r2]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	3b01      	subs	r3, #1
 800294e:	425a      	negs	r2, r3
 8002950:	4153      	adcs	r3, r2
 8002952:	b2db      	uxtb	r3, r3
 8002954:	e01f      	b.n	8002996 <HAL_TIM_PWM_Start_DMA+0x132>
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b0c      	cmp	r3, #12
 800295a:	d108      	bne.n	800296e <HAL_TIM_PWM_Start_DMA+0x10a>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2241      	movs	r2, #65	@ 0x41
 8002960:	5c9b      	ldrb	r3, [r3, r2]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	425a      	negs	r2, r3
 8002968:	4153      	adcs	r3, r2
 800296a:	b2db      	uxtb	r3, r3
 800296c:	e013      	b.n	8002996 <HAL_TIM_PWM_Start_DMA+0x132>
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b10      	cmp	r3, #16
 8002972:	d108      	bne.n	8002986 <HAL_TIM_PWM_Start_DMA+0x122>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2242      	movs	r2, #66	@ 0x42
 8002978:	5c9b      	ldrb	r3, [r3, r2]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	425a      	negs	r2, r3
 8002980:	4153      	adcs	r3, r2
 8002982:	b2db      	uxtb	r3, r3
 8002984:	e007      	b.n	8002996 <HAL_TIM_PWM_Start_DMA+0x132>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2243      	movs	r2, #67	@ 0x43
 800298a:	5c9b      	ldrb	r3, [r3, r2]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	425a      	negs	r2, r3
 8002992:	4153      	adcs	r3, r2
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d035      	beq.n	8002a06 <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_TIM_PWM_Start_DMA+0x144>
 80029a0:	1cbb      	adds	r3, r7, #2
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e134      	b.n	8002c16 <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d104      	bne.n	80029bc <HAL_TIM_PWM_Start_DMA+0x158>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	223e      	movs	r2, #62	@ 0x3e
 80029b6:	2102      	movs	r1, #2
 80029b8:	5499      	strb	r1, [r3, r2]
 80029ba:	e026      	b.n	8002a0a <HAL_TIM_PWM_Start_DMA+0x1a6>
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d104      	bne.n	80029cc <HAL_TIM_PWM_Start_DMA+0x168>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	223f      	movs	r2, #63	@ 0x3f
 80029c6:	2102      	movs	r1, #2
 80029c8:	5499      	strb	r1, [r3, r2]
 80029ca:	e01e      	b.n	8002a0a <HAL_TIM_PWM_Start_DMA+0x1a6>
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d104      	bne.n	80029dc <HAL_TIM_PWM_Start_DMA+0x178>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2240      	movs	r2, #64	@ 0x40
 80029d6:	2102      	movs	r1, #2
 80029d8:	5499      	strb	r1, [r3, r2]
 80029da:	e016      	b.n	8002a0a <HAL_TIM_PWM_Start_DMA+0x1a6>
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b0c      	cmp	r3, #12
 80029e0:	d104      	bne.n	80029ec <HAL_TIM_PWM_Start_DMA+0x188>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2241      	movs	r2, #65	@ 0x41
 80029e6:	2102      	movs	r1, #2
 80029e8:	5499      	strb	r1, [r3, r2]
 80029ea:	e00e      	b.n	8002a0a <HAL_TIM_PWM_Start_DMA+0x1a6>
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b10      	cmp	r3, #16
 80029f0:	d104      	bne.n	80029fc <HAL_TIM_PWM_Start_DMA+0x198>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2242      	movs	r2, #66	@ 0x42
 80029f6:	2102      	movs	r1, #2
 80029f8:	5499      	strb	r1, [r3, r2]
 80029fa:	e006      	b.n	8002a0a <HAL_TIM_PWM_Start_DMA+0x1a6>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2243      	movs	r2, #67	@ 0x43
 8002a00:	2102      	movs	r1, #2
 8002a02:	5499      	strb	r1, [r3, r2]
 8002a04:	e001      	b.n	8002a0a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e105      	b.n	8002c16 <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b0c      	cmp	r3, #12
 8002a0e:	d100      	bne.n	8002a12 <HAL_TIM_PWM_Start_DMA+0x1ae>
 8002a10:	e080      	b.n	8002b14 <HAL_TIM_PWM_Start_DMA+0x2b0>
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b0c      	cmp	r3, #12
 8002a16:	d900      	bls.n	8002a1a <HAL_TIM_PWM_Start_DMA+0x1b6>
 8002a18:	e0a1      	b.n	8002b5e <HAL_TIM_PWM_Start_DMA+0x2fa>
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d054      	beq.n	8002aca <HAL_TIM_PWM_Start_DMA+0x266>
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d900      	bls.n	8002a28 <HAL_TIM_PWM_Start_DMA+0x1c4>
 8002a26:	e09a      	b.n	8002b5e <HAL_TIM_PWM_Start_DMA+0x2fa>
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_TIM_PWM_Start_DMA+0x1d2>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d025      	beq.n	8002a80 <HAL_TIM_PWM_Start_DMA+0x21c>
 8002a34:	e093      	b.n	8002b5e <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3a:	4a79      	ldr	r2, [pc, #484]	@ (8002c20 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002a3c:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a42:	4a78      	ldr	r2, [pc, #480]	@ (8002c24 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002a44:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	4a77      	ldr	r2, [pc, #476]	@ (8002c28 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002a4c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	3334      	adds	r3, #52	@ 0x34
 8002a5a:	001a      	movs	r2, r3
 8002a5c:	1cbb      	adds	r3, r7, #2
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	f7fe fb2a 	bl	80010b8 <HAL_DMA_Start_IT>
 8002a64:	1e03      	subs	r3, r0, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0d4      	b.n	8002c16 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2180      	movs	r1, #128	@ 0x80
 8002a78:	0089      	lsls	r1, r1, #2
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	60da      	str	r2, [r3, #12]
      break;
 8002a7e:	e073      	b.n	8002b68 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a84:	4a66      	ldr	r2, [pc, #408]	@ (8002c20 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002a86:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8c:	4a65      	ldr	r2, [pc, #404]	@ (8002c24 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002a8e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a94:	4a64      	ldr	r2, [pc, #400]	@ (8002c28 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002a96:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3338      	adds	r3, #56	@ 0x38
 8002aa4:	001a      	movs	r2, r3
 8002aa6:	1cbb      	adds	r3, r7, #2
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	f7fe fb05 	bl	80010b8 <HAL_DMA_Start_IT>
 8002aae:	1e03      	subs	r3, r0, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e0af      	b.n	8002c16 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2180      	movs	r1, #128	@ 0x80
 8002ac2:	00c9      	lsls	r1, r1, #3
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	60da      	str	r2, [r3, #12]
      break;
 8002ac8:	e04e      	b.n	8002b68 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ace:	4a54      	ldr	r2, [pc, #336]	@ (8002c20 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002ad0:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad6:	4a53      	ldr	r2, [pc, #332]	@ (8002c24 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002ad8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ade:	4a52      	ldr	r2, [pc, #328]	@ (8002c28 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002ae0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	333c      	adds	r3, #60	@ 0x3c
 8002aee:	001a      	movs	r2, r3
 8002af0:	1cbb      	adds	r3, r7, #2
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	f7fe fae0 	bl	80010b8 <HAL_DMA_Start_IT>
 8002af8:	1e03      	subs	r3, r0, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e08a      	b.n	8002c16 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2180      	movs	r1, #128	@ 0x80
 8002b0c:	0109      	lsls	r1, r1, #4
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	60da      	str	r2, [r3, #12]
      break;
 8002b12:	e029      	b.n	8002b68 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b18:	4a41      	ldr	r2, [pc, #260]	@ (8002c20 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b20:	4a40      	ldr	r2, [pc, #256]	@ (8002c24 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002b22:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b28:	4a3f      	ldr	r2, [pc, #252]	@ (8002c28 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002b2a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	3340      	adds	r3, #64	@ 0x40
 8002b38:	001a      	movs	r2, r3
 8002b3a:	1cbb      	adds	r3, r7, #2
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	f7fe fabb 	bl	80010b8 <HAL_DMA_Start_IT>
 8002b42:	1e03      	subs	r3, r0, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e065      	b.n	8002c16 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2180      	movs	r1, #128	@ 0x80
 8002b56:	0149      	lsls	r1, r1, #5
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	60da      	str	r2, [r3, #12]
      break;
 8002b5c:	e004      	b.n	8002b68 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8002b5e:	2317      	movs	r3, #23
 8002b60:	18fb      	adds	r3, r7, r3
 8002b62:	2201      	movs	r2, #1
 8002b64:	701a      	strb	r2, [r3, #0]
      break;
 8002b66:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002b68:	2317      	movs	r3, #23
 8002b6a:	18fb      	adds	r3, r7, r3
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d14e      	bne.n	8002c10 <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68b9      	ldr	r1, [r7, #8]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f000 ff6c 	bl	8003a58 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a29      	ldr	r2, [pc, #164]	@ (8002c2c <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d009      	beq.n	8002b9e <HAL_TIM_PWM_Start_DMA+0x33a>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a28      	ldr	r2, [pc, #160]	@ (8002c30 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d004      	beq.n	8002b9e <HAL_TIM_PWM_Start_DMA+0x33a>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a26      	ldr	r2, [pc, #152]	@ (8002c34 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <HAL_TIM_PWM_Start_DMA+0x33e>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <HAL_TIM_PWM_Start_DMA+0x340>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2180      	movs	r1, #128	@ 0x80
 8002bb4:	0209      	lsls	r1, r1, #8
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a1b      	ldr	r2, [pc, #108]	@ (8002c2c <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d004      	beq.n	8002bce <HAL_TIM_PWM_Start_DMA+0x36a>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a1b      	ldr	r2, [pc, #108]	@ (8002c38 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d116      	bne.n	8002bfc <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4a19      	ldr	r2, [pc, #100]	@ (8002c3c <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	2b06      	cmp	r3, #6
 8002bde:	d016      	beq.n	8002c0e <HAL_TIM_PWM_Start_DMA+0x3aa>
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	2380      	movs	r3, #128	@ 0x80
 8002be4:	025b      	lsls	r3, r3, #9
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d011      	beq.n	8002c0e <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfa:	e008      	b.n	8002c0e <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2101      	movs	r1, #1
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	e000      	b.n	8002c10 <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c0e:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8002c10:	2317      	movs	r3, #23
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	781b      	ldrb	r3, [r3, #0]
}
 8002c16:	0018      	movs	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	b006      	add	sp, #24
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	46c0      	nop			@ (mov r8, r8)
 8002c20:	08003319 	.word	0x08003319
 8002c24:	080033c3 	.word	0x080033c3
 8002c28:	08003285 	.word	0x08003285
 8002c2c:	40012c00 	.word	0x40012c00
 8002c30:	40014400 	.word	0x40014400
 8002c34:	40014800 	.word	0x40014800
 8002c38:	40000400 	.word	0x40000400
 8002c3c:	00010007 	.word	0x00010007

08002c40 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4a:	230f      	movs	r3, #15
 8002c4c:	18fb      	adds	r3, r7, r3
 8002c4e:	2200      	movs	r2, #0
 8002c50:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b0c      	cmp	r3, #12
 8002c56:	d039      	beq.n	8002ccc <HAL_TIM_PWM_Stop_DMA+0x8c>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2b0c      	cmp	r3, #12
 8002c5c:	d844      	bhi.n	8002ce8 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d025      	beq.n	8002cb0 <HAL_TIM_PWM_Stop_DMA+0x70>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d83e      	bhi.n	8002ce8 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_TIM_PWM_Stop_DMA+0x38>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d00e      	beq.n	8002c94 <HAL_TIM_PWM_Stop_DMA+0x54>
 8002c76:	e037      	b.n	8002ce8 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	495a      	ldr	r1, [pc, #360]	@ (8002dec <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8002c84:	400a      	ands	r2, r1
 8002c86:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f7fe fa99 	bl	80011c4 <HAL_DMA_Abort_IT>
      break;
 8002c92:	e02e      	b.n	8002cf2 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4954      	ldr	r1, [pc, #336]	@ (8002df0 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8002ca0:	400a      	ands	r2, r1
 8002ca2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f7fe fa8b 	bl	80011c4 <HAL_DMA_Abort_IT>
      break;
 8002cae:	e020      	b.n	8002cf2 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	494e      	ldr	r1, [pc, #312]	@ (8002df4 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8002cbc:	400a      	ands	r2, r1
 8002cbe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f7fe fa7d 	bl	80011c4 <HAL_DMA_Abort_IT>
      break;
 8002cca:	e012      	b.n	8002cf2 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4948      	ldr	r1, [pc, #288]	@ (8002df8 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8002cd8:	400a      	ands	r2, r1
 8002cda:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f7fe fa6f 	bl	80011c4 <HAL_DMA_Abort_IT>
      break;
 8002ce6:	e004      	b.n	8002cf2 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8002ce8:	230f      	movs	r3, #15
 8002cea:	18fb      	adds	r3, r7, r3
 8002cec:	2201      	movs	r2, #1
 8002cee:	701a      	strb	r2, [r3, #0]
      break;
 8002cf0:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002cf2:	230f      	movs	r3, #15
 8002cf4:	18fb      	adds	r3, r7, r3
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d000      	beq.n	8002cfe <HAL_TIM_PWM_Stop_DMA+0xbe>
 8002cfc:	e06e      	b.n	8002ddc <HAL_TIM_PWM_Stop_DMA+0x19c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6839      	ldr	r1, [r7, #0]
 8002d04:	2200      	movs	r2, #0
 8002d06:	0018      	movs	r0, r3
 8002d08:	f000 fea6 	bl	8003a58 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a3a      	ldr	r2, [pc, #232]	@ (8002dfc <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d009      	beq.n	8002d2a <HAL_TIM_PWM_Stop_DMA+0xea>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a39      	ldr	r2, [pc, #228]	@ (8002e00 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d004      	beq.n	8002d2a <HAL_TIM_PWM_Stop_DMA+0xea>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a37      	ldr	r2, [pc, #220]	@ (8002e04 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d101      	bne.n	8002d2e <HAL_TIM_PWM_Stop_DMA+0xee>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <HAL_TIM_PWM_Stop_DMA+0xf0>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d013      	beq.n	8002d5c <HAL_TIM_PWM_Stop_DMA+0x11c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	4a33      	ldr	r2, [pc, #204]	@ (8002e08 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d10d      	bne.n	8002d5c <HAL_TIM_PWM_Stop_DMA+0x11c>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	4a31      	ldr	r2, [pc, #196]	@ (8002e0c <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d107      	bne.n	8002d5c <HAL_TIM_PWM_Stop_DMA+0x11c>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	492e      	ldr	r1, [pc, #184]	@ (8002e10 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8002d58:	400a      	ands	r2, r1
 8002d5a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	4a29      	ldr	r2, [pc, #164]	@ (8002e08 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	d10d      	bne.n	8002d84 <HAL_TIM_PWM_Stop_DMA+0x144>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	4a27      	ldr	r2, [pc, #156]	@ (8002e0c <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	d107      	bne.n	8002d84 <HAL_TIM_PWM_Stop_DMA+0x144>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2101      	movs	r1, #1
 8002d80:	438a      	bics	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d104      	bne.n	8002d94 <HAL_TIM_PWM_Stop_DMA+0x154>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	223e      	movs	r2, #62	@ 0x3e
 8002d8e:	2101      	movs	r1, #1
 8002d90:	5499      	strb	r1, [r3, r2]
 8002d92:	e023      	b.n	8002ddc <HAL_TIM_PWM_Stop_DMA+0x19c>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d104      	bne.n	8002da4 <HAL_TIM_PWM_Stop_DMA+0x164>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	223f      	movs	r2, #63	@ 0x3f
 8002d9e:	2101      	movs	r1, #1
 8002da0:	5499      	strb	r1, [r3, r2]
 8002da2:	e01b      	b.n	8002ddc <HAL_TIM_PWM_Stop_DMA+0x19c>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	d104      	bne.n	8002db4 <HAL_TIM_PWM_Stop_DMA+0x174>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2240      	movs	r2, #64	@ 0x40
 8002dae:	2101      	movs	r1, #1
 8002db0:	5499      	strb	r1, [r3, r2]
 8002db2:	e013      	b.n	8002ddc <HAL_TIM_PWM_Stop_DMA+0x19c>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	2b0c      	cmp	r3, #12
 8002db8:	d104      	bne.n	8002dc4 <HAL_TIM_PWM_Stop_DMA+0x184>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2241      	movs	r2, #65	@ 0x41
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	5499      	strb	r1, [r3, r2]
 8002dc2:	e00b      	b.n	8002ddc <HAL_TIM_PWM_Stop_DMA+0x19c>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	2b10      	cmp	r3, #16
 8002dc8:	d104      	bne.n	8002dd4 <HAL_TIM_PWM_Stop_DMA+0x194>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2242      	movs	r2, #66	@ 0x42
 8002dce:	2101      	movs	r1, #1
 8002dd0:	5499      	strb	r1, [r3, r2]
 8002dd2:	e003      	b.n	8002ddc <HAL_TIM_PWM_Stop_DMA+0x19c>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2243      	movs	r2, #67	@ 0x43
 8002dd8:	2101      	movs	r1, #1
 8002dda:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8002ddc:	230f      	movs	r3, #15
 8002dde:	18fb      	adds	r3, r7, r3
 8002de0:	781b      	ldrb	r3, [r3, #0]
}
 8002de2:	0018      	movs	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b004      	add	sp, #16
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	46c0      	nop			@ (mov r8, r8)
 8002dec:	fffffdff 	.word	0xfffffdff
 8002df0:	fffffbff 	.word	0xfffffbff
 8002df4:	fffff7ff 	.word	0xfffff7ff
 8002df8:	ffffefff 	.word	0xffffefff
 8002dfc:	40012c00 	.word	0x40012c00
 8002e00:	40014400 	.word	0x40014400
 8002e04:	40014800 	.word	0x40014800
 8002e08:	00001111 	.word	0x00001111
 8002e0c:	00000444 	.word	0x00000444
 8002e10:	ffff7fff 	.word	0xffff7fff

08002e14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	4013      	ands	r3, r2
 8002e32:	d021      	beq.n	8002e78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2202      	movs	r2, #2
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d01d      	beq.n	8002e78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2203      	movs	r2, #3
 8002e42:	4252      	negs	r2, r2
 8002e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	2203      	movs	r2, #3
 8002e54:	4013      	ands	r3, r2
 8002e56:	d004      	beq.n	8002e62 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f000 f9f2 	bl	8003244 <HAL_TIM_IC_CaptureCallback>
 8002e60:	e007      	b.n	8002e72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	0018      	movs	r0, r3
 8002e66:	f000 f9e5 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f7fd fa5f 	bl	8000330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d022      	beq.n	8002ec6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2204      	movs	r2, #4
 8002e84:	4013      	ands	r3, r2
 8002e86:	d01e      	beq.n	8002ec6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2205      	movs	r2, #5
 8002e8e:	4252      	negs	r2, r2
 8002e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2202      	movs	r2, #2
 8002e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699a      	ldr	r2, [r3, #24]
 8002e9e:	23c0      	movs	r3, #192	@ 0xc0
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d004      	beq.n	8002eb0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f000 f9cb 	bl	8003244 <HAL_TIM_IC_CaptureCallback>
 8002eae:	e007      	b.n	8002ec0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f000 f9be 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f7fd fa38 	bl	8000330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2208      	movs	r2, #8
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d021      	beq.n	8002f12 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2208      	movs	r2, #8
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d01d      	beq.n	8002f12 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2209      	movs	r2, #9
 8002edc:	4252      	negs	r2, r2
 8002ede:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2204      	movs	r2, #4
 8002ee4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	2203      	movs	r2, #3
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d004      	beq.n	8002efc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f000 f9a5 	bl	8003244 <HAL_TIM_IC_CaptureCallback>
 8002efa:	e007      	b.n	8002f0c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	0018      	movs	r0, r3
 8002f00:	f000 f998 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	0018      	movs	r0, r3
 8002f08:	f7fd fa12 	bl	8000330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2210      	movs	r2, #16
 8002f16:	4013      	ands	r3, r2
 8002f18:	d022      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2210      	movs	r2, #16
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d01e      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2211      	movs	r2, #17
 8002f28:	4252      	negs	r2, r2
 8002f2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2208      	movs	r2, #8
 8002f30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69da      	ldr	r2, [r3, #28]
 8002f38:	23c0      	movs	r3, #192	@ 0xc0
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d004      	beq.n	8002f4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	0018      	movs	r0, r3
 8002f44:	f000 f97e 	bl	8003244 <HAL_TIM_IC_CaptureCallback>
 8002f48:	e007      	b.n	8002f5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f000 f971 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	0018      	movs	r0, r3
 8002f56:	f7fd f9eb 	bl	8000330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2201      	movs	r2, #1
 8002f64:	4013      	ands	r3, r2
 8002f66:	d00c      	beq.n	8002f82 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d008      	beq.n	8002f82 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2202      	movs	r2, #2
 8002f76:	4252      	negs	r2, r2
 8002f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f000 f951 	bl	8003224 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2280      	movs	r2, #128	@ 0x80
 8002f86:	4013      	ands	r3, r2
 8002f88:	d104      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	2380      	movs	r3, #128	@ 0x80
 8002f8e:	019b      	lsls	r3, r3, #6
 8002f90:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002f92:	d00b      	beq.n	8002fac <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2280      	movs	r2, #128	@ 0x80
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d007      	beq.n	8002fac <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1e      	ldr	r2, [pc, #120]	@ (800301c <HAL_TIM_IRQHandler+0x208>)
 8002fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f000 fe1e 	bl	8003be8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	2380      	movs	r3, #128	@ 0x80
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d00b      	beq.n	8002fce <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2280      	movs	r2, #128	@ 0x80
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d007      	beq.n	8002fce <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a17      	ldr	r2, [pc, #92]	@ (8003020 <HAL_TIM_IRQHandler+0x20c>)
 8002fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f000 fe15 	bl	8003bf8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2240      	movs	r2, #64	@ 0x40
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d00c      	beq.n	8002ff0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2240      	movs	r2, #64	@ 0x40
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d008      	beq.n	8002ff0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2241      	movs	r2, #65	@ 0x41
 8002fe4:	4252      	negs	r2, r2
 8002fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	0018      	movs	r0, r3
 8002fec:	f000 f93a 	bl	8003264 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d00c      	beq.n	8003012 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d008      	beq.n	8003012 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2221      	movs	r2, #33	@ 0x21
 8003006:	4252      	negs	r2, r2
 8003008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	0018      	movs	r0, r3
 800300e:	f000 fde3 	bl	8003bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003012:	46c0      	nop			@ (mov r8, r8)
 8003014:	46bd      	mov	sp, r7
 8003016:	b004      	add	sp, #16
 8003018:	bd80      	pop	{r7, pc}
 800301a:	46c0      	nop			@ (mov r8, r8)
 800301c:	ffffdf7f 	.word	0xffffdf7f
 8003020:	fffffeff 	.word	0xfffffeff

08003024 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003030:	2317      	movs	r3, #23
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	2200      	movs	r2, #0
 8003036:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	223c      	movs	r2, #60	@ 0x3c
 800303c:	5c9b      	ldrb	r3, [r3, r2]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003042:	2302      	movs	r3, #2
 8003044:	e0e5      	b.n	8003212 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	223c      	movs	r2, #60	@ 0x3c
 800304a:	2101      	movs	r1, #1
 800304c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b14      	cmp	r3, #20
 8003052:	d900      	bls.n	8003056 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003054:	e0d1      	b.n	80031fa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	009a      	lsls	r2, r3, #2
 800305a:	4b70      	ldr	r3, [pc, #448]	@ (800321c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800305c:	18d3      	adds	r3, r2, r3
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	0011      	movs	r1, r2
 800306a:	0018      	movs	r0, r3
 800306c:	f000 fa58 	bl	8003520 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699a      	ldr	r2, [r3, #24]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2108      	movs	r1, #8
 800307c:	430a      	orrs	r2, r1
 800307e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699a      	ldr	r2, [r3, #24]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2104      	movs	r1, #4
 800308c:	438a      	bics	r2, r1
 800308e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6999      	ldr	r1, [r3, #24]
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	691a      	ldr	r2, [r3, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	619a      	str	r2, [r3, #24]
      break;
 80030a2:	e0af      	b.n	8003204 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	0011      	movs	r1, r2
 80030ac:	0018      	movs	r0, r3
 80030ae:	f000 fab7 	bl	8003620 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	699a      	ldr	r2, [r3, #24]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2180      	movs	r1, #128	@ 0x80
 80030be:	0109      	lsls	r1, r1, #4
 80030c0:	430a      	orrs	r2, r1
 80030c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699a      	ldr	r2, [r3, #24]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4954      	ldr	r1, [pc, #336]	@ (8003220 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80030d0:	400a      	ands	r2, r1
 80030d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6999      	ldr	r1, [r3, #24]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	021a      	lsls	r2, r3, #8
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	619a      	str	r2, [r3, #24]
      break;
 80030e8:	e08c      	b.n	8003204 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	0011      	movs	r1, r2
 80030f2:	0018      	movs	r0, r3
 80030f4:	f000 fb12 	bl	800371c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	69da      	ldr	r2, [r3, #28]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2108      	movs	r1, #8
 8003104:	430a      	orrs	r2, r1
 8003106:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	69da      	ldr	r2, [r3, #28]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2104      	movs	r1, #4
 8003114:	438a      	bics	r2, r1
 8003116:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	69d9      	ldr	r1, [r3, #28]
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	61da      	str	r2, [r3, #28]
      break;
 800312a:	e06b      	b.n	8003204 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	0011      	movs	r1, r2
 8003134:	0018      	movs	r0, r3
 8003136:	f000 fb73 	bl	8003820 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69da      	ldr	r2, [r3, #28]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2180      	movs	r1, #128	@ 0x80
 8003146:	0109      	lsls	r1, r1, #4
 8003148:	430a      	orrs	r2, r1
 800314a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	69da      	ldr	r2, [r3, #28]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4932      	ldr	r1, [pc, #200]	@ (8003220 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003158:	400a      	ands	r2, r1
 800315a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	69d9      	ldr	r1, [r3, #28]
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	021a      	lsls	r2, r3, #8
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	61da      	str	r2, [r3, #28]
      break;
 8003170:	e048      	b.n	8003204 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	0011      	movs	r1, r2
 800317a:	0018      	movs	r0, r3
 800317c:	f000 fbb4 	bl	80038e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2108      	movs	r1, #8
 800318c:	430a      	orrs	r2, r1
 800318e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2104      	movs	r1, #4
 800319c:	438a      	bics	r2, r1
 800319e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80031b2:	e027      	b.n	8003204 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	0011      	movs	r1, r2
 80031bc:	0018      	movs	r0, r3
 80031be:	f000 fbed 	bl	800399c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2180      	movs	r1, #128	@ 0x80
 80031ce:	0109      	lsls	r1, r1, #4
 80031d0:	430a      	orrs	r2, r1
 80031d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4910      	ldr	r1, [pc, #64]	@ (8003220 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80031e0:	400a      	ands	r2, r1
 80031e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	021a      	lsls	r2, r3, #8
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80031f8:	e004      	b.n	8003204 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80031fa:	2317      	movs	r3, #23
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	2201      	movs	r2, #1
 8003200:	701a      	strb	r2, [r3, #0]
      break;
 8003202:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	223c      	movs	r2, #60	@ 0x3c
 8003208:	2100      	movs	r1, #0
 800320a:	5499      	strb	r1, [r3, r2]

  return status;
 800320c:	2317      	movs	r3, #23
 800320e:	18fb      	adds	r3, r7, r3
 8003210:	781b      	ldrb	r3, [r3, #0]
}
 8003212:	0018      	movs	r0, r3
 8003214:	46bd      	mov	sp, r7
 8003216:	b006      	add	sp, #24
 8003218:	bd80      	pop	{r7, pc}
 800321a:	46c0      	nop			@ (mov r8, r8)
 800321c:	080044c0 	.word	0x080044c0
 8003220:	fffffbff 	.word	0xfffffbff

08003224 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800322c:	46c0      	nop			@ (mov r8, r8)
 800322e:	46bd      	mov	sp, r7
 8003230:	b002      	add	sp, #8
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800323c:	46c0      	nop			@ (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	b002      	add	sp, #8
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800324c:	46c0      	nop			@ (mov r8, r8)
 800324e:	46bd      	mov	sp, r7
 8003250:	b002      	add	sp, #8
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800325c:	46c0      	nop			@ (mov r8, r8)
 800325e:	46bd      	mov	sp, r7
 8003260:	b002      	add	sp, #8
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800326c:	46c0      	nop			@ (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	b002      	add	sp, #8
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800327c:	46c0      	nop			@ (mov r8, r8)
 800327e:	46bd      	mov	sp, r7
 8003280:	b002      	add	sp, #8
 8003282:	bd80      	pop	{r7, pc}

08003284 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003290:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	429a      	cmp	r2, r3
 800329a:	d107      	bne.n	80032ac <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2201      	movs	r2, #1
 80032a0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	223e      	movs	r2, #62	@ 0x3e
 80032a6:	2101      	movs	r1, #1
 80032a8:	5499      	strb	r1, [r3, r2]
 80032aa:	e02a      	b.n	8003302 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d107      	bne.n	80032c6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2202      	movs	r2, #2
 80032ba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	223f      	movs	r2, #63	@ 0x3f
 80032c0:	2101      	movs	r1, #1
 80032c2:	5499      	strb	r1, [r3, r2]
 80032c4:	e01d      	b.n	8003302 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d107      	bne.n	80032e0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2204      	movs	r2, #4
 80032d4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2240      	movs	r2, #64	@ 0x40
 80032da:	2101      	movs	r1, #1
 80032dc:	5499      	strb	r1, [r3, r2]
 80032de:	e010      	b.n	8003302 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d107      	bne.n	80032fa <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2208      	movs	r2, #8
 80032ee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2241      	movs	r2, #65	@ 0x41
 80032f4:	2101      	movs	r1, #1
 80032f6:	5499      	strb	r1, [r3, r2]
 80032f8:	e003      	b.n	8003302 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	223d      	movs	r2, #61	@ 0x3d
 80032fe:	2101      	movs	r1, #1
 8003300:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	0018      	movs	r0, r3
 8003306:	f7ff ffb5 	bl	8003274 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	771a      	strb	r2, [r3, #28]
}
 8003310:	46c0      	nop			@ (mov r8, r8)
 8003312:	46bd      	mov	sp, r7
 8003314:	b004      	add	sp, #16
 8003316:	bd80      	pop	{r7, pc}

08003318 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003324:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	429a      	cmp	r2, r3
 800332e:	d10b      	bne.n	8003348 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2201      	movs	r2, #1
 8003334:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d136      	bne.n	80033ac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	223e      	movs	r2, #62	@ 0x3e
 8003342:	2101      	movs	r1, #1
 8003344:	5499      	strb	r1, [r3, r2]
 8003346:	e031      	b.n	80033ac <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	429a      	cmp	r2, r3
 8003350:	d10b      	bne.n	800336a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2202      	movs	r2, #2
 8003356:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d125      	bne.n	80033ac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	223f      	movs	r2, #63	@ 0x3f
 8003364:	2101      	movs	r1, #1
 8003366:	5499      	strb	r1, [r3, r2]
 8003368:	e020      	b.n	80033ac <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	429a      	cmp	r2, r3
 8003372:	d10b      	bne.n	800338c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2204      	movs	r2, #4
 8003378:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d114      	bne.n	80033ac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2240      	movs	r2, #64	@ 0x40
 8003386:	2101      	movs	r1, #1
 8003388:	5499      	strb	r1, [r3, r2]
 800338a:	e00f      	b.n	80033ac <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	429a      	cmp	r2, r3
 8003394:	d10a      	bne.n	80033ac <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2208      	movs	r2, #8
 800339a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d103      	bne.n	80033ac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2241      	movs	r2, #65	@ 0x41
 80033a8:	2101      	movs	r1, #1
 80033aa:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	0018      	movs	r0, r3
 80033b0:	f7fc ffbe 	bl	8000330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	771a      	strb	r2, [r3, #28]
}
 80033ba:	46c0      	nop			@ (mov r8, r8)
 80033bc:	46bd      	mov	sp, r7
 80033be:	b004      	add	sp, #16
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ce:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d103      	bne.n	80033e2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2201      	movs	r2, #1
 80033de:	771a      	strb	r2, [r3, #28]
 80033e0:	e019      	b.n	8003416 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d103      	bne.n	80033f4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2202      	movs	r2, #2
 80033f0:	771a      	strb	r2, [r3, #28]
 80033f2:	e010      	b.n	8003416 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d103      	bne.n	8003406 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2204      	movs	r2, #4
 8003402:	771a      	strb	r2, [r3, #28]
 8003404:	e007      	b.n	8003416 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	429a      	cmp	r2, r3
 800340e:	d102      	bne.n	8003416 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2208      	movs	r2, #8
 8003414:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	0018      	movs	r0, r3
 800341a:	f7ff ff1b 	bl	8003254 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	771a      	strb	r2, [r3, #28]
}
 8003424:	46c0      	nop			@ (mov r8, r8)
 8003426:	46bd      	mov	sp, r7
 8003428:	b004      	add	sp, #16
 800342a:	bd80      	pop	{r7, pc}

0800342c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a32      	ldr	r2, [pc, #200]	@ (8003508 <TIM_Base_SetConfig+0xdc>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d003      	beq.n	800344c <TIM_Base_SetConfig+0x20>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a31      	ldr	r2, [pc, #196]	@ (800350c <TIM_Base_SetConfig+0xe0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d108      	bne.n	800345e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2270      	movs	r2, #112	@ 0x70
 8003450:	4393      	bics	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	4313      	orrs	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a29      	ldr	r2, [pc, #164]	@ (8003508 <TIM_Base_SetConfig+0xdc>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d00f      	beq.n	8003486 <TIM_Base_SetConfig+0x5a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a28      	ldr	r2, [pc, #160]	@ (800350c <TIM_Base_SetConfig+0xe0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d00b      	beq.n	8003486 <TIM_Base_SetConfig+0x5a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a27      	ldr	r2, [pc, #156]	@ (8003510 <TIM_Base_SetConfig+0xe4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d007      	beq.n	8003486 <TIM_Base_SetConfig+0x5a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a26      	ldr	r2, [pc, #152]	@ (8003514 <TIM_Base_SetConfig+0xe8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d003      	beq.n	8003486 <TIM_Base_SetConfig+0x5a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a25      	ldr	r2, [pc, #148]	@ (8003518 <TIM_Base_SetConfig+0xec>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d108      	bne.n	8003498 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4a24      	ldr	r2, [pc, #144]	@ (800351c <TIM_Base_SetConfig+0xf0>)
 800348a:	4013      	ands	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4313      	orrs	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2280      	movs	r2, #128	@ 0x80
 800349c:	4393      	bics	r3, r2
 800349e:	001a      	movs	r2, r3
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a11      	ldr	r2, [pc, #68]	@ (8003508 <TIM_Base_SetConfig+0xdc>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d007      	beq.n	80034d6 <TIM_Base_SetConfig+0xaa>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a12      	ldr	r2, [pc, #72]	@ (8003514 <TIM_Base_SetConfig+0xe8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d003      	beq.n	80034d6 <TIM_Base_SetConfig+0xaa>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a11      	ldr	r2, [pc, #68]	@ (8003518 <TIM_Base_SetConfig+0xec>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d103      	bne.n	80034de <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	2201      	movs	r2, #1
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d106      	bne.n	80034fe <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	2201      	movs	r2, #1
 80034f6:	4393      	bics	r3, r2
 80034f8:	001a      	movs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	611a      	str	r2, [r3, #16]
  }
}
 80034fe:	46c0      	nop			@ (mov r8, r8)
 8003500:	46bd      	mov	sp, r7
 8003502:	b004      	add	sp, #16
 8003504:	bd80      	pop	{r7, pc}
 8003506:	46c0      	nop			@ (mov r8, r8)
 8003508:	40012c00 	.word	0x40012c00
 800350c:	40000400 	.word	0x40000400
 8003510:	40002000 	.word	0x40002000
 8003514:	40014400 	.word	0x40014400
 8003518:	40014800 	.word	0x40014800
 800351c:	fffffcff 	.word	0xfffffcff

08003520 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	2201      	movs	r2, #1
 8003536:	4393      	bics	r3, r2
 8003538:	001a      	movs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4a2e      	ldr	r2, [pc, #184]	@ (8003608 <TIM_OC1_SetConfig+0xe8>)
 800354e:	4013      	ands	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2203      	movs	r2, #3
 8003556:	4393      	bics	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4313      	orrs	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2202      	movs	r2, #2
 8003568:	4393      	bics	r3, r2
 800356a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	4313      	orrs	r3, r2
 8003574:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a24      	ldr	r2, [pc, #144]	@ (800360c <TIM_OC1_SetConfig+0xec>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d007      	beq.n	800358e <TIM_OC1_SetConfig+0x6e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a23      	ldr	r2, [pc, #140]	@ (8003610 <TIM_OC1_SetConfig+0xf0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d003      	beq.n	800358e <TIM_OC1_SetConfig+0x6e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a22      	ldr	r2, [pc, #136]	@ (8003614 <TIM_OC1_SetConfig+0xf4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d10c      	bne.n	80035a8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2208      	movs	r2, #8
 8003592:	4393      	bics	r3, r2
 8003594:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	4313      	orrs	r3, r2
 800359e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2204      	movs	r2, #4
 80035a4:	4393      	bics	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a18      	ldr	r2, [pc, #96]	@ (800360c <TIM_OC1_SetConfig+0xec>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d007      	beq.n	80035c0 <TIM_OC1_SetConfig+0xa0>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a17      	ldr	r2, [pc, #92]	@ (8003610 <TIM_OC1_SetConfig+0xf0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d003      	beq.n	80035c0 <TIM_OC1_SetConfig+0xa0>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a16      	ldr	r2, [pc, #88]	@ (8003614 <TIM_OC1_SetConfig+0xf4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d111      	bne.n	80035e4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4a15      	ldr	r2, [pc, #84]	@ (8003618 <TIM_OC1_SetConfig+0xf8>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4a14      	ldr	r2, [pc, #80]	@ (800361c <TIM_OC1_SetConfig+0xfc>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	621a      	str	r2, [r3, #32]
}
 80035fe:	46c0      	nop			@ (mov r8, r8)
 8003600:	46bd      	mov	sp, r7
 8003602:	b006      	add	sp, #24
 8003604:	bd80      	pop	{r7, pc}
 8003606:	46c0      	nop			@ (mov r8, r8)
 8003608:	fffeff8f 	.word	0xfffeff8f
 800360c:	40012c00 	.word	0x40012c00
 8003610:	40014400 	.word	0x40014400
 8003614:	40014800 	.word	0x40014800
 8003618:	fffffeff 	.word	0xfffffeff
 800361c:	fffffdff 	.word	0xfffffdff

08003620 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	2210      	movs	r2, #16
 8003636:	4393      	bics	r3, r2
 8003638:	001a      	movs	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4a2c      	ldr	r2, [pc, #176]	@ (8003700 <TIM_OC2_SetConfig+0xe0>)
 800364e:	4013      	ands	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4a2b      	ldr	r2, [pc, #172]	@ (8003704 <TIM_OC2_SetConfig+0xe4>)
 8003656:	4013      	ands	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	021b      	lsls	r3, r3, #8
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2220      	movs	r2, #32
 800366a:	4393      	bics	r3, r2
 800366c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a22      	ldr	r2, [pc, #136]	@ (8003708 <TIM_OC2_SetConfig+0xe8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d10d      	bne.n	800369e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2280      	movs	r2, #128	@ 0x80
 8003686:	4393      	bics	r3, r2
 8003688:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2240      	movs	r2, #64	@ 0x40
 800369a:	4393      	bics	r3, r2
 800369c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a19      	ldr	r2, [pc, #100]	@ (8003708 <TIM_OC2_SetConfig+0xe8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d007      	beq.n	80036b6 <TIM_OC2_SetConfig+0x96>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a18      	ldr	r2, [pc, #96]	@ (800370c <TIM_OC2_SetConfig+0xec>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d003      	beq.n	80036b6 <TIM_OC2_SetConfig+0x96>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a17      	ldr	r2, [pc, #92]	@ (8003710 <TIM_OC2_SetConfig+0xf0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d113      	bne.n	80036de <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4a16      	ldr	r2, [pc, #88]	@ (8003714 <TIM_OC2_SetConfig+0xf4>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	4a15      	ldr	r2, [pc, #84]	@ (8003718 <TIM_OC2_SetConfig+0xf8>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	621a      	str	r2, [r3, #32]
}
 80036f8:	46c0      	nop			@ (mov r8, r8)
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b006      	add	sp, #24
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	feff8fff 	.word	0xfeff8fff
 8003704:	fffffcff 	.word	0xfffffcff
 8003708:	40012c00 	.word	0x40012c00
 800370c:	40014400 	.word	0x40014400
 8003710:	40014800 	.word	0x40014800
 8003714:	fffffbff 	.word	0xfffffbff
 8003718:	fffff7ff 	.word	0xfffff7ff

0800371c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	4a31      	ldr	r2, [pc, #196]	@ (80037f8 <TIM_OC3_SetConfig+0xdc>)
 8003732:	401a      	ands	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4a2d      	ldr	r2, [pc, #180]	@ (80037fc <TIM_OC3_SetConfig+0xe0>)
 8003748:	4013      	ands	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2203      	movs	r2, #3
 8003750:	4393      	bics	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	4a27      	ldr	r2, [pc, #156]	@ (8003800 <TIM_OC3_SetConfig+0xe4>)
 8003762:	4013      	ands	r3, r2
 8003764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	021b      	lsls	r3, r3, #8
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a23      	ldr	r2, [pc, #140]	@ (8003804 <TIM_OC3_SetConfig+0xe8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d10d      	bne.n	8003796 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	4a22      	ldr	r2, [pc, #136]	@ (8003808 <TIM_OC3_SetConfig+0xec>)
 800377e:	4013      	ands	r3, r2
 8003780:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	4313      	orrs	r3, r2
 800378c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	4a1e      	ldr	r2, [pc, #120]	@ (800380c <TIM_OC3_SetConfig+0xf0>)
 8003792:	4013      	ands	r3, r2
 8003794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a1a      	ldr	r2, [pc, #104]	@ (8003804 <TIM_OC3_SetConfig+0xe8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d007      	beq.n	80037ae <TIM_OC3_SetConfig+0x92>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003810 <TIM_OC3_SetConfig+0xf4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d003      	beq.n	80037ae <TIM_OC3_SetConfig+0x92>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a1a      	ldr	r2, [pc, #104]	@ (8003814 <TIM_OC3_SetConfig+0xf8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d113      	bne.n	80037d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4a19      	ldr	r2, [pc, #100]	@ (8003818 <TIM_OC3_SetConfig+0xfc>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4a18      	ldr	r2, [pc, #96]	@ (800381c <TIM_OC3_SetConfig+0x100>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	621a      	str	r2, [r3, #32]
}
 80037f0:	46c0      	nop			@ (mov r8, r8)
 80037f2:	46bd      	mov	sp, r7
 80037f4:	b006      	add	sp, #24
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	fffffeff 	.word	0xfffffeff
 80037fc:	fffeff8f 	.word	0xfffeff8f
 8003800:	fffffdff 	.word	0xfffffdff
 8003804:	40012c00 	.word	0x40012c00
 8003808:	fffff7ff 	.word	0xfffff7ff
 800380c:	fffffbff 	.word	0xfffffbff
 8003810:	40014400 	.word	0x40014400
 8003814:	40014800 	.word	0x40014800
 8003818:	ffffefff 	.word	0xffffefff
 800381c:	ffffdfff 	.word	0xffffdfff

08003820 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	4a24      	ldr	r2, [pc, #144]	@ (80038c8 <TIM_OC4_SetConfig+0xa8>)
 8003836:	401a      	ands	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4a20      	ldr	r2, [pc, #128]	@ (80038cc <TIM_OC4_SetConfig+0xac>)
 800384c:	4013      	ands	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4a1f      	ldr	r2, [pc, #124]	@ (80038d0 <TIM_OC4_SetConfig+0xb0>)
 8003854:	4013      	ands	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	021b      	lsls	r3, r3, #8
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4313      	orrs	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	4a1b      	ldr	r2, [pc, #108]	@ (80038d4 <TIM_OC4_SetConfig+0xb4>)
 8003868:	4013      	ands	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	031b      	lsls	r3, r3, #12
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	4313      	orrs	r3, r2
 8003876:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a17      	ldr	r2, [pc, #92]	@ (80038d8 <TIM_OC4_SetConfig+0xb8>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d007      	beq.n	8003890 <TIM_OC4_SetConfig+0x70>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a16      	ldr	r2, [pc, #88]	@ (80038dc <TIM_OC4_SetConfig+0xbc>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d003      	beq.n	8003890 <TIM_OC4_SetConfig+0x70>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a15      	ldr	r2, [pc, #84]	@ (80038e0 <TIM_OC4_SetConfig+0xc0>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d109      	bne.n	80038a4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	4a14      	ldr	r2, [pc, #80]	@ (80038e4 <TIM_OC4_SetConfig+0xc4>)
 8003894:	4013      	ands	r3, r2
 8003896:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	019b      	lsls	r3, r3, #6
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	621a      	str	r2, [r3, #32]
}
 80038be:	46c0      	nop			@ (mov r8, r8)
 80038c0:	46bd      	mov	sp, r7
 80038c2:	b006      	add	sp, #24
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	46c0      	nop			@ (mov r8, r8)
 80038c8:	ffffefff 	.word	0xffffefff
 80038cc:	feff8fff 	.word	0xfeff8fff
 80038d0:	fffffcff 	.word	0xfffffcff
 80038d4:	ffffdfff 	.word	0xffffdfff
 80038d8:	40012c00 	.word	0x40012c00
 80038dc:	40014400 	.word	0x40014400
 80038e0:	40014800 	.word	0x40014800
 80038e4:	ffffbfff 	.word	0xffffbfff

080038e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	4a21      	ldr	r2, [pc, #132]	@ (8003984 <TIM_OC5_SetConfig+0x9c>)
 80038fe:	401a      	ands	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4a1d      	ldr	r2, [pc, #116]	@ (8003988 <TIM_OC5_SetConfig+0xa0>)
 8003914:	4013      	ands	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4a19      	ldr	r2, [pc, #100]	@ (800398c <TIM_OC5_SetConfig+0xa4>)
 8003926:	4013      	ands	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	041b      	lsls	r3, r3, #16
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a15      	ldr	r2, [pc, #84]	@ (8003990 <TIM_OC5_SetConfig+0xa8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d007      	beq.n	800394e <TIM_OC5_SetConfig+0x66>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a14      	ldr	r2, [pc, #80]	@ (8003994 <TIM_OC5_SetConfig+0xac>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d003      	beq.n	800394e <TIM_OC5_SetConfig+0x66>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a13      	ldr	r2, [pc, #76]	@ (8003998 <TIM_OC5_SetConfig+0xb0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d109      	bne.n	8003962 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	4a0c      	ldr	r2, [pc, #48]	@ (8003984 <TIM_OC5_SetConfig+0x9c>)
 8003952:	4013      	ands	r3, r2
 8003954:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	021b      	lsls	r3, r3, #8
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	621a      	str	r2, [r3, #32]
}
 800397c:	46c0      	nop			@ (mov r8, r8)
 800397e:	46bd      	mov	sp, r7
 8003980:	b006      	add	sp, #24
 8003982:	bd80      	pop	{r7, pc}
 8003984:	fffeffff 	.word	0xfffeffff
 8003988:	fffeff8f 	.word	0xfffeff8f
 800398c:	fffdffff 	.word	0xfffdffff
 8003990:	40012c00 	.word	0x40012c00
 8003994:	40014400 	.word	0x40014400
 8003998:	40014800 	.word	0x40014800

0800399c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	4a22      	ldr	r2, [pc, #136]	@ (8003a3c <TIM_OC6_SetConfig+0xa0>)
 80039b2:	401a      	ands	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003a40 <TIM_OC6_SetConfig+0xa4>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	021b      	lsls	r3, r3, #8
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	4a1a      	ldr	r2, [pc, #104]	@ (8003a44 <TIM_OC6_SetConfig+0xa8>)
 80039dc:	4013      	ands	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	051b      	lsls	r3, r3, #20
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a16      	ldr	r2, [pc, #88]	@ (8003a48 <TIM_OC6_SetConfig+0xac>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d007      	beq.n	8003a04 <TIM_OC6_SetConfig+0x68>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a15      	ldr	r2, [pc, #84]	@ (8003a4c <TIM_OC6_SetConfig+0xb0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d003      	beq.n	8003a04 <TIM_OC6_SetConfig+0x68>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a14      	ldr	r2, [pc, #80]	@ (8003a50 <TIM_OC6_SetConfig+0xb4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d109      	bne.n	8003a18 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	4a13      	ldr	r2, [pc, #76]	@ (8003a54 <TIM_OC6_SetConfig+0xb8>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	029b      	lsls	r3, r3, #10
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	621a      	str	r2, [r3, #32]
}
 8003a32:	46c0      	nop			@ (mov r8, r8)
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b006      	add	sp, #24
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	46c0      	nop			@ (mov r8, r8)
 8003a3c:	ffefffff 	.word	0xffefffff
 8003a40:	feff8fff 	.word	0xfeff8fff
 8003a44:	ffdfffff 	.word	0xffdfffff
 8003a48:	40012c00 	.word	0x40012c00
 8003a4c:	40014400 	.word	0x40014400
 8003a50:	40014800 	.word	0x40014800
 8003a54:	fffbffff 	.word	0xfffbffff

08003a58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	221f      	movs	r2, #31
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	0013      	movs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	43d2      	mvns	r2, r2
 8003a7a:	401a      	ands	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a1a      	ldr	r2, [r3, #32]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	211f      	movs	r1, #31
 8003a88:	400b      	ands	r3, r1
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4099      	lsls	r1, r3
 8003a8e:	000b      	movs	r3, r1
 8003a90:	431a      	orrs	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	621a      	str	r2, [r3, #32]
}
 8003a96:	46c0      	nop			@ (mov r8, r8)
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b006      	add	sp, #24
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	223c      	movs	r2, #60	@ 0x3c
 8003ab2:	5c9b      	ldrb	r3, [r3, r2]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e06f      	b.n	8003b9c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	223c      	movs	r2, #60	@ 0x3c
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	22ff      	movs	r2, #255	@ 0xff
 8003ac8:	4393      	bics	r3, r2
 8003aca:	001a      	movs	r2, r3
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4a33      	ldr	r2, [pc, #204]	@ (8003ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003ad8:	401a      	ands	r2, r3
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4a30      	ldr	r2, [pc, #192]	@ (8003ba8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4a2e      	ldr	r2, [pc, #184]	@ (8003bac <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003af4:	401a      	ands	r2, r3
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4a2b      	ldr	r2, [pc, #172]	@ (8003bb0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003b02:	401a      	ands	r2, r3
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4a29      	ldr	r2, [pc, #164]	@ (8003bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003b10:	401a      	ands	r2, r3
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4a26      	ldr	r2, [pc, #152]	@ (8003bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003b1e:	401a      	ands	r2, r3
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4a24      	ldr	r2, [pc, #144]	@ (8003bbc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003b2c:	401a      	ands	r2, r3
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	041b      	lsls	r3, r3, #16
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4a21      	ldr	r2, [pc, #132]	@ (8003bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003b3c:	401a      	ands	r2, r3
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1e      	ldr	r2, [pc, #120]	@ (8003bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d11c      	bne.n	8003b8a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003b54:	401a      	ands	r2, r3
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5a:	051b      	lsls	r3, r3, #20
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4a1a      	ldr	r2, [pc, #104]	@ (8003bcc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003b64:	401a      	ands	r2, r3
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4a17      	ldr	r2, [pc, #92]	@ (8003bd0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003b72:	401a      	ands	r2, r3
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4a15      	ldr	r2, [pc, #84]	@ (8003bd4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003b80:	401a      	ands	r2, r3
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	223c      	movs	r2, #60	@ 0x3c
 8003b96:	2100      	movs	r1, #0
 8003b98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b004      	add	sp, #16
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	fffffcff 	.word	0xfffffcff
 8003ba8:	fffffbff 	.word	0xfffffbff
 8003bac:	fffff7ff 	.word	0xfffff7ff
 8003bb0:	ffffefff 	.word	0xffffefff
 8003bb4:	ffffdfff 	.word	0xffffdfff
 8003bb8:	ffffbfff 	.word	0xffffbfff
 8003bbc:	fff0ffff 	.word	0xfff0ffff
 8003bc0:	efffffff 	.word	0xefffffff
 8003bc4:	40012c00 	.word	0x40012c00
 8003bc8:	ff0fffff 	.word	0xff0fffff
 8003bcc:	feffffff 	.word	0xfeffffff
 8003bd0:	fdffffff 	.word	0xfdffffff
 8003bd4:	dfffffff 	.word	0xdfffffff

08003bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003be0:	46c0      	nop			@ (mov r8, r8)
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b002      	add	sp, #8
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bf0:	46c0      	nop			@ (mov r8, r8)
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b002      	add	sp, #8
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c00:	46c0      	nop			@ (mov r8, r8)
 8003c02:	46bd      	mov	sp, r7
 8003c04:	b002      	add	sp, #8
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e046      	b.n	8003ca8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2288      	movs	r2, #136	@ 0x88
 8003c1e:	589b      	ldr	r3, [r3, r2]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d107      	bne.n	8003c34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2284      	movs	r2, #132	@ 0x84
 8003c28:	2100      	movs	r1, #0
 8003c2a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	0018      	movs	r0, r3
 8003c30:	f7fc ff84 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2288      	movs	r2, #136	@ 0x88
 8003c38:	2124      	movs	r1, #36	@ 0x24
 8003c3a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2101      	movs	r1, #1
 8003c48:	438a      	bics	r2, r1
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	0018      	movs	r0, r3
 8003c58:	f000 f996 	bl	8003f88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f000 f828 	bl	8003cb4 <UART_SetConfig>
 8003c64:	0003      	movs	r3, r0
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e01c      	b.n	8003ca8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	490d      	ldr	r1, [pc, #52]	@ (8003cb0 <HAL_UART_Init+0xa8>)
 8003c7a:	400a      	ands	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	212a      	movs	r1, #42	@ 0x2a
 8003c8a:	438a      	bics	r2, r1
 8003c8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2101      	movs	r1, #1
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f000 fa25 	bl	80040f0 <UART_CheckIdleState>
 8003ca6:	0003      	movs	r3, r0
}
 8003ca8:	0018      	movs	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b002      	add	sp, #8
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	ffffb7ff 	.word	0xffffb7ff

08003cb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cbc:	231a      	movs	r3, #26
 8003cbe:	18fb      	adds	r3, r7, r3
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4aa1      	ldr	r2, [pc, #644]	@ (8003f68 <UART_SetConfig+0x2b4>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	0019      	movs	r1, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	4a9c      	ldr	r2, [pc, #624]	@ (8003f6c <UART_SetConfig+0x2b8>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	0019      	movs	r1, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	4a93      	ldr	r2, [pc, #588]	@ (8003f70 <UART_SetConfig+0x2bc>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	0019      	movs	r1, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69fa      	ldr	r2, [r7, #28]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d36:	220f      	movs	r2, #15
 8003d38:	4393      	bics	r3, r2
 8003d3a:	0019      	movs	r1, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a89      	ldr	r2, [pc, #548]	@ (8003f74 <UART_SetConfig+0x2c0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d127      	bne.n	8003da2 <UART_SetConfig+0xee>
 8003d52:	4b89      	ldr	r3, [pc, #548]	@ (8003f78 <UART_SetConfig+0x2c4>)
 8003d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d56:	2203      	movs	r2, #3
 8003d58:	4013      	ands	r3, r2
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	d017      	beq.n	8003d8e <UART_SetConfig+0xda>
 8003d5e:	d81b      	bhi.n	8003d98 <UART_SetConfig+0xe4>
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d00a      	beq.n	8003d7a <UART_SetConfig+0xc6>
 8003d64:	d818      	bhi.n	8003d98 <UART_SetConfig+0xe4>
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <UART_SetConfig+0xbc>
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d00a      	beq.n	8003d84 <UART_SetConfig+0xd0>
 8003d6e:	e013      	b.n	8003d98 <UART_SetConfig+0xe4>
 8003d70:	231b      	movs	r3, #27
 8003d72:	18fb      	adds	r3, r7, r3
 8003d74:	2200      	movs	r2, #0
 8003d76:	701a      	strb	r2, [r3, #0]
 8003d78:	e021      	b.n	8003dbe <UART_SetConfig+0x10a>
 8003d7a:	231b      	movs	r3, #27
 8003d7c:	18fb      	adds	r3, r7, r3
 8003d7e:	2202      	movs	r2, #2
 8003d80:	701a      	strb	r2, [r3, #0]
 8003d82:	e01c      	b.n	8003dbe <UART_SetConfig+0x10a>
 8003d84:	231b      	movs	r3, #27
 8003d86:	18fb      	adds	r3, r7, r3
 8003d88:	2204      	movs	r2, #4
 8003d8a:	701a      	strb	r2, [r3, #0]
 8003d8c:	e017      	b.n	8003dbe <UART_SetConfig+0x10a>
 8003d8e:	231b      	movs	r3, #27
 8003d90:	18fb      	adds	r3, r7, r3
 8003d92:	2208      	movs	r2, #8
 8003d94:	701a      	strb	r2, [r3, #0]
 8003d96:	e012      	b.n	8003dbe <UART_SetConfig+0x10a>
 8003d98:	231b      	movs	r3, #27
 8003d9a:	18fb      	adds	r3, r7, r3
 8003d9c:	2210      	movs	r2, #16
 8003d9e:	701a      	strb	r2, [r3, #0]
 8003da0:	e00d      	b.n	8003dbe <UART_SetConfig+0x10a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a75      	ldr	r2, [pc, #468]	@ (8003f7c <UART_SetConfig+0x2c8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d104      	bne.n	8003db6 <UART_SetConfig+0x102>
 8003dac:	231b      	movs	r3, #27
 8003dae:	18fb      	adds	r3, r7, r3
 8003db0:	2200      	movs	r2, #0
 8003db2:	701a      	strb	r2, [r3, #0]
 8003db4:	e003      	b.n	8003dbe <UART_SetConfig+0x10a>
 8003db6:	231b      	movs	r3, #27
 8003db8:	18fb      	adds	r3, r7, r3
 8003dba:	2210      	movs	r2, #16
 8003dbc:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69da      	ldr	r2, [r3, #28]
 8003dc2:	2380      	movs	r3, #128	@ 0x80
 8003dc4:	021b      	lsls	r3, r3, #8
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d000      	beq.n	8003dcc <UART_SetConfig+0x118>
 8003dca:	e065      	b.n	8003e98 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8003dcc:	231b      	movs	r3, #27
 8003dce:	18fb      	adds	r3, r7, r3
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d015      	beq.n	8003e02 <UART_SetConfig+0x14e>
 8003dd6:	dc18      	bgt.n	8003e0a <UART_SetConfig+0x156>
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d00d      	beq.n	8003df8 <UART_SetConfig+0x144>
 8003ddc:	dc15      	bgt.n	8003e0a <UART_SetConfig+0x156>
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <UART_SetConfig+0x134>
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d005      	beq.n	8003df2 <UART_SetConfig+0x13e>
 8003de6:	e010      	b.n	8003e0a <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003de8:	f7fe fb48 	bl	800247c <HAL_RCC_GetPCLK1Freq>
 8003dec:	0003      	movs	r3, r0
 8003dee:	617b      	str	r3, [r7, #20]
        break;
 8003df0:	e012      	b.n	8003e18 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003df2:	4b63      	ldr	r3, [pc, #396]	@ (8003f80 <UART_SetConfig+0x2cc>)
 8003df4:	617b      	str	r3, [r7, #20]
        break;
 8003df6:	e00f      	b.n	8003e18 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003df8:	f7fe fab4 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	617b      	str	r3, [r7, #20]
        break;
 8003e00:	e00a      	b.n	8003e18 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e02:	2380      	movs	r3, #128	@ 0x80
 8003e04:	021b      	lsls	r3, r3, #8
 8003e06:	617b      	str	r3, [r7, #20]
        break;
 8003e08:	e006      	b.n	8003e18 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e0e:	231a      	movs	r3, #26
 8003e10:	18fb      	adds	r3, r7, r3
 8003e12:	2201      	movs	r2, #1
 8003e14:	701a      	strb	r2, [r3, #0]
        break;
 8003e16:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d100      	bne.n	8003e20 <UART_SetConfig+0x16c>
 8003e1e:	e08d      	b.n	8003f3c <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e24:	4b57      	ldr	r3, [pc, #348]	@ (8003f84 <UART_SetConfig+0x2d0>)
 8003e26:	0052      	lsls	r2, r2, #1
 8003e28:	5ad3      	ldrh	r3, [r2, r3]
 8003e2a:	0019      	movs	r1, r3
 8003e2c:	6978      	ldr	r0, [r7, #20]
 8003e2e:	f7fc f967 	bl	8000100 <__udivsi3>
 8003e32:	0003      	movs	r3, r0
 8003e34:	005a      	lsls	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	085b      	lsrs	r3, r3, #1
 8003e3c:	18d2      	adds	r2, r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	0019      	movs	r1, r3
 8003e44:	0010      	movs	r0, r2
 8003e46:	f7fc f95b 	bl	8000100 <__udivsi3>
 8003e4a:	0003      	movs	r3, r0
 8003e4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	2b0f      	cmp	r3, #15
 8003e52:	d91c      	bls.n	8003e8e <UART_SetConfig+0x1da>
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	2380      	movs	r3, #128	@ 0x80
 8003e58:	025b      	lsls	r3, r3, #9
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d217      	bcs.n	8003e8e <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	200e      	movs	r0, #14
 8003e64:	183b      	adds	r3, r7, r0
 8003e66:	210f      	movs	r1, #15
 8003e68:	438a      	bics	r2, r1
 8003e6a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	085b      	lsrs	r3, r3, #1
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2207      	movs	r2, #7
 8003e74:	4013      	ands	r3, r2
 8003e76:	b299      	uxth	r1, r3
 8003e78:	183b      	adds	r3, r7, r0
 8003e7a:	183a      	adds	r2, r7, r0
 8003e7c:	8812      	ldrh	r2, [r2, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	183a      	adds	r2, r7, r0
 8003e88:	8812      	ldrh	r2, [r2, #0]
 8003e8a:	60da      	str	r2, [r3, #12]
 8003e8c:	e056      	b.n	8003f3c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003e8e:	231a      	movs	r3, #26
 8003e90:	18fb      	adds	r3, r7, r3
 8003e92:	2201      	movs	r2, #1
 8003e94:	701a      	strb	r2, [r3, #0]
 8003e96:	e051      	b.n	8003f3c <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e98:	231b      	movs	r3, #27
 8003e9a:	18fb      	adds	r3, r7, r3
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d015      	beq.n	8003ece <UART_SetConfig+0x21a>
 8003ea2:	dc18      	bgt.n	8003ed6 <UART_SetConfig+0x222>
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d00d      	beq.n	8003ec4 <UART_SetConfig+0x210>
 8003ea8:	dc15      	bgt.n	8003ed6 <UART_SetConfig+0x222>
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <UART_SetConfig+0x200>
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d005      	beq.n	8003ebe <UART_SetConfig+0x20a>
 8003eb2:	e010      	b.n	8003ed6 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eb4:	f7fe fae2 	bl	800247c <HAL_RCC_GetPCLK1Freq>
 8003eb8:	0003      	movs	r3, r0
 8003eba:	617b      	str	r3, [r7, #20]
        break;
 8003ebc:	e012      	b.n	8003ee4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ebe:	4b30      	ldr	r3, [pc, #192]	@ (8003f80 <UART_SetConfig+0x2cc>)
 8003ec0:	617b      	str	r3, [r7, #20]
        break;
 8003ec2:	e00f      	b.n	8003ee4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ec4:	f7fe fa4e 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8003ec8:	0003      	movs	r3, r0
 8003eca:	617b      	str	r3, [r7, #20]
        break;
 8003ecc:	e00a      	b.n	8003ee4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ece:	2380      	movs	r3, #128	@ 0x80
 8003ed0:	021b      	lsls	r3, r3, #8
 8003ed2:	617b      	str	r3, [r7, #20]
        break;
 8003ed4:	e006      	b.n	8003ee4 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003eda:	231a      	movs	r3, #26
 8003edc:	18fb      	adds	r3, r7, r3
 8003ede:	2201      	movs	r2, #1
 8003ee0:	701a      	strb	r2, [r3, #0]
        break;
 8003ee2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d028      	beq.n	8003f3c <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003eee:	4b25      	ldr	r3, [pc, #148]	@ (8003f84 <UART_SetConfig+0x2d0>)
 8003ef0:	0052      	lsls	r2, r2, #1
 8003ef2:	5ad3      	ldrh	r3, [r2, r3]
 8003ef4:	0019      	movs	r1, r3
 8003ef6:	6978      	ldr	r0, [r7, #20]
 8003ef8:	f7fc f902 	bl	8000100 <__udivsi3>
 8003efc:	0003      	movs	r3, r0
 8003efe:	001a      	movs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	085b      	lsrs	r3, r3, #1
 8003f06:	18d2      	adds	r2, r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	0019      	movs	r1, r3
 8003f0e:	0010      	movs	r0, r2
 8003f10:	f7fc f8f6 	bl	8000100 <__udivsi3>
 8003f14:	0003      	movs	r3, r0
 8003f16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	2b0f      	cmp	r3, #15
 8003f1c:	d90a      	bls.n	8003f34 <UART_SetConfig+0x280>
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	2380      	movs	r3, #128	@ 0x80
 8003f22:	025b      	lsls	r3, r3, #9
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d205      	bcs.n	8003f34 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	60da      	str	r2, [r3, #12]
 8003f32:	e003      	b.n	8003f3c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003f34:	231a      	movs	r3, #26
 8003f36:	18fb      	adds	r3, r7, r3
 8003f38:	2201      	movs	r2, #1
 8003f3a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	226a      	movs	r2, #106	@ 0x6a
 8003f40:	2101      	movs	r1, #1
 8003f42:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2268      	movs	r2, #104	@ 0x68
 8003f48:	2101      	movs	r1, #1
 8003f4a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003f58:	231a      	movs	r3, #26
 8003f5a:	18fb      	adds	r3, r7, r3
 8003f5c:	781b      	ldrb	r3, [r3, #0]
}
 8003f5e:	0018      	movs	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	b008      	add	sp, #32
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	46c0      	nop			@ (mov r8, r8)
 8003f68:	cfff69f3 	.word	0xcfff69f3
 8003f6c:	ffffcfff 	.word	0xffffcfff
 8003f70:	11fff4ff 	.word	0x11fff4ff
 8003f74:	40013800 	.word	0x40013800
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	40004400 	.word	0x40004400
 8003f80:	00f42400 	.word	0x00f42400
 8003f84:	08004514 	.word	0x08004514

08003f88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f94:	2208      	movs	r2, #8
 8003f96:	4013      	ands	r3, r2
 8003f98:	d00b      	beq.n	8003fb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	4a4a      	ldr	r2, [pc, #296]	@ (80040cc <UART_AdvFeatureConfig+0x144>)
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	0019      	movs	r1, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	4013      	ands	r3, r2
 8003fba:	d00b      	beq.n	8003fd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	4a43      	ldr	r2, [pc, #268]	@ (80040d0 <UART_AdvFeatureConfig+0x148>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	0019      	movs	r1, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd8:	2202      	movs	r2, #2
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d00b      	beq.n	8003ff6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	4a3b      	ldr	r2, [pc, #236]	@ (80040d4 <UART_AdvFeatureConfig+0x14c>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	0019      	movs	r1, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffa:	2204      	movs	r2, #4
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	d00b      	beq.n	8004018 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4a34      	ldr	r2, [pc, #208]	@ (80040d8 <UART_AdvFeatureConfig+0x150>)
 8004008:	4013      	ands	r3, r2
 800400a:	0019      	movs	r1, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401c:	2210      	movs	r2, #16
 800401e:	4013      	ands	r3, r2
 8004020:	d00b      	beq.n	800403a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	4a2c      	ldr	r2, [pc, #176]	@ (80040dc <UART_AdvFeatureConfig+0x154>)
 800402a:	4013      	ands	r3, r2
 800402c:	0019      	movs	r1, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403e:	2220      	movs	r2, #32
 8004040:	4013      	ands	r3, r2
 8004042:	d00b      	beq.n	800405c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	4a25      	ldr	r2, [pc, #148]	@ (80040e0 <UART_AdvFeatureConfig+0x158>)
 800404c:	4013      	ands	r3, r2
 800404e:	0019      	movs	r1, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004060:	2240      	movs	r2, #64	@ 0x40
 8004062:	4013      	ands	r3, r2
 8004064:	d01d      	beq.n	80040a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	4a1d      	ldr	r2, [pc, #116]	@ (80040e4 <UART_AdvFeatureConfig+0x15c>)
 800406e:	4013      	ands	r3, r2
 8004070:	0019      	movs	r1, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004082:	2380      	movs	r3, #128	@ 0x80
 8004084:	035b      	lsls	r3, r3, #13
 8004086:	429a      	cmp	r2, r3
 8004088:	d10b      	bne.n	80040a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	4a15      	ldr	r2, [pc, #84]	@ (80040e8 <UART_AdvFeatureConfig+0x160>)
 8004092:	4013      	ands	r3, r2
 8004094:	0019      	movs	r1, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a6:	2280      	movs	r2, #128	@ 0x80
 80040a8:	4013      	ands	r3, r2
 80040aa:	d00b      	beq.n	80040c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	4a0e      	ldr	r2, [pc, #56]	@ (80040ec <UART_AdvFeatureConfig+0x164>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	0019      	movs	r1, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	605a      	str	r2, [r3, #4]
  }
}
 80040c4:	46c0      	nop			@ (mov r8, r8)
 80040c6:	46bd      	mov	sp, r7
 80040c8:	b002      	add	sp, #8
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	ffff7fff 	.word	0xffff7fff
 80040d0:	fffdffff 	.word	0xfffdffff
 80040d4:	fffeffff 	.word	0xfffeffff
 80040d8:	fffbffff 	.word	0xfffbffff
 80040dc:	ffffefff 	.word	0xffffefff
 80040e0:	ffffdfff 	.word	0xffffdfff
 80040e4:	ffefffff 	.word	0xffefffff
 80040e8:	ff9fffff 	.word	0xff9fffff
 80040ec:	fff7ffff 	.word	0xfff7ffff

080040f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b092      	sub	sp, #72	@ 0x48
 80040f4:	af02      	add	r7, sp, #8
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2290      	movs	r2, #144	@ 0x90
 80040fc:	2100      	movs	r1, #0
 80040fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004100:	f7fc fe44 	bl	8000d8c <HAL_GetTick>
 8004104:	0003      	movs	r3, r0
 8004106:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2208      	movs	r2, #8
 8004110:	4013      	ands	r3, r2
 8004112:	2b08      	cmp	r3, #8
 8004114:	d12d      	bne.n	8004172 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004118:	2280      	movs	r2, #128	@ 0x80
 800411a:	0391      	lsls	r1, r2, #14
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	4a47      	ldr	r2, [pc, #284]	@ (800423c <UART_CheckIdleState+0x14c>)
 8004120:	9200      	str	r2, [sp, #0]
 8004122:	2200      	movs	r2, #0
 8004124:	f000 f88e 	bl	8004244 <UART_WaitOnFlagUntilTimeout>
 8004128:	1e03      	subs	r3, r0, #0
 800412a:	d022      	beq.n	8004172 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800412c:	f3ef 8310 	mrs	r3, PRIMASK
 8004130:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004134:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004136:	2301      	movs	r3, #1
 8004138:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800413a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413c:	f383 8810 	msr	PRIMASK, r3
}
 8004140:	46c0      	nop			@ (mov r8, r8)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2180      	movs	r1, #128	@ 0x80
 800414e:	438a      	bics	r2, r1
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004154:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004158:	f383 8810 	msr	PRIMASK, r3
}
 800415c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2288      	movs	r2, #136	@ 0x88
 8004162:	2120      	movs	r1, #32
 8004164:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2284      	movs	r2, #132	@ 0x84
 800416a:	2100      	movs	r1, #0
 800416c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e060      	b.n	8004234 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2204      	movs	r2, #4
 800417a:	4013      	ands	r3, r2
 800417c:	2b04      	cmp	r3, #4
 800417e:	d146      	bne.n	800420e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004182:	2280      	movs	r2, #128	@ 0x80
 8004184:	03d1      	lsls	r1, r2, #15
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	4a2c      	ldr	r2, [pc, #176]	@ (800423c <UART_CheckIdleState+0x14c>)
 800418a:	9200      	str	r2, [sp, #0]
 800418c:	2200      	movs	r2, #0
 800418e:	f000 f859 	bl	8004244 <UART_WaitOnFlagUntilTimeout>
 8004192:	1e03      	subs	r3, r0, #0
 8004194:	d03b      	beq.n	800420e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004196:	f3ef 8310 	mrs	r3, PRIMASK
 800419a:	60fb      	str	r3, [r7, #12]
  return(result);
 800419c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800419e:	637b      	str	r3, [r7, #52]	@ 0x34
 80041a0:	2301      	movs	r3, #1
 80041a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f383 8810 	msr	PRIMASK, r3
}
 80041aa:	46c0      	nop			@ (mov r8, r8)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4922      	ldr	r1, [pc, #136]	@ (8004240 <UART_CheckIdleState+0x150>)
 80041b8:	400a      	ands	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f383 8810 	msr	PRIMASK, r3
}
 80041c6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c8:	f3ef 8310 	mrs	r3, PRIMASK
 80041cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80041ce:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80041d2:	2301      	movs	r3, #1
 80041d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	f383 8810 	msr	PRIMASK, r3
}
 80041dc:	46c0      	nop			@ (mov r8, r8)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2101      	movs	r1, #1
 80041ea:	438a      	bics	r2, r1
 80041ec:	609a      	str	r2, [r3, #8]
 80041ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	f383 8810 	msr	PRIMASK, r3
}
 80041f8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	228c      	movs	r2, #140	@ 0x8c
 80041fe:	2120      	movs	r1, #32
 8004200:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2284      	movs	r2, #132	@ 0x84
 8004206:	2100      	movs	r1, #0
 8004208:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e012      	b.n	8004234 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2288      	movs	r2, #136	@ 0x88
 8004212:	2120      	movs	r1, #32
 8004214:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	228c      	movs	r2, #140	@ 0x8c
 800421a:	2120      	movs	r1, #32
 800421c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2284      	movs	r2, #132	@ 0x84
 800422e:	2100      	movs	r1, #0
 8004230:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	0018      	movs	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	b010      	add	sp, #64	@ 0x40
 800423a:	bd80      	pop	{r7, pc}
 800423c:	01ffffff 	.word	0x01ffffff
 8004240:	fffffedf 	.word	0xfffffedf

08004244 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	603b      	str	r3, [r7, #0]
 8004250:	1dfb      	adds	r3, r7, #7
 8004252:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004254:	e051      	b.n	80042fa <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	3301      	adds	r3, #1
 800425a:	d04e      	beq.n	80042fa <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425c:	f7fc fd96 	bl	8000d8c <HAL_GetTick>
 8004260:	0002      	movs	r2, r0
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	429a      	cmp	r2, r3
 800426a:	d302      	bcc.n	8004272 <UART_WaitOnFlagUntilTimeout+0x2e>
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e051      	b.n	800431a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2204      	movs	r2, #4
 800427e:	4013      	ands	r3, r2
 8004280:	d03b      	beq.n	80042fa <UART_WaitOnFlagUntilTimeout+0xb6>
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b80      	cmp	r3, #128	@ 0x80
 8004286:	d038      	beq.n	80042fa <UART_WaitOnFlagUntilTimeout+0xb6>
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2b40      	cmp	r3, #64	@ 0x40
 800428c:	d035      	beq.n	80042fa <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	2208      	movs	r2, #8
 8004296:	4013      	ands	r3, r2
 8004298:	2b08      	cmp	r3, #8
 800429a:	d111      	bne.n	80042c0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2208      	movs	r2, #8
 80042a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	0018      	movs	r0, r3
 80042a8:	f000 f83c 	bl	8004324 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2290      	movs	r2, #144	@ 0x90
 80042b0:	2108      	movs	r1, #8
 80042b2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2284      	movs	r2, #132	@ 0x84
 80042b8:	2100      	movs	r1, #0
 80042ba:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e02c      	b.n	800431a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	69da      	ldr	r2, [r3, #28]
 80042c6:	2380      	movs	r3, #128	@ 0x80
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	401a      	ands	r2, r3
 80042cc:	2380      	movs	r3, #128	@ 0x80
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d112      	bne.n	80042fa <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2280      	movs	r2, #128	@ 0x80
 80042da:	0112      	lsls	r2, r2, #4
 80042dc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	0018      	movs	r0, r3
 80042e2:	f000 f81f 	bl	8004324 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2290      	movs	r2, #144	@ 0x90
 80042ea:	2120      	movs	r1, #32
 80042ec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2284      	movs	r2, #132	@ 0x84
 80042f2:	2100      	movs	r1, #0
 80042f4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e00f      	b.n	800431a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	4013      	ands	r3, r2
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	425a      	negs	r2, r3
 800430a:	4153      	adcs	r3, r2
 800430c:	b2db      	uxtb	r3, r3
 800430e:	001a      	movs	r2, r3
 8004310:	1dfb      	adds	r3, r7, #7
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	429a      	cmp	r2, r3
 8004316:	d09e      	beq.n	8004256 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	0018      	movs	r0, r3
 800431c:	46bd      	mov	sp, r7
 800431e:	b004      	add	sp, #16
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08e      	sub	sp, #56	@ 0x38
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800432c:	f3ef 8310 	mrs	r3, PRIMASK
 8004330:	617b      	str	r3, [r7, #20]
  return(result);
 8004332:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004334:	637b      	str	r3, [r7, #52]	@ 0x34
 8004336:	2301      	movs	r3, #1
 8004338:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	f383 8810 	msr	PRIMASK, r3
}
 8004340:	46c0      	nop			@ (mov r8, r8)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4926      	ldr	r1, [pc, #152]	@ (80043e8 <UART_EndRxTransfer+0xc4>)
 800434e:	400a      	ands	r2, r1
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004354:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	f383 8810 	msr	PRIMASK, r3
}
 800435c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800435e:	f3ef 8310 	mrs	r3, PRIMASK
 8004362:	623b      	str	r3, [r7, #32]
  return(result);
 8004364:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004366:	633b      	str	r3, [r7, #48]	@ 0x30
 8004368:	2301      	movs	r3, #1
 800436a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800436c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436e:	f383 8810 	msr	PRIMASK, r3
}
 8004372:	46c0      	nop			@ (mov r8, r8)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	491b      	ldr	r1, [pc, #108]	@ (80043ec <UART_EndRxTransfer+0xc8>)
 8004380:	400a      	ands	r2, r1
 8004382:	609a      	str	r2, [r3, #8]
 8004384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004386:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438a:	f383 8810 	msr	PRIMASK, r3
}
 800438e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004394:	2b01      	cmp	r3, #1
 8004396:	d118      	bne.n	80043ca <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004398:	f3ef 8310 	mrs	r3, PRIMASK
 800439c:	60bb      	str	r3, [r7, #8]
  return(result);
 800439e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043a2:	2301      	movs	r3, #1
 80043a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f383 8810 	msr	PRIMASK, r3
}
 80043ac:	46c0      	nop			@ (mov r8, r8)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2110      	movs	r1, #16
 80043ba:	438a      	bics	r2, r1
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f383 8810 	msr	PRIMASK, r3
}
 80043c8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	228c      	movs	r2, #140	@ 0x8c
 80043ce:	2120      	movs	r1, #32
 80043d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80043de:	46c0      	nop			@ (mov r8, r8)
 80043e0:	46bd      	mov	sp, r7
 80043e2:	b00e      	add	sp, #56	@ 0x38
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	46c0      	nop			@ (mov r8, r8)
 80043e8:	fffffedf 	.word	0xfffffedf
 80043ec:	effffffe 	.word	0xeffffffe

080043f0 <memset>:
 80043f0:	0003      	movs	r3, r0
 80043f2:	1882      	adds	r2, r0, r2
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d100      	bne.n	80043fa <memset+0xa>
 80043f8:	4770      	bx	lr
 80043fa:	7019      	strb	r1, [r3, #0]
 80043fc:	3301      	adds	r3, #1
 80043fe:	e7f9      	b.n	80043f4 <memset+0x4>

08004400 <__libc_init_array>:
 8004400:	b570      	push	{r4, r5, r6, lr}
 8004402:	2600      	movs	r6, #0
 8004404:	4c0c      	ldr	r4, [pc, #48]	@ (8004438 <__libc_init_array+0x38>)
 8004406:	4d0d      	ldr	r5, [pc, #52]	@ (800443c <__libc_init_array+0x3c>)
 8004408:	1b64      	subs	r4, r4, r5
 800440a:	10a4      	asrs	r4, r4, #2
 800440c:	42a6      	cmp	r6, r4
 800440e:	d109      	bne.n	8004424 <__libc_init_array+0x24>
 8004410:	2600      	movs	r6, #0
 8004412:	f000 f819 	bl	8004448 <_init>
 8004416:	4c0a      	ldr	r4, [pc, #40]	@ (8004440 <__libc_init_array+0x40>)
 8004418:	4d0a      	ldr	r5, [pc, #40]	@ (8004444 <__libc_init_array+0x44>)
 800441a:	1b64      	subs	r4, r4, r5
 800441c:	10a4      	asrs	r4, r4, #2
 800441e:	42a6      	cmp	r6, r4
 8004420:	d105      	bne.n	800442e <__libc_init_array+0x2e>
 8004422:	bd70      	pop	{r4, r5, r6, pc}
 8004424:	00b3      	lsls	r3, r6, #2
 8004426:	58eb      	ldr	r3, [r5, r3]
 8004428:	4798      	blx	r3
 800442a:	3601      	adds	r6, #1
 800442c:	e7ee      	b.n	800440c <__libc_init_array+0xc>
 800442e:	00b3      	lsls	r3, r6, #2
 8004430:	58eb      	ldr	r3, [r5, r3]
 8004432:	4798      	blx	r3
 8004434:	3601      	adds	r6, #1
 8004436:	e7f2      	b.n	800441e <__libc_init_array+0x1e>
 8004438:	0800452c 	.word	0x0800452c
 800443c:	0800452c 	.word	0x0800452c
 8004440:	08004530 	.word	0x08004530
 8004444:	0800452c 	.word	0x0800452c

08004448 <_init>:
 8004448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444a:	46c0      	nop			@ (mov r8, r8)
 800444c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800444e:	bc08      	pop	{r3}
 8004450:	469e      	mov	lr, r3
 8004452:	4770      	bx	lr

08004454 <_fini>:
 8004454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004456:	46c0      	nop			@ (mov r8, r8)
 8004458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800445a:	bc08      	pop	{r3}
 800445c:	469e      	mov	lr, r3
 800445e:	4770      	bx	lr
