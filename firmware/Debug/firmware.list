
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c94  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08006d4c  08006d4c  00007d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007130  08007130  0000905c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007130  08007130  00008130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007138  08007138  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007138  08007138  00008138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800713c  0800713c  0000813c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007140  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  2000005c  0800719c  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  0800719c  0000956c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dff8  00000000  00000000  00009084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c97  00000000  00000000  0002707c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000e8b3  00000000  00000000  0002ad13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f0  00000000  00000000  000395c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013e1  00000000  00000000  0003a7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016da0  00000000  00000000  0003bb99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f7ce  00000000  00000000  00052939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e87d  00000000  00000000  00072107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00100984  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c90  00000000  00000000  001009c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00104658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000005c 	.word	0x2000005c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006d34 	.word	0x08006d34

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000060 	.word	0x20000060
 80000fc:	08006d34 	.word	0x08006d34

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_uqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5c09      	ldrb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			@ (mov r8, r8)

08000138 <__gnu_thumb1_case_shi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5e09      	ldrsh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__udivsi3>:
 800014c:	2200      	movs	r2, #0
 800014e:	0843      	lsrs	r3, r0, #1
 8000150:	428b      	cmp	r3, r1
 8000152:	d374      	bcc.n	800023e <__udivsi3+0xf2>
 8000154:	0903      	lsrs	r3, r0, #4
 8000156:	428b      	cmp	r3, r1
 8000158:	d35f      	bcc.n	800021a <__udivsi3+0xce>
 800015a:	0a03      	lsrs	r3, r0, #8
 800015c:	428b      	cmp	r3, r1
 800015e:	d344      	bcc.n	80001ea <__udivsi3+0x9e>
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d328      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d30d      	bcc.n	8000188 <__udivsi3+0x3c>
 800016c:	22ff      	movs	r2, #255	@ 0xff
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	ba12      	rev	r2, r2
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d302      	bcc.n	800017e <__udivsi3+0x32>
 8000178:	1212      	asrs	r2, r2, #8
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	d065      	beq.n	800024a <__udivsi3+0xfe>
 800017e:	0b03      	lsrs	r3, r0, #12
 8000180:	428b      	cmp	r3, r1
 8000182:	d319      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000184:	e000      	b.n	8000188 <__udivsi3+0x3c>
 8000186:	0a09      	lsrs	r1, r1, #8
 8000188:	0bc3      	lsrs	r3, r0, #15
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x46>
 800018e:	03cb      	lsls	r3, r1, #15
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b83      	lsrs	r3, r0, #14
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x52>
 800019a:	038b      	lsls	r3, r1, #14
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b43      	lsrs	r3, r0, #13
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x5e>
 80001a6:	034b      	lsls	r3, r1, #13
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b03      	lsrs	r3, r0, #12
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x6a>
 80001b2:	030b      	lsls	r3, r1, #12
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0ac3      	lsrs	r3, r0, #11
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x76>
 80001be:	02cb      	lsls	r3, r1, #11
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a83      	lsrs	r3, r0, #10
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x82>
 80001ca:	028b      	lsls	r3, r1, #10
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a43      	lsrs	r3, r0, #9
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x8e>
 80001d6:	024b      	lsls	r3, r1, #9
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a03      	lsrs	r3, r0, #8
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x9a>
 80001e2:	020b      	lsls	r3, r1, #8
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	d2cd      	bcs.n	8000186 <__udivsi3+0x3a>
 80001ea:	09c3      	lsrs	r3, r0, #7
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xa8>
 80001f0:	01cb      	lsls	r3, r1, #7
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0983      	lsrs	r3, r0, #6
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xb4>
 80001fc:	018b      	lsls	r3, r1, #6
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0943      	lsrs	r3, r0, #5
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xc0>
 8000208:	014b      	lsls	r3, r1, #5
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0903      	lsrs	r3, r0, #4
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xcc>
 8000214:	010b      	lsls	r3, r1, #4
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	08c3      	lsrs	r3, r0, #3
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xd8>
 8000220:	00cb      	lsls	r3, r1, #3
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0883      	lsrs	r3, r0, #2
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xe4>
 800022c:	008b      	lsls	r3, r1, #2
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0843      	lsrs	r3, r0, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xf0>
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	1a41      	subs	r1, r0, r1
 8000240:	d200      	bcs.n	8000244 <__udivsi3+0xf8>
 8000242:	4601      	mov	r1, r0
 8000244:	4152      	adcs	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4770      	bx	lr
 800024a:	e7ff      	b.n	800024c <__udivsi3+0x100>
 800024c:	b501      	push	{r0, lr}
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f8f0 	bl	8000434 <__aeabi_idiv0>
 8000254:	bd02      	pop	{r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_uidivmod>:
 8000258:	2900      	cmp	r1, #0
 800025a:	d0f7      	beq.n	800024c <__udivsi3+0x100>
 800025c:	e776      	b.n	800014c <__udivsi3>
 800025e:	4770      	bx	lr

08000260 <__divsi3>:
 8000260:	4603      	mov	r3, r0
 8000262:	430b      	orrs	r3, r1
 8000264:	d47f      	bmi.n	8000366 <__divsi3+0x106>
 8000266:	2200      	movs	r2, #0
 8000268:	0843      	lsrs	r3, r0, #1
 800026a:	428b      	cmp	r3, r1
 800026c:	d374      	bcc.n	8000358 <__divsi3+0xf8>
 800026e:	0903      	lsrs	r3, r0, #4
 8000270:	428b      	cmp	r3, r1
 8000272:	d35f      	bcc.n	8000334 <__divsi3+0xd4>
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d344      	bcc.n	8000304 <__divsi3+0xa4>
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d328      	bcc.n	80002d2 <__divsi3+0x72>
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d30d      	bcc.n	80002a2 <__divsi3+0x42>
 8000286:	22ff      	movs	r2, #255	@ 0xff
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	ba12      	rev	r2, r2
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d302      	bcc.n	8000298 <__divsi3+0x38>
 8000292:	1212      	asrs	r2, r2, #8
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	d065      	beq.n	8000364 <__divsi3+0x104>
 8000298:	0b03      	lsrs	r3, r0, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d319      	bcc.n	80002d2 <__divsi3+0x72>
 800029e:	e000      	b.n	80002a2 <__divsi3+0x42>
 80002a0:	0a09      	lsrs	r1, r1, #8
 80002a2:	0bc3      	lsrs	r3, r0, #15
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x4c>
 80002a8:	03cb      	lsls	r3, r1, #15
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b83      	lsrs	r3, r0, #14
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x58>
 80002b4:	038b      	lsls	r3, r1, #14
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b43      	lsrs	r3, r0, #13
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x64>
 80002c0:	034b      	lsls	r3, r1, #13
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b03      	lsrs	r3, r0, #12
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x70>
 80002cc:	030b      	lsls	r3, r1, #12
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0ac3      	lsrs	r3, r0, #11
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x7c>
 80002d8:	02cb      	lsls	r3, r1, #11
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a83      	lsrs	r3, r0, #10
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x88>
 80002e4:	028b      	lsls	r3, r1, #10
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a43      	lsrs	r3, r0, #9
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x94>
 80002f0:	024b      	lsls	r3, r1, #9
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a03      	lsrs	r3, r0, #8
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0xa0>
 80002fc:	020b      	lsls	r3, r1, #8
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	d2cd      	bcs.n	80002a0 <__divsi3+0x40>
 8000304:	09c3      	lsrs	r3, r0, #7
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xae>
 800030a:	01cb      	lsls	r3, r1, #7
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0983      	lsrs	r3, r0, #6
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xba>
 8000316:	018b      	lsls	r3, r1, #6
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0943      	lsrs	r3, r0, #5
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xc6>
 8000322:	014b      	lsls	r3, r1, #5
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0903      	lsrs	r3, r0, #4
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xd2>
 800032e:	010b      	lsls	r3, r1, #4
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	08c3      	lsrs	r3, r0, #3
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xde>
 800033a:	00cb      	lsls	r3, r1, #3
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0883      	lsrs	r3, r0, #2
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xea>
 8000346:	008b      	lsls	r3, r1, #2
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0843      	lsrs	r3, r0, #1
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xf6>
 8000352:	004b      	lsls	r3, r1, #1
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	1a41      	subs	r1, r0, r1
 800035a:	d200      	bcs.n	800035e <__divsi3+0xfe>
 800035c:	4601      	mov	r1, r0
 800035e:	4152      	adcs	r2, r2
 8000360:	4610      	mov	r0, r2
 8000362:	4770      	bx	lr
 8000364:	e05d      	b.n	8000422 <__divsi3+0x1c2>
 8000366:	0fca      	lsrs	r2, r1, #31
 8000368:	d000      	beq.n	800036c <__divsi3+0x10c>
 800036a:	4249      	negs	r1, r1
 800036c:	1003      	asrs	r3, r0, #32
 800036e:	d300      	bcc.n	8000372 <__divsi3+0x112>
 8000370:	4240      	negs	r0, r0
 8000372:	4053      	eors	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	469c      	mov	ip, r3
 8000378:	0903      	lsrs	r3, r0, #4
 800037a:	428b      	cmp	r3, r1
 800037c:	d32d      	bcc.n	80003da <__divsi3+0x17a>
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d312      	bcc.n	80003aa <__divsi3+0x14a>
 8000384:	22fc      	movs	r2, #252	@ 0xfc
 8000386:	0189      	lsls	r1, r1, #6
 8000388:	ba12      	rev	r2, r2
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d30c      	bcc.n	80003aa <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d308      	bcc.n	80003aa <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d304      	bcc.n	80003aa <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	d03a      	beq.n	800041a <__divsi3+0x1ba>
 80003a4:	1192      	asrs	r2, r2, #6
 80003a6:	e000      	b.n	80003aa <__divsi3+0x14a>
 80003a8:	0989      	lsrs	r1, r1, #6
 80003aa:	09c3      	lsrs	r3, r0, #7
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x154>
 80003b0:	01cb      	lsls	r3, r1, #7
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0983      	lsrs	r3, r0, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x160>
 80003bc:	018b      	lsls	r3, r1, #6
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0943      	lsrs	r3, r0, #5
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x16c>
 80003c8:	014b      	lsls	r3, r1, #5
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0903      	lsrs	r3, r0, #4
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x178>
 80003d4:	010b      	lsls	r3, r1, #4
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	08c3      	lsrs	r3, r0, #3
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x184>
 80003e0:	00cb      	lsls	r3, r1, #3
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	0883      	lsrs	r3, r0, #2
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x190>
 80003ec:	008b      	lsls	r3, r1, #2
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	d2d9      	bcs.n	80003a8 <__divsi3+0x148>
 80003f4:	0843      	lsrs	r3, r0, #1
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d301      	bcc.n	80003fe <__divsi3+0x19e>
 80003fa:	004b      	lsls	r3, r1, #1
 80003fc:	1ac0      	subs	r0, r0, r3
 80003fe:	4152      	adcs	r2, r2
 8000400:	1a41      	subs	r1, r0, r1
 8000402:	d200      	bcs.n	8000406 <__divsi3+0x1a6>
 8000404:	4601      	mov	r1, r0
 8000406:	4663      	mov	r3, ip
 8000408:	4152      	adcs	r2, r2
 800040a:	105b      	asrs	r3, r3, #1
 800040c:	4610      	mov	r0, r2
 800040e:	d301      	bcc.n	8000414 <__divsi3+0x1b4>
 8000410:	4240      	negs	r0, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d500      	bpl.n	8000418 <__divsi3+0x1b8>
 8000416:	4249      	negs	r1, r1
 8000418:	4770      	bx	lr
 800041a:	4663      	mov	r3, ip
 800041c:	105b      	asrs	r3, r3, #1
 800041e:	d300      	bcc.n	8000422 <__divsi3+0x1c2>
 8000420:	4240      	negs	r0, r0
 8000422:	b501      	push	{r0, lr}
 8000424:	2000      	movs	r0, #0
 8000426:	f000 f805 	bl	8000434 <__aeabi_idiv0>
 800042a:	bd02      	pop	{r1, pc}

0800042c <__aeabi_idivmod>:
 800042c:	2900      	cmp	r1, #0
 800042e:	d0f8      	beq.n	8000422 <__divsi3+0x1c2>
 8000430:	e716      	b.n	8000260 <__divsi3>
 8000432:	4770      	bx	lr

08000434 <__aeabi_idiv0>:
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_llsr>:
 8000438:	40d0      	lsrs	r0, r2
 800043a:	000b      	movs	r3, r1
 800043c:	40d1      	lsrs	r1, r2
 800043e:	469c      	mov	ip, r3
 8000440:	3a20      	subs	r2, #32
 8000442:	40d3      	lsrs	r3, r2
 8000444:	4318      	orrs	r0, r3
 8000446:	4252      	negs	r2, r2
 8000448:	4663      	mov	r3, ip
 800044a:	4093      	lsls	r3, r2
 800044c:	4318      	orrs	r0, r3
 800044e:	4770      	bx	lr

08000450 <__aeabi_llsl>:
 8000450:	4091      	lsls	r1, r2
 8000452:	0003      	movs	r3, r0
 8000454:	4090      	lsls	r0, r2
 8000456:	469c      	mov	ip, r3
 8000458:	3a20      	subs	r2, #32
 800045a:	4093      	lsls	r3, r2
 800045c:	4319      	orrs	r1, r3
 800045e:	4252      	negs	r2, r2
 8000460:	4663      	mov	r3, ip
 8000462:	40d3      	lsrs	r3, r2
 8000464:	4319      	orrs	r1, r3
 8000466:	4770      	bx	lr

08000468 <__aeabi_uldivmod>:
 8000468:	2b00      	cmp	r3, #0
 800046a:	d111      	bne.n	8000490 <__aeabi_uldivmod+0x28>
 800046c:	2a00      	cmp	r2, #0
 800046e:	d10f      	bne.n	8000490 <__aeabi_uldivmod+0x28>
 8000470:	2900      	cmp	r1, #0
 8000472:	d100      	bne.n	8000476 <__aeabi_uldivmod+0xe>
 8000474:	2800      	cmp	r0, #0
 8000476:	d002      	beq.n	800047e <__aeabi_uldivmod+0x16>
 8000478:	2100      	movs	r1, #0
 800047a:	43c9      	mvns	r1, r1
 800047c:	0008      	movs	r0, r1
 800047e:	b407      	push	{r0, r1, r2}
 8000480:	4802      	ldr	r0, [pc, #8]	@ (800048c <__aeabi_uldivmod+0x24>)
 8000482:	a102      	add	r1, pc, #8	@ (adr r1, 800048c <__aeabi_uldivmod+0x24>)
 8000484:	1840      	adds	r0, r0, r1
 8000486:	9002      	str	r0, [sp, #8]
 8000488:	bd03      	pop	{r0, r1, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)
 800048c:	ffffffa9 	.word	0xffffffa9
 8000490:	b403      	push	{r0, r1}
 8000492:	4668      	mov	r0, sp
 8000494:	b501      	push	{r0, lr}
 8000496:	9802      	ldr	r0, [sp, #8]
 8000498:	f000 f84c 	bl	8000534 <__udivmoddi4>
 800049c:	9b01      	ldr	r3, [sp, #4]
 800049e:	469e      	mov	lr, r3
 80004a0:	b002      	add	sp, #8
 80004a2:	bc0c      	pop	{r2, r3}
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_lmul>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	46ce      	mov	lr, r9
 80004ac:	4699      	mov	r9, r3
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	469c      	mov	ip, r3
 80004b2:	0413      	lsls	r3, r2, #16
 80004b4:	4647      	mov	r7, r8
 80004b6:	0c1b      	lsrs	r3, r3, #16
 80004b8:	001d      	movs	r5, r3
 80004ba:	000e      	movs	r6, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	0404      	lsls	r4, r0, #16
 80004c0:	0c24      	lsrs	r4, r4, #16
 80004c2:	b580      	push	{r7, lr}
 80004c4:	0007      	movs	r7, r0
 80004c6:	0c10      	lsrs	r0, r2, #16
 80004c8:	434b      	muls	r3, r1
 80004ca:	4365      	muls	r5, r4
 80004cc:	4341      	muls	r1, r0
 80004ce:	4360      	muls	r0, r4
 80004d0:	0c2c      	lsrs	r4, r5, #16
 80004d2:	18c0      	adds	r0, r0, r3
 80004d4:	1824      	adds	r4, r4, r0
 80004d6:	468c      	mov	ip, r1
 80004d8:	42a3      	cmp	r3, r4
 80004da:	d903      	bls.n	80004e4 <__aeabi_lmul+0x3c>
 80004dc:	2380      	movs	r3, #128	@ 0x80
 80004de:	025b      	lsls	r3, r3, #9
 80004e0:	4698      	mov	r8, r3
 80004e2:	44c4      	add	ip, r8
 80004e4:	4649      	mov	r1, r9
 80004e6:	4379      	muls	r1, r7
 80004e8:	4356      	muls	r6, r2
 80004ea:	0c23      	lsrs	r3, r4, #16
 80004ec:	042d      	lsls	r5, r5, #16
 80004ee:	0c2d      	lsrs	r5, r5, #16
 80004f0:	1989      	adds	r1, r1, r6
 80004f2:	4463      	add	r3, ip
 80004f4:	0424      	lsls	r4, r4, #16
 80004f6:	1960      	adds	r0, r4, r5
 80004f8:	18c9      	adds	r1, r1, r3
 80004fa:	bcc0      	pop	{r6, r7}
 80004fc:	46b9      	mov	r9, r7
 80004fe:	46b0      	mov	r8, r6
 8000500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)

08000504 <__aeabi_f2uiz>:
 8000504:	219e      	movs	r1, #158	@ 0x9e
 8000506:	b510      	push	{r4, lr}
 8000508:	05c9      	lsls	r1, r1, #23
 800050a:	1c04      	adds	r4, r0, #0
 800050c:	f001 fd00 	bl	8001f10 <__aeabi_fcmpge>
 8000510:	2800      	cmp	r0, #0
 8000512:	d103      	bne.n	800051c <__aeabi_f2uiz+0x18>
 8000514:	1c20      	adds	r0, r4, #0
 8000516:	f000 fdad 	bl	8001074 <__aeabi_f2iz>
 800051a:	bd10      	pop	{r4, pc}
 800051c:	219e      	movs	r1, #158	@ 0x9e
 800051e:	1c20      	adds	r0, r4, #0
 8000520:	05c9      	lsls	r1, r1, #23
 8000522:	f000 fb43 	bl	8000bac <__aeabi_fsub>
 8000526:	f000 fda5 	bl	8001074 <__aeabi_f2iz>
 800052a:	2380      	movs	r3, #128	@ 0x80
 800052c:	061b      	lsls	r3, r3, #24
 800052e:	469c      	mov	ip, r3
 8000530:	4460      	add	r0, ip
 8000532:	e7f2      	b.n	800051a <__aeabi_f2uiz+0x16>

08000534 <__udivmoddi4>:
 8000534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000536:	4657      	mov	r7, sl
 8000538:	464e      	mov	r6, r9
 800053a:	4645      	mov	r5, r8
 800053c:	46de      	mov	lr, fp
 800053e:	b5e0      	push	{r5, r6, r7, lr}
 8000540:	0004      	movs	r4, r0
 8000542:	000d      	movs	r5, r1
 8000544:	4692      	mov	sl, r2
 8000546:	4699      	mov	r9, r3
 8000548:	b083      	sub	sp, #12
 800054a:	428b      	cmp	r3, r1
 800054c:	d830      	bhi.n	80005b0 <__udivmoddi4+0x7c>
 800054e:	d02d      	beq.n	80005ac <__udivmoddi4+0x78>
 8000550:	4649      	mov	r1, r9
 8000552:	4650      	mov	r0, sl
 8000554:	f001 fd04 	bl	8001f60 <__clzdi2>
 8000558:	0029      	movs	r1, r5
 800055a:	0006      	movs	r6, r0
 800055c:	0020      	movs	r0, r4
 800055e:	f001 fcff 	bl	8001f60 <__clzdi2>
 8000562:	1a33      	subs	r3, r6, r0
 8000564:	4698      	mov	r8, r3
 8000566:	3b20      	subs	r3, #32
 8000568:	d434      	bmi.n	80005d4 <__udivmoddi4+0xa0>
 800056a:	469b      	mov	fp, r3
 800056c:	4653      	mov	r3, sl
 800056e:	465a      	mov	r2, fp
 8000570:	4093      	lsls	r3, r2
 8000572:	4642      	mov	r2, r8
 8000574:	001f      	movs	r7, r3
 8000576:	4653      	mov	r3, sl
 8000578:	4093      	lsls	r3, r2
 800057a:	001e      	movs	r6, r3
 800057c:	42af      	cmp	r7, r5
 800057e:	d83b      	bhi.n	80005f8 <__udivmoddi4+0xc4>
 8000580:	42af      	cmp	r7, r5
 8000582:	d100      	bne.n	8000586 <__udivmoddi4+0x52>
 8000584:	e079      	b.n	800067a <__udivmoddi4+0x146>
 8000586:	465b      	mov	r3, fp
 8000588:	1ba4      	subs	r4, r4, r6
 800058a:	41bd      	sbcs	r5, r7
 800058c:	2b00      	cmp	r3, #0
 800058e:	da00      	bge.n	8000592 <__udivmoddi4+0x5e>
 8000590:	e076      	b.n	8000680 <__udivmoddi4+0x14c>
 8000592:	2200      	movs	r2, #0
 8000594:	2300      	movs	r3, #0
 8000596:	9200      	str	r2, [sp, #0]
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	2301      	movs	r3, #1
 800059c:	465a      	mov	r2, fp
 800059e:	4093      	lsls	r3, r2
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2301      	movs	r3, #1
 80005a4:	4642      	mov	r2, r8
 80005a6:	4093      	lsls	r3, r2
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	e029      	b.n	8000600 <__udivmoddi4+0xcc>
 80005ac:	4282      	cmp	r2, r0
 80005ae:	d9cf      	bls.n	8000550 <__udivmoddi4+0x1c>
 80005b0:	2200      	movs	r2, #0
 80005b2:	2300      	movs	r3, #0
 80005b4:	9200      	str	r2, [sp, #0]
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <__udivmoddi4+0x8e>
 80005be:	601c      	str	r4, [r3, #0]
 80005c0:	605d      	str	r5, [r3, #4]
 80005c2:	9800      	ldr	r0, [sp, #0]
 80005c4:	9901      	ldr	r1, [sp, #4]
 80005c6:	b003      	add	sp, #12
 80005c8:	bcf0      	pop	{r4, r5, r6, r7}
 80005ca:	46bb      	mov	fp, r7
 80005cc:	46b2      	mov	sl, r6
 80005ce:	46a9      	mov	r9, r5
 80005d0:	46a0      	mov	r8, r4
 80005d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d4:	4642      	mov	r2, r8
 80005d6:	469b      	mov	fp, r3
 80005d8:	2320      	movs	r3, #32
 80005da:	1a9b      	subs	r3, r3, r2
 80005dc:	4652      	mov	r2, sl
 80005de:	40da      	lsrs	r2, r3
 80005e0:	4641      	mov	r1, r8
 80005e2:	0013      	movs	r3, r2
 80005e4:	464a      	mov	r2, r9
 80005e6:	408a      	lsls	r2, r1
 80005e8:	0017      	movs	r7, r2
 80005ea:	4642      	mov	r2, r8
 80005ec:	431f      	orrs	r7, r3
 80005ee:	4653      	mov	r3, sl
 80005f0:	4093      	lsls	r3, r2
 80005f2:	001e      	movs	r6, r3
 80005f4:	42af      	cmp	r7, r5
 80005f6:	d9c3      	bls.n	8000580 <__udivmoddi4+0x4c>
 80005f8:	2200      	movs	r2, #0
 80005fa:	2300      	movs	r3, #0
 80005fc:	9200      	str	r2, [sp, #0]
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	4643      	mov	r3, r8
 8000602:	2b00      	cmp	r3, #0
 8000604:	d0d8      	beq.n	80005b8 <__udivmoddi4+0x84>
 8000606:	07fb      	lsls	r3, r7, #31
 8000608:	0872      	lsrs	r2, r6, #1
 800060a:	431a      	orrs	r2, r3
 800060c:	4646      	mov	r6, r8
 800060e:	087b      	lsrs	r3, r7, #1
 8000610:	e00e      	b.n	8000630 <__udivmoddi4+0xfc>
 8000612:	42ab      	cmp	r3, r5
 8000614:	d101      	bne.n	800061a <__udivmoddi4+0xe6>
 8000616:	42a2      	cmp	r2, r4
 8000618:	d80c      	bhi.n	8000634 <__udivmoddi4+0x100>
 800061a:	1aa4      	subs	r4, r4, r2
 800061c:	419d      	sbcs	r5, r3
 800061e:	2001      	movs	r0, #1
 8000620:	1924      	adds	r4, r4, r4
 8000622:	416d      	adcs	r5, r5
 8000624:	2100      	movs	r1, #0
 8000626:	3e01      	subs	r6, #1
 8000628:	1824      	adds	r4, r4, r0
 800062a:	414d      	adcs	r5, r1
 800062c:	2e00      	cmp	r6, #0
 800062e:	d006      	beq.n	800063e <__udivmoddi4+0x10a>
 8000630:	42ab      	cmp	r3, r5
 8000632:	d9ee      	bls.n	8000612 <__udivmoddi4+0xde>
 8000634:	3e01      	subs	r6, #1
 8000636:	1924      	adds	r4, r4, r4
 8000638:	416d      	adcs	r5, r5
 800063a:	2e00      	cmp	r6, #0
 800063c:	d1f8      	bne.n	8000630 <__udivmoddi4+0xfc>
 800063e:	9800      	ldr	r0, [sp, #0]
 8000640:	9901      	ldr	r1, [sp, #4]
 8000642:	465b      	mov	r3, fp
 8000644:	1900      	adds	r0, r0, r4
 8000646:	4169      	adcs	r1, r5
 8000648:	2b00      	cmp	r3, #0
 800064a:	db24      	blt.n	8000696 <__udivmoddi4+0x162>
 800064c:	002b      	movs	r3, r5
 800064e:	465a      	mov	r2, fp
 8000650:	4644      	mov	r4, r8
 8000652:	40d3      	lsrs	r3, r2
 8000654:	002a      	movs	r2, r5
 8000656:	40e2      	lsrs	r2, r4
 8000658:	001c      	movs	r4, r3
 800065a:	465b      	mov	r3, fp
 800065c:	0015      	movs	r5, r2
 800065e:	2b00      	cmp	r3, #0
 8000660:	db2a      	blt.n	80006b8 <__udivmoddi4+0x184>
 8000662:	0026      	movs	r6, r4
 8000664:	409e      	lsls	r6, r3
 8000666:	0033      	movs	r3, r6
 8000668:	0026      	movs	r6, r4
 800066a:	4647      	mov	r7, r8
 800066c:	40be      	lsls	r6, r7
 800066e:	0032      	movs	r2, r6
 8000670:	1a80      	subs	r0, r0, r2
 8000672:	4199      	sbcs	r1, r3
 8000674:	9000      	str	r0, [sp, #0]
 8000676:	9101      	str	r1, [sp, #4]
 8000678:	e79e      	b.n	80005b8 <__udivmoddi4+0x84>
 800067a:	42a3      	cmp	r3, r4
 800067c:	d8bc      	bhi.n	80005f8 <__udivmoddi4+0xc4>
 800067e:	e782      	b.n	8000586 <__udivmoddi4+0x52>
 8000680:	4642      	mov	r2, r8
 8000682:	2320      	movs	r3, #32
 8000684:	2100      	movs	r1, #0
 8000686:	1a9b      	subs	r3, r3, r2
 8000688:	2200      	movs	r2, #0
 800068a:	9100      	str	r1, [sp, #0]
 800068c:	9201      	str	r2, [sp, #4]
 800068e:	2201      	movs	r2, #1
 8000690:	40da      	lsrs	r2, r3
 8000692:	9201      	str	r2, [sp, #4]
 8000694:	e785      	b.n	80005a2 <__udivmoddi4+0x6e>
 8000696:	4642      	mov	r2, r8
 8000698:	2320      	movs	r3, #32
 800069a:	1a9b      	subs	r3, r3, r2
 800069c:	002a      	movs	r2, r5
 800069e:	4646      	mov	r6, r8
 80006a0:	409a      	lsls	r2, r3
 80006a2:	0023      	movs	r3, r4
 80006a4:	40f3      	lsrs	r3, r6
 80006a6:	4644      	mov	r4, r8
 80006a8:	4313      	orrs	r3, r2
 80006aa:	002a      	movs	r2, r5
 80006ac:	40e2      	lsrs	r2, r4
 80006ae:	001c      	movs	r4, r3
 80006b0:	465b      	mov	r3, fp
 80006b2:	0015      	movs	r5, r2
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	dad4      	bge.n	8000662 <__udivmoddi4+0x12e>
 80006b8:	4642      	mov	r2, r8
 80006ba:	002f      	movs	r7, r5
 80006bc:	2320      	movs	r3, #32
 80006be:	0026      	movs	r6, r4
 80006c0:	4097      	lsls	r7, r2
 80006c2:	1a9b      	subs	r3, r3, r2
 80006c4:	40de      	lsrs	r6, r3
 80006c6:	003b      	movs	r3, r7
 80006c8:	4333      	orrs	r3, r6
 80006ca:	e7cd      	b.n	8000668 <__udivmoddi4+0x134>

080006cc <__aeabi_fdiv>:
 80006cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ce:	4646      	mov	r6, r8
 80006d0:	464f      	mov	r7, r9
 80006d2:	46d6      	mov	lr, sl
 80006d4:	0245      	lsls	r5, r0, #9
 80006d6:	b5c0      	push	{r6, r7, lr}
 80006d8:	0fc3      	lsrs	r3, r0, #31
 80006da:	0047      	lsls	r7, r0, #1
 80006dc:	4698      	mov	r8, r3
 80006de:	1c0e      	adds	r6, r1, #0
 80006e0:	0a6d      	lsrs	r5, r5, #9
 80006e2:	0e3f      	lsrs	r7, r7, #24
 80006e4:	d05b      	beq.n	800079e <__aeabi_fdiv+0xd2>
 80006e6:	2fff      	cmp	r7, #255	@ 0xff
 80006e8:	d021      	beq.n	800072e <__aeabi_fdiv+0x62>
 80006ea:	2380      	movs	r3, #128	@ 0x80
 80006ec:	00ed      	lsls	r5, r5, #3
 80006ee:	04db      	lsls	r3, r3, #19
 80006f0:	431d      	orrs	r5, r3
 80006f2:	2300      	movs	r3, #0
 80006f4:	4699      	mov	r9, r3
 80006f6:	469a      	mov	sl, r3
 80006f8:	3f7f      	subs	r7, #127	@ 0x7f
 80006fa:	0274      	lsls	r4, r6, #9
 80006fc:	0073      	lsls	r3, r6, #1
 80006fe:	0a64      	lsrs	r4, r4, #9
 8000700:	0e1b      	lsrs	r3, r3, #24
 8000702:	0ff6      	lsrs	r6, r6, #31
 8000704:	2b00      	cmp	r3, #0
 8000706:	d020      	beq.n	800074a <__aeabi_fdiv+0x7e>
 8000708:	2bff      	cmp	r3, #255	@ 0xff
 800070a:	d043      	beq.n	8000794 <__aeabi_fdiv+0xc8>
 800070c:	2280      	movs	r2, #128	@ 0x80
 800070e:	2000      	movs	r0, #0
 8000710:	00e4      	lsls	r4, r4, #3
 8000712:	04d2      	lsls	r2, r2, #19
 8000714:	4314      	orrs	r4, r2
 8000716:	3b7f      	subs	r3, #127	@ 0x7f
 8000718:	4642      	mov	r2, r8
 800071a:	1aff      	subs	r7, r7, r3
 800071c:	464b      	mov	r3, r9
 800071e:	4072      	eors	r2, r6
 8000720:	2b0f      	cmp	r3, #15
 8000722:	d900      	bls.n	8000726 <__aeabi_fdiv+0x5a>
 8000724:	e09d      	b.n	8000862 <__aeabi_fdiv+0x196>
 8000726:	4971      	ldr	r1, [pc, #452]	@ (80008ec <__aeabi_fdiv+0x220>)
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	58cb      	ldr	r3, [r1, r3]
 800072c:	469f      	mov	pc, r3
 800072e:	2d00      	cmp	r5, #0
 8000730:	d15a      	bne.n	80007e8 <__aeabi_fdiv+0x11c>
 8000732:	2308      	movs	r3, #8
 8000734:	4699      	mov	r9, r3
 8000736:	3b06      	subs	r3, #6
 8000738:	0274      	lsls	r4, r6, #9
 800073a:	469a      	mov	sl, r3
 800073c:	0073      	lsls	r3, r6, #1
 800073e:	27ff      	movs	r7, #255	@ 0xff
 8000740:	0a64      	lsrs	r4, r4, #9
 8000742:	0e1b      	lsrs	r3, r3, #24
 8000744:	0ff6      	lsrs	r6, r6, #31
 8000746:	2b00      	cmp	r3, #0
 8000748:	d1de      	bne.n	8000708 <__aeabi_fdiv+0x3c>
 800074a:	2c00      	cmp	r4, #0
 800074c:	d13b      	bne.n	80007c6 <__aeabi_fdiv+0xfa>
 800074e:	2301      	movs	r3, #1
 8000750:	4642      	mov	r2, r8
 8000752:	4649      	mov	r1, r9
 8000754:	4072      	eors	r2, r6
 8000756:	4319      	orrs	r1, r3
 8000758:	290e      	cmp	r1, #14
 800075a:	d818      	bhi.n	800078e <__aeabi_fdiv+0xc2>
 800075c:	4864      	ldr	r0, [pc, #400]	@ (80008f0 <__aeabi_fdiv+0x224>)
 800075e:	0089      	lsls	r1, r1, #2
 8000760:	5841      	ldr	r1, [r0, r1]
 8000762:	468f      	mov	pc, r1
 8000764:	4653      	mov	r3, sl
 8000766:	2b02      	cmp	r3, #2
 8000768:	d100      	bne.n	800076c <__aeabi_fdiv+0xa0>
 800076a:	e0b8      	b.n	80008de <__aeabi_fdiv+0x212>
 800076c:	2b03      	cmp	r3, #3
 800076e:	d06e      	beq.n	800084e <__aeabi_fdiv+0x182>
 8000770:	4642      	mov	r2, r8
 8000772:	002c      	movs	r4, r5
 8000774:	2b01      	cmp	r3, #1
 8000776:	d140      	bne.n	80007fa <__aeabi_fdiv+0x12e>
 8000778:	2000      	movs	r0, #0
 800077a:	2400      	movs	r4, #0
 800077c:	05c0      	lsls	r0, r0, #23
 800077e:	4320      	orrs	r0, r4
 8000780:	07d2      	lsls	r2, r2, #31
 8000782:	4310      	orrs	r0, r2
 8000784:	bce0      	pop	{r5, r6, r7}
 8000786:	46ba      	mov	sl, r7
 8000788:	46b1      	mov	r9, r6
 800078a:	46a8      	mov	r8, r5
 800078c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800078e:	20ff      	movs	r0, #255	@ 0xff
 8000790:	2400      	movs	r4, #0
 8000792:	e7f3      	b.n	800077c <__aeabi_fdiv+0xb0>
 8000794:	2c00      	cmp	r4, #0
 8000796:	d120      	bne.n	80007da <__aeabi_fdiv+0x10e>
 8000798:	2302      	movs	r3, #2
 800079a:	3fff      	subs	r7, #255	@ 0xff
 800079c:	e7d8      	b.n	8000750 <__aeabi_fdiv+0x84>
 800079e:	2d00      	cmp	r5, #0
 80007a0:	d105      	bne.n	80007ae <__aeabi_fdiv+0xe2>
 80007a2:	2304      	movs	r3, #4
 80007a4:	4699      	mov	r9, r3
 80007a6:	3b03      	subs	r3, #3
 80007a8:	2700      	movs	r7, #0
 80007aa:	469a      	mov	sl, r3
 80007ac:	e7a5      	b.n	80006fa <__aeabi_fdiv+0x2e>
 80007ae:	0028      	movs	r0, r5
 80007b0:	f001 fbb8 	bl	8001f24 <__clzsi2>
 80007b4:	2776      	movs	r7, #118	@ 0x76
 80007b6:	1f43      	subs	r3, r0, #5
 80007b8:	409d      	lsls	r5, r3
 80007ba:	2300      	movs	r3, #0
 80007bc:	427f      	negs	r7, r7
 80007be:	4699      	mov	r9, r3
 80007c0:	469a      	mov	sl, r3
 80007c2:	1a3f      	subs	r7, r7, r0
 80007c4:	e799      	b.n	80006fa <__aeabi_fdiv+0x2e>
 80007c6:	0020      	movs	r0, r4
 80007c8:	f001 fbac 	bl	8001f24 <__clzsi2>
 80007cc:	1f43      	subs	r3, r0, #5
 80007ce:	409c      	lsls	r4, r3
 80007d0:	2376      	movs	r3, #118	@ 0x76
 80007d2:	425b      	negs	r3, r3
 80007d4:	1a1b      	subs	r3, r3, r0
 80007d6:	2000      	movs	r0, #0
 80007d8:	e79e      	b.n	8000718 <__aeabi_fdiv+0x4c>
 80007da:	2303      	movs	r3, #3
 80007dc:	464a      	mov	r2, r9
 80007de:	431a      	orrs	r2, r3
 80007e0:	4691      	mov	r9, r2
 80007e2:	2003      	movs	r0, #3
 80007e4:	33fc      	adds	r3, #252	@ 0xfc
 80007e6:	e797      	b.n	8000718 <__aeabi_fdiv+0x4c>
 80007e8:	230c      	movs	r3, #12
 80007ea:	4699      	mov	r9, r3
 80007ec:	3b09      	subs	r3, #9
 80007ee:	27ff      	movs	r7, #255	@ 0xff
 80007f0:	469a      	mov	sl, r3
 80007f2:	e782      	b.n	80006fa <__aeabi_fdiv+0x2e>
 80007f4:	2803      	cmp	r0, #3
 80007f6:	d02c      	beq.n	8000852 <__aeabi_fdiv+0x186>
 80007f8:	0032      	movs	r2, r6
 80007fa:	0038      	movs	r0, r7
 80007fc:	307f      	adds	r0, #127	@ 0x7f
 80007fe:	2800      	cmp	r0, #0
 8000800:	dd47      	ble.n	8000892 <__aeabi_fdiv+0x1c6>
 8000802:	0763      	lsls	r3, r4, #29
 8000804:	d004      	beq.n	8000810 <__aeabi_fdiv+0x144>
 8000806:	230f      	movs	r3, #15
 8000808:	4023      	ands	r3, r4
 800080a:	2b04      	cmp	r3, #4
 800080c:	d000      	beq.n	8000810 <__aeabi_fdiv+0x144>
 800080e:	3404      	adds	r4, #4
 8000810:	0123      	lsls	r3, r4, #4
 8000812:	d503      	bpl.n	800081c <__aeabi_fdiv+0x150>
 8000814:	0038      	movs	r0, r7
 8000816:	4b37      	ldr	r3, [pc, #220]	@ (80008f4 <__aeabi_fdiv+0x228>)
 8000818:	3080      	adds	r0, #128	@ 0x80
 800081a:	401c      	ands	r4, r3
 800081c:	28fe      	cmp	r0, #254	@ 0xfe
 800081e:	dcb6      	bgt.n	800078e <__aeabi_fdiv+0xc2>
 8000820:	01a4      	lsls	r4, r4, #6
 8000822:	0a64      	lsrs	r4, r4, #9
 8000824:	b2c0      	uxtb	r0, r0
 8000826:	e7a9      	b.n	800077c <__aeabi_fdiv+0xb0>
 8000828:	2480      	movs	r4, #128	@ 0x80
 800082a:	2200      	movs	r2, #0
 800082c:	20ff      	movs	r0, #255	@ 0xff
 800082e:	03e4      	lsls	r4, r4, #15
 8000830:	e7a4      	b.n	800077c <__aeabi_fdiv+0xb0>
 8000832:	2380      	movs	r3, #128	@ 0x80
 8000834:	03db      	lsls	r3, r3, #15
 8000836:	421d      	tst	r5, r3
 8000838:	d001      	beq.n	800083e <__aeabi_fdiv+0x172>
 800083a:	421c      	tst	r4, r3
 800083c:	d00b      	beq.n	8000856 <__aeabi_fdiv+0x18a>
 800083e:	2480      	movs	r4, #128	@ 0x80
 8000840:	03e4      	lsls	r4, r4, #15
 8000842:	432c      	orrs	r4, r5
 8000844:	0264      	lsls	r4, r4, #9
 8000846:	4642      	mov	r2, r8
 8000848:	20ff      	movs	r0, #255	@ 0xff
 800084a:	0a64      	lsrs	r4, r4, #9
 800084c:	e796      	b.n	800077c <__aeabi_fdiv+0xb0>
 800084e:	4646      	mov	r6, r8
 8000850:	002c      	movs	r4, r5
 8000852:	2380      	movs	r3, #128	@ 0x80
 8000854:	03db      	lsls	r3, r3, #15
 8000856:	431c      	orrs	r4, r3
 8000858:	0264      	lsls	r4, r4, #9
 800085a:	0032      	movs	r2, r6
 800085c:	20ff      	movs	r0, #255	@ 0xff
 800085e:	0a64      	lsrs	r4, r4, #9
 8000860:	e78c      	b.n	800077c <__aeabi_fdiv+0xb0>
 8000862:	016d      	lsls	r5, r5, #5
 8000864:	0160      	lsls	r0, r4, #5
 8000866:	4285      	cmp	r5, r0
 8000868:	d22d      	bcs.n	80008c6 <__aeabi_fdiv+0x1fa>
 800086a:	231b      	movs	r3, #27
 800086c:	2400      	movs	r4, #0
 800086e:	3f01      	subs	r7, #1
 8000870:	2601      	movs	r6, #1
 8000872:	0029      	movs	r1, r5
 8000874:	0064      	lsls	r4, r4, #1
 8000876:	006d      	lsls	r5, r5, #1
 8000878:	2900      	cmp	r1, #0
 800087a:	db01      	blt.n	8000880 <__aeabi_fdiv+0x1b4>
 800087c:	4285      	cmp	r5, r0
 800087e:	d301      	bcc.n	8000884 <__aeabi_fdiv+0x1b8>
 8000880:	1a2d      	subs	r5, r5, r0
 8000882:	4334      	orrs	r4, r6
 8000884:	3b01      	subs	r3, #1
 8000886:	2b00      	cmp	r3, #0
 8000888:	d1f3      	bne.n	8000872 <__aeabi_fdiv+0x1a6>
 800088a:	1e6b      	subs	r3, r5, #1
 800088c:	419d      	sbcs	r5, r3
 800088e:	432c      	orrs	r4, r5
 8000890:	e7b3      	b.n	80007fa <__aeabi_fdiv+0x12e>
 8000892:	2301      	movs	r3, #1
 8000894:	1a1b      	subs	r3, r3, r0
 8000896:	2b1b      	cmp	r3, #27
 8000898:	dd00      	ble.n	800089c <__aeabi_fdiv+0x1d0>
 800089a:	e76d      	b.n	8000778 <__aeabi_fdiv+0xac>
 800089c:	0021      	movs	r1, r4
 800089e:	379e      	adds	r7, #158	@ 0x9e
 80008a0:	40d9      	lsrs	r1, r3
 80008a2:	40bc      	lsls	r4, r7
 80008a4:	000b      	movs	r3, r1
 80008a6:	1e61      	subs	r1, r4, #1
 80008a8:	418c      	sbcs	r4, r1
 80008aa:	4323      	orrs	r3, r4
 80008ac:	0759      	lsls	r1, r3, #29
 80008ae:	d004      	beq.n	80008ba <__aeabi_fdiv+0x1ee>
 80008b0:	210f      	movs	r1, #15
 80008b2:	4019      	ands	r1, r3
 80008b4:	2904      	cmp	r1, #4
 80008b6:	d000      	beq.n	80008ba <__aeabi_fdiv+0x1ee>
 80008b8:	3304      	adds	r3, #4
 80008ba:	0159      	lsls	r1, r3, #5
 80008bc:	d413      	bmi.n	80008e6 <__aeabi_fdiv+0x21a>
 80008be:	019b      	lsls	r3, r3, #6
 80008c0:	2000      	movs	r0, #0
 80008c2:	0a5c      	lsrs	r4, r3, #9
 80008c4:	e75a      	b.n	800077c <__aeabi_fdiv+0xb0>
 80008c6:	231a      	movs	r3, #26
 80008c8:	2401      	movs	r4, #1
 80008ca:	1a2d      	subs	r5, r5, r0
 80008cc:	e7d0      	b.n	8000870 <__aeabi_fdiv+0x1a4>
 80008ce:	1e98      	subs	r0, r3, #2
 80008d0:	4243      	negs	r3, r0
 80008d2:	4158      	adcs	r0, r3
 80008d4:	4240      	negs	r0, r0
 80008d6:	0032      	movs	r2, r6
 80008d8:	2400      	movs	r4, #0
 80008da:	b2c0      	uxtb	r0, r0
 80008dc:	e74e      	b.n	800077c <__aeabi_fdiv+0xb0>
 80008de:	4642      	mov	r2, r8
 80008e0:	20ff      	movs	r0, #255	@ 0xff
 80008e2:	2400      	movs	r4, #0
 80008e4:	e74a      	b.n	800077c <__aeabi_fdiv+0xb0>
 80008e6:	2001      	movs	r0, #1
 80008e8:	2400      	movs	r4, #0
 80008ea:	e747      	b.n	800077c <__aeabi_fdiv+0xb0>
 80008ec:	08006d4c 	.word	0x08006d4c
 80008f0:	08006d8c 	.word	0x08006d8c
 80008f4:	f7ffffff 	.word	0xf7ffffff

080008f8 <__aeabi_fmul>:
 80008f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fa:	464f      	mov	r7, r9
 80008fc:	4646      	mov	r6, r8
 80008fe:	46d6      	mov	lr, sl
 8000900:	0044      	lsls	r4, r0, #1
 8000902:	b5c0      	push	{r6, r7, lr}
 8000904:	0246      	lsls	r6, r0, #9
 8000906:	1c0f      	adds	r7, r1, #0
 8000908:	0a76      	lsrs	r6, r6, #9
 800090a:	0e24      	lsrs	r4, r4, #24
 800090c:	0fc5      	lsrs	r5, r0, #31
 800090e:	2c00      	cmp	r4, #0
 8000910:	d100      	bne.n	8000914 <__aeabi_fmul+0x1c>
 8000912:	e0da      	b.n	8000aca <__aeabi_fmul+0x1d2>
 8000914:	2cff      	cmp	r4, #255	@ 0xff
 8000916:	d074      	beq.n	8000a02 <__aeabi_fmul+0x10a>
 8000918:	2380      	movs	r3, #128	@ 0x80
 800091a:	00f6      	lsls	r6, r6, #3
 800091c:	04db      	lsls	r3, r3, #19
 800091e:	431e      	orrs	r6, r3
 8000920:	2300      	movs	r3, #0
 8000922:	4699      	mov	r9, r3
 8000924:	469a      	mov	sl, r3
 8000926:	3c7f      	subs	r4, #127	@ 0x7f
 8000928:	027b      	lsls	r3, r7, #9
 800092a:	0a5b      	lsrs	r3, r3, #9
 800092c:	4698      	mov	r8, r3
 800092e:	007b      	lsls	r3, r7, #1
 8000930:	0e1b      	lsrs	r3, r3, #24
 8000932:	0fff      	lsrs	r7, r7, #31
 8000934:	2b00      	cmp	r3, #0
 8000936:	d074      	beq.n	8000a22 <__aeabi_fmul+0x12a>
 8000938:	2bff      	cmp	r3, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fmul+0x46>
 800093c:	e08e      	b.n	8000a5c <__aeabi_fmul+0x164>
 800093e:	4642      	mov	r2, r8
 8000940:	2180      	movs	r1, #128	@ 0x80
 8000942:	00d2      	lsls	r2, r2, #3
 8000944:	04c9      	lsls	r1, r1, #19
 8000946:	4311      	orrs	r1, r2
 8000948:	3b7f      	subs	r3, #127	@ 0x7f
 800094a:	002a      	movs	r2, r5
 800094c:	18e4      	adds	r4, r4, r3
 800094e:	464b      	mov	r3, r9
 8000950:	407a      	eors	r2, r7
 8000952:	4688      	mov	r8, r1
 8000954:	b2d2      	uxtb	r2, r2
 8000956:	2b0a      	cmp	r3, #10
 8000958:	dc75      	bgt.n	8000a46 <__aeabi_fmul+0x14e>
 800095a:	464b      	mov	r3, r9
 800095c:	2000      	movs	r0, #0
 800095e:	2b02      	cmp	r3, #2
 8000960:	dd0f      	ble.n	8000982 <__aeabi_fmul+0x8a>
 8000962:	4649      	mov	r1, r9
 8000964:	2301      	movs	r3, #1
 8000966:	408b      	lsls	r3, r1
 8000968:	21a6      	movs	r1, #166	@ 0xa6
 800096a:	00c9      	lsls	r1, r1, #3
 800096c:	420b      	tst	r3, r1
 800096e:	d169      	bne.n	8000a44 <__aeabi_fmul+0x14c>
 8000970:	2190      	movs	r1, #144	@ 0x90
 8000972:	0089      	lsls	r1, r1, #2
 8000974:	420b      	tst	r3, r1
 8000976:	d000      	beq.n	800097a <__aeabi_fmul+0x82>
 8000978:	e100      	b.n	8000b7c <__aeabi_fmul+0x284>
 800097a:	2188      	movs	r1, #136	@ 0x88
 800097c:	4219      	tst	r1, r3
 800097e:	d000      	beq.n	8000982 <__aeabi_fmul+0x8a>
 8000980:	e0f5      	b.n	8000b6e <__aeabi_fmul+0x276>
 8000982:	4641      	mov	r1, r8
 8000984:	0409      	lsls	r1, r1, #16
 8000986:	0c09      	lsrs	r1, r1, #16
 8000988:	4643      	mov	r3, r8
 800098a:	0008      	movs	r0, r1
 800098c:	0c35      	lsrs	r5, r6, #16
 800098e:	0436      	lsls	r6, r6, #16
 8000990:	0c1b      	lsrs	r3, r3, #16
 8000992:	0c36      	lsrs	r6, r6, #16
 8000994:	4370      	muls	r0, r6
 8000996:	4369      	muls	r1, r5
 8000998:	435e      	muls	r6, r3
 800099a:	435d      	muls	r5, r3
 800099c:	1876      	adds	r6, r6, r1
 800099e:	0c03      	lsrs	r3, r0, #16
 80009a0:	199b      	adds	r3, r3, r6
 80009a2:	4299      	cmp	r1, r3
 80009a4:	d903      	bls.n	80009ae <__aeabi_fmul+0xb6>
 80009a6:	2180      	movs	r1, #128	@ 0x80
 80009a8:	0249      	lsls	r1, r1, #9
 80009aa:	468c      	mov	ip, r1
 80009ac:	4465      	add	r5, ip
 80009ae:	0400      	lsls	r0, r0, #16
 80009b0:	0419      	lsls	r1, r3, #16
 80009b2:	0c00      	lsrs	r0, r0, #16
 80009b4:	1809      	adds	r1, r1, r0
 80009b6:	018e      	lsls	r6, r1, #6
 80009b8:	1e70      	subs	r0, r6, #1
 80009ba:	4186      	sbcs	r6, r0
 80009bc:	0c1b      	lsrs	r3, r3, #16
 80009be:	0e89      	lsrs	r1, r1, #26
 80009c0:	195b      	adds	r3, r3, r5
 80009c2:	430e      	orrs	r6, r1
 80009c4:	019b      	lsls	r3, r3, #6
 80009c6:	431e      	orrs	r6, r3
 80009c8:	011b      	lsls	r3, r3, #4
 80009ca:	d46c      	bmi.n	8000aa6 <__aeabi_fmul+0x1ae>
 80009cc:	0023      	movs	r3, r4
 80009ce:	337f      	adds	r3, #127	@ 0x7f
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	dc00      	bgt.n	80009d6 <__aeabi_fmul+0xde>
 80009d4:	e0b1      	b.n	8000b3a <__aeabi_fmul+0x242>
 80009d6:	0015      	movs	r5, r2
 80009d8:	0771      	lsls	r1, r6, #29
 80009da:	d00b      	beq.n	80009f4 <__aeabi_fmul+0xfc>
 80009dc:	200f      	movs	r0, #15
 80009de:	0021      	movs	r1, r4
 80009e0:	4030      	ands	r0, r6
 80009e2:	2804      	cmp	r0, #4
 80009e4:	d006      	beq.n	80009f4 <__aeabi_fmul+0xfc>
 80009e6:	3604      	adds	r6, #4
 80009e8:	0132      	lsls	r2, r6, #4
 80009ea:	d503      	bpl.n	80009f4 <__aeabi_fmul+0xfc>
 80009ec:	4b6e      	ldr	r3, [pc, #440]	@ (8000ba8 <__aeabi_fmul+0x2b0>)
 80009ee:	401e      	ands	r6, r3
 80009f0:	000b      	movs	r3, r1
 80009f2:	3380      	adds	r3, #128	@ 0x80
 80009f4:	2bfe      	cmp	r3, #254	@ 0xfe
 80009f6:	dd00      	ble.n	80009fa <__aeabi_fmul+0x102>
 80009f8:	e0bd      	b.n	8000b76 <__aeabi_fmul+0x27e>
 80009fa:	01b2      	lsls	r2, r6, #6
 80009fc:	0a52      	lsrs	r2, r2, #9
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	e048      	b.n	8000a94 <__aeabi_fmul+0x19c>
 8000a02:	2e00      	cmp	r6, #0
 8000a04:	d000      	beq.n	8000a08 <__aeabi_fmul+0x110>
 8000a06:	e092      	b.n	8000b2e <__aeabi_fmul+0x236>
 8000a08:	2308      	movs	r3, #8
 8000a0a:	4699      	mov	r9, r3
 8000a0c:	3b06      	subs	r3, #6
 8000a0e:	469a      	mov	sl, r3
 8000a10:	027b      	lsls	r3, r7, #9
 8000a12:	0a5b      	lsrs	r3, r3, #9
 8000a14:	4698      	mov	r8, r3
 8000a16:	007b      	lsls	r3, r7, #1
 8000a18:	24ff      	movs	r4, #255	@ 0xff
 8000a1a:	0e1b      	lsrs	r3, r3, #24
 8000a1c:	0fff      	lsrs	r7, r7, #31
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d18a      	bne.n	8000938 <__aeabi_fmul+0x40>
 8000a22:	4642      	mov	r2, r8
 8000a24:	2a00      	cmp	r2, #0
 8000a26:	d164      	bne.n	8000af2 <__aeabi_fmul+0x1fa>
 8000a28:	4649      	mov	r1, r9
 8000a2a:	3201      	adds	r2, #1
 8000a2c:	4311      	orrs	r1, r2
 8000a2e:	4689      	mov	r9, r1
 8000a30:	290a      	cmp	r1, #10
 8000a32:	dc08      	bgt.n	8000a46 <__aeabi_fmul+0x14e>
 8000a34:	407d      	eors	r5, r7
 8000a36:	2001      	movs	r0, #1
 8000a38:	b2ea      	uxtb	r2, r5
 8000a3a:	2902      	cmp	r1, #2
 8000a3c:	dc91      	bgt.n	8000962 <__aeabi_fmul+0x6a>
 8000a3e:	0015      	movs	r5, r2
 8000a40:	2200      	movs	r2, #0
 8000a42:	e027      	b.n	8000a94 <__aeabi_fmul+0x19c>
 8000a44:	0015      	movs	r5, r2
 8000a46:	4653      	mov	r3, sl
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d100      	bne.n	8000a4e <__aeabi_fmul+0x156>
 8000a4c:	e093      	b.n	8000b76 <__aeabi_fmul+0x27e>
 8000a4e:	2b03      	cmp	r3, #3
 8000a50:	d01a      	beq.n	8000a88 <__aeabi_fmul+0x190>
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d12c      	bne.n	8000ab0 <__aeabi_fmul+0x1b8>
 8000a56:	2300      	movs	r3, #0
 8000a58:	2200      	movs	r2, #0
 8000a5a:	e01b      	b.n	8000a94 <__aeabi_fmul+0x19c>
 8000a5c:	4643      	mov	r3, r8
 8000a5e:	34ff      	adds	r4, #255	@ 0xff
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d055      	beq.n	8000b10 <__aeabi_fmul+0x218>
 8000a64:	2103      	movs	r1, #3
 8000a66:	464b      	mov	r3, r9
 8000a68:	430b      	orrs	r3, r1
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	2b0a      	cmp	r3, #10
 8000a6e:	dc00      	bgt.n	8000a72 <__aeabi_fmul+0x17a>
 8000a70:	e092      	b.n	8000b98 <__aeabi_fmul+0x2a0>
 8000a72:	2b0f      	cmp	r3, #15
 8000a74:	d000      	beq.n	8000a78 <__aeabi_fmul+0x180>
 8000a76:	e08c      	b.n	8000b92 <__aeabi_fmul+0x29a>
 8000a78:	2280      	movs	r2, #128	@ 0x80
 8000a7a:	03d2      	lsls	r2, r2, #15
 8000a7c:	4216      	tst	r6, r2
 8000a7e:	d003      	beq.n	8000a88 <__aeabi_fmul+0x190>
 8000a80:	4643      	mov	r3, r8
 8000a82:	4213      	tst	r3, r2
 8000a84:	d100      	bne.n	8000a88 <__aeabi_fmul+0x190>
 8000a86:	e07d      	b.n	8000b84 <__aeabi_fmul+0x28c>
 8000a88:	2280      	movs	r2, #128	@ 0x80
 8000a8a:	03d2      	lsls	r2, r2, #15
 8000a8c:	4332      	orrs	r2, r6
 8000a8e:	0252      	lsls	r2, r2, #9
 8000a90:	0a52      	lsrs	r2, r2, #9
 8000a92:	23ff      	movs	r3, #255	@ 0xff
 8000a94:	05d8      	lsls	r0, r3, #23
 8000a96:	07ed      	lsls	r5, r5, #31
 8000a98:	4310      	orrs	r0, r2
 8000a9a:	4328      	orrs	r0, r5
 8000a9c:	bce0      	pop	{r5, r6, r7}
 8000a9e:	46ba      	mov	sl, r7
 8000aa0:	46b1      	mov	r9, r6
 8000aa2:	46a8      	mov	r8, r5
 8000aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	0015      	movs	r5, r2
 8000aaa:	0871      	lsrs	r1, r6, #1
 8000aac:	401e      	ands	r6, r3
 8000aae:	430e      	orrs	r6, r1
 8000ab0:	0023      	movs	r3, r4
 8000ab2:	3380      	adds	r3, #128	@ 0x80
 8000ab4:	1c61      	adds	r1, r4, #1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	dd41      	ble.n	8000b3e <__aeabi_fmul+0x246>
 8000aba:	0772      	lsls	r2, r6, #29
 8000abc:	d094      	beq.n	80009e8 <__aeabi_fmul+0xf0>
 8000abe:	220f      	movs	r2, #15
 8000ac0:	4032      	ands	r2, r6
 8000ac2:	2a04      	cmp	r2, #4
 8000ac4:	d000      	beq.n	8000ac8 <__aeabi_fmul+0x1d0>
 8000ac6:	e78e      	b.n	80009e6 <__aeabi_fmul+0xee>
 8000ac8:	e78e      	b.n	80009e8 <__aeabi_fmul+0xf0>
 8000aca:	2e00      	cmp	r6, #0
 8000acc:	d105      	bne.n	8000ada <__aeabi_fmul+0x1e2>
 8000ace:	2304      	movs	r3, #4
 8000ad0:	4699      	mov	r9, r3
 8000ad2:	3b03      	subs	r3, #3
 8000ad4:	2400      	movs	r4, #0
 8000ad6:	469a      	mov	sl, r3
 8000ad8:	e726      	b.n	8000928 <__aeabi_fmul+0x30>
 8000ada:	0030      	movs	r0, r6
 8000adc:	f001 fa22 	bl	8001f24 <__clzsi2>
 8000ae0:	2476      	movs	r4, #118	@ 0x76
 8000ae2:	1f43      	subs	r3, r0, #5
 8000ae4:	409e      	lsls	r6, r3
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	4264      	negs	r4, r4
 8000aea:	4699      	mov	r9, r3
 8000aec:	469a      	mov	sl, r3
 8000aee:	1a24      	subs	r4, r4, r0
 8000af0:	e71a      	b.n	8000928 <__aeabi_fmul+0x30>
 8000af2:	4640      	mov	r0, r8
 8000af4:	f001 fa16 	bl	8001f24 <__clzsi2>
 8000af8:	464b      	mov	r3, r9
 8000afa:	1a24      	subs	r4, r4, r0
 8000afc:	3c76      	subs	r4, #118	@ 0x76
 8000afe:	2b0a      	cmp	r3, #10
 8000b00:	dca1      	bgt.n	8000a46 <__aeabi_fmul+0x14e>
 8000b02:	4643      	mov	r3, r8
 8000b04:	3805      	subs	r0, #5
 8000b06:	4083      	lsls	r3, r0
 8000b08:	407d      	eors	r5, r7
 8000b0a:	4698      	mov	r8, r3
 8000b0c:	b2ea      	uxtb	r2, r5
 8000b0e:	e724      	b.n	800095a <__aeabi_fmul+0x62>
 8000b10:	464a      	mov	r2, r9
 8000b12:	3302      	adds	r3, #2
 8000b14:	4313      	orrs	r3, r2
 8000b16:	002a      	movs	r2, r5
 8000b18:	407a      	eors	r2, r7
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	2b0a      	cmp	r3, #10
 8000b1e:	dc92      	bgt.n	8000a46 <__aeabi_fmul+0x14e>
 8000b20:	4649      	mov	r1, r9
 8000b22:	0015      	movs	r5, r2
 8000b24:	2900      	cmp	r1, #0
 8000b26:	d026      	beq.n	8000b76 <__aeabi_fmul+0x27e>
 8000b28:	4699      	mov	r9, r3
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	e719      	b.n	8000962 <__aeabi_fmul+0x6a>
 8000b2e:	230c      	movs	r3, #12
 8000b30:	4699      	mov	r9, r3
 8000b32:	3b09      	subs	r3, #9
 8000b34:	24ff      	movs	r4, #255	@ 0xff
 8000b36:	469a      	mov	sl, r3
 8000b38:	e6f6      	b.n	8000928 <__aeabi_fmul+0x30>
 8000b3a:	0015      	movs	r5, r2
 8000b3c:	0021      	movs	r1, r4
 8000b3e:	2201      	movs	r2, #1
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	2b1b      	cmp	r3, #27
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_fmul+0x250>
 8000b46:	e786      	b.n	8000a56 <__aeabi_fmul+0x15e>
 8000b48:	319e      	adds	r1, #158	@ 0x9e
 8000b4a:	0032      	movs	r2, r6
 8000b4c:	408e      	lsls	r6, r1
 8000b4e:	40da      	lsrs	r2, r3
 8000b50:	1e73      	subs	r3, r6, #1
 8000b52:	419e      	sbcs	r6, r3
 8000b54:	4332      	orrs	r2, r6
 8000b56:	0753      	lsls	r3, r2, #29
 8000b58:	d004      	beq.n	8000b64 <__aeabi_fmul+0x26c>
 8000b5a:	230f      	movs	r3, #15
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	d000      	beq.n	8000b64 <__aeabi_fmul+0x26c>
 8000b62:	3204      	adds	r2, #4
 8000b64:	0153      	lsls	r3, r2, #5
 8000b66:	d510      	bpl.n	8000b8a <__aeabi_fmul+0x292>
 8000b68:	2301      	movs	r3, #1
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	e792      	b.n	8000a94 <__aeabi_fmul+0x19c>
 8000b6e:	003d      	movs	r5, r7
 8000b70:	4646      	mov	r6, r8
 8000b72:	4682      	mov	sl, r0
 8000b74:	e767      	b.n	8000a46 <__aeabi_fmul+0x14e>
 8000b76:	23ff      	movs	r3, #255	@ 0xff
 8000b78:	2200      	movs	r2, #0
 8000b7a:	e78b      	b.n	8000a94 <__aeabi_fmul+0x19c>
 8000b7c:	2280      	movs	r2, #128	@ 0x80
 8000b7e:	2500      	movs	r5, #0
 8000b80:	03d2      	lsls	r2, r2, #15
 8000b82:	e786      	b.n	8000a92 <__aeabi_fmul+0x19a>
 8000b84:	003d      	movs	r5, r7
 8000b86:	431a      	orrs	r2, r3
 8000b88:	e783      	b.n	8000a92 <__aeabi_fmul+0x19a>
 8000b8a:	0192      	lsls	r2, r2, #6
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	0a52      	lsrs	r2, r2, #9
 8000b90:	e780      	b.n	8000a94 <__aeabi_fmul+0x19c>
 8000b92:	003d      	movs	r5, r7
 8000b94:	4646      	mov	r6, r8
 8000b96:	e777      	b.n	8000a88 <__aeabi_fmul+0x190>
 8000b98:	002a      	movs	r2, r5
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	407a      	eors	r2, r7
 8000b9e:	408b      	lsls	r3, r1
 8000ba0:	2003      	movs	r0, #3
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	e6e9      	b.n	800097a <__aeabi_fmul+0x82>
 8000ba6:	46c0      	nop			@ (mov r8, r8)
 8000ba8:	f7ffffff 	.word	0xf7ffffff

08000bac <__aeabi_fsub>:
 8000bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bae:	4647      	mov	r7, r8
 8000bb0:	46ce      	mov	lr, r9
 8000bb2:	0243      	lsls	r3, r0, #9
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	0a5f      	lsrs	r7, r3, #9
 8000bb8:	099b      	lsrs	r3, r3, #6
 8000bba:	0045      	lsls	r5, r0, #1
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	469c      	mov	ip, r3
 8000bc0:	024b      	lsls	r3, r1, #9
 8000bc2:	0fc4      	lsrs	r4, r0, #31
 8000bc4:	0fce      	lsrs	r6, r1, #31
 8000bc6:	0e2d      	lsrs	r5, r5, #24
 8000bc8:	0a58      	lsrs	r0, r3, #9
 8000bca:	0e12      	lsrs	r2, r2, #24
 8000bcc:	0999      	lsrs	r1, r3, #6
 8000bce:	2aff      	cmp	r2, #255	@ 0xff
 8000bd0:	d06b      	beq.n	8000caa <__aeabi_fsub+0xfe>
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	405e      	eors	r6, r3
 8000bd6:	1aab      	subs	r3, r5, r2
 8000bd8:	42b4      	cmp	r4, r6
 8000bda:	d04b      	beq.n	8000c74 <__aeabi_fsub+0xc8>
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	dc00      	bgt.n	8000be2 <__aeabi_fsub+0x36>
 8000be0:	e0ff      	b.n	8000de2 <__aeabi_fsub+0x236>
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d100      	bne.n	8000be8 <__aeabi_fsub+0x3c>
 8000be6:	e088      	b.n	8000cfa <__aeabi_fsub+0x14e>
 8000be8:	2dff      	cmp	r5, #255	@ 0xff
 8000bea:	d100      	bne.n	8000bee <__aeabi_fsub+0x42>
 8000bec:	e0ef      	b.n	8000dce <__aeabi_fsub+0x222>
 8000bee:	2280      	movs	r2, #128	@ 0x80
 8000bf0:	04d2      	lsls	r2, r2, #19
 8000bf2:	4311      	orrs	r1, r2
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	2b1b      	cmp	r3, #27
 8000bf8:	dc08      	bgt.n	8000c0c <__aeabi_fsub+0x60>
 8000bfa:	0008      	movs	r0, r1
 8000bfc:	2220      	movs	r2, #32
 8000bfe:	40d8      	lsrs	r0, r3
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	4099      	lsls	r1, r3
 8000c04:	000b      	movs	r3, r1
 8000c06:	1e5a      	subs	r2, r3, #1
 8000c08:	4193      	sbcs	r3, r2
 8000c0a:	4318      	orrs	r0, r3
 8000c0c:	4663      	mov	r3, ip
 8000c0e:	1a1b      	subs	r3, r3, r0
 8000c10:	469c      	mov	ip, r3
 8000c12:	4663      	mov	r3, ip
 8000c14:	015b      	lsls	r3, r3, #5
 8000c16:	d400      	bmi.n	8000c1a <__aeabi_fsub+0x6e>
 8000c18:	e0cd      	b.n	8000db6 <__aeabi_fsub+0x20a>
 8000c1a:	4663      	mov	r3, ip
 8000c1c:	019f      	lsls	r7, r3, #6
 8000c1e:	09bf      	lsrs	r7, r7, #6
 8000c20:	0038      	movs	r0, r7
 8000c22:	f001 f97f 	bl	8001f24 <__clzsi2>
 8000c26:	003b      	movs	r3, r7
 8000c28:	3805      	subs	r0, #5
 8000c2a:	4083      	lsls	r3, r0
 8000c2c:	4285      	cmp	r5, r0
 8000c2e:	dc00      	bgt.n	8000c32 <__aeabi_fsub+0x86>
 8000c30:	e0a2      	b.n	8000d78 <__aeabi_fsub+0x1cc>
 8000c32:	4ab7      	ldr	r2, [pc, #732]	@ (8000f10 <__aeabi_fsub+0x364>)
 8000c34:	1a2d      	subs	r5, r5, r0
 8000c36:	401a      	ands	r2, r3
 8000c38:	4694      	mov	ip, r2
 8000c3a:	075a      	lsls	r2, r3, #29
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_fsub+0x94>
 8000c3e:	e0c3      	b.n	8000dc8 <__aeabi_fsub+0x21c>
 8000c40:	220f      	movs	r2, #15
 8000c42:	4013      	ands	r3, r2
 8000c44:	2b04      	cmp	r3, #4
 8000c46:	d100      	bne.n	8000c4a <__aeabi_fsub+0x9e>
 8000c48:	e0be      	b.n	8000dc8 <__aeabi_fsub+0x21c>
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	4698      	mov	r8, r3
 8000c4e:	44c4      	add	ip, r8
 8000c50:	4663      	mov	r3, ip
 8000c52:	015b      	lsls	r3, r3, #5
 8000c54:	d400      	bmi.n	8000c58 <__aeabi_fsub+0xac>
 8000c56:	e0b7      	b.n	8000dc8 <__aeabi_fsub+0x21c>
 8000c58:	1c68      	adds	r0, r5, #1
 8000c5a:	2dfe      	cmp	r5, #254	@ 0xfe
 8000c5c:	d000      	beq.n	8000c60 <__aeabi_fsub+0xb4>
 8000c5e:	e0a5      	b.n	8000dac <__aeabi_fsub+0x200>
 8000c60:	20ff      	movs	r0, #255	@ 0xff
 8000c62:	2200      	movs	r2, #0
 8000c64:	05c0      	lsls	r0, r0, #23
 8000c66:	4310      	orrs	r0, r2
 8000c68:	07e4      	lsls	r4, r4, #31
 8000c6a:	4320      	orrs	r0, r4
 8000c6c:	bcc0      	pop	{r6, r7}
 8000c6e:	46b9      	mov	r9, r7
 8000c70:	46b0      	mov	r8, r6
 8000c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	dc00      	bgt.n	8000c7a <__aeabi_fsub+0xce>
 8000c78:	e1eb      	b.n	8001052 <__aeabi_fsub+0x4a6>
 8000c7a:	2a00      	cmp	r2, #0
 8000c7c:	d046      	beq.n	8000d0c <__aeabi_fsub+0x160>
 8000c7e:	2dff      	cmp	r5, #255	@ 0xff
 8000c80:	d100      	bne.n	8000c84 <__aeabi_fsub+0xd8>
 8000c82:	e0a4      	b.n	8000dce <__aeabi_fsub+0x222>
 8000c84:	2280      	movs	r2, #128	@ 0x80
 8000c86:	04d2      	lsls	r2, r2, #19
 8000c88:	4311      	orrs	r1, r2
 8000c8a:	2b1b      	cmp	r3, #27
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_fsub+0xe4>
 8000c8e:	e0fb      	b.n	8000e88 <__aeabi_fsub+0x2dc>
 8000c90:	2305      	movs	r3, #5
 8000c92:	4698      	mov	r8, r3
 8000c94:	002b      	movs	r3, r5
 8000c96:	44c4      	add	ip, r8
 8000c98:	4662      	mov	r2, ip
 8000c9a:	08d7      	lsrs	r7, r2, #3
 8000c9c:	2bff      	cmp	r3, #255	@ 0xff
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_fsub+0xf6>
 8000ca0:	e095      	b.n	8000dce <__aeabi_fsub+0x222>
 8000ca2:	027a      	lsls	r2, r7, #9
 8000ca4:	0a52      	lsrs	r2, r2, #9
 8000ca6:	b2d8      	uxtb	r0, r3
 8000ca8:	e7dc      	b.n	8000c64 <__aeabi_fsub+0xb8>
 8000caa:	002b      	movs	r3, r5
 8000cac:	3bff      	subs	r3, #255	@ 0xff
 8000cae:	4699      	mov	r9, r3
 8000cb0:	2900      	cmp	r1, #0
 8000cb2:	d118      	bne.n	8000ce6 <__aeabi_fsub+0x13a>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	405e      	eors	r6, r3
 8000cb8:	42b4      	cmp	r4, r6
 8000cba:	d100      	bne.n	8000cbe <__aeabi_fsub+0x112>
 8000cbc:	e0ca      	b.n	8000e54 <__aeabi_fsub+0x2a8>
 8000cbe:	464b      	mov	r3, r9
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d02d      	beq.n	8000d20 <__aeabi_fsub+0x174>
 8000cc4:	2d00      	cmp	r5, #0
 8000cc6:	d000      	beq.n	8000cca <__aeabi_fsub+0x11e>
 8000cc8:	e13c      	b.n	8000f44 <__aeabi_fsub+0x398>
 8000cca:	23ff      	movs	r3, #255	@ 0xff
 8000ccc:	4664      	mov	r4, ip
 8000cce:	2c00      	cmp	r4, #0
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_fsub+0x128>
 8000cd2:	e15f      	b.n	8000f94 <__aeabi_fsub+0x3e8>
 8000cd4:	1e5d      	subs	r5, r3, #1
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_fsub+0x130>
 8000cda:	e174      	b.n	8000fc6 <__aeabi_fsub+0x41a>
 8000cdc:	0034      	movs	r4, r6
 8000cde:	2bff      	cmp	r3, #255	@ 0xff
 8000ce0:	d074      	beq.n	8000dcc <__aeabi_fsub+0x220>
 8000ce2:	002b      	movs	r3, r5
 8000ce4:	e103      	b.n	8000eee <__aeabi_fsub+0x342>
 8000ce6:	42b4      	cmp	r4, r6
 8000ce8:	d100      	bne.n	8000cec <__aeabi_fsub+0x140>
 8000cea:	e09c      	b.n	8000e26 <__aeabi_fsub+0x27a>
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d017      	beq.n	8000d20 <__aeabi_fsub+0x174>
 8000cf0:	2d00      	cmp	r5, #0
 8000cf2:	d0ea      	beq.n	8000cca <__aeabi_fsub+0x11e>
 8000cf4:	0007      	movs	r7, r0
 8000cf6:	0034      	movs	r4, r6
 8000cf8:	e06c      	b.n	8000dd4 <__aeabi_fsub+0x228>
 8000cfa:	2900      	cmp	r1, #0
 8000cfc:	d0cc      	beq.n	8000c98 <__aeabi_fsub+0xec>
 8000cfe:	1e5a      	subs	r2, r3, #1
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d02b      	beq.n	8000d5c <__aeabi_fsub+0x1b0>
 8000d04:	2bff      	cmp	r3, #255	@ 0xff
 8000d06:	d062      	beq.n	8000dce <__aeabi_fsub+0x222>
 8000d08:	0013      	movs	r3, r2
 8000d0a:	e773      	b.n	8000bf4 <__aeabi_fsub+0x48>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	d0c3      	beq.n	8000c98 <__aeabi_fsub+0xec>
 8000d10:	1e5a      	subs	r2, r3, #1
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d100      	bne.n	8000d18 <__aeabi_fsub+0x16c>
 8000d16:	e11e      	b.n	8000f56 <__aeabi_fsub+0x3aa>
 8000d18:	2bff      	cmp	r3, #255	@ 0xff
 8000d1a:	d058      	beq.n	8000dce <__aeabi_fsub+0x222>
 8000d1c:	0013      	movs	r3, r2
 8000d1e:	e7b4      	b.n	8000c8a <__aeabi_fsub+0xde>
 8000d20:	22fe      	movs	r2, #254	@ 0xfe
 8000d22:	1c6b      	adds	r3, r5, #1
 8000d24:	421a      	tst	r2, r3
 8000d26:	d10d      	bne.n	8000d44 <__aeabi_fsub+0x198>
 8000d28:	2d00      	cmp	r5, #0
 8000d2a:	d060      	beq.n	8000dee <__aeabi_fsub+0x242>
 8000d2c:	4663      	mov	r3, ip
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d000      	beq.n	8000d34 <__aeabi_fsub+0x188>
 8000d32:	e120      	b.n	8000f76 <__aeabi_fsub+0x3ca>
 8000d34:	2900      	cmp	r1, #0
 8000d36:	d000      	beq.n	8000d3a <__aeabi_fsub+0x18e>
 8000d38:	e128      	b.n	8000f8c <__aeabi_fsub+0x3e0>
 8000d3a:	2280      	movs	r2, #128	@ 0x80
 8000d3c:	2400      	movs	r4, #0
 8000d3e:	20ff      	movs	r0, #255	@ 0xff
 8000d40:	03d2      	lsls	r2, r2, #15
 8000d42:	e78f      	b.n	8000c64 <__aeabi_fsub+0xb8>
 8000d44:	4663      	mov	r3, ip
 8000d46:	1a5f      	subs	r7, r3, r1
 8000d48:	017b      	lsls	r3, r7, #5
 8000d4a:	d500      	bpl.n	8000d4e <__aeabi_fsub+0x1a2>
 8000d4c:	e0fe      	b.n	8000f4c <__aeabi_fsub+0x3a0>
 8000d4e:	2f00      	cmp	r7, #0
 8000d50:	d000      	beq.n	8000d54 <__aeabi_fsub+0x1a8>
 8000d52:	e765      	b.n	8000c20 <__aeabi_fsub+0x74>
 8000d54:	2400      	movs	r4, #0
 8000d56:	2000      	movs	r0, #0
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e783      	b.n	8000c64 <__aeabi_fsub+0xb8>
 8000d5c:	4663      	mov	r3, ip
 8000d5e:	1a59      	subs	r1, r3, r1
 8000d60:	014b      	lsls	r3, r1, #5
 8000d62:	d400      	bmi.n	8000d66 <__aeabi_fsub+0x1ba>
 8000d64:	e119      	b.n	8000f9a <__aeabi_fsub+0x3ee>
 8000d66:	018f      	lsls	r7, r1, #6
 8000d68:	09bf      	lsrs	r7, r7, #6
 8000d6a:	0038      	movs	r0, r7
 8000d6c:	f001 f8da 	bl	8001f24 <__clzsi2>
 8000d70:	003b      	movs	r3, r7
 8000d72:	3805      	subs	r0, #5
 8000d74:	4083      	lsls	r3, r0
 8000d76:	2501      	movs	r5, #1
 8000d78:	2220      	movs	r2, #32
 8000d7a:	1b40      	subs	r0, r0, r5
 8000d7c:	3001      	adds	r0, #1
 8000d7e:	1a12      	subs	r2, r2, r0
 8000d80:	0019      	movs	r1, r3
 8000d82:	4093      	lsls	r3, r2
 8000d84:	40c1      	lsrs	r1, r0
 8000d86:	1e5a      	subs	r2, r3, #1
 8000d88:	4193      	sbcs	r3, r2
 8000d8a:	4319      	orrs	r1, r3
 8000d8c:	468c      	mov	ip, r1
 8000d8e:	1e0b      	subs	r3, r1, #0
 8000d90:	d0e1      	beq.n	8000d56 <__aeabi_fsub+0x1aa>
 8000d92:	075b      	lsls	r3, r3, #29
 8000d94:	d100      	bne.n	8000d98 <__aeabi_fsub+0x1ec>
 8000d96:	e152      	b.n	800103e <__aeabi_fsub+0x492>
 8000d98:	230f      	movs	r3, #15
 8000d9a:	2500      	movs	r5, #0
 8000d9c:	400b      	ands	r3, r1
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	d000      	beq.n	8000da4 <__aeabi_fsub+0x1f8>
 8000da2:	e752      	b.n	8000c4a <__aeabi_fsub+0x9e>
 8000da4:	2001      	movs	r0, #1
 8000da6:	014a      	lsls	r2, r1, #5
 8000da8:	d400      	bmi.n	8000dac <__aeabi_fsub+0x200>
 8000daa:	e092      	b.n	8000ed2 <__aeabi_fsub+0x326>
 8000dac:	b2c0      	uxtb	r0, r0
 8000dae:	4663      	mov	r3, ip
 8000db0:	019a      	lsls	r2, r3, #6
 8000db2:	0a52      	lsrs	r2, r2, #9
 8000db4:	e756      	b.n	8000c64 <__aeabi_fsub+0xb8>
 8000db6:	4663      	mov	r3, ip
 8000db8:	075b      	lsls	r3, r3, #29
 8000dba:	d005      	beq.n	8000dc8 <__aeabi_fsub+0x21c>
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	4662      	mov	r2, ip
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	d000      	beq.n	8000dc8 <__aeabi_fsub+0x21c>
 8000dc6:	e740      	b.n	8000c4a <__aeabi_fsub+0x9e>
 8000dc8:	002b      	movs	r3, r5
 8000dca:	e765      	b.n	8000c98 <__aeabi_fsub+0xec>
 8000dcc:	0007      	movs	r7, r0
 8000dce:	2f00      	cmp	r7, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x228>
 8000dd2:	e745      	b.n	8000c60 <__aeabi_fsub+0xb4>
 8000dd4:	2280      	movs	r2, #128	@ 0x80
 8000dd6:	03d2      	lsls	r2, r2, #15
 8000dd8:	433a      	orrs	r2, r7
 8000dda:	0252      	lsls	r2, r2, #9
 8000ddc:	20ff      	movs	r0, #255	@ 0xff
 8000dde:	0a52      	lsrs	r2, r2, #9
 8000de0:	e740      	b.n	8000c64 <__aeabi_fsub+0xb8>
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d179      	bne.n	8000eda <__aeabi_fsub+0x32e>
 8000de6:	22fe      	movs	r2, #254	@ 0xfe
 8000de8:	1c6b      	adds	r3, r5, #1
 8000dea:	421a      	tst	r2, r3
 8000dec:	d1aa      	bne.n	8000d44 <__aeabi_fsub+0x198>
 8000dee:	4663      	mov	r3, ip
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d100      	bne.n	8000df6 <__aeabi_fsub+0x24a>
 8000df4:	e0f5      	b.n	8000fe2 <__aeabi_fsub+0x436>
 8000df6:	2900      	cmp	r1, #0
 8000df8:	d100      	bne.n	8000dfc <__aeabi_fsub+0x250>
 8000dfa:	e0d1      	b.n	8000fa0 <__aeabi_fsub+0x3f4>
 8000dfc:	1a5f      	subs	r7, r3, r1
 8000dfe:	2380      	movs	r3, #128	@ 0x80
 8000e00:	04db      	lsls	r3, r3, #19
 8000e02:	421f      	tst	r7, r3
 8000e04:	d100      	bne.n	8000e08 <__aeabi_fsub+0x25c>
 8000e06:	e10e      	b.n	8001026 <__aeabi_fsub+0x47a>
 8000e08:	4662      	mov	r2, ip
 8000e0a:	2401      	movs	r4, #1
 8000e0c:	1a8a      	subs	r2, r1, r2
 8000e0e:	4694      	mov	ip, r2
 8000e10:	2000      	movs	r0, #0
 8000e12:	4034      	ands	r4, r6
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	d100      	bne.n	8000e1a <__aeabi_fsub+0x26e>
 8000e18:	e724      	b.n	8000c64 <__aeabi_fsub+0xb8>
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	421a      	tst	r2, r3
 8000e1e:	d1c6      	bne.n	8000dae <__aeabi_fsub+0x202>
 8000e20:	2300      	movs	r3, #0
 8000e22:	08d7      	lsrs	r7, r2, #3
 8000e24:	e73d      	b.n	8000ca2 <__aeabi_fsub+0xf6>
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d017      	beq.n	8000e5a <__aeabi_fsub+0x2ae>
 8000e2a:	2d00      	cmp	r5, #0
 8000e2c:	d000      	beq.n	8000e30 <__aeabi_fsub+0x284>
 8000e2e:	e0af      	b.n	8000f90 <__aeabi_fsub+0x3e4>
 8000e30:	23ff      	movs	r3, #255	@ 0xff
 8000e32:	4665      	mov	r5, ip
 8000e34:	2d00      	cmp	r5, #0
 8000e36:	d100      	bne.n	8000e3a <__aeabi_fsub+0x28e>
 8000e38:	e0ad      	b.n	8000f96 <__aeabi_fsub+0x3ea>
 8000e3a:	1e5e      	subs	r6, r3, #1
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_fsub+0x296>
 8000e40:	e089      	b.n	8000f56 <__aeabi_fsub+0x3aa>
 8000e42:	2bff      	cmp	r3, #255	@ 0xff
 8000e44:	d0c2      	beq.n	8000dcc <__aeabi_fsub+0x220>
 8000e46:	2e1b      	cmp	r6, #27
 8000e48:	dc00      	bgt.n	8000e4c <__aeabi_fsub+0x2a0>
 8000e4a:	e0ab      	b.n	8000fa4 <__aeabi_fsub+0x3f8>
 8000e4c:	1d4b      	adds	r3, r1, #5
 8000e4e:	469c      	mov	ip, r3
 8000e50:	0013      	movs	r3, r2
 8000e52:	e721      	b.n	8000c98 <__aeabi_fsub+0xec>
 8000e54:	464b      	mov	r3, r9
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d170      	bne.n	8000f3c <__aeabi_fsub+0x390>
 8000e5a:	22fe      	movs	r2, #254	@ 0xfe
 8000e5c:	1c6b      	adds	r3, r5, #1
 8000e5e:	421a      	tst	r2, r3
 8000e60:	d15e      	bne.n	8000f20 <__aeabi_fsub+0x374>
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d000      	beq.n	8000e68 <__aeabi_fsub+0x2bc>
 8000e66:	e0c3      	b.n	8000ff0 <__aeabi_fsub+0x444>
 8000e68:	4663      	mov	r3, ip
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_fsub+0x2c4>
 8000e6e:	e0d0      	b.n	8001012 <__aeabi_fsub+0x466>
 8000e70:	2900      	cmp	r1, #0
 8000e72:	d100      	bne.n	8000e76 <__aeabi_fsub+0x2ca>
 8000e74:	e094      	b.n	8000fa0 <__aeabi_fsub+0x3f4>
 8000e76:	000a      	movs	r2, r1
 8000e78:	4462      	add	r2, ip
 8000e7a:	0153      	lsls	r3, r2, #5
 8000e7c:	d400      	bmi.n	8000e80 <__aeabi_fsub+0x2d4>
 8000e7e:	e0d8      	b.n	8001032 <__aeabi_fsub+0x486>
 8000e80:	0192      	lsls	r2, r2, #6
 8000e82:	2001      	movs	r0, #1
 8000e84:	0a52      	lsrs	r2, r2, #9
 8000e86:	e6ed      	b.n	8000c64 <__aeabi_fsub+0xb8>
 8000e88:	0008      	movs	r0, r1
 8000e8a:	2220      	movs	r2, #32
 8000e8c:	40d8      	lsrs	r0, r3
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	4099      	lsls	r1, r3
 8000e92:	000b      	movs	r3, r1
 8000e94:	1e5a      	subs	r2, r3, #1
 8000e96:	4193      	sbcs	r3, r2
 8000e98:	4303      	orrs	r3, r0
 8000e9a:	449c      	add	ip, r3
 8000e9c:	4663      	mov	r3, ip
 8000e9e:	015b      	lsls	r3, r3, #5
 8000ea0:	d589      	bpl.n	8000db6 <__aeabi_fsub+0x20a>
 8000ea2:	3501      	adds	r5, #1
 8000ea4:	2dff      	cmp	r5, #255	@ 0xff
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_fsub+0x2fe>
 8000ea8:	e6da      	b.n	8000c60 <__aeabi_fsub+0xb4>
 8000eaa:	4662      	mov	r2, ip
 8000eac:	2301      	movs	r3, #1
 8000eae:	4919      	ldr	r1, [pc, #100]	@ (8000f14 <__aeabi_fsub+0x368>)
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	0852      	lsrs	r2, r2, #1
 8000eb4:	400a      	ands	r2, r1
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	0013      	movs	r3, r2
 8000eba:	4694      	mov	ip, r2
 8000ebc:	075b      	lsls	r3, r3, #29
 8000ebe:	d004      	beq.n	8000eca <__aeabi_fsub+0x31e>
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	2b04      	cmp	r3, #4
 8000ec6:	d000      	beq.n	8000eca <__aeabi_fsub+0x31e>
 8000ec8:	e6bf      	b.n	8000c4a <__aeabi_fsub+0x9e>
 8000eca:	4663      	mov	r3, ip
 8000ecc:	015b      	lsls	r3, r3, #5
 8000ece:	d500      	bpl.n	8000ed2 <__aeabi_fsub+0x326>
 8000ed0:	e6c2      	b.n	8000c58 <__aeabi_fsub+0xac>
 8000ed2:	4663      	mov	r3, ip
 8000ed4:	08df      	lsrs	r7, r3, #3
 8000ed6:	002b      	movs	r3, r5
 8000ed8:	e6e3      	b.n	8000ca2 <__aeabi_fsub+0xf6>
 8000eda:	1b53      	subs	r3, r2, r5
 8000edc:	2d00      	cmp	r5, #0
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_fsub+0x336>
 8000ee0:	e6f4      	b.n	8000ccc <__aeabi_fsub+0x120>
 8000ee2:	2080      	movs	r0, #128	@ 0x80
 8000ee4:	4664      	mov	r4, ip
 8000ee6:	04c0      	lsls	r0, r0, #19
 8000ee8:	4304      	orrs	r4, r0
 8000eea:	46a4      	mov	ip, r4
 8000eec:	0034      	movs	r4, r6
 8000eee:	2001      	movs	r0, #1
 8000ef0:	2b1b      	cmp	r3, #27
 8000ef2:	dc09      	bgt.n	8000f08 <__aeabi_fsub+0x35c>
 8000ef4:	2520      	movs	r5, #32
 8000ef6:	4660      	mov	r0, ip
 8000ef8:	40d8      	lsrs	r0, r3
 8000efa:	1aeb      	subs	r3, r5, r3
 8000efc:	4665      	mov	r5, ip
 8000efe:	409d      	lsls	r5, r3
 8000f00:	002b      	movs	r3, r5
 8000f02:	1e5d      	subs	r5, r3, #1
 8000f04:	41ab      	sbcs	r3, r5
 8000f06:	4318      	orrs	r0, r3
 8000f08:	1a0b      	subs	r3, r1, r0
 8000f0a:	469c      	mov	ip, r3
 8000f0c:	0015      	movs	r5, r2
 8000f0e:	e680      	b.n	8000c12 <__aeabi_fsub+0x66>
 8000f10:	fbffffff 	.word	0xfbffffff
 8000f14:	7dffffff 	.word	0x7dffffff
 8000f18:	22fe      	movs	r2, #254	@ 0xfe
 8000f1a:	1c6b      	adds	r3, r5, #1
 8000f1c:	4213      	tst	r3, r2
 8000f1e:	d0a3      	beq.n	8000e68 <__aeabi_fsub+0x2bc>
 8000f20:	2bff      	cmp	r3, #255	@ 0xff
 8000f22:	d100      	bne.n	8000f26 <__aeabi_fsub+0x37a>
 8000f24:	e69c      	b.n	8000c60 <__aeabi_fsub+0xb4>
 8000f26:	4461      	add	r1, ip
 8000f28:	0849      	lsrs	r1, r1, #1
 8000f2a:	074a      	lsls	r2, r1, #29
 8000f2c:	d049      	beq.n	8000fc2 <__aeabi_fsub+0x416>
 8000f2e:	220f      	movs	r2, #15
 8000f30:	400a      	ands	r2, r1
 8000f32:	2a04      	cmp	r2, #4
 8000f34:	d045      	beq.n	8000fc2 <__aeabi_fsub+0x416>
 8000f36:	1d0a      	adds	r2, r1, #4
 8000f38:	4694      	mov	ip, r2
 8000f3a:	e6ad      	b.n	8000c98 <__aeabi_fsub+0xec>
 8000f3c:	2d00      	cmp	r5, #0
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_fsub+0x396>
 8000f40:	e776      	b.n	8000e30 <__aeabi_fsub+0x284>
 8000f42:	e68d      	b.n	8000c60 <__aeabi_fsub+0xb4>
 8000f44:	0034      	movs	r4, r6
 8000f46:	20ff      	movs	r0, #255	@ 0xff
 8000f48:	2200      	movs	r2, #0
 8000f4a:	e68b      	b.n	8000c64 <__aeabi_fsub+0xb8>
 8000f4c:	4663      	mov	r3, ip
 8000f4e:	2401      	movs	r4, #1
 8000f50:	1acf      	subs	r7, r1, r3
 8000f52:	4034      	ands	r4, r6
 8000f54:	e664      	b.n	8000c20 <__aeabi_fsub+0x74>
 8000f56:	4461      	add	r1, ip
 8000f58:	014b      	lsls	r3, r1, #5
 8000f5a:	d56d      	bpl.n	8001038 <__aeabi_fsub+0x48c>
 8000f5c:	0848      	lsrs	r0, r1, #1
 8000f5e:	4944      	ldr	r1, [pc, #272]	@ (8001070 <__aeabi_fsub+0x4c4>)
 8000f60:	4001      	ands	r1, r0
 8000f62:	0743      	lsls	r3, r0, #29
 8000f64:	d02c      	beq.n	8000fc0 <__aeabi_fsub+0x414>
 8000f66:	230f      	movs	r3, #15
 8000f68:	4003      	ands	r3, r0
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	d028      	beq.n	8000fc0 <__aeabi_fsub+0x414>
 8000f6e:	1d0b      	adds	r3, r1, #4
 8000f70:	469c      	mov	ip, r3
 8000f72:	2302      	movs	r3, #2
 8000f74:	e690      	b.n	8000c98 <__aeabi_fsub+0xec>
 8000f76:	2900      	cmp	r1, #0
 8000f78:	d100      	bne.n	8000f7c <__aeabi_fsub+0x3d0>
 8000f7a:	e72b      	b.n	8000dd4 <__aeabi_fsub+0x228>
 8000f7c:	2380      	movs	r3, #128	@ 0x80
 8000f7e:	03db      	lsls	r3, r3, #15
 8000f80:	429f      	cmp	r7, r3
 8000f82:	d200      	bcs.n	8000f86 <__aeabi_fsub+0x3da>
 8000f84:	e726      	b.n	8000dd4 <__aeabi_fsub+0x228>
 8000f86:	4298      	cmp	r0, r3
 8000f88:	d300      	bcc.n	8000f8c <__aeabi_fsub+0x3e0>
 8000f8a:	e723      	b.n	8000dd4 <__aeabi_fsub+0x228>
 8000f8c:	2401      	movs	r4, #1
 8000f8e:	4034      	ands	r4, r6
 8000f90:	0007      	movs	r7, r0
 8000f92:	e71f      	b.n	8000dd4 <__aeabi_fsub+0x228>
 8000f94:	0034      	movs	r4, r6
 8000f96:	468c      	mov	ip, r1
 8000f98:	e67e      	b.n	8000c98 <__aeabi_fsub+0xec>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	08cf      	lsrs	r7, r1, #3
 8000f9e:	e680      	b.n	8000ca2 <__aeabi_fsub+0xf6>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e67e      	b.n	8000ca2 <__aeabi_fsub+0xf6>
 8000fa4:	2020      	movs	r0, #32
 8000fa6:	4665      	mov	r5, ip
 8000fa8:	1b80      	subs	r0, r0, r6
 8000faa:	4085      	lsls	r5, r0
 8000fac:	4663      	mov	r3, ip
 8000fae:	0028      	movs	r0, r5
 8000fb0:	40f3      	lsrs	r3, r6
 8000fb2:	1e45      	subs	r5, r0, #1
 8000fb4:	41a8      	sbcs	r0, r5
 8000fb6:	4303      	orrs	r3, r0
 8000fb8:	469c      	mov	ip, r3
 8000fba:	0015      	movs	r5, r2
 8000fbc:	448c      	add	ip, r1
 8000fbe:	e76d      	b.n	8000e9c <__aeabi_fsub+0x2f0>
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	08cf      	lsrs	r7, r1, #3
 8000fc4:	e66d      	b.n	8000ca2 <__aeabi_fsub+0xf6>
 8000fc6:	1b0f      	subs	r7, r1, r4
 8000fc8:	017b      	lsls	r3, r7, #5
 8000fca:	d528      	bpl.n	800101e <__aeabi_fsub+0x472>
 8000fcc:	01bf      	lsls	r7, r7, #6
 8000fce:	09bf      	lsrs	r7, r7, #6
 8000fd0:	0038      	movs	r0, r7
 8000fd2:	f000 ffa7 	bl	8001f24 <__clzsi2>
 8000fd6:	003b      	movs	r3, r7
 8000fd8:	3805      	subs	r0, #5
 8000fda:	4083      	lsls	r3, r0
 8000fdc:	0034      	movs	r4, r6
 8000fde:	2501      	movs	r5, #1
 8000fe0:	e6ca      	b.n	8000d78 <__aeabi_fsub+0x1cc>
 8000fe2:	2900      	cmp	r1, #0
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_fsub+0x43c>
 8000fe6:	e6b5      	b.n	8000d54 <__aeabi_fsub+0x1a8>
 8000fe8:	2401      	movs	r4, #1
 8000fea:	0007      	movs	r7, r0
 8000fec:	4034      	ands	r4, r6
 8000fee:	e658      	b.n	8000ca2 <__aeabi_fsub+0xf6>
 8000ff0:	4663      	mov	r3, ip
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_fsub+0x44c>
 8000ff6:	e6e9      	b.n	8000dcc <__aeabi_fsub+0x220>
 8000ff8:	2900      	cmp	r1, #0
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_fsub+0x452>
 8000ffc:	e6ea      	b.n	8000dd4 <__aeabi_fsub+0x228>
 8000ffe:	2380      	movs	r3, #128	@ 0x80
 8001000:	03db      	lsls	r3, r3, #15
 8001002:	429f      	cmp	r7, r3
 8001004:	d200      	bcs.n	8001008 <__aeabi_fsub+0x45c>
 8001006:	e6e5      	b.n	8000dd4 <__aeabi_fsub+0x228>
 8001008:	4298      	cmp	r0, r3
 800100a:	d300      	bcc.n	800100e <__aeabi_fsub+0x462>
 800100c:	e6e2      	b.n	8000dd4 <__aeabi_fsub+0x228>
 800100e:	0007      	movs	r7, r0
 8001010:	e6e0      	b.n	8000dd4 <__aeabi_fsub+0x228>
 8001012:	2900      	cmp	r1, #0
 8001014:	d100      	bne.n	8001018 <__aeabi_fsub+0x46c>
 8001016:	e69e      	b.n	8000d56 <__aeabi_fsub+0x1aa>
 8001018:	2300      	movs	r3, #0
 800101a:	08cf      	lsrs	r7, r1, #3
 800101c:	e641      	b.n	8000ca2 <__aeabi_fsub+0xf6>
 800101e:	0034      	movs	r4, r6
 8001020:	2301      	movs	r3, #1
 8001022:	08ff      	lsrs	r7, r7, #3
 8001024:	e63d      	b.n	8000ca2 <__aeabi_fsub+0xf6>
 8001026:	2f00      	cmp	r7, #0
 8001028:	d100      	bne.n	800102c <__aeabi_fsub+0x480>
 800102a:	e693      	b.n	8000d54 <__aeabi_fsub+0x1a8>
 800102c:	2300      	movs	r3, #0
 800102e:	08ff      	lsrs	r7, r7, #3
 8001030:	e637      	b.n	8000ca2 <__aeabi_fsub+0xf6>
 8001032:	2300      	movs	r3, #0
 8001034:	08d7      	lsrs	r7, r2, #3
 8001036:	e634      	b.n	8000ca2 <__aeabi_fsub+0xf6>
 8001038:	2301      	movs	r3, #1
 800103a:	08cf      	lsrs	r7, r1, #3
 800103c:	e631      	b.n	8000ca2 <__aeabi_fsub+0xf6>
 800103e:	2280      	movs	r2, #128	@ 0x80
 8001040:	000b      	movs	r3, r1
 8001042:	04d2      	lsls	r2, r2, #19
 8001044:	2001      	movs	r0, #1
 8001046:	4013      	ands	r3, r2
 8001048:	4211      	tst	r1, r2
 800104a:	d000      	beq.n	800104e <__aeabi_fsub+0x4a2>
 800104c:	e6ae      	b.n	8000dac <__aeabi_fsub+0x200>
 800104e:	08cf      	lsrs	r7, r1, #3
 8001050:	e627      	b.n	8000ca2 <__aeabi_fsub+0xf6>
 8001052:	2b00      	cmp	r3, #0
 8001054:	d100      	bne.n	8001058 <__aeabi_fsub+0x4ac>
 8001056:	e75f      	b.n	8000f18 <__aeabi_fsub+0x36c>
 8001058:	1b56      	subs	r6, r2, r5
 800105a:	2d00      	cmp	r5, #0
 800105c:	d101      	bne.n	8001062 <__aeabi_fsub+0x4b6>
 800105e:	0033      	movs	r3, r6
 8001060:	e6e7      	b.n	8000e32 <__aeabi_fsub+0x286>
 8001062:	2380      	movs	r3, #128	@ 0x80
 8001064:	4660      	mov	r0, ip
 8001066:	04db      	lsls	r3, r3, #19
 8001068:	4318      	orrs	r0, r3
 800106a:	4684      	mov	ip, r0
 800106c:	e6eb      	b.n	8000e46 <__aeabi_fsub+0x29a>
 800106e:	46c0      	nop			@ (mov r8, r8)
 8001070:	7dffffff 	.word	0x7dffffff

08001074 <__aeabi_f2iz>:
 8001074:	0241      	lsls	r1, r0, #9
 8001076:	0042      	lsls	r2, r0, #1
 8001078:	0fc3      	lsrs	r3, r0, #31
 800107a:	0a49      	lsrs	r1, r1, #9
 800107c:	2000      	movs	r0, #0
 800107e:	0e12      	lsrs	r2, r2, #24
 8001080:	2a7e      	cmp	r2, #126	@ 0x7e
 8001082:	dd03      	ble.n	800108c <__aeabi_f2iz+0x18>
 8001084:	2a9d      	cmp	r2, #157	@ 0x9d
 8001086:	dd02      	ble.n	800108e <__aeabi_f2iz+0x1a>
 8001088:	4a09      	ldr	r2, [pc, #36]	@ (80010b0 <__aeabi_f2iz+0x3c>)
 800108a:	1898      	adds	r0, r3, r2
 800108c:	4770      	bx	lr
 800108e:	2080      	movs	r0, #128	@ 0x80
 8001090:	0400      	lsls	r0, r0, #16
 8001092:	4301      	orrs	r1, r0
 8001094:	2a95      	cmp	r2, #149	@ 0x95
 8001096:	dc07      	bgt.n	80010a8 <__aeabi_f2iz+0x34>
 8001098:	2096      	movs	r0, #150	@ 0x96
 800109a:	1a82      	subs	r2, r0, r2
 800109c:	40d1      	lsrs	r1, r2
 800109e:	4248      	negs	r0, r1
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1f3      	bne.n	800108c <__aeabi_f2iz+0x18>
 80010a4:	0008      	movs	r0, r1
 80010a6:	e7f1      	b.n	800108c <__aeabi_f2iz+0x18>
 80010a8:	3a96      	subs	r2, #150	@ 0x96
 80010aa:	4091      	lsls	r1, r2
 80010ac:	e7f7      	b.n	800109e <__aeabi_f2iz+0x2a>
 80010ae:	46c0      	nop			@ (mov r8, r8)
 80010b0:	7fffffff 	.word	0x7fffffff

080010b4 <__aeabi_i2f>:
 80010b4:	b570      	push	{r4, r5, r6, lr}
 80010b6:	2800      	cmp	r0, #0
 80010b8:	d012      	beq.n	80010e0 <__aeabi_i2f+0x2c>
 80010ba:	17c3      	asrs	r3, r0, #31
 80010bc:	18c5      	adds	r5, r0, r3
 80010be:	405d      	eors	r5, r3
 80010c0:	0fc4      	lsrs	r4, r0, #31
 80010c2:	0028      	movs	r0, r5
 80010c4:	f000 ff2e 	bl	8001f24 <__clzsi2>
 80010c8:	239e      	movs	r3, #158	@ 0x9e
 80010ca:	1a1b      	subs	r3, r3, r0
 80010cc:	2b96      	cmp	r3, #150	@ 0x96
 80010ce:	dc0f      	bgt.n	80010f0 <__aeabi_i2f+0x3c>
 80010d0:	2808      	cmp	r0, #8
 80010d2:	d038      	beq.n	8001146 <__aeabi_i2f+0x92>
 80010d4:	3808      	subs	r0, #8
 80010d6:	4085      	lsls	r5, r0
 80010d8:	026d      	lsls	r5, r5, #9
 80010da:	0a6d      	lsrs	r5, r5, #9
 80010dc:	b2d8      	uxtb	r0, r3
 80010de:	e002      	b.n	80010e6 <__aeabi_i2f+0x32>
 80010e0:	2400      	movs	r4, #0
 80010e2:	2000      	movs	r0, #0
 80010e4:	2500      	movs	r5, #0
 80010e6:	05c0      	lsls	r0, r0, #23
 80010e8:	4328      	orrs	r0, r5
 80010ea:	07e4      	lsls	r4, r4, #31
 80010ec:	4320      	orrs	r0, r4
 80010ee:	bd70      	pop	{r4, r5, r6, pc}
 80010f0:	2b99      	cmp	r3, #153	@ 0x99
 80010f2:	dc14      	bgt.n	800111e <__aeabi_i2f+0x6a>
 80010f4:	1f42      	subs	r2, r0, #5
 80010f6:	4095      	lsls	r5, r2
 80010f8:	002a      	movs	r2, r5
 80010fa:	4915      	ldr	r1, [pc, #84]	@ (8001150 <__aeabi_i2f+0x9c>)
 80010fc:	4011      	ands	r1, r2
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	d01c      	beq.n	800113c <__aeabi_i2f+0x88>
 8001102:	250f      	movs	r5, #15
 8001104:	402a      	ands	r2, r5
 8001106:	2a04      	cmp	r2, #4
 8001108:	d018      	beq.n	800113c <__aeabi_i2f+0x88>
 800110a:	3104      	adds	r1, #4
 800110c:	08ca      	lsrs	r2, r1, #3
 800110e:	0149      	lsls	r1, r1, #5
 8001110:	d515      	bpl.n	800113e <__aeabi_i2f+0x8a>
 8001112:	239f      	movs	r3, #159	@ 0x9f
 8001114:	0252      	lsls	r2, r2, #9
 8001116:	1a18      	subs	r0, r3, r0
 8001118:	0a55      	lsrs	r5, r2, #9
 800111a:	b2c0      	uxtb	r0, r0
 800111c:	e7e3      	b.n	80010e6 <__aeabi_i2f+0x32>
 800111e:	2205      	movs	r2, #5
 8001120:	0029      	movs	r1, r5
 8001122:	1a12      	subs	r2, r2, r0
 8001124:	40d1      	lsrs	r1, r2
 8001126:	0002      	movs	r2, r0
 8001128:	321b      	adds	r2, #27
 800112a:	4095      	lsls	r5, r2
 800112c:	002a      	movs	r2, r5
 800112e:	1e55      	subs	r5, r2, #1
 8001130:	41aa      	sbcs	r2, r5
 8001132:	430a      	orrs	r2, r1
 8001134:	4906      	ldr	r1, [pc, #24]	@ (8001150 <__aeabi_i2f+0x9c>)
 8001136:	4011      	ands	r1, r2
 8001138:	0755      	lsls	r5, r2, #29
 800113a:	d1e2      	bne.n	8001102 <__aeabi_i2f+0x4e>
 800113c:	08ca      	lsrs	r2, r1, #3
 800113e:	0252      	lsls	r2, r2, #9
 8001140:	0a55      	lsrs	r5, r2, #9
 8001142:	b2d8      	uxtb	r0, r3
 8001144:	e7cf      	b.n	80010e6 <__aeabi_i2f+0x32>
 8001146:	026d      	lsls	r5, r5, #9
 8001148:	0a6d      	lsrs	r5, r5, #9
 800114a:	308e      	adds	r0, #142	@ 0x8e
 800114c:	e7cb      	b.n	80010e6 <__aeabi_i2f+0x32>
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	fbffffff 	.word	0xfbffffff

08001154 <__aeabi_ddiv>:
 8001154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001156:	46de      	mov	lr, fp
 8001158:	4645      	mov	r5, r8
 800115a:	4657      	mov	r7, sl
 800115c:	464e      	mov	r6, r9
 800115e:	b5e0      	push	{r5, r6, r7, lr}
 8001160:	b087      	sub	sp, #28
 8001162:	9200      	str	r2, [sp, #0]
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	030b      	lsls	r3, r1, #12
 8001168:	0b1b      	lsrs	r3, r3, #12
 800116a:	469b      	mov	fp, r3
 800116c:	0fca      	lsrs	r2, r1, #31
 800116e:	004b      	lsls	r3, r1, #1
 8001170:	0004      	movs	r4, r0
 8001172:	4680      	mov	r8, r0
 8001174:	0d5b      	lsrs	r3, r3, #21
 8001176:	9202      	str	r2, [sp, #8]
 8001178:	d100      	bne.n	800117c <__aeabi_ddiv+0x28>
 800117a:	e098      	b.n	80012ae <__aeabi_ddiv+0x15a>
 800117c:	4a7c      	ldr	r2, [pc, #496]	@ (8001370 <__aeabi_ddiv+0x21c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d037      	beq.n	80011f2 <__aeabi_ddiv+0x9e>
 8001182:	4659      	mov	r1, fp
 8001184:	0f42      	lsrs	r2, r0, #29
 8001186:	00c9      	lsls	r1, r1, #3
 8001188:	430a      	orrs	r2, r1
 800118a:	2180      	movs	r1, #128	@ 0x80
 800118c:	0409      	lsls	r1, r1, #16
 800118e:	4311      	orrs	r1, r2
 8001190:	00c2      	lsls	r2, r0, #3
 8001192:	4690      	mov	r8, r2
 8001194:	4a77      	ldr	r2, [pc, #476]	@ (8001374 <__aeabi_ddiv+0x220>)
 8001196:	4689      	mov	r9, r1
 8001198:	4692      	mov	sl, r2
 800119a:	449a      	add	sl, r3
 800119c:	2300      	movs	r3, #0
 800119e:	2400      	movs	r4, #0
 80011a0:	9303      	str	r3, [sp, #12]
 80011a2:	9e00      	ldr	r6, [sp, #0]
 80011a4:	9f01      	ldr	r7, [sp, #4]
 80011a6:	033b      	lsls	r3, r7, #12
 80011a8:	0b1b      	lsrs	r3, r3, #12
 80011aa:	469b      	mov	fp, r3
 80011ac:	007b      	lsls	r3, r7, #1
 80011ae:	0030      	movs	r0, r6
 80011b0:	0d5b      	lsrs	r3, r3, #21
 80011b2:	0ffd      	lsrs	r5, r7, #31
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d059      	beq.n	800126c <__aeabi_ddiv+0x118>
 80011b8:	4a6d      	ldr	r2, [pc, #436]	@ (8001370 <__aeabi_ddiv+0x21c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d048      	beq.n	8001250 <__aeabi_ddiv+0xfc>
 80011be:	4659      	mov	r1, fp
 80011c0:	0f72      	lsrs	r2, r6, #29
 80011c2:	00c9      	lsls	r1, r1, #3
 80011c4:	430a      	orrs	r2, r1
 80011c6:	2180      	movs	r1, #128	@ 0x80
 80011c8:	0409      	lsls	r1, r1, #16
 80011ca:	4311      	orrs	r1, r2
 80011cc:	468b      	mov	fp, r1
 80011ce:	4969      	ldr	r1, [pc, #420]	@ (8001374 <__aeabi_ddiv+0x220>)
 80011d0:	00f2      	lsls	r2, r6, #3
 80011d2:	468c      	mov	ip, r1
 80011d4:	4651      	mov	r1, sl
 80011d6:	4463      	add	r3, ip
 80011d8:	1acb      	subs	r3, r1, r3
 80011da:	469a      	mov	sl, r3
 80011dc:	2100      	movs	r1, #0
 80011de:	9e02      	ldr	r6, [sp, #8]
 80011e0:	406e      	eors	r6, r5
 80011e2:	b2f6      	uxtb	r6, r6
 80011e4:	2c0f      	cmp	r4, #15
 80011e6:	d900      	bls.n	80011ea <__aeabi_ddiv+0x96>
 80011e8:	e0ce      	b.n	8001388 <__aeabi_ddiv+0x234>
 80011ea:	4b63      	ldr	r3, [pc, #396]	@ (8001378 <__aeabi_ddiv+0x224>)
 80011ec:	00a4      	lsls	r4, r4, #2
 80011ee:	591b      	ldr	r3, [r3, r4]
 80011f0:	469f      	mov	pc, r3
 80011f2:	465a      	mov	r2, fp
 80011f4:	4302      	orrs	r2, r0
 80011f6:	4691      	mov	r9, r2
 80011f8:	d000      	beq.n	80011fc <__aeabi_ddiv+0xa8>
 80011fa:	e090      	b.n	800131e <__aeabi_ddiv+0x1ca>
 80011fc:	469a      	mov	sl, r3
 80011fe:	2302      	movs	r3, #2
 8001200:	4690      	mov	r8, r2
 8001202:	2408      	movs	r4, #8
 8001204:	9303      	str	r3, [sp, #12]
 8001206:	e7cc      	b.n	80011a2 <__aeabi_ddiv+0x4e>
 8001208:	46cb      	mov	fp, r9
 800120a:	4642      	mov	r2, r8
 800120c:	9d02      	ldr	r5, [sp, #8]
 800120e:	9903      	ldr	r1, [sp, #12]
 8001210:	2902      	cmp	r1, #2
 8001212:	d100      	bne.n	8001216 <__aeabi_ddiv+0xc2>
 8001214:	e1de      	b.n	80015d4 <__aeabi_ddiv+0x480>
 8001216:	2903      	cmp	r1, #3
 8001218:	d100      	bne.n	800121c <__aeabi_ddiv+0xc8>
 800121a:	e08d      	b.n	8001338 <__aeabi_ddiv+0x1e4>
 800121c:	2901      	cmp	r1, #1
 800121e:	d000      	beq.n	8001222 <__aeabi_ddiv+0xce>
 8001220:	e179      	b.n	8001516 <__aeabi_ddiv+0x3c2>
 8001222:	002e      	movs	r6, r5
 8001224:	2200      	movs	r2, #0
 8001226:	2300      	movs	r3, #0
 8001228:	2400      	movs	r4, #0
 800122a:	4690      	mov	r8, r2
 800122c:	051b      	lsls	r3, r3, #20
 800122e:	4323      	orrs	r3, r4
 8001230:	07f6      	lsls	r6, r6, #31
 8001232:	4333      	orrs	r3, r6
 8001234:	4640      	mov	r0, r8
 8001236:	0019      	movs	r1, r3
 8001238:	b007      	add	sp, #28
 800123a:	bcf0      	pop	{r4, r5, r6, r7}
 800123c:	46bb      	mov	fp, r7
 800123e:	46b2      	mov	sl, r6
 8001240:	46a9      	mov	r9, r5
 8001242:	46a0      	mov	r8, r4
 8001244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001246:	2200      	movs	r2, #0
 8001248:	2400      	movs	r4, #0
 800124a:	4690      	mov	r8, r2
 800124c:	4b48      	ldr	r3, [pc, #288]	@ (8001370 <__aeabi_ddiv+0x21c>)
 800124e:	e7ed      	b.n	800122c <__aeabi_ddiv+0xd8>
 8001250:	465a      	mov	r2, fp
 8001252:	9b00      	ldr	r3, [sp, #0]
 8001254:	431a      	orrs	r2, r3
 8001256:	4b49      	ldr	r3, [pc, #292]	@ (800137c <__aeabi_ddiv+0x228>)
 8001258:	469c      	mov	ip, r3
 800125a:	44e2      	add	sl, ip
 800125c:	2a00      	cmp	r2, #0
 800125e:	d159      	bne.n	8001314 <__aeabi_ddiv+0x1c0>
 8001260:	2302      	movs	r3, #2
 8001262:	431c      	orrs	r4, r3
 8001264:	2300      	movs	r3, #0
 8001266:	2102      	movs	r1, #2
 8001268:	469b      	mov	fp, r3
 800126a:	e7b8      	b.n	80011de <__aeabi_ddiv+0x8a>
 800126c:	465a      	mov	r2, fp
 800126e:	9b00      	ldr	r3, [sp, #0]
 8001270:	431a      	orrs	r2, r3
 8001272:	d049      	beq.n	8001308 <__aeabi_ddiv+0x1b4>
 8001274:	465b      	mov	r3, fp
 8001276:	2b00      	cmp	r3, #0
 8001278:	d100      	bne.n	800127c <__aeabi_ddiv+0x128>
 800127a:	e19c      	b.n	80015b6 <__aeabi_ddiv+0x462>
 800127c:	4658      	mov	r0, fp
 800127e:	f000 fe51 	bl	8001f24 <__clzsi2>
 8001282:	0002      	movs	r2, r0
 8001284:	0003      	movs	r3, r0
 8001286:	3a0b      	subs	r2, #11
 8001288:	271d      	movs	r7, #29
 800128a:	9e00      	ldr	r6, [sp, #0]
 800128c:	1aba      	subs	r2, r7, r2
 800128e:	0019      	movs	r1, r3
 8001290:	4658      	mov	r0, fp
 8001292:	40d6      	lsrs	r6, r2
 8001294:	3908      	subs	r1, #8
 8001296:	4088      	lsls	r0, r1
 8001298:	0032      	movs	r2, r6
 800129a:	4302      	orrs	r2, r0
 800129c:	4693      	mov	fp, r2
 800129e:	9a00      	ldr	r2, [sp, #0]
 80012a0:	408a      	lsls	r2, r1
 80012a2:	4937      	ldr	r1, [pc, #220]	@ (8001380 <__aeabi_ddiv+0x22c>)
 80012a4:	4453      	add	r3, sl
 80012a6:	468a      	mov	sl, r1
 80012a8:	2100      	movs	r1, #0
 80012aa:	449a      	add	sl, r3
 80012ac:	e797      	b.n	80011de <__aeabi_ddiv+0x8a>
 80012ae:	465b      	mov	r3, fp
 80012b0:	4303      	orrs	r3, r0
 80012b2:	4699      	mov	r9, r3
 80012b4:	d021      	beq.n	80012fa <__aeabi_ddiv+0x1a6>
 80012b6:	465b      	mov	r3, fp
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d100      	bne.n	80012be <__aeabi_ddiv+0x16a>
 80012bc:	e169      	b.n	8001592 <__aeabi_ddiv+0x43e>
 80012be:	4658      	mov	r0, fp
 80012c0:	f000 fe30 	bl	8001f24 <__clzsi2>
 80012c4:	230b      	movs	r3, #11
 80012c6:	425b      	negs	r3, r3
 80012c8:	469c      	mov	ip, r3
 80012ca:	0002      	movs	r2, r0
 80012cc:	4484      	add	ip, r0
 80012ce:	4666      	mov	r6, ip
 80012d0:	231d      	movs	r3, #29
 80012d2:	1b9b      	subs	r3, r3, r6
 80012d4:	0026      	movs	r6, r4
 80012d6:	0011      	movs	r1, r2
 80012d8:	4658      	mov	r0, fp
 80012da:	40de      	lsrs	r6, r3
 80012dc:	3908      	subs	r1, #8
 80012de:	4088      	lsls	r0, r1
 80012e0:	0033      	movs	r3, r6
 80012e2:	4303      	orrs	r3, r0
 80012e4:	4699      	mov	r9, r3
 80012e6:	0023      	movs	r3, r4
 80012e8:	408b      	lsls	r3, r1
 80012ea:	4698      	mov	r8, r3
 80012ec:	4b25      	ldr	r3, [pc, #148]	@ (8001384 <__aeabi_ddiv+0x230>)
 80012ee:	2400      	movs	r4, #0
 80012f0:	1a9b      	subs	r3, r3, r2
 80012f2:	469a      	mov	sl, r3
 80012f4:	2300      	movs	r3, #0
 80012f6:	9303      	str	r3, [sp, #12]
 80012f8:	e753      	b.n	80011a2 <__aeabi_ddiv+0x4e>
 80012fa:	2300      	movs	r3, #0
 80012fc:	4698      	mov	r8, r3
 80012fe:	469a      	mov	sl, r3
 8001300:	3301      	adds	r3, #1
 8001302:	2404      	movs	r4, #4
 8001304:	9303      	str	r3, [sp, #12]
 8001306:	e74c      	b.n	80011a2 <__aeabi_ddiv+0x4e>
 8001308:	2301      	movs	r3, #1
 800130a:	431c      	orrs	r4, r3
 800130c:	2300      	movs	r3, #0
 800130e:	2101      	movs	r1, #1
 8001310:	469b      	mov	fp, r3
 8001312:	e764      	b.n	80011de <__aeabi_ddiv+0x8a>
 8001314:	2303      	movs	r3, #3
 8001316:	0032      	movs	r2, r6
 8001318:	2103      	movs	r1, #3
 800131a:	431c      	orrs	r4, r3
 800131c:	e75f      	b.n	80011de <__aeabi_ddiv+0x8a>
 800131e:	469a      	mov	sl, r3
 8001320:	2303      	movs	r3, #3
 8001322:	46d9      	mov	r9, fp
 8001324:	240c      	movs	r4, #12
 8001326:	9303      	str	r3, [sp, #12]
 8001328:	e73b      	b.n	80011a2 <__aeabi_ddiv+0x4e>
 800132a:	2300      	movs	r3, #0
 800132c:	2480      	movs	r4, #128	@ 0x80
 800132e:	4698      	mov	r8, r3
 8001330:	2600      	movs	r6, #0
 8001332:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <__aeabi_ddiv+0x21c>)
 8001334:	0324      	lsls	r4, r4, #12
 8001336:	e779      	b.n	800122c <__aeabi_ddiv+0xd8>
 8001338:	2480      	movs	r4, #128	@ 0x80
 800133a:	465b      	mov	r3, fp
 800133c:	0324      	lsls	r4, r4, #12
 800133e:	431c      	orrs	r4, r3
 8001340:	0324      	lsls	r4, r4, #12
 8001342:	002e      	movs	r6, r5
 8001344:	4690      	mov	r8, r2
 8001346:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <__aeabi_ddiv+0x21c>)
 8001348:	0b24      	lsrs	r4, r4, #12
 800134a:	e76f      	b.n	800122c <__aeabi_ddiv+0xd8>
 800134c:	2480      	movs	r4, #128	@ 0x80
 800134e:	464b      	mov	r3, r9
 8001350:	0324      	lsls	r4, r4, #12
 8001352:	4223      	tst	r3, r4
 8001354:	d002      	beq.n	800135c <__aeabi_ddiv+0x208>
 8001356:	465b      	mov	r3, fp
 8001358:	4223      	tst	r3, r4
 800135a:	d0f0      	beq.n	800133e <__aeabi_ddiv+0x1ea>
 800135c:	2480      	movs	r4, #128	@ 0x80
 800135e:	464b      	mov	r3, r9
 8001360:	0324      	lsls	r4, r4, #12
 8001362:	431c      	orrs	r4, r3
 8001364:	0324      	lsls	r4, r4, #12
 8001366:	9e02      	ldr	r6, [sp, #8]
 8001368:	4b01      	ldr	r3, [pc, #4]	@ (8001370 <__aeabi_ddiv+0x21c>)
 800136a:	0b24      	lsrs	r4, r4, #12
 800136c:	e75e      	b.n	800122c <__aeabi_ddiv+0xd8>
 800136e:	46c0      	nop			@ (mov r8, r8)
 8001370:	000007ff 	.word	0x000007ff
 8001374:	fffffc01 	.word	0xfffffc01
 8001378:	08006dc8 	.word	0x08006dc8
 800137c:	fffff801 	.word	0xfffff801
 8001380:	000003f3 	.word	0x000003f3
 8001384:	fffffc0d 	.word	0xfffffc0d
 8001388:	45cb      	cmp	fp, r9
 800138a:	d200      	bcs.n	800138e <__aeabi_ddiv+0x23a>
 800138c:	e0f8      	b.n	8001580 <__aeabi_ddiv+0x42c>
 800138e:	d100      	bne.n	8001392 <__aeabi_ddiv+0x23e>
 8001390:	e0f3      	b.n	800157a <__aeabi_ddiv+0x426>
 8001392:	2301      	movs	r3, #1
 8001394:	425b      	negs	r3, r3
 8001396:	469c      	mov	ip, r3
 8001398:	4644      	mov	r4, r8
 800139a:	4648      	mov	r0, r9
 800139c:	2500      	movs	r5, #0
 800139e:	44e2      	add	sl, ip
 80013a0:	465b      	mov	r3, fp
 80013a2:	0e17      	lsrs	r7, r2, #24
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	431f      	orrs	r7, r3
 80013a8:	0c19      	lsrs	r1, r3, #16
 80013aa:	043b      	lsls	r3, r7, #16
 80013ac:	0212      	lsls	r2, r2, #8
 80013ae:	9700      	str	r7, [sp, #0]
 80013b0:	0c1f      	lsrs	r7, r3, #16
 80013b2:	4691      	mov	r9, r2
 80013b4:	9102      	str	r1, [sp, #8]
 80013b6:	9703      	str	r7, [sp, #12]
 80013b8:	f7fe ff4e 	bl	8000258 <__aeabi_uidivmod>
 80013bc:	0002      	movs	r2, r0
 80013be:	437a      	muls	r2, r7
 80013c0:	040b      	lsls	r3, r1, #16
 80013c2:	0c21      	lsrs	r1, r4, #16
 80013c4:	4680      	mov	r8, r0
 80013c6:	4319      	orrs	r1, r3
 80013c8:	428a      	cmp	r2, r1
 80013ca:	d909      	bls.n	80013e0 <__aeabi_ddiv+0x28c>
 80013cc:	9f00      	ldr	r7, [sp, #0]
 80013ce:	2301      	movs	r3, #1
 80013d0:	46bc      	mov	ip, r7
 80013d2:	425b      	negs	r3, r3
 80013d4:	4461      	add	r1, ip
 80013d6:	469c      	mov	ip, r3
 80013d8:	44e0      	add	r8, ip
 80013da:	428f      	cmp	r7, r1
 80013dc:	d800      	bhi.n	80013e0 <__aeabi_ddiv+0x28c>
 80013de:	e15c      	b.n	800169a <__aeabi_ddiv+0x546>
 80013e0:	1a88      	subs	r0, r1, r2
 80013e2:	9902      	ldr	r1, [sp, #8]
 80013e4:	f7fe ff38 	bl	8000258 <__aeabi_uidivmod>
 80013e8:	9a03      	ldr	r2, [sp, #12]
 80013ea:	0424      	lsls	r4, r4, #16
 80013ec:	4342      	muls	r2, r0
 80013ee:	0409      	lsls	r1, r1, #16
 80013f0:	0c24      	lsrs	r4, r4, #16
 80013f2:	0003      	movs	r3, r0
 80013f4:	430c      	orrs	r4, r1
 80013f6:	42a2      	cmp	r2, r4
 80013f8:	d906      	bls.n	8001408 <__aeabi_ddiv+0x2b4>
 80013fa:	9900      	ldr	r1, [sp, #0]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	468c      	mov	ip, r1
 8001400:	4464      	add	r4, ip
 8001402:	42a1      	cmp	r1, r4
 8001404:	d800      	bhi.n	8001408 <__aeabi_ddiv+0x2b4>
 8001406:	e142      	b.n	800168e <__aeabi_ddiv+0x53a>
 8001408:	1aa0      	subs	r0, r4, r2
 800140a:	4642      	mov	r2, r8
 800140c:	0412      	lsls	r2, r2, #16
 800140e:	431a      	orrs	r2, r3
 8001410:	4693      	mov	fp, r2
 8001412:	464b      	mov	r3, r9
 8001414:	4659      	mov	r1, fp
 8001416:	0c1b      	lsrs	r3, r3, #16
 8001418:	001f      	movs	r7, r3
 800141a:	9304      	str	r3, [sp, #16]
 800141c:	040b      	lsls	r3, r1, #16
 800141e:	4649      	mov	r1, r9
 8001420:	0409      	lsls	r1, r1, #16
 8001422:	0c09      	lsrs	r1, r1, #16
 8001424:	000c      	movs	r4, r1
 8001426:	0c1b      	lsrs	r3, r3, #16
 8001428:	435c      	muls	r4, r3
 800142a:	0c12      	lsrs	r2, r2, #16
 800142c:	437b      	muls	r3, r7
 800142e:	4688      	mov	r8, r1
 8001430:	4351      	muls	r1, r2
 8001432:	437a      	muls	r2, r7
 8001434:	0c27      	lsrs	r7, r4, #16
 8001436:	46bc      	mov	ip, r7
 8001438:	185b      	adds	r3, r3, r1
 800143a:	4463      	add	r3, ip
 800143c:	4299      	cmp	r1, r3
 800143e:	d903      	bls.n	8001448 <__aeabi_ddiv+0x2f4>
 8001440:	2180      	movs	r1, #128	@ 0x80
 8001442:	0249      	lsls	r1, r1, #9
 8001444:	468c      	mov	ip, r1
 8001446:	4462      	add	r2, ip
 8001448:	0c19      	lsrs	r1, r3, #16
 800144a:	0424      	lsls	r4, r4, #16
 800144c:	041b      	lsls	r3, r3, #16
 800144e:	0c24      	lsrs	r4, r4, #16
 8001450:	188a      	adds	r2, r1, r2
 8001452:	191c      	adds	r4, r3, r4
 8001454:	4290      	cmp	r0, r2
 8001456:	d302      	bcc.n	800145e <__aeabi_ddiv+0x30a>
 8001458:	d116      	bne.n	8001488 <__aeabi_ddiv+0x334>
 800145a:	42a5      	cmp	r5, r4
 800145c:	d214      	bcs.n	8001488 <__aeabi_ddiv+0x334>
 800145e:	465b      	mov	r3, fp
 8001460:	9f00      	ldr	r7, [sp, #0]
 8001462:	3b01      	subs	r3, #1
 8001464:	444d      	add	r5, r9
 8001466:	9305      	str	r3, [sp, #20]
 8001468:	454d      	cmp	r5, r9
 800146a:	419b      	sbcs	r3, r3
 800146c:	46bc      	mov	ip, r7
 800146e:	425b      	negs	r3, r3
 8001470:	4463      	add	r3, ip
 8001472:	18c0      	adds	r0, r0, r3
 8001474:	4287      	cmp	r7, r0
 8001476:	d300      	bcc.n	800147a <__aeabi_ddiv+0x326>
 8001478:	e102      	b.n	8001680 <__aeabi_ddiv+0x52c>
 800147a:	4282      	cmp	r2, r0
 800147c:	d900      	bls.n	8001480 <__aeabi_ddiv+0x32c>
 800147e:	e129      	b.n	80016d4 <__aeabi_ddiv+0x580>
 8001480:	d100      	bne.n	8001484 <__aeabi_ddiv+0x330>
 8001482:	e124      	b.n	80016ce <__aeabi_ddiv+0x57a>
 8001484:	9b05      	ldr	r3, [sp, #20]
 8001486:	469b      	mov	fp, r3
 8001488:	1b2c      	subs	r4, r5, r4
 800148a:	42a5      	cmp	r5, r4
 800148c:	41ad      	sbcs	r5, r5
 800148e:	9b00      	ldr	r3, [sp, #0]
 8001490:	1a80      	subs	r0, r0, r2
 8001492:	426d      	negs	r5, r5
 8001494:	1b40      	subs	r0, r0, r5
 8001496:	4283      	cmp	r3, r0
 8001498:	d100      	bne.n	800149c <__aeabi_ddiv+0x348>
 800149a:	e10f      	b.n	80016bc <__aeabi_ddiv+0x568>
 800149c:	9902      	ldr	r1, [sp, #8]
 800149e:	f7fe fedb 	bl	8000258 <__aeabi_uidivmod>
 80014a2:	9a03      	ldr	r2, [sp, #12]
 80014a4:	040b      	lsls	r3, r1, #16
 80014a6:	4342      	muls	r2, r0
 80014a8:	0c21      	lsrs	r1, r4, #16
 80014aa:	0005      	movs	r5, r0
 80014ac:	4319      	orrs	r1, r3
 80014ae:	428a      	cmp	r2, r1
 80014b0:	d900      	bls.n	80014b4 <__aeabi_ddiv+0x360>
 80014b2:	e0cb      	b.n	800164c <__aeabi_ddiv+0x4f8>
 80014b4:	1a88      	subs	r0, r1, r2
 80014b6:	9902      	ldr	r1, [sp, #8]
 80014b8:	f7fe fece 	bl	8000258 <__aeabi_uidivmod>
 80014bc:	9a03      	ldr	r2, [sp, #12]
 80014be:	0424      	lsls	r4, r4, #16
 80014c0:	4342      	muls	r2, r0
 80014c2:	0409      	lsls	r1, r1, #16
 80014c4:	0c24      	lsrs	r4, r4, #16
 80014c6:	0003      	movs	r3, r0
 80014c8:	430c      	orrs	r4, r1
 80014ca:	42a2      	cmp	r2, r4
 80014cc:	d900      	bls.n	80014d0 <__aeabi_ddiv+0x37c>
 80014ce:	e0ca      	b.n	8001666 <__aeabi_ddiv+0x512>
 80014d0:	4641      	mov	r1, r8
 80014d2:	1aa4      	subs	r4, r4, r2
 80014d4:	042a      	lsls	r2, r5, #16
 80014d6:	431a      	orrs	r2, r3
 80014d8:	9f04      	ldr	r7, [sp, #16]
 80014da:	0413      	lsls	r3, r2, #16
 80014dc:	0c1b      	lsrs	r3, r3, #16
 80014de:	4359      	muls	r1, r3
 80014e0:	4640      	mov	r0, r8
 80014e2:	437b      	muls	r3, r7
 80014e4:	469c      	mov	ip, r3
 80014e6:	0c15      	lsrs	r5, r2, #16
 80014e8:	4368      	muls	r0, r5
 80014ea:	0c0b      	lsrs	r3, r1, #16
 80014ec:	4484      	add	ip, r0
 80014ee:	4463      	add	r3, ip
 80014f0:	437d      	muls	r5, r7
 80014f2:	4298      	cmp	r0, r3
 80014f4:	d903      	bls.n	80014fe <__aeabi_ddiv+0x3aa>
 80014f6:	2080      	movs	r0, #128	@ 0x80
 80014f8:	0240      	lsls	r0, r0, #9
 80014fa:	4684      	mov	ip, r0
 80014fc:	4465      	add	r5, ip
 80014fe:	0c18      	lsrs	r0, r3, #16
 8001500:	0409      	lsls	r1, r1, #16
 8001502:	041b      	lsls	r3, r3, #16
 8001504:	0c09      	lsrs	r1, r1, #16
 8001506:	1940      	adds	r0, r0, r5
 8001508:	185b      	adds	r3, r3, r1
 800150a:	4284      	cmp	r4, r0
 800150c:	d327      	bcc.n	800155e <__aeabi_ddiv+0x40a>
 800150e:	d023      	beq.n	8001558 <__aeabi_ddiv+0x404>
 8001510:	2301      	movs	r3, #1
 8001512:	0035      	movs	r5, r6
 8001514:	431a      	orrs	r2, r3
 8001516:	4b94      	ldr	r3, [pc, #592]	@ (8001768 <__aeabi_ddiv+0x614>)
 8001518:	4453      	add	r3, sl
 800151a:	2b00      	cmp	r3, #0
 800151c:	dd60      	ble.n	80015e0 <__aeabi_ddiv+0x48c>
 800151e:	0751      	lsls	r1, r2, #29
 8001520:	d000      	beq.n	8001524 <__aeabi_ddiv+0x3d0>
 8001522:	e086      	b.n	8001632 <__aeabi_ddiv+0x4de>
 8001524:	002e      	movs	r6, r5
 8001526:	08d1      	lsrs	r1, r2, #3
 8001528:	465a      	mov	r2, fp
 800152a:	01d2      	lsls	r2, r2, #7
 800152c:	d506      	bpl.n	800153c <__aeabi_ddiv+0x3e8>
 800152e:	465a      	mov	r2, fp
 8001530:	4b8e      	ldr	r3, [pc, #568]	@ (800176c <__aeabi_ddiv+0x618>)
 8001532:	401a      	ands	r2, r3
 8001534:	2380      	movs	r3, #128	@ 0x80
 8001536:	4693      	mov	fp, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	4453      	add	r3, sl
 800153c:	4a8c      	ldr	r2, [pc, #560]	@ (8001770 <__aeabi_ddiv+0x61c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	dd00      	ble.n	8001544 <__aeabi_ddiv+0x3f0>
 8001542:	e680      	b.n	8001246 <__aeabi_ddiv+0xf2>
 8001544:	465a      	mov	r2, fp
 8001546:	0752      	lsls	r2, r2, #29
 8001548:	430a      	orrs	r2, r1
 800154a:	4690      	mov	r8, r2
 800154c:	465a      	mov	r2, fp
 800154e:	055b      	lsls	r3, r3, #21
 8001550:	0254      	lsls	r4, r2, #9
 8001552:	0b24      	lsrs	r4, r4, #12
 8001554:	0d5b      	lsrs	r3, r3, #21
 8001556:	e669      	b.n	800122c <__aeabi_ddiv+0xd8>
 8001558:	0035      	movs	r5, r6
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0db      	beq.n	8001516 <__aeabi_ddiv+0x3c2>
 800155e:	9d00      	ldr	r5, [sp, #0]
 8001560:	1e51      	subs	r1, r2, #1
 8001562:	46ac      	mov	ip, r5
 8001564:	4464      	add	r4, ip
 8001566:	42ac      	cmp	r4, r5
 8001568:	d200      	bcs.n	800156c <__aeabi_ddiv+0x418>
 800156a:	e09e      	b.n	80016aa <__aeabi_ddiv+0x556>
 800156c:	4284      	cmp	r4, r0
 800156e:	d200      	bcs.n	8001572 <__aeabi_ddiv+0x41e>
 8001570:	e0e1      	b.n	8001736 <__aeabi_ddiv+0x5e2>
 8001572:	d100      	bne.n	8001576 <__aeabi_ddiv+0x422>
 8001574:	e0ee      	b.n	8001754 <__aeabi_ddiv+0x600>
 8001576:	000a      	movs	r2, r1
 8001578:	e7ca      	b.n	8001510 <__aeabi_ddiv+0x3bc>
 800157a:	4542      	cmp	r2, r8
 800157c:	d900      	bls.n	8001580 <__aeabi_ddiv+0x42c>
 800157e:	e708      	b.n	8001392 <__aeabi_ddiv+0x23e>
 8001580:	464b      	mov	r3, r9
 8001582:	07dc      	lsls	r4, r3, #31
 8001584:	0858      	lsrs	r0, r3, #1
 8001586:	4643      	mov	r3, r8
 8001588:	085b      	lsrs	r3, r3, #1
 800158a:	431c      	orrs	r4, r3
 800158c:	4643      	mov	r3, r8
 800158e:	07dd      	lsls	r5, r3, #31
 8001590:	e706      	b.n	80013a0 <__aeabi_ddiv+0x24c>
 8001592:	f000 fcc7 	bl	8001f24 <__clzsi2>
 8001596:	2315      	movs	r3, #21
 8001598:	469c      	mov	ip, r3
 800159a:	4484      	add	ip, r0
 800159c:	0002      	movs	r2, r0
 800159e:	4663      	mov	r3, ip
 80015a0:	3220      	adds	r2, #32
 80015a2:	2b1c      	cmp	r3, #28
 80015a4:	dc00      	bgt.n	80015a8 <__aeabi_ddiv+0x454>
 80015a6:	e692      	b.n	80012ce <__aeabi_ddiv+0x17a>
 80015a8:	0023      	movs	r3, r4
 80015aa:	3808      	subs	r0, #8
 80015ac:	4083      	lsls	r3, r0
 80015ae:	4699      	mov	r9, r3
 80015b0:	2300      	movs	r3, #0
 80015b2:	4698      	mov	r8, r3
 80015b4:	e69a      	b.n	80012ec <__aeabi_ddiv+0x198>
 80015b6:	f000 fcb5 	bl	8001f24 <__clzsi2>
 80015ba:	0002      	movs	r2, r0
 80015bc:	0003      	movs	r3, r0
 80015be:	3215      	adds	r2, #21
 80015c0:	3320      	adds	r3, #32
 80015c2:	2a1c      	cmp	r2, #28
 80015c4:	dc00      	bgt.n	80015c8 <__aeabi_ddiv+0x474>
 80015c6:	e65f      	b.n	8001288 <__aeabi_ddiv+0x134>
 80015c8:	9900      	ldr	r1, [sp, #0]
 80015ca:	3808      	subs	r0, #8
 80015cc:	4081      	lsls	r1, r0
 80015ce:	2200      	movs	r2, #0
 80015d0:	468b      	mov	fp, r1
 80015d2:	e666      	b.n	80012a2 <__aeabi_ddiv+0x14e>
 80015d4:	2200      	movs	r2, #0
 80015d6:	002e      	movs	r6, r5
 80015d8:	2400      	movs	r4, #0
 80015da:	4690      	mov	r8, r2
 80015dc:	4b65      	ldr	r3, [pc, #404]	@ (8001774 <__aeabi_ddiv+0x620>)
 80015de:	e625      	b.n	800122c <__aeabi_ddiv+0xd8>
 80015e0:	002e      	movs	r6, r5
 80015e2:	2101      	movs	r1, #1
 80015e4:	1ac9      	subs	r1, r1, r3
 80015e6:	2938      	cmp	r1, #56	@ 0x38
 80015e8:	dd00      	ble.n	80015ec <__aeabi_ddiv+0x498>
 80015ea:	e61b      	b.n	8001224 <__aeabi_ddiv+0xd0>
 80015ec:	291f      	cmp	r1, #31
 80015ee:	dc7e      	bgt.n	80016ee <__aeabi_ddiv+0x59a>
 80015f0:	4861      	ldr	r0, [pc, #388]	@ (8001778 <__aeabi_ddiv+0x624>)
 80015f2:	0014      	movs	r4, r2
 80015f4:	4450      	add	r0, sl
 80015f6:	465b      	mov	r3, fp
 80015f8:	4082      	lsls	r2, r0
 80015fa:	4083      	lsls	r3, r0
 80015fc:	40cc      	lsrs	r4, r1
 80015fe:	1e50      	subs	r0, r2, #1
 8001600:	4182      	sbcs	r2, r0
 8001602:	4323      	orrs	r3, r4
 8001604:	431a      	orrs	r2, r3
 8001606:	465b      	mov	r3, fp
 8001608:	40cb      	lsrs	r3, r1
 800160a:	0751      	lsls	r1, r2, #29
 800160c:	d009      	beq.n	8001622 <__aeabi_ddiv+0x4ce>
 800160e:	210f      	movs	r1, #15
 8001610:	4011      	ands	r1, r2
 8001612:	2904      	cmp	r1, #4
 8001614:	d005      	beq.n	8001622 <__aeabi_ddiv+0x4ce>
 8001616:	1d11      	adds	r1, r2, #4
 8001618:	4291      	cmp	r1, r2
 800161a:	4192      	sbcs	r2, r2
 800161c:	4252      	negs	r2, r2
 800161e:	189b      	adds	r3, r3, r2
 8001620:	000a      	movs	r2, r1
 8001622:	0219      	lsls	r1, r3, #8
 8001624:	d400      	bmi.n	8001628 <__aeabi_ddiv+0x4d4>
 8001626:	e09b      	b.n	8001760 <__aeabi_ddiv+0x60c>
 8001628:	2200      	movs	r2, #0
 800162a:	2301      	movs	r3, #1
 800162c:	2400      	movs	r4, #0
 800162e:	4690      	mov	r8, r2
 8001630:	e5fc      	b.n	800122c <__aeabi_ddiv+0xd8>
 8001632:	210f      	movs	r1, #15
 8001634:	4011      	ands	r1, r2
 8001636:	2904      	cmp	r1, #4
 8001638:	d100      	bne.n	800163c <__aeabi_ddiv+0x4e8>
 800163a:	e773      	b.n	8001524 <__aeabi_ddiv+0x3d0>
 800163c:	1d11      	adds	r1, r2, #4
 800163e:	4291      	cmp	r1, r2
 8001640:	4192      	sbcs	r2, r2
 8001642:	4252      	negs	r2, r2
 8001644:	002e      	movs	r6, r5
 8001646:	08c9      	lsrs	r1, r1, #3
 8001648:	4493      	add	fp, r2
 800164a:	e76d      	b.n	8001528 <__aeabi_ddiv+0x3d4>
 800164c:	9b00      	ldr	r3, [sp, #0]
 800164e:	3d01      	subs	r5, #1
 8001650:	469c      	mov	ip, r3
 8001652:	4461      	add	r1, ip
 8001654:	428b      	cmp	r3, r1
 8001656:	d900      	bls.n	800165a <__aeabi_ddiv+0x506>
 8001658:	e72c      	b.n	80014b4 <__aeabi_ddiv+0x360>
 800165a:	428a      	cmp	r2, r1
 800165c:	d800      	bhi.n	8001660 <__aeabi_ddiv+0x50c>
 800165e:	e729      	b.n	80014b4 <__aeabi_ddiv+0x360>
 8001660:	1e85      	subs	r5, r0, #2
 8001662:	4461      	add	r1, ip
 8001664:	e726      	b.n	80014b4 <__aeabi_ddiv+0x360>
 8001666:	9900      	ldr	r1, [sp, #0]
 8001668:	3b01      	subs	r3, #1
 800166a:	468c      	mov	ip, r1
 800166c:	4464      	add	r4, ip
 800166e:	42a1      	cmp	r1, r4
 8001670:	d900      	bls.n	8001674 <__aeabi_ddiv+0x520>
 8001672:	e72d      	b.n	80014d0 <__aeabi_ddiv+0x37c>
 8001674:	42a2      	cmp	r2, r4
 8001676:	d800      	bhi.n	800167a <__aeabi_ddiv+0x526>
 8001678:	e72a      	b.n	80014d0 <__aeabi_ddiv+0x37c>
 800167a:	1e83      	subs	r3, r0, #2
 800167c:	4464      	add	r4, ip
 800167e:	e727      	b.n	80014d0 <__aeabi_ddiv+0x37c>
 8001680:	4287      	cmp	r7, r0
 8001682:	d000      	beq.n	8001686 <__aeabi_ddiv+0x532>
 8001684:	e6fe      	b.n	8001484 <__aeabi_ddiv+0x330>
 8001686:	45a9      	cmp	r9, r5
 8001688:	d900      	bls.n	800168c <__aeabi_ddiv+0x538>
 800168a:	e6fb      	b.n	8001484 <__aeabi_ddiv+0x330>
 800168c:	e6f5      	b.n	800147a <__aeabi_ddiv+0x326>
 800168e:	42a2      	cmp	r2, r4
 8001690:	d800      	bhi.n	8001694 <__aeabi_ddiv+0x540>
 8001692:	e6b9      	b.n	8001408 <__aeabi_ddiv+0x2b4>
 8001694:	1e83      	subs	r3, r0, #2
 8001696:	4464      	add	r4, ip
 8001698:	e6b6      	b.n	8001408 <__aeabi_ddiv+0x2b4>
 800169a:	428a      	cmp	r2, r1
 800169c:	d800      	bhi.n	80016a0 <__aeabi_ddiv+0x54c>
 800169e:	e69f      	b.n	80013e0 <__aeabi_ddiv+0x28c>
 80016a0:	46bc      	mov	ip, r7
 80016a2:	1e83      	subs	r3, r0, #2
 80016a4:	4698      	mov	r8, r3
 80016a6:	4461      	add	r1, ip
 80016a8:	e69a      	b.n	80013e0 <__aeabi_ddiv+0x28c>
 80016aa:	000a      	movs	r2, r1
 80016ac:	4284      	cmp	r4, r0
 80016ae:	d000      	beq.n	80016b2 <__aeabi_ddiv+0x55e>
 80016b0:	e72e      	b.n	8001510 <__aeabi_ddiv+0x3bc>
 80016b2:	454b      	cmp	r3, r9
 80016b4:	d000      	beq.n	80016b8 <__aeabi_ddiv+0x564>
 80016b6:	e72b      	b.n	8001510 <__aeabi_ddiv+0x3bc>
 80016b8:	0035      	movs	r5, r6
 80016ba:	e72c      	b.n	8001516 <__aeabi_ddiv+0x3c2>
 80016bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001768 <__aeabi_ddiv+0x614>)
 80016be:	4a2f      	ldr	r2, [pc, #188]	@ (800177c <__aeabi_ddiv+0x628>)
 80016c0:	4453      	add	r3, sl
 80016c2:	4592      	cmp	sl, r2
 80016c4:	db43      	blt.n	800174e <__aeabi_ddiv+0x5fa>
 80016c6:	2201      	movs	r2, #1
 80016c8:	2100      	movs	r1, #0
 80016ca:	4493      	add	fp, r2
 80016cc:	e72c      	b.n	8001528 <__aeabi_ddiv+0x3d4>
 80016ce:	42ac      	cmp	r4, r5
 80016d0:	d800      	bhi.n	80016d4 <__aeabi_ddiv+0x580>
 80016d2:	e6d7      	b.n	8001484 <__aeabi_ddiv+0x330>
 80016d4:	2302      	movs	r3, #2
 80016d6:	425b      	negs	r3, r3
 80016d8:	469c      	mov	ip, r3
 80016da:	9900      	ldr	r1, [sp, #0]
 80016dc:	444d      	add	r5, r9
 80016de:	454d      	cmp	r5, r9
 80016e0:	419b      	sbcs	r3, r3
 80016e2:	44e3      	add	fp, ip
 80016e4:	468c      	mov	ip, r1
 80016e6:	425b      	negs	r3, r3
 80016e8:	4463      	add	r3, ip
 80016ea:	18c0      	adds	r0, r0, r3
 80016ec:	e6cc      	b.n	8001488 <__aeabi_ddiv+0x334>
 80016ee:	201f      	movs	r0, #31
 80016f0:	4240      	negs	r0, r0
 80016f2:	1ac3      	subs	r3, r0, r3
 80016f4:	4658      	mov	r0, fp
 80016f6:	40d8      	lsrs	r0, r3
 80016f8:	2920      	cmp	r1, #32
 80016fa:	d004      	beq.n	8001706 <__aeabi_ddiv+0x5b2>
 80016fc:	4659      	mov	r1, fp
 80016fe:	4b20      	ldr	r3, [pc, #128]	@ (8001780 <__aeabi_ddiv+0x62c>)
 8001700:	4453      	add	r3, sl
 8001702:	4099      	lsls	r1, r3
 8001704:	430a      	orrs	r2, r1
 8001706:	1e53      	subs	r3, r2, #1
 8001708:	419a      	sbcs	r2, r3
 800170a:	2307      	movs	r3, #7
 800170c:	0019      	movs	r1, r3
 800170e:	4302      	orrs	r2, r0
 8001710:	2400      	movs	r4, #0
 8001712:	4011      	ands	r1, r2
 8001714:	4213      	tst	r3, r2
 8001716:	d009      	beq.n	800172c <__aeabi_ddiv+0x5d8>
 8001718:	3308      	adds	r3, #8
 800171a:	4013      	ands	r3, r2
 800171c:	2b04      	cmp	r3, #4
 800171e:	d01d      	beq.n	800175c <__aeabi_ddiv+0x608>
 8001720:	1d13      	adds	r3, r2, #4
 8001722:	4293      	cmp	r3, r2
 8001724:	4189      	sbcs	r1, r1
 8001726:	001a      	movs	r2, r3
 8001728:	4249      	negs	r1, r1
 800172a:	0749      	lsls	r1, r1, #29
 800172c:	08d2      	lsrs	r2, r2, #3
 800172e:	430a      	orrs	r2, r1
 8001730:	4690      	mov	r8, r2
 8001732:	2300      	movs	r3, #0
 8001734:	e57a      	b.n	800122c <__aeabi_ddiv+0xd8>
 8001736:	4649      	mov	r1, r9
 8001738:	9f00      	ldr	r7, [sp, #0]
 800173a:	004d      	lsls	r5, r1, #1
 800173c:	454d      	cmp	r5, r9
 800173e:	4189      	sbcs	r1, r1
 8001740:	46bc      	mov	ip, r7
 8001742:	4249      	negs	r1, r1
 8001744:	4461      	add	r1, ip
 8001746:	46a9      	mov	r9, r5
 8001748:	3a02      	subs	r2, #2
 800174a:	1864      	adds	r4, r4, r1
 800174c:	e7ae      	b.n	80016ac <__aeabi_ddiv+0x558>
 800174e:	2201      	movs	r2, #1
 8001750:	4252      	negs	r2, r2
 8001752:	e746      	b.n	80015e2 <__aeabi_ddiv+0x48e>
 8001754:	4599      	cmp	r9, r3
 8001756:	d3ee      	bcc.n	8001736 <__aeabi_ddiv+0x5e2>
 8001758:	000a      	movs	r2, r1
 800175a:	e7aa      	b.n	80016b2 <__aeabi_ddiv+0x55e>
 800175c:	2100      	movs	r1, #0
 800175e:	e7e5      	b.n	800172c <__aeabi_ddiv+0x5d8>
 8001760:	0759      	lsls	r1, r3, #29
 8001762:	025b      	lsls	r3, r3, #9
 8001764:	0b1c      	lsrs	r4, r3, #12
 8001766:	e7e1      	b.n	800172c <__aeabi_ddiv+0x5d8>
 8001768:	000003ff 	.word	0x000003ff
 800176c:	feffffff 	.word	0xfeffffff
 8001770:	000007fe 	.word	0x000007fe
 8001774:	000007ff 	.word	0x000007ff
 8001778:	0000041e 	.word	0x0000041e
 800177c:	fffffc02 	.word	0xfffffc02
 8001780:	0000043e 	.word	0x0000043e

08001784 <__aeabi_dmul>:
 8001784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001786:	4657      	mov	r7, sl
 8001788:	464e      	mov	r6, r9
 800178a:	46de      	mov	lr, fp
 800178c:	4645      	mov	r5, r8
 800178e:	b5e0      	push	{r5, r6, r7, lr}
 8001790:	001f      	movs	r7, r3
 8001792:	030b      	lsls	r3, r1, #12
 8001794:	0b1b      	lsrs	r3, r3, #12
 8001796:	0016      	movs	r6, r2
 8001798:	469a      	mov	sl, r3
 800179a:	0fca      	lsrs	r2, r1, #31
 800179c:	004b      	lsls	r3, r1, #1
 800179e:	0004      	movs	r4, r0
 80017a0:	4691      	mov	r9, r2
 80017a2:	b085      	sub	sp, #20
 80017a4:	0d5b      	lsrs	r3, r3, #21
 80017a6:	d100      	bne.n	80017aa <__aeabi_dmul+0x26>
 80017a8:	e1cf      	b.n	8001b4a <__aeabi_dmul+0x3c6>
 80017aa:	4acd      	ldr	r2, [pc, #820]	@ (8001ae0 <__aeabi_dmul+0x35c>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d055      	beq.n	800185c <__aeabi_dmul+0xd8>
 80017b0:	4651      	mov	r1, sl
 80017b2:	0f42      	lsrs	r2, r0, #29
 80017b4:	00c9      	lsls	r1, r1, #3
 80017b6:	430a      	orrs	r2, r1
 80017b8:	2180      	movs	r1, #128	@ 0x80
 80017ba:	0409      	lsls	r1, r1, #16
 80017bc:	4311      	orrs	r1, r2
 80017be:	00c2      	lsls	r2, r0, #3
 80017c0:	4690      	mov	r8, r2
 80017c2:	4ac8      	ldr	r2, [pc, #800]	@ (8001ae4 <__aeabi_dmul+0x360>)
 80017c4:	468a      	mov	sl, r1
 80017c6:	4693      	mov	fp, r2
 80017c8:	449b      	add	fp, r3
 80017ca:	2300      	movs	r3, #0
 80017cc:	2500      	movs	r5, #0
 80017ce:	9302      	str	r3, [sp, #8]
 80017d0:	033c      	lsls	r4, r7, #12
 80017d2:	007b      	lsls	r3, r7, #1
 80017d4:	0ffa      	lsrs	r2, r7, #31
 80017d6:	9601      	str	r6, [sp, #4]
 80017d8:	0b24      	lsrs	r4, r4, #12
 80017da:	0d5b      	lsrs	r3, r3, #21
 80017dc:	9200      	str	r2, [sp, #0]
 80017de:	d100      	bne.n	80017e2 <__aeabi_dmul+0x5e>
 80017e0:	e188      	b.n	8001af4 <__aeabi_dmul+0x370>
 80017e2:	4abf      	ldr	r2, [pc, #764]	@ (8001ae0 <__aeabi_dmul+0x35c>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d100      	bne.n	80017ea <__aeabi_dmul+0x66>
 80017e8:	e092      	b.n	8001910 <__aeabi_dmul+0x18c>
 80017ea:	4abe      	ldr	r2, [pc, #760]	@ (8001ae4 <__aeabi_dmul+0x360>)
 80017ec:	4694      	mov	ip, r2
 80017ee:	4463      	add	r3, ip
 80017f0:	449b      	add	fp, r3
 80017f2:	2d0a      	cmp	r5, #10
 80017f4:	dc42      	bgt.n	800187c <__aeabi_dmul+0xf8>
 80017f6:	00e4      	lsls	r4, r4, #3
 80017f8:	0f73      	lsrs	r3, r6, #29
 80017fa:	4323      	orrs	r3, r4
 80017fc:	2480      	movs	r4, #128	@ 0x80
 80017fe:	4649      	mov	r1, r9
 8001800:	0424      	lsls	r4, r4, #16
 8001802:	431c      	orrs	r4, r3
 8001804:	00f3      	lsls	r3, r6, #3
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	9b00      	ldr	r3, [sp, #0]
 800180a:	2000      	movs	r0, #0
 800180c:	4059      	eors	r1, r3
 800180e:	b2cb      	uxtb	r3, r1
 8001810:	9303      	str	r3, [sp, #12]
 8001812:	2d02      	cmp	r5, #2
 8001814:	dc00      	bgt.n	8001818 <__aeabi_dmul+0x94>
 8001816:	e094      	b.n	8001942 <__aeabi_dmul+0x1be>
 8001818:	2301      	movs	r3, #1
 800181a:	40ab      	lsls	r3, r5
 800181c:	001d      	movs	r5, r3
 800181e:	23a6      	movs	r3, #166	@ 0xa6
 8001820:	002a      	movs	r2, r5
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	401a      	ands	r2, r3
 8001826:	421d      	tst	r5, r3
 8001828:	d000      	beq.n	800182c <__aeabi_dmul+0xa8>
 800182a:	e229      	b.n	8001c80 <__aeabi_dmul+0x4fc>
 800182c:	2390      	movs	r3, #144	@ 0x90
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	421d      	tst	r5, r3
 8001832:	d100      	bne.n	8001836 <__aeabi_dmul+0xb2>
 8001834:	e24d      	b.n	8001cd2 <__aeabi_dmul+0x54e>
 8001836:	2300      	movs	r3, #0
 8001838:	2480      	movs	r4, #128	@ 0x80
 800183a:	4699      	mov	r9, r3
 800183c:	0324      	lsls	r4, r4, #12
 800183e:	4ba8      	ldr	r3, [pc, #672]	@ (8001ae0 <__aeabi_dmul+0x35c>)
 8001840:	0010      	movs	r0, r2
 8001842:	464a      	mov	r2, r9
 8001844:	051b      	lsls	r3, r3, #20
 8001846:	4323      	orrs	r3, r4
 8001848:	07d2      	lsls	r2, r2, #31
 800184a:	4313      	orrs	r3, r2
 800184c:	0019      	movs	r1, r3
 800184e:	b005      	add	sp, #20
 8001850:	bcf0      	pop	{r4, r5, r6, r7}
 8001852:	46bb      	mov	fp, r7
 8001854:	46b2      	mov	sl, r6
 8001856:	46a9      	mov	r9, r5
 8001858:	46a0      	mov	r8, r4
 800185a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800185c:	4652      	mov	r2, sl
 800185e:	4302      	orrs	r2, r0
 8001860:	4690      	mov	r8, r2
 8001862:	d000      	beq.n	8001866 <__aeabi_dmul+0xe2>
 8001864:	e1ac      	b.n	8001bc0 <__aeabi_dmul+0x43c>
 8001866:	469b      	mov	fp, r3
 8001868:	2302      	movs	r3, #2
 800186a:	4692      	mov	sl, r2
 800186c:	2508      	movs	r5, #8
 800186e:	9302      	str	r3, [sp, #8]
 8001870:	e7ae      	b.n	80017d0 <__aeabi_dmul+0x4c>
 8001872:	9b00      	ldr	r3, [sp, #0]
 8001874:	46a2      	mov	sl, r4
 8001876:	4699      	mov	r9, r3
 8001878:	9b01      	ldr	r3, [sp, #4]
 800187a:	4698      	mov	r8, r3
 800187c:	9b02      	ldr	r3, [sp, #8]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d100      	bne.n	8001884 <__aeabi_dmul+0x100>
 8001882:	e1ca      	b.n	8001c1a <__aeabi_dmul+0x496>
 8001884:	2b03      	cmp	r3, #3
 8001886:	d100      	bne.n	800188a <__aeabi_dmul+0x106>
 8001888:	e192      	b.n	8001bb0 <__aeabi_dmul+0x42c>
 800188a:	2b01      	cmp	r3, #1
 800188c:	d110      	bne.n	80018b0 <__aeabi_dmul+0x12c>
 800188e:	2300      	movs	r3, #0
 8001890:	2400      	movs	r4, #0
 8001892:	2200      	movs	r2, #0
 8001894:	e7d4      	b.n	8001840 <__aeabi_dmul+0xbc>
 8001896:	2201      	movs	r2, #1
 8001898:	087b      	lsrs	r3, r7, #1
 800189a:	403a      	ands	r2, r7
 800189c:	4313      	orrs	r3, r2
 800189e:	4652      	mov	r2, sl
 80018a0:	07d2      	lsls	r2, r2, #31
 80018a2:	4313      	orrs	r3, r2
 80018a4:	4698      	mov	r8, r3
 80018a6:	4653      	mov	r3, sl
 80018a8:	085b      	lsrs	r3, r3, #1
 80018aa:	469a      	mov	sl, r3
 80018ac:	9b03      	ldr	r3, [sp, #12]
 80018ae:	4699      	mov	r9, r3
 80018b0:	465b      	mov	r3, fp
 80018b2:	1c58      	adds	r0, r3, #1
 80018b4:	2380      	movs	r3, #128	@ 0x80
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	445b      	add	r3, fp
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	dc00      	bgt.n	80018c0 <__aeabi_dmul+0x13c>
 80018be:	e1b1      	b.n	8001c24 <__aeabi_dmul+0x4a0>
 80018c0:	4642      	mov	r2, r8
 80018c2:	0752      	lsls	r2, r2, #29
 80018c4:	d00b      	beq.n	80018de <__aeabi_dmul+0x15a>
 80018c6:	220f      	movs	r2, #15
 80018c8:	4641      	mov	r1, r8
 80018ca:	400a      	ands	r2, r1
 80018cc:	2a04      	cmp	r2, #4
 80018ce:	d006      	beq.n	80018de <__aeabi_dmul+0x15a>
 80018d0:	4642      	mov	r2, r8
 80018d2:	1d11      	adds	r1, r2, #4
 80018d4:	4541      	cmp	r1, r8
 80018d6:	4192      	sbcs	r2, r2
 80018d8:	4688      	mov	r8, r1
 80018da:	4252      	negs	r2, r2
 80018dc:	4492      	add	sl, r2
 80018de:	4652      	mov	r2, sl
 80018e0:	01d2      	lsls	r2, r2, #7
 80018e2:	d506      	bpl.n	80018f2 <__aeabi_dmul+0x16e>
 80018e4:	4652      	mov	r2, sl
 80018e6:	4b80      	ldr	r3, [pc, #512]	@ (8001ae8 <__aeabi_dmul+0x364>)
 80018e8:	401a      	ands	r2, r3
 80018ea:	2380      	movs	r3, #128	@ 0x80
 80018ec:	4692      	mov	sl, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	18c3      	adds	r3, r0, r3
 80018f2:	4a7e      	ldr	r2, [pc, #504]	@ (8001aec <__aeabi_dmul+0x368>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	dd00      	ble.n	80018fa <__aeabi_dmul+0x176>
 80018f8:	e18f      	b.n	8001c1a <__aeabi_dmul+0x496>
 80018fa:	4642      	mov	r2, r8
 80018fc:	08d1      	lsrs	r1, r2, #3
 80018fe:	4652      	mov	r2, sl
 8001900:	0752      	lsls	r2, r2, #29
 8001902:	430a      	orrs	r2, r1
 8001904:	4651      	mov	r1, sl
 8001906:	055b      	lsls	r3, r3, #21
 8001908:	024c      	lsls	r4, r1, #9
 800190a:	0b24      	lsrs	r4, r4, #12
 800190c:	0d5b      	lsrs	r3, r3, #21
 800190e:	e797      	b.n	8001840 <__aeabi_dmul+0xbc>
 8001910:	4b73      	ldr	r3, [pc, #460]	@ (8001ae0 <__aeabi_dmul+0x35c>)
 8001912:	4326      	orrs	r6, r4
 8001914:	469c      	mov	ip, r3
 8001916:	44e3      	add	fp, ip
 8001918:	2e00      	cmp	r6, #0
 800191a:	d100      	bne.n	800191e <__aeabi_dmul+0x19a>
 800191c:	e16f      	b.n	8001bfe <__aeabi_dmul+0x47a>
 800191e:	2303      	movs	r3, #3
 8001920:	4649      	mov	r1, r9
 8001922:	431d      	orrs	r5, r3
 8001924:	9b00      	ldr	r3, [sp, #0]
 8001926:	4059      	eors	r1, r3
 8001928:	b2cb      	uxtb	r3, r1
 800192a:	9303      	str	r3, [sp, #12]
 800192c:	2d0a      	cmp	r5, #10
 800192e:	dd00      	ble.n	8001932 <__aeabi_dmul+0x1ae>
 8001930:	e133      	b.n	8001b9a <__aeabi_dmul+0x416>
 8001932:	2301      	movs	r3, #1
 8001934:	40ab      	lsls	r3, r5
 8001936:	001d      	movs	r5, r3
 8001938:	2303      	movs	r3, #3
 800193a:	9302      	str	r3, [sp, #8]
 800193c:	2288      	movs	r2, #136	@ 0x88
 800193e:	422a      	tst	r2, r5
 8001940:	d197      	bne.n	8001872 <__aeabi_dmul+0xee>
 8001942:	4642      	mov	r2, r8
 8001944:	4643      	mov	r3, r8
 8001946:	0412      	lsls	r2, r2, #16
 8001948:	0c12      	lsrs	r2, r2, #16
 800194a:	0016      	movs	r6, r2
 800194c:	9801      	ldr	r0, [sp, #4]
 800194e:	0c1d      	lsrs	r5, r3, #16
 8001950:	0c03      	lsrs	r3, r0, #16
 8001952:	0400      	lsls	r0, r0, #16
 8001954:	0c00      	lsrs	r0, r0, #16
 8001956:	4346      	muls	r6, r0
 8001958:	46b4      	mov	ip, r6
 800195a:	001e      	movs	r6, r3
 800195c:	436e      	muls	r6, r5
 800195e:	9600      	str	r6, [sp, #0]
 8001960:	0016      	movs	r6, r2
 8001962:	0007      	movs	r7, r0
 8001964:	435e      	muls	r6, r3
 8001966:	4661      	mov	r1, ip
 8001968:	46b0      	mov	r8, r6
 800196a:	436f      	muls	r7, r5
 800196c:	0c0e      	lsrs	r6, r1, #16
 800196e:	44b8      	add	r8, r7
 8001970:	4446      	add	r6, r8
 8001972:	42b7      	cmp	r7, r6
 8001974:	d905      	bls.n	8001982 <__aeabi_dmul+0x1fe>
 8001976:	2180      	movs	r1, #128	@ 0x80
 8001978:	0249      	lsls	r1, r1, #9
 800197a:	4688      	mov	r8, r1
 800197c:	9f00      	ldr	r7, [sp, #0]
 800197e:	4447      	add	r7, r8
 8001980:	9700      	str	r7, [sp, #0]
 8001982:	4661      	mov	r1, ip
 8001984:	0409      	lsls	r1, r1, #16
 8001986:	0c09      	lsrs	r1, r1, #16
 8001988:	0c37      	lsrs	r7, r6, #16
 800198a:	0436      	lsls	r6, r6, #16
 800198c:	468c      	mov	ip, r1
 800198e:	0031      	movs	r1, r6
 8001990:	4461      	add	r1, ip
 8001992:	9101      	str	r1, [sp, #4]
 8001994:	0011      	movs	r1, r2
 8001996:	0c26      	lsrs	r6, r4, #16
 8001998:	0424      	lsls	r4, r4, #16
 800199a:	0c24      	lsrs	r4, r4, #16
 800199c:	4361      	muls	r1, r4
 800199e:	468c      	mov	ip, r1
 80019a0:	0021      	movs	r1, r4
 80019a2:	4369      	muls	r1, r5
 80019a4:	4689      	mov	r9, r1
 80019a6:	4661      	mov	r1, ip
 80019a8:	0c09      	lsrs	r1, r1, #16
 80019aa:	4688      	mov	r8, r1
 80019ac:	4372      	muls	r2, r6
 80019ae:	444a      	add	r2, r9
 80019b0:	4442      	add	r2, r8
 80019b2:	4375      	muls	r5, r6
 80019b4:	4591      	cmp	r9, r2
 80019b6:	d903      	bls.n	80019c0 <__aeabi_dmul+0x23c>
 80019b8:	2180      	movs	r1, #128	@ 0x80
 80019ba:	0249      	lsls	r1, r1, #9
 80019bc:	4688      	mov	r8, r1
 80019be:	4445      	add	r5, r8
 80019c0:	0c11      	lsrs	r1, r2, #16
 80019c2:	4688      	mov	r8, r1
 80019c4:	4661      	mov	r1, ip
 80019c6:	0409      	lsls	r1, r1, #16
 80019c8:	0c09      	lsrs	r1, r1, #16
 80019ca:	468c      	mov	ip, r1
 80019cc:	0412      	lsls	r2, r2, #16
 80019ce:	4462      	add	r2, ip
 80019d0:	18b9      	adds	r1, r7, r2
 80019d2:	9102      	str	r1, [sp, #8]
 80019d4:	4651      	mov	r1, sl
 80019d6:	0c09      	lsrs	r1, r1, #16
 80019d8:	468c      	mov	ip, r1
 80019da:	4651      	mov	r1, sl
 80019dc:	040f      	lsls	r7, r1, #16
 80019de:	0c3f      	lsrs	r7, r7, #16
 80019e0:	0039      	movs	r1, r7
 80019e2:	4341      	muls	r1, r0
 80019e4:	4445      	add	r5, r8
 80019e6:	4688      	mov	r8, r1
 80019e8:	4661      	mov	r1, ip
 80019ea:	4341      	muls	r1, r0
 80019ec:	468a      	mov	sl, r1
 80019ee:	4641      	mov	r1, r8
 80019f0:	4660      	mov	r0, ip
 80019f2:	0c09      	lsrs	r1, r1, #16
 80019f4:	4689      	mov	r9, r1
 80019f6:	4358      	muls	r0, r3
 80019f8:	437b      	muls	r3, r7
 80019fa:	4453      	add	r3, sl
 80019fc:	444b      	add	r3, r9
 80019fe:	459a      	cmp	sl, r3
 8001a00:	d903      	bls.n	8001a0a <__aeabi_dmul+0x286>
 8001a02:	2180      	movs	r1, #128	@ 0x80
 8001a04:	0249      	lsls	r1, r1, #9
 8001a06:	4689      	mov	r9, r1
 8001a08:	4448      	add	r0, r9
 8001a0a:	0c19      	lsrs	r1, r3, #16
 8001a0c:	4689      	mov	r9, r1
 8001a0e:	4641      	mov	r1, r8
 8001a10:	0409      	lsls	r1, r1, #16
 8001a12:	0c09      	lsrs	r1, r1, #16
 8001a14:	4688      	mov	r8, r1
 8001a16:	0039      	movs	r1, r7
 8001a18:	4361      	muls	r1, r4
 8001a1a:	041b      	lsls	r3, r3, #16
 8001a1c:	4443      	add	r3, r8
 8001a1e:	4688      	mov	r8, r1
 8001a20:	4661      	mov	r1, ip
 8001a22:	434c      	muls	r4, r1
 8001a24:	4371      	muls	r1, r6
 8001a26:	468c      	mov	ip, r1
 8001a28:	4641      	mov	r1, r8
 8001a2a:	4377      	muls	r7, r6
 8001a2c:	0c0e      	lsrs	r6, r1, #16
 8001a2e:	193f      	adds	r7, r7, r4
 8001a30:	19f6      	adds	r6, r6, r7
 8001a32:	4448      	add	r0, r9
 8001a34:	42b4      	cmp	r4, r6
 8001a36:	d903      	bls.n	8001a40 <__aeabi_dmul+0x2bc>
 8001a38:	2180      	movs	r1, #128	@ 0x80
 8001a3a:	0249      	lsls	r1, r1, #9
 8001a3c:	4689      	mov	r9, r1
 8001a3e:	44cc      	add	ip, r9
 8001a40:	9902      	ldr	r1, [sp, #8]
 8001a42:	9f00      	ldr	r7, [sp, #0]
 8001a44:	4689      	mov	r9, r1
 8001a46:	0431      	lsls	r1, r6, #16
 8001a48:	444f      	add	r7, r9
 8001a4a:	4689      	mov	r9, r1
 8001a4c:	4641      	mov	r1, r8
 8001a4e:	4297      	cmp	r7, r2
 8001a50:	4192      	sbcs	r2, r2
 8001a52:	040c      	lsls	r4, r1, #16
 8001a54:	0c24      	lsrs	r4, r4, #16
 8001a56:	444c      	add	r4, r9
 8001a58:	18ff      	adds	r7, r7, r3
 8001a5a:	4252      	negs	r2, r2
 8001a5c:	1964      	adds	r4, r4, r5
 8001a5e:	18a1      	adds	r1, r4, r2
 8001a60:	429f      	cmp	r7, r3
 8001a62:	419b      	sbcs	r3, r3
 8001a64:	4688      	mov	r8, r1
 8001a66:	4682      	mov	sl, r0
 8001a68:	425b      	negs	r3, r3
 8001a6a:	4699      	mov	r9, r3
 8001a6c:	4590      	cmp	r8, r2
 8001a6e:	4192      	sbcs	r2, r2
 8001a70:	42ac      	cmp	r4, r5
 8001a72:	41a4      	sbcs	r4, r4
 8001a74:	44c2      	add	sl, r8
 8001a76:	44d1      	add	r9, sl
 8001a78:	4252      	negs	r2, r2
 8001a7a:	4264      	negs	r4, r4
 8001a7c:	4314      	orrs	r4, r2
 8001a7e:	4599      	cmp	r9, r3
 8001a80:	419b      	sbcs	r3, r3
 8001a82:	4582      	cmp	sl, r0
 8001a84:	4192      	sbcs	r2, r2
 8001a86:	425b      	negs	r3, r3
 8001a88:	4252      	negs	r2, r2
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	464a      	mov	r2, r9
 8001a8e:	0c36      	lsrs	r6, r6, #16
 8001a90:	19a4      	adds	r4, r4, r6
 8001a92:	18e3      	adds	r3, r4, r3
 8001a94:	4463      	add	r3, ip
 8001a96:	025b      	lsls	r3, r3, #9
 8001a98:	0dd2      	lsrs	r2, r2, #23
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	9901      	ldr	r1, [sp, #4]
 8001a9e:	4692      	mov	sl, r2
 8001aa0:	027a      	lsls	r2, r7, #9
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	1e50      	subs	r0, r2, #1
 8001aa6:	4182      	sbcs	r2, r0
 8001aa8:	0dff      	lsrs	r7, r7, #23
 8001aaa:	4317      	orrs	r7, r2
 8001aac:	464a      	mov	r2, r9
 8001aae:	0252      	lsls	r2, r2, #9
 8001ab0:	4317      	orrs	r7, r2
 8001ab2:	46b8      	mov	r8, r7
 8001ab4:	01db      	lsls	r3, r3, #7
 8001ab6:	d500      	bpl.n	8001aba <__aeabi_dmul+0x336>
 8001ab8:	e6ed      	b.n	8001896 <__aeabi_dmul+0x112>
 8001aba:	4b0d      	ldr	r3, [pc, #52]	@ (8001af0 <__aeabi_dmul+0x36c>)
 8001abc:	9a03      	ldr	r2, [sp, #12]
 8001abe:	445b      	add	r3, fp
 8001ac0:	4691      	mov	r9, r2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	dc00      	bgt.n	8001ac8 <__aeabi_dmul+0x344>
 8001ac6:	e0ac      	b.n	8001c22 <__aeabi_dmul+0x49e>
 8001ac8:	003a      	movs	r2, r7
 8001aca:	0752      	lsls	r2, r2, #29
 8001acc:	d100      	bne.n	8001ad0 <__aeabi_dmul+0x34c>
 8001ace:	e710      	b.n	80018f2 <__aeabi_dmul+0x16e>
 8001ad0:	220f      	movs	r2, #15
 8001ad2:	4658      	mov	r0, fp
 8001ad4:	403a      	ands	r2, r7
 8001ad6:	2a04      	cmp	r2, #4
 8001ad8:	d000      	beq.n	8001adc <__aeabi_dmul+0x358>
 8001ada:	e6f9      	b.n	80018d0 <__aeabi_dmul+0x14c>
 8001adc:	e709      	b.n	80018f2 <__aeabi_dmul+0x16e>
 8001ade:	46c0      	nop			@ (mov r8, r8)
 8001ae0:	000007ff 	.word	0x000007ff
 8001ae4:	fffffc01 	.word	0xfffffc01
 8001ae8:	feffffff 	.word	0xfeffffff
 8001aec:	000007fe 	.word	0x000007fe
 8001af0:	000003ff 	.word	0x000003ff
 8001af4:	0022      	movs	r2, r4
 8001af6:	4332      	orrs	r2, r6
 8001af8:	d06f      	beq.n	8001bda <__aeabi_dmul+0x456>
 8001afa:	2c00      	cmp	r4, #0
 8001afc:	d100      	bne.n	8001b00 <__aeabi_dmul+0x37c>
 8001afe:	e0c2      	b.n	8001c86 <__aeabi_dmul+0x502>
 8001b00:	0020      	movs	r0, r4
 8001b02:	f000 fa0f 	bl	8001f24 <__clzsi2>
 8001b06:	0002      	movs	r2, r0
 8001b08:	0003      	movs	r3, r0
 8001b0a:	3a0b      	subs	r2, #11
 8001b0c:	201d      	movs	r0, #29
 8001b0e:	1a82      	subs	r2, r0, r2
 8001b10:	0030      	movs	r0, r6
 8001b12:	0019      	movs	r1, r3
 8001b14:	40d0      	lsrs	r0, r2
 8001b16:	3908      	subs	r1, #8
 8001b18:	408c      	lsls	r4, r1
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	4322      	orrs	r2, r4
 8001b1e:	0034      	movs	r4, r6
 8001b20:	408c      	lsls	r4, r1
 8001b22:	4659      	mov	r1, fp
 8001b24:	1acb      	subs	r3, r1, r3
 8001b26:	4986      	ldr	r1, [pc, #536]	@ (8001d40 <__aeabi_dmul+0x5bc>)
 8001b28:	468b      	mov	fp, r1
 8001b2a:	449b      	add	fp, r3
 8001b2c:	2d0a      	cmp	r5, #10
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dmul+0x3ae>
 8001b30:	e6a4      	b.n	800187c <__aeabi_dmul+0xf8>
 8001b32:	4649      	mov	r1, r9
 8001b34:	9b00      	ldr	r3, [sp, #0]
 8001b36:	9401      	str	r4, [sp, #4]
 8001b38:	4059      	eors	r1, r3
 8001b3a:	b2cb      	uxtb	r3, r1
 8001b3c:	0014      	movs	r4, r2
 8001b3e:	2000      	movs	r0, #0
 8001b40:	9303      	str	r3, [sp, #12]
 8001b42:	2d02      	cmp	r5, #2
 8001b44:	dd00      	ble.n	8001b48 <__aeabi_dmul+0x3c4>
 8001b46:	e667      	b.n	8001818 <__aeabi_dmul+0x94>
 8001b48:	e6fb      	b.n	8001942 <__aeabi_dmul+0x1be>
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	4303      	orrs	r3, r0
 8001b4e:	4698      	mov	r8, r3
 8001b50:	d03c      	beq.n	8001bcc <__aeabi_dmul+0x448>
 8001b52:	4653      	mov	r3, sl
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d100      	bne.n	8001b5a <__aeabi_dmul+0x3d6>
 8001b58:	e0a3      	b.n	8001ca2 <__aeabi_dmul+0x51e>
 8001b5a:	4650      	mov	r0, sl
 8001b5c:	f000 f9e2 	bl	8001f24 <__clzsi2>
 8001b60:	230b      	movs	r3, #11
 8001b62:	425b      	negs	r3, r3
 8001b64:	469c      	mov	ip, r3
 8001b66:	0002      	movs	r2, r0
 8001b68:	4484      	add	ip, r0
 8001b6a:	0011      	movs	r1, r2
 8001b6c:	4650      	mov	r0, sl
 8001b6e:	3908      	subs	r1, #8
 8001b70:	4088      	lsls	r0, r1
 8001b72:	231d      	movs	r3, #29
 8001b74:	4680      	mov	r8, r0
 8001b76:	4660      	mov	r0, ip
 8001b78:	1a1b      	subs	r3, r3, r0
 8001b7a:	0020      	movs	r0, r4
 8001b7c:	40d8      	lsrs	r0, r3
 8001b7e:	0003      	movs	r3, r0
 8001b80:	4640      	mov	r0, r8
 8001b82:	4303      	orrs	r3, r0
 8001b84:	469a      	mov	sl, r3
 8001b86:	0023      	movs	r3, r4
 8001b88:	408b      	lsls	r3, r1
 8001b8a:	4698      	mov	r8, r3
 8001b8c:	4b6c      	ldr	r3, [pc, #432]	@ (8001d40 <__aeabi_dmul+0x5bc>)
 8001b8e:	2500      	movs	r5, #0
 8001b90:	1a9b      	subs	r3, r3, r2
 8001b92:	469b      	mov	fp, r3
 8001b94:	2300      	movs	r3, #0
 8001b96:	9302      	str	r3, [sp, #8]
 8001b98:	e61a      	b.n	80017d0 <__aeabi_dmul+0x4c>
 8001b9a:	2d0f      	cmp	r5, #15
 8001b9c:	d000      	beq.n	8001ba0 <__aeabi_dmul+0x41c>
 8001b9e:	e0c9      	b.n	8001d34 <__aeabi_dmul+0x5b0>
 8001ba0:	2380      	movs	r3, #128	@ 0x80
 8001ba2:	4652      	mov	r2, sl
 8001ba4:	031b      	lsls	r3, r3, #12
 8001ba6:	421a      	tst	r2, r3
 8001ba8:	d002      	beq.n	8001bb0 <__aeabi_dmul+0x42c>
 8001baa:	421c      	tst	r4, r3
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dmul+0x42c>
 8001bae:	e092      	b.n	8001cd6 <__aeabi_dmul+0x552>
 8001bb0:	2480      	movs	r4, #128	@ 0x80
 8001bb2:	4653      	mov	r3, sl
 8001bb4:	0324      	lsls	r4, r4, #12
 8001bb6:	431c      	orrs	r4, r3
 8001bb8:	0324      	lsls	r4, r4, #12
 8001bba:	4642      	mov	r2, r8
 8001bbc:	0b24      	lsrs	r4, r4, #12
 8001bbe:	e63e      	b.n	800183e <__aeabi_dmul+0xba>
 8001bc0:	469b      	mov	fp, r3
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	4680      	mov	r8, r0
 8001bc6:	250c      	movs	r5, #12
 8001bc8:	9302      	str	r3, [sp, #8]
 8001bca:	e601      	b.n	80017d0 <__aeabi_dmul+0x4c>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	469a      	mov	sl, r3
 8001bd0:	469b      	mov	fp, r3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	2504      	movs	r5, #4
 8001bd6:	9302      	str	r3, [sp, #8]
 8001bd8:	e5fa      	b.n	80017d0 <__aeabi_dmul+0x4c>
 8001bda:	2101      	movs	r1, #1
 8001bdc:	430d      	orrs	r5, r1
 8001bde:	2d0a      	cmp	r5, #10
 8001be0:	dd00      	ble.n	8001be4 <__aeabi_dmul+0x460>
 8001be2:	e64b      	b.n	800187c <__aeabi_dmul+0xf8>
 8001be4:	4649      	mov	r1, r9
 8001be6:	9800      	ldr	r0, [sp, #0]
 8001be8:	4041      	eors	r1, r0
 8001bea:	b2c9      	uxtb	r1, r1
 8001bec:	9103      	str	r1, [sp, #12]
 8001bee:	2d02      	cmp	r5, #2
 8001bf0:	dc00      	bgt.n	8001bf4 <__aeabi_dmul+0x470>
 8001bf2:	e096      	b.n	8001d22 <__aeabi_dmul+0x59e>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	2400      	movs	r4, #0
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	e60c      	b.n	8001818 <__aeabi_dmul+0x94>
 8001bfe:	4649      	mov	r1, r9
 8001c00:	2302      	movs	r3, #2
 8001c02:	9a00      	ldr	r2, [sp, #0]
 8001c04:	432b      	orrs	r3, r5
 8001c06:	4051      	eors	r1, r2
 8001c08:	b2ca      	uxtb	r2, r1
 8001c0a:	9203      	str	r2, [sp, #12]
 8001c0c:	2b0a      	cmp	r3, #10
 8001c0e:	dd00      	ble.n	8001c12 <__aeabi_dmul+0x48e>
 8001c10:	e634      	b.n	800187c <__aeabi_dmul+0xf8>
 8001c12:	2d00      	cmp	r5, #0
 8001c14:	d157      	bne.n	8001cc6 <__aeabi_dmul+0x542>
 8001c16:	9b03      	ldr	r3, [sp, #12]
 8001c18:	4699      	mov	r9, r3
 8001c1a:	2400      	movs	r4, #0
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	4b49      	ldr	r3, [pc, #292]	@ (8001d44 <__aeabi_dmul+0x5c0>)
 8001c20:	e60e      	b.n	8001840 <__aeabi_dmul+0xbc>
 8001c22:	4658      	mov	r0, fp
 8001c24:	2101      	movs	r1, #1
 8001c26:	1ac9      	subs	r1, r1, r3
 8001c28:	2938      	cmp	r1, #56	@ 0x38
 8001c2a:	dd00      	ble.n	8001c2e <__aeabi_dmul+0x4aa>
 8001c2c:	e62f      	b.n	800188e <__aeabi_dmul+0x10a>
 8001c2e:	291f      	cmp	r1, #31
 8001c30:	dd56      	ble.n	8001ce0 <__aeabi_dmul+0x55c>
 8001c32:	221f      	movs	r2, #31
 8001c34:	4654      	mov	r4, sl
 8001c36:	4252      	negs	r2, r2
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	40dc      	lsrs	r4, r3
 8001c3c:	2920      	cmp	r1, #32
 8001c3e:	d007      	beq.n	8001c50 <__aeabi_dmul+0x4cc>
 8001c40:	4b41      	ldr	r3, [pc, #260]	@ (8001d48 <__aeabi_dmul+0x5c4>)
 8001c42:	4642      	mov	r2, r8
 8001c44:	469c      	mov	ip, r3
 8001c46:	4653      	mov	r3, sl
 8001c48:	4460      	add	r0, ip
 8001c4a:	4083      	lsls	r3, r0
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	4690      	mov	r8, r2
 8001c50:	4642      	mov	r2, r8
 8001c52:	2107      	movs	r1, #7
 8001c54:	1e53      	subs	r3, r2, #1
 8001c56:	419a      	sbcs	r2, r3
 8001c58:	000b      	movs	r3, r1
 8001c5a:	4322      	orrs	r2, r4
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2400      	movs	r4, #0
 8001c60:	4211      	tst	r1, r2
 8001c62:	d009      	beq.n	8001c78 <__aeabi_dmul+0x4f4>
 8001c64:	230f      	movs	r3, #15
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d05d      	beq.n	8001d28 <__aeabi_dmul+0x5a4>
 8001c6c:	1d11      	adds	r1, r2, #4
 8001c6e:	4291      	cmp	r1, r2
 8001c70:	419b      	sbcs	r3, r3
 8001c72:	000a      	movs	r2, r1
 8001c74:	425b      	negs	r3, r3
 8001c76:	075b      	lsls	r3, r3, #29
 8001c78:	08d2      	lsrs	r2, r2, #3
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	e5df      	b.n	8001840 <__aeabi_dmul+0xbc>
 8001c80:	9b03      	ldr	r3, [sp, #12]
 8001c82:	4699      	mov	r9, r3
 8001c84:	e5fa      	b.n	800187c <__aeabi_dmul+0xf8>
 8001c86:	9801      	ldr	r0, [sp, #4]
 8001c88:	f000 f94c 	bl	8001f24 <__clzsi2>
 8001c8c:	0002      	movs	r2, r0
 8001c8e:	0003      	movs	r3, r0
 8001c90:	3215      	adds	r2, #21
 8001c92:	3320      	adds	r3, #32
 8001c94:	2a1c      	cmp	r2, #28
 8001c96:	dc00      	bgt.n	8001c9a <__aeabi_dmul+0x516>
 8001c98:	e738      	b.n	8001b0c <__aeabi_dmul+0x388>
 8001c9a:	9a01      	ldr	r2, [sp, #4]
 8001c9c:	3808      	subs	r0, #8
 8001c9e:	4082      	lsls	r2, r0
 8001ca0:	e73f      	b.n	8001b22 <__aeabi_dmul+0x39e>
 8001ca2:	f000 f93f 	bl	8001f24 <__clzsi2>
 8001ca6:	2315      	movs	r3, #21
 8001ca8:	469c      	mov	ip, r3
 8001caa:	4484      	add	ip, r0
 8001cac:	0002      	movs	r2, r0
 8001cae:	4663      	mov	r3, ip
 8001cb0:	3220      	adds	r2, #32
 8001cb2:	2b1c      	cmp	r3, #28
 8001cb4:	dc00      	bgt.n	8001cb8 <__aeabi_dmul+0x534>
 8001cb6:	e758      	b.n	8001b6a <__aeabi_dmul+0x3e6>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	4698      	mov	r8, r3
 8001cbc:	0023      	movs	r3, r4
 8001cbe:	3808      	subs	r0, #8
 8001cc0:	4083      	lsls	r3, r0
 8001cc2:	469a      	mov	sl, r3
 8001cc4:	e762      	b.n	8001b8c <__aeabi_dmul+0x408>
 8001cc6:	001d      	movs	r5, r3
 8001cc8:	2300      	movs	r3, #0
 8001cca:	2400      	movs	r4, #0
 8001ccc:	2002      	movs	r0, #2
 8001cce:	9301      	str	r3, [sp, #4]
 8001cd0:	e5a2      	b.n	8001818 <__aeabi_dmul+0x94>
 8001cd2:	9002      	str	r0, [sp, #8]
 8001cd4:	e632      	b.n	800193c <__aeabi_dmul+0x1b8>
 8001cd6:	431c      	orrs	r4, r3
 8001cd8:	9b00      	ldr	r3, [sp, #0]
 8001cda:	9a01      	ldr	r2, [sp, #4]
 8001cdc:	4699      	mov	r9, r3
 8001cde:	e5ae      	b.n	800183e <__aeabi_dmul+0xba>
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d4c <__aeabi_dmul+0x5c8>)
 8001ce2:	4652      	mov	r2, sl
 8001ce4:	18c3      	adds	r3, r0, r3
 8001ce6:	4640      	mov	r0, r8
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	40c8      	lsrs	r0, r1
 8001cec:	4302      	orrs	r2, r0
 8001cee:	4640      	mov	r0, r8
 8001cf0:	4098      	lsls	r0, r3
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	1e58      	subs	r0, r3, #1
 8001cf6:	4183      	sbcs	r3, r0
 8001cf8:	4654      	mov	r4, sl
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	40cc      	lsrs	r4, r1
 8001cfe:	0753      	lsls	r3, r2, #29
 8001d00:	d009      	beq.n	8001d16 <__aeabi_dmul+0x592>
 8001d02:	230f      	movs	r3, #15
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d005      	beq.n	8001d16 <__aeabi_dmul+0x592>
 8001d0a:	1d13      	adds	r3, r2, #4
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	4192      	sbcs	r2, r2
 8001d10:	4252      	negs	r2, r2
 8001d12:	18a4      	adds	r4, r4, r2
 8001d14:	001a      	movs	r2, r3
 8001d16:	0223      	lsls	r3, r4, #8
 8001d18:	d508      	bpl.n	8001d2c <__aeabi_dmul+0x5a8>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	2400      	movs	r4, #0
 8001d1e:	2200      	movs	r2, #0
 8001d20:	e58e      	b.n	8001840 <__aeabi_dmul+0xbc>
 8001d22:	4689      	mov	r9, r1
 8001d24:	2400      	movs	r4, #0
 8001d26:	e58b      	b.n	8001840 <__aeabi_dmul+0xbc>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e7a5      	b.n	8001c78 <__aeabi_dmul+0x4f4>
 8001d2c:	0763      	lsls	r3, r4, #29
 8001d2e:	0264      	lsls	r4, r4, #9
 8001d30:	0b24      	lsrs	r4, r4, #12
 8001d32:	e7a1      	b.n	8001c78 <__aeabi_dmul+0x4f4>
 8001d34:	9b00      	ldr	r3, [sp, #0]
 8001d36:	46a2      	mov	sl, r4
 8001d38:	4699      	mov	r9, r3
 8001d3a:	9b01      	ldr	r3, [sp, #4]
 8001d3c:	4698      	mov	r8, r3
 8001d3e:	e737      	b.n	8001bb0 <__aeabi_dmul+0x42c>
 8001d40:	fffffc0d 	.word	0xfffffc0d
 8001d44:	000007ff 	.word	0x000007ff
 8001d48:	0000043e 	.word	0x0000043e
 8001d4c:	0000041e 	.word	0x0000041e

08001d50 <__aeabi_i2d>:
 8001d50:	b570      	push	{r4, r5, r6, lr}
 8001d52:	2800      	cmp	r0, #0
 8001d54:	d016      	beq.n	8001d84 <__aeabi_i2d+0x34>
 8001d56:	17c3      	asrs	r3, r0, #31
 8001d58:	18c5      	adds	r5, r0, r3
 8001d5a:	405d      	eors	r5, r3
 8001d5c:	0fc4      	lsrs	r4, r0, #31
 8001d5e:	0028      	movs	r0, r5
 8001d60:	f000 f8e0 	bl	8001f24 <__clzsi2>
 8001d64:	4b10      	ldr	r3, [pc, #64]	@ (8001da8 <__aeabi_i2d+0x58>)
 8001d66:	1a1b      	subs	r3, r3, r0
 8001d68:	055b      	lsls	r3, r3, #21
 8001d6a:	0d5b      	lsrs	r3, r3, #21
 8001d6c:	280a      	cmp	r0, #10
 8001d6e:	dc14      	bgt.n	8001d9a <__aeabi_i2d+0x4a>
 8001d70:	0002      	movs	r2, r0
 8001d72:	002e      	movs	r6, r5
 8001d74:	3215      	adds	r2, #21
 8001d76:	4096      	lsls	r6, r2
 8001d78:	220b      	movs	r2, #11
 8001d7a:	1a12      	subs	r2, r2, r0
 8001d7c:	40d5      	lsrs	r5, r2
 8001d7e:	032d      	lsls	r5, r5, #12
 8001d80:	0b2d      	lsrs	r5, r5, #12
 8001d82:	e003      	b.n	8001d8c <__aeabi_i2d+0x3c>
 8001d84:	2400      	movs	r4, #0
 8001d86:	2300      	movs	r3, #0
 8001d88:	2500      	movs	r5, #0
 8001d8a:	2600      	movs	r6, #0
 8001d8c:	051b      	lsls	r3, r3, #20
 8001d8e:	432b      	orrs	r3, r5
 8001d90:	07e4      	lsls	r4, r4, #31
 8001d92:	4323      	orrs	r3, r4
 8001d94:	0030      	movs	r0, r6
 8001d96:	0019      	movs	r1, r3
 8001d98:	bd70      	pop	{r4, r5, r6, pc}
 8001d9a:	380b      	subs	r0, #11
 8001d9c:	4085      	lsls	r5, r0
 8001d9e:	032d      	lsls	r5, r5, #12
 8001da0:	2600      	movs	r6, #0
 8001da2:	0b2d      	lsrs	r5, r5, #12
 8001da4:	e7f2      	b.n	8001d8c <__aeabi_i2d+0x3c>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	0000041e 	.word	0x0000041e

08001dac <__aeabi_d2f>:
 8001dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dae:	004b      	lsls	r3, r1, #1
 8001db0:	030f      	lsls	r7, r1, #12
 8001db2:	0d5b      	lsrs	r3, r3, #21
 8001db4:	4c3a      	ldr	r4, [pc, #232]	@ (8001ea0 <__aeabi_d2f+0xf4>)
 8001db6:	0f45      	lsrs	r5, r0, #29
 8001db8:	b083      	sub	sp, #12
 8001dba:	0a7f      	lsrs	r7, r7, #9
 8001dbc:	1c5e      	adds	r6, r3, #1
 8001dbe:	432f      	orrs	r7, r5
 8001dc0:	9000      	str	r0, [sp, #0]
 8001dc2:	9101      	str	r1, [sp, #4]
 8001dc4:	0fca      	lsrs	r2, r1, #31
 8001dc6:	00c5      	lsls	r5, r0, #3
 8001dc8:	4226      	tst	r6, r4
 8001dca:	d00b      	beq.n	8001de4 <__aeabi_d2f+0x38>
 8001dcc:	4935      	ldr	r1, [pc, #212]	@ (8001ea4 <__aeabi_d2f+0xf8>)
 8001dce:	185c      	adds	r4, r3, r1
 8001dd0:	2cfe      	cmp	r4, #254	@ 0xfe
 8001dd2:	dd13      	ble.n	8001dfc <__aeabi_d2f+0x50>
 8001dd4:	20ff      	movs	r0, #255	@ 0xff
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	05c0      	lsls	r0, r0, #23
 8001dda:	4318      	orrs	r0, r3
 8001ddc:	07d2      	lsls	r2, r2, #31
 8001dde:	4310      	orrs	r0, r2
 8001de0:	b003      	add	sp, #12
 8001de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001de4:	433d      	orrs	r5, r7
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <__aeabi_d2f+0x42>
 8001dea:	2000      	movs	r0, #0
 8001dec:	e7f4      	b.n	8001dd8 <__aeabi_d2f+0x2c>
 8001dee:	2d00      	cmp	r5, #0
 8001df0:	d0f0      	beq.n	8001dd4 <__aeabi_d2f+0x28>
 8001df2:	2380      	movs	r3, #128	@ 0x80
 8001df4:	03db      	lsls	r3, r3, #15
 8001df6:	20ff      	movs	r0, #255	@ 0xff
 8001df8:	433b      	orrs	r3, r7
 8001dfa:	e7ed      	b.n	8001dd8 <__aeabi_d2f+0x2c>
 8001dfc:	2c00      	cmp	r4, #0
 8001dfe:	dd0c      	ble.n	8001e1a <__aeabi_d2f+0x6e>
 8001e00:	9b00      	ldr	r3, [sp, #0]
 8001e02:	00ff      	lsls	r7, r7, #3
 8001e04:	019b      	lsls	r3, r3, #6
 8001e06:	1e58      	subs	r0, r3, #1
 8001e08:	4183      	sbcs	r3, r0
 8001e0a:	0f69      	lsrs	r1, r5, #29
 8001e0c:	433b      	orrs	r3, r7
 8001e0e:	430b      	orrs	r3, r1
 8001e10:	0759      	lsls	r1, r3, #29
 8001e12:	d127      	bne.n	8001e64 <__aeabi_d2f+0xb8>
 8001e14:	08db      	lsrs	r3, r3, #3
 8001e16:	b2e0      	uxtb	r0, r4
 8001e18:	e7de      	b.n	8001dd8 <__aeabi_d2f+0x2c>
 8001e1a:	0021      	movs	r1, r4
 8001e1c:	3117      	adds	r1, #23
 8001e1e:	db31      	blt.n	8001e84 <__aeabi_d2f+0xd8>
 8001e20:	2180      	movs	r1, #128	@ 0x80
 8001e22:	201e      	movs	r0, #30
 8001e24:	0409      	lsls	r1, r1, #16
 8001e26:	4339      	orrs	r1, r7
 8001e28:	1b00      	subs	r0, r0, r4
 8001e2a:	281f      	cmp	r0, #31
 8001e2c:	dd2d      	ble.n	8001e8a <__aeabi_d2f+0xde>
 8001e2e:	2602      	movs	r6, #2
 8001e30:	4276      	negs	r6, r6
 8001e32:	1b34      	subs	r4, r6, r4
 8001e34:	000e      	movs	r6, r1
 8001e36:	40e6      	lsrs	r6, r4
 8001e38:	0034      	movs	r4, r6
 8001e3a:	2820      	cmp	r0, #32
 8001e3c:	d004      	beq.n	8001e48 <__aeabi_d2f+0x9c>
 8001e3e:	481a      	ldr	r0, [pc, #104]	@ (8001ea8 <__aeabi_d2f+0xfc>)
 8001e40:	4684      	mov	ip, r0
 8001e42:	4463      	add	r3, ip
 8001e44:	4099      	lsls	r1, r3
 8001e46:	430d      	orrs	r5, r1
 8001e48:	002b      	movs	r3, r5
 8001e4a:	1e59      	subs	r1, r3, #1
 8001e4c:	418b      	sbcs	r3, r1
 8001e4e:	4323      	orrs	r3, r4
 8001e50:	0759      	lsls	r1, r3, #29
 8001e52:	d003      	beq.n	8001e5c <__aeabi_d2f+0xb0>
 8001e54:	210f      	movs	r1, #15
 8001e56:	4019      	ands	r1, r3
 8001e58:	2904      	cmp	r1, #4
 8001e5a:	d10b      	bne.n	8001e74 <__aeabi_d2f+0xc8>
 8001e5c:	019b      	lsls	r3, r3, #6
 8001e5e:	2000      	movs	r0, #0
 8001e60:	0a5b      	lsrs	r3, r3, #9
 8001e62:	e7b9      	b.n	8001dd8 <__aeabi_d2f+0x2c>
 8001e64:	210f      	movs	r1, #15
 8001e66:	4019      	ands	r1, r3
 8001e68:	2904      	cmp	r1, #4
 8001e6a:	d104      	bne.n	8001e76 <__aeabi_d2f+0xca>
 8001e6c:	019b      	lsls	r3, r3, #6
 8001e6e:	0a5b      	lsrs	r3, r3, #9
 8001e70:	b2e0      	uxtb	r0, r4
 8001e72:	e7b1      	b.n	8001dd8 <__aeabi_d2f+0x2c>
 8001e74:	2400      	movs	r4, #0
 8001e76:	3304      	adds	r3, #4
 8001e78:	0159      	lsls	r1, r3, #5
 8001e7a:	d5f7      	bpl.n	8001e6c <__aeabi_d2f+0xc0>
 8001e7c:	3401      	adds	r4, #1
 8001e7e:	2300      	movs	r3, #0
 8001e80:	b2e0      	uxtb	r0, r4
 8001e82:	e7a9      	b.n	8001dd8 <__aeabi_d2f+0x2c>
 8001e84:	2000      	movs	r0, #0
 8001e86:	2300      	movs	r3, #0
 8001e88:	e7a6      	b.n	8001dd8 <__aeabi_d2f+0x2c>
 8001e8a:	4c08      	ldr	r4, [pc, #32]	@ (8001eac <__aeabi_d2f+0x100>)
 8001e8c:	191c      	adds	r4, r3, r4
 8001e8e:	002b      	movs	r3, r5
 8001e90:	40a5      	lsls	r5, r4
 8001e92:	40c3      	lsrs	r3, r0
 8001e94:	40a1      	lsls	r1, r4
 8001e96:	1e68      	subs	r0, r5, #1
 8001e98:	4185      	sbcs	r5, r0
 8001e9a:	4329      	orrs	r1, r5
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	e7d7      	b.n	8001e50 <__aeabi_d2f+0xa4>
 8001ea0:	000007fe 	.word	0x000007fe
 8001ea4:	fffffc80 	.word	0xfffffc80
 8001ea8:	fffffca2 	.word	0xfffffca2
 8001eac:	fffffc82 	.word	0xfffffc82

08001eb0 <__aeabi_cfrcmple>:
 8001eb0:	4684      	mov	ip, r0
 8001eb2:	0008      	movs	r0, r1
 8001eb4:	4661      	mov	r1, ip
 8001eb6:	e7ff      	b.n	8001eb8 <__aeabi_cfcmpeq>

08001eb8 <__aeabi_cfcmpeq>:
 8001eb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001eba:	f000 f8cd 	bl	8002058 <__lesf2>
 8001ebe:	2800      	cmp	r0, #0
 8001ec0:	d401      	bmi.n	8001ec6 <__aeabi_cfcmpeq+0xe>
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	42c8      	cmn	r0, r1
 8001ec6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001ec8 <__aeabi_fcmpeq>:
 8001ec8:	b510      	push	{r4, lr}
 8001eca:	f000 f855 	bl	8001f78 <__eqsf2>
 8001ece:	4240      	negs	r0, r0
 8001ed0:	3001      	adds	r0, #1
 8001ed2:	bd10      	pop	{r4, pc}

08001ed4 <__aeabi_fcmplt>:
 8001ed4:	b510      	push	{r4, lr}
 8001ed6:	f000 f8bf 	bl	8002058 <__lesf2>
 8001eda:	2800      	cmp	r0, #0
 8001edc:	db01      	blt.n	8001ee2 <__aeabi_fcmplt+0xe>
 8001ede:	2000      	movs	r0, #0
 8001ee0:	bd10      	pop	{r4, pc}
 8001ee2:	2001      	movs	r0, #1
 8001ee4:	bd10      	pop	{r4, pc}
 8001ee6:	46c0      	nop			@ (mov r8, r8)

08001ee8 <__aeabi_fcmple>:
 8001ee8:	b510      	push	{r4, lr}
 8001eea:	f000 f8b5 	bl	8002058 <__lesf2>
 8001eee:	2800      	cmp	r0, #0
 8001ef0:	dd01      	ble.n	8001ef6 <__aeabi_fcmple+0xe>
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	bd10      	pop	{r4, pc}
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	bd10      	pop	{r4, pc}
 8001efa:	46c0      	nop			@ (mov r8, r8)

08001efc <__aeabi_fcmpgt>:
 8001efc:	b510      	push	{r4, lr}
 8001efe:	f000 f863 	bl	8001fc8 <__gesf2>
 8001f02:	2800      	cmp	r0, #0
 8001f04:	dc01      	bgt.n	8001f0a <__aeabi_fcmpgt+0xe>
 8001f06:	2000      	movs	r0, #0
 8001f08:	bd10      	pop	{r4, pc}
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	bd10      	pop	{r4, pc}
 8001f0e:	46c0      	nop			@ (mov r8, r8)

08001f10 <__aeabi_fcmpge>:
 8001f10:	b510      	push	{r4, lr}
 8001f12:	f000 f859 	bl	8001fc8 <__gesf2>
 8001f16:	2800      	cmp	r0, #0
 8001f18:	da01      	bge.n	8001f1e <__aeabi_fcmpge+0xe>
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	bd10      	pop	{r4, pc}
 8001f1e:	2001      	movs	r0, #1
 8001f20:	bd10      	pop	{r4, pc}
 8001f22:	46c0      	nop			@ (mov r8, r8)

08001f24 <__clzsi2>:
 8001f24:	211c      	movs	r1, #28
 8001f26:	2301      	movs	r3, #1
 8001f28:	041b      	lsls	r3, r3, #16
 8001f2a:	4298      	cmp	r0, r3
 8001f2c:	d301      	bcc.n	8001f32 <__clzsi2+0xe>
 8001f2e:	0c00      	lsrs	r0, r0, #16
 8001f30:	3910      	subs	r1, #16
 8001f32:	0a1b      	lsrs	r3, r3, #8
 8001f34:	4298      	cmp	r0, r3
 8001f36:	d301      	bcc.n	8001f3c <__clzsi2+0x18>
 8001f38:	0a00      	lsrs	r0, r0, #8
 8001f3a:	3908      	subs	r1, #8
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	4298      	cmp	r0, r3
 8001f40:	d301      	bcc.n	8001f46 <__clzsi2+0x22>
 8001f42:	0900      	lsrs	r0, r0, #4
 8001f44:	3904      	subs	r1, #4
 8001f46:	a202      	add	r2, pc, #8	@ (adr r2, 8001f50 <__clzsi2+0x2c>)
 8001f48:	5c10      	ldrb	r0, [r2, r0]
 8001f4a:	1840      	adds	r0, r0, r1
 8001f4c:	4770      	bx	lr
 8001f4e:	46c0      	nop			@ (mov r8, r8)
 8001f50:	02020304 	.word	0x02020304
 8001f54:	01010101 	.word	0x01010101
	...

08001f60 <__clzdi2>:
 8001f60:	b510      	push	{r4, lr}
 8001f62:	2900      	cmp	r1, #0
 8001f64:	d103      	bne.n	8001f6e <__clzdi2+0xe>
 8001f66:	f7ff ffdd 	bl	8001f24 <__clzsi2>
 8001f6a:	3020      	adds	r0, #32
 8001f6c:	e002      	b.n	8001f74 <__clzdi2+0x14>
 8001f6e:	0008      	movs	r0, r1
 8001f70:	f7ff ffd8 	bl	8001f24 <__clzsi2>
 8001f74:	bd10      	pop	{r4, pc}
 8001f76:	46c0      	nop			@ (mov r8, r8)

08001f78 <__eqsf2>:
 8001f78:	b570      	push	{r4, r5, r6, lr}
 8001f7a:	0042      	lsls	r2, r0, #1
 8001f7c:	024e      	lsls	r6, r1, #9
 8001f7e:	004c      	lsls	r4, r1, #1
 8001f80:	0245      	lsls	r5, r0, #9
 8001f82:	0a6d      	lsrs	r5, r5, #9
 8001f84:	0e12      	lsrs	r2, r2, #24
 8001f86:	0fc3      	lsrs	r3, r0, #31
 8001f88:	0a76      	lsrs	r6, r6, #9
 8001f8a:	0e24      	lsrs	r4, r4, #24
 8001f8c:	0fc9      	lsrs	r1, r1, #31
 8001f8e:	2aff      	cmp	r2, #255	@ 0xff
 8001f90:	d010      	beq.n	8001fb4 <__eqsf2+0x3c>
 8001f92:	2cff      	cmp	r4, #255	@ 0xff
 8001f94:	d00c      	beq.n	8001fb0 <__eqsf2+0x38>
 8001f96:	2001      	movs	r0, #1
 8001f98:	42a2      	cmp	r2, r4
 8001f9a:	d10a      	bne.n	8001fb2 <__eqsf2+0x3a>
 8001f9c:	42b5      	cmp	r5, r6
 8001f9e:	d108      	bne.n	8001fb2 <__eqsf2+0x3a>
 8001fa0:	428b      	cmp	r3, r1
 8001fa2:	d00f      	beq.n	8001fc4 <__eqsf2+0x4c>
 8001fa4:	2a00      	cmp	r2, #0
 8001fa6:	d104      	bne.n	8001fb2 <__eqsf2+0x3a>
 8001fa8:	0028      	movs	r0, r5
 8001faa:	1e43      	subs	r3, r0, #1
 8001fac:	4198      	sbcs	r0, r3
 8001fae:	e000      	b.n	8001fb2 <__eqsf2+0x3a>
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	bd70      	pop	{r4, r5, r6, pc}
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	2cff      	cmp	r4, #255	@ 0xff
 8001fb8:	d1fb      	bne.n	8001fb2 <__eqsf2+0x3a>
 8001fba:	4335      	orrs	r5, r6
 8001fbc:	d1f9      	bne.n	8001fb2 <__eqsf2+0x3a>
 8001fbe:	404b      	eors	r3, r1
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	e7f6      	b.n	8001fb2 <__eqsf2+0x3a>
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	e7f4      	b.n	8001fb2 <__eqsf2+0x3a>

08001fc8 <__gesf2>:
 8001fc8:	b530      	push	{r4, r5, lr}
 8001fca:	0042      	lsls	r2, r0, #1
 8001fcc:	0244      	lsls	r4, r0, #9
 8001fce:	024d      	lsls	r5, r1, #9
 8001fd0:	0fc3      	lsrs	r3, r0, #31
 8001fd2:	0048      	lsls	r0, r1, #1
 8001fd4:	0a64      	lsrs	r4, r4, #9
 8001fd6:	0e12      	lsrs	r2, r2, #24
 8001fd8:	0a6d      	lsrs	r5, r5, #9
 8001fda:	0e00      	lsrs	r0, r0, #24
 8001fdc:	0fc9      	lsrs	r1, r1, #31
 8001fde:	2aff      	cmp	r2, #255	@ 0xff
 8001fe0:	d018      	beq.n	8002014 <__gesf2+0x4c>
 8001fe2:	28ff      	cmp	r0, #255	@ 0xff
 8001fe4:	d00a      	beq.n	8001ffc <__gesf2+0x34>
 8001fe6:	2a00      	cmp	r2, #0
 8001fe8:	d11e      	bne.n	8002028 <__gesf2+0x60>
 8001fea:	2800      	cmp	r0, #0
 8001fec:	d10a      	bne.n	8002004 <__gesf2+0x3c>
 8001fee:	2d00      	cmp	r5, #0
 8001ff0:	d029      	beq.n	8002046 <__gesf2+0x7e>
 8001ff2:	2c00      	cmp	r4, #0
 8001ff4:	d12d      	bne.n	8002052 <__gesf2+0x8a>
 8001ff6:	0048      	lsls	r0, r1, #1
 8001ff8:	3801      	subs	r0, #1
 8001ffa:	bd30      	pop	{r4, r5, pc}
 8001ffc:	2d00      	cmp	r5, #0
 8001ffe:	d125      	bne.n	800204c <__gesf2+0x84>
 8002000:	2a00      	cmp	r2, #0
 8002002:	d101      	bne.n	8002008 <__gesf2+0x40>
 8002004:	2c00      	cmp	r4, #0
 8002006:	d0f6      	beq.n	8001ff6 <__gesf2+0x2e>
 8002008:	428b      	cmp	r3, r1
 800200a:	d019      	beq.n	8002040 <__gesf2+0x78>
 800200c:	2001      	movs	r0, #1
 800200e:	425b      	negs	r3, r3
 8002010:	4318      	orrs	r0, r3
 8002012:	e7f2      	b.n	8001ffa <__gesf2+0x32>
 8002014:	2c00      	cmp	r4, #0
 8002016:	d119      	bne.n	800204c <__gesf2+0x84>
 8002018:	28ff      	cmp	r0, #255	@ 0xff
 800201a:	d1f7      	bne.n	800200c <__gesf2+0x44>
 800201c:	2d00      	cmp	r5, #0
 800201e:	d115      	bne.n	800204c <__gesf2+0x84>
 8002020:	2000      	movs	r0, #0
 8002022:	428b      	cmp	r3, r1
 8002024:	d1f2      	bne.n	800200c <__gesf2+0x44>
 8002026:	e7e8      	b.n	8001ffa <__gesf2+0x32>
 8002028:	2800      	cmp	r0, #0
 800202a:	d0ef      	beq.n	800200c <__gesf2+0x44>
 800202c:	428b      	cmp	r3, r1
 800202e:	d1ed      	bne.n	800200c <__gesf2+0x44>
 8002030:	4282      	cmp	r2, r0
 8002032:	dceb      	bgt.n	800200c <__gesf2+0x44>
 8002034:	db04      	blt.n	8002040 <__gesf2+0x78>
 8002036:	42ac      	cmp	r4, r5
 8002038:	d8e8      	bhi.n	800200c <__gesf2+0x44>
 800203a:	2000      	movs	r0, #0
 800203c:	42ac      	cmp	r4, r5
 800203e:	d2dc      	bcs.n	8001ffa <__gesf2+0x32>
 8002040:	0058      	lsls	r0, r3, #1
 8002042:	3801      	subs	r0, #1
 8002044:	e7d9      	b.n	8001ffa <__gesf2+0x32>
 8002046:	2c00      	cmp	r4, #0
 8002048:	d0d7      	beq.n	8001ffa <__gesf2+0x32>
 800204a:	e7df      	b.n	800200c <__gesf2+0x44>
 800204c:	2002      	movs	r0, #2
 800204e:	4240      	negs	r0, r0
 8002050:	e7d3      	b.n	8001ffa <__gesf2+0x32>
 8002052:	428b      	cmp	r3, r1
 8002054:	d1da      	bne.n	800200c <__gesf2+0x44>
 8002056:	e7ee      	b.n	8002036 <__gesf2+0x6e>

08002058 <__lesf2>:
 8002058:	b530      	push	{r4, r5, lr}
 800205a:	0042      	lsls	r2, r0, #1
 800205c:	0244      	lsls	r4, r0, #9
 800205e:	024d      	lsls	r5, r1, #9
 8002060:	0fc3      	lsrs	r3, r0, #31
 8002062:	0048      	lsls	r0, r1, #1
 8002064:	0a64      	lsrs	r4, r4, #9
 8002066:	0e12      	lsrs	r2, r2, #24
 8002068:	0a6d      	lsrs	r5, r5, #9
 800206a:	0e00      	lsrs	r0, r0, #24
 800206c:	0fc9      	lsrs	r1, r1, #31
 800206e:	2aff      	cmp	r2, #255	@ 0xff
 8002070:	d017      	beq.n	80020a2 <__lesf2+0x4a>
 8002072:	28ff      	cmp	r0, #255	@ 0xff
 8002074:	d00a      	beq.n	800208c <__lesf2+0x34>
 8002076:	2a00      	cmp	r2, #0
 8002078:	d11b      	bne.n	80020b2 <__lesf2+0x5a>
 800207a:	2800      	cmp	r0, #0
 800207c:	d10a      	bne.n	8002094 <__lesf2+0x3c>
 800207e:	2d00      	cmp	r5, #0
 8002080:	d01d      	beq.n	80020be <__lesf2+0x66>
 8002082:	2c00      	cmp	r4, #0
 8002084:	d12d      	bne.n	80020e2 <__lesf2+0x8a>
 8002086:	0048      	lsls	r0, r1, #1
 8002088:	3801      	subs	r0, #1
 800208a:	e011      	b.n	80020b0 <__lesf2+0x58>
 800208c:	2d00      	cmp	r5, #0
 800208e:	d10e      	bne.n	80020ae <__lesf2+0x56>
 8002090:	2a00      	cmp	r2, #0
 8002092:	d101      	bne.n	8002098 <__lesf2+0x40>
 8002094:	2c00      	cmp	r4, #0
 8002096:	d0f6      	beq.n	8002086 <__lesf2+0x2e>
 8002098:	428b      	cmp	r3, r1
 800209a:	d10c      	bne.n	80020b6 <__lesf2+0x5e>
 800209c:	0058      	lsls	r0, r3, #1
 800209e:	3801      	subs	r0, #1
 80020a0:	e006      	b.n	80020b0 <__lesf2+0x58>
 80020a2:	2c00      	cmp	r4, #0
 80020a4:	d103      	bne.n	80020ae <__lesf2+0x56>
 80020a6:	28ff      	cmp	r0, #255	@ 0xff
 80020a8:	d105      	bne.n	80020b6 <__lesf2+0x5e>
 80020aa:	2d00      	cmp	r5, #0
 80020ac:	d015      	beq.n	80020da <__lesf2+0x82>
 80020ae:	2002      	movs	r0, #2
 80020b0:	bd30      	pop	{r4, r5, pc}
 80020b2:	2800      	cmp	r0, #0
 80020b4:	d106      	bne.n	80020c4 <__lesf2+0x6c>
 80020b6:	2001      	movs	r0, #1
 80020b8:	425b      	negs	r3, r3
 80020ba:	4318      	orrs	r0, r3
 80020bc:	e7f8      	b.n	80020b0 <__lesf2+0x58>
 80020be:	2c00      	cmp	r4, #0
 80020c0:	d0f6      	beq.n	80020b0 <__lesf2+0x58>
 80020c2:	e7f8      	b.n	80020b6 <__lesf2+0x5e>
 80020c4:	428b      	cmp	r3, r1
 80020c6:	d1f6      	bne.n	80020b6 <__lesf2+0x5e>
 80020c8:	4282      	cmp	r2, r0
 80020ca:	dcf4      	bgt.n	80020b6 <__lesf2+0x5e>
 80020cc:	dbe6      	blt.n	800209c <__lesf2+0x44>
 80020ce:	42ac      	cmp	r4, r5
 80020d0:	d8f1      	bhi.n	80020b6 <__lesf2+0x5e>
 80020d2:	2000      	movs	r0, #0
 80020d4:	42ac      	cmp	r4, r5
 80020d6:	d2eb      	bcs.n	80020b0 <__lesf2+0x58>
 80020d8:	e7e0      	b.n	800209c <__lesf2+0x44>
 80020da:	2000      	movs	r0, #0
 80020dc:	428b      	cmp	r3, r1
 80020de:	d1ea      	bne.n	80020b6 <__lesf2+0x5e>
 80020e0:	e7e6      	b.n	80020b0 <__lesf2+0x58>
 80020e2:	428b      	cmp	r3, r1
 80020e4:	d1e7      	bne.n	80020b6 <__lesf2+0x5e>
 80020e6:	e7f2      	b.n	80020ce <__lesf2+0x76>

080020e8 <bitmap_set_bit>:
}

/*
 * Bitmap set a bit value
 */
void bitmap_set_bit(uint64_t *bitmap, int index) {
 80020e8:	b510      	push	{r4, lr}
 80020ea:	000a      	movs	r2, r1
 80020ec:	0004      	movs	r4, r0
	if(is_index_out_of_bound(index)) return;
 80020ee:	293f      	cmp	r1, #63	@ 0x3f
 80020f0:	d808      	bhi.n	8002104 <bitmap_set_bit+0x1c>
    *bitmap |= (1ULL << index);
 80020f2:	2001      	movs	r0, #1
 80020f4:	2100      	movs	r1, #0
 80020f6:	f7fe f9ab 	bl	8000450 <__aeabi_llsl>
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	4318      	orrs	r0, r3
 80020fe:	6863      	ldr	r3, [r4, #4]
 8002100:	430b      	orrs	r3, r1
 8002102:	c409      	stmia	r4!, {r0, r3}
}
 8002104:	bd10      	pop	{r4, pc}

08002106 <bitmap_clear_bit>:

/*
 * Bitmap clear a bit value
 */
void bitmap_clear_bit(uint64_t *bitmap, int index) {
 8002106:	b510      	push	{r4, lr}
 8002108:	000a      	movs	r2, r1
 800210a:	0004      	movs	r4, r0
	if(is_index_out_of_bound(index)) return;
 800210c:	293f      	cmp	r1, #63	@ 0x3f
 800210e:	d808      	bhi.n	8002122 <bitmap_clear_bit+0x1c>
	*bitmap &= ~(1ULL << index);
 8002110:	2001      	movs	r0, #1
 8002112:	2100      	movs	r1, #0
 8002114:	f7fe f99c 	bl	8000450 <__aeabi_llsl>
 8002118:	6822      	ldr	r2, [r4, #0]
 800211a:	6863      	ldr	r3, [r4, #4]
 800211c:	4382      	bics	r2, r0
 800211e:	438b      	bics	r3, r1
 8002120:	c40c      	stmia	r4!, {r2, r3}
}
 8002122:	bd10      	pop	{r4, pc}

08002124 <bitmap_get_bit>:

/*
 * Bitmap get a bit value
 */
int bitmap_get_bit(uint64_t bitmap, int index) {
 8002124:	b510      	push	{r4, lr}
	if(is_index_out_of_bound(index)) return -1;
 8002126:	2a3f      	cmp	r2, #63	@ 0x3f
 8002128:	d804      	bhi.n	8002134 <bitmap_get_bit+0x10>
	return (bitmap >> index) & 1;
 800212a:	f7fe f985 	bl	8000438 <__aeabi_llsr>
 800212e:	2301      	movs	r3, #1
 8002130:	4018      	ands	r0, r3
}
 8002132:	bd10      	pop	{r4, pc}
	if(is_index_out_of_bound(index)) return -1;
 8002134:	2001      	movs	r0, #1
 8002136:	4240      	negs	r0, r0
 8002138:	e7fb      	b.n	8002132 <bitmap_get_bit+0xe>

0800213a <cb_sq_to_str>:
 *  @param idx  Index 0..63.
 *  @param file [out] Reçoit 0..7 (A..H).
 *  @param rank [out] Reçoit 0..7 (1..8).
 */
static inline void cb_idx_to_coords(uint8_t idx, uint8_t* file, uint8_t* rank){
    *file = (uint8_t)(idx % 8u);
 800213a:	2307      	movs	r3, #7
 800213c:	4003      	ands	r3, r0
 *  @param idx Index 0..63.
 *  @param out Buffer de 3 chars min. (ex: "E2\0").
 */
static inline void cb_sq_to_str(uint8_t idx, char out[3]){
    uint8_t f,r; cb_idx_to_coords(idx,&f,&r);
    out[0] = (char)('A'+f); out[1]=(char)('1'+r); out[2]='\0';
 800213e:	3341      	adds	r3, #65	@ 0x41
 8002140:	700b      	strb	r3, [r1, #0]
 8002142:	2300      	movs	r3, #0
    *rank = (uint8_t)(idx / 8u);
 8002144:	08c0      	lsrs	r0, r0, #3
    out[0] = (char)('A'+f); out[1]=(char)('1'+r); out[2]='\0';
 8002146:	3031      	adds	r0, #49	@ 0x31
 8002148:	7048      	strb	r0, [r1, #1]
 800214a:	708b      	strb	r3, [r1, #2]
}
 800214c:	4770      	bx	lr

0800214e <parse_u8>:
    if(n<3) return false; if(!(s[0]=='0' && (s[1]=='x'||s[1]=='X'))) return false;
    for(size_t i=2;i<n;i++){ char c=s[i];
        if(!((c>='0'&&c<='9')||(c>='a'&&c<='f')||(c>='A'&&c<='F'))) return false; }
    return true; }

static bool parse_u8(const char* t, uint8_t* v){ if(!t||!v) return false;
 800214e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002150:	0004      	movs	r4, r0
 8002152:	000d      	movs	r5, r1
 8002154:	2800      	cmp	r0, #0
 8002156:	d101      	bne.n	800215c <parse_u8+0xe>
 8002158:	2000      	movs	r0, #0
    char* e=NULL; unsigned long x=strtoul(t,&e,10); if(e==t||*e) return false;
    if(x>255UL) return false; *v=(uint8_t)x; return true; }
 800215a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    char* e=NULL; unsigned long x=strtoul(t,&e,10); if(e==t||*e) return false;
 800215c:	2300      	movs	r3, #0
 800215e:	220a      	movs	r2, #10
 8002160:	a901      	add	r1, sp, #4
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	f004 f814 	bl	8006190 <strtoul>
 8002168:	9b01      	ldr	r3, [sp, #4]
 800216a:	42a3      	cmp	r3, r4
 800216c:	d0f4      	beq.n	8002158 <parse_u8+0xa>
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f1      	bne.n	8002158 <parse_u8+0xa>
    if(x>255UL) return false; *v=(uint8_t)x; return true; }
 8002174:	28ff      	cmp	r0, #255	@ 0xff
 8002176:	d8ef      	bhi.n	8002158 <parse_u8+0xa>
 8002178:	7028      	strb	r0, [r5, #0]
 800217a:	2001      	movs	r0, #1
 800217c:	e7ed      	b.n	800215a <parse_u8+0xc>

0800217e <s_write>:
static size_t s_write(char* out, size_t cap, const char* fmt, ...){
 800217e:	b40c      	push	{r2, r3}
 8002180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002182:	0005      	movs	r5, r0
 8002184:	1e0c      	subs	r4, r1, #0
    if(cap==0) return 0;
 8002186:	d104      	bne.n	8002192 <s_write+0x14>
 8002188:	2000      	movs	r0, #0
}
 800218a:	bc3e      	pop	{r1, r2, r3, r4, r5}
 800218c:	bc08      	pop	{r3}
 800218e:	b002      	add	sp, #8
 8002190:	4718      	bx	r3
    va_list ap; va_start(ap, fmt);
 8002192:	ab07      	add	r3, sp, #28
    int n = vsnprintf(out, cap, fmt, ap);
 8002194:	9a06      	ldr	r2, [sp, #24]
    va_list ap; va_start(ap, fmt);
 8002196:	9301      	str	r3, [sp, #4]
    int n = vsnprintf(out, cap, fmt, ap);
 8002198:	f004 f916 	bl	80063c8 <vsniprintf>
    if(n<0) return 0; // encoding error
 800219c:	2800      	cmp	r0, #0
 800219e:	dbf3      	blt.n	8002188 <s_write+0xa>
    if((size_t)n >= cap){ // truncated
 80021a0:	42a0      	cmp	r0, r4
 80021a2:	d3f2      	bcc.n	800218a <s_write+0xc>
        out[cap-1] = '\0';
 80021a4:	2300      	movs	r3, #0
 80021a6:	1e60      	subs	r0, r4, #1
 80021a8:	542b      	strb	r3, [r5, r0]
        return cap-1;
 80021aa:	e7ee      	b.n	800218a <s_write+0xc>

080021ac <convert_reed_index_to_led_index>:
	if((reed_index / 8) % 2 == 0) {
 80021ac:	08c3      	lsrs	r3, r0, #3
 80021ae:	0702      	lsls	r2, r0, #28
 80021b0:	d503      	bpl.n	80021ba <convert_reed_index_to_led_index+0xe>
		return (16 * (uint8_t)(reed_index / 8)) + 7 - reed_index;
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	1a1b      	subs	r3, r3, r0
 80021b6:	3307      	adds	r3, #7
 80021b8:	b2d8      	uxtb	r0, r3
}
 80021ba:	4770      	bx	lr

080021bc <cb_sq_from_str>:
/** @brief Parse une chaîne de 2 caractères (ex: "E2") en index 0..63.
 *  @param s Chaîne "A1".."H8" (insensible à la casse pour la lettre).
 *  @param out_idx [out] Reçoit l'index 0..63 si succès.
 *  @return true si parsing réussi, false sinon.
 */
bool cb_sq_from_str(const char* s, uint8_t* out_idx){
 80021bc:	b570      	push	{r4, r5, r6, lr}
 80021be:	0003      	movs	r3, r0
 80021c0:	000c      	movs	r4, r1
    if(!s || !out_idx) return false;
 80021c2:	2800      	cmp	r0, #0
 80021c4:	d021      	beq.n	800220a <cb_sq_from_str+0x4e>
 80021c6:	1e08      	subs	r0, r1, #0
 80021c8:	d01f      	beq.n	800220a <cb_sq_from_str+0x4e>
    char c0 = s[0]; char c1 = s[1];
 80021ca:	7819      	ldrb	r1, [r3, #0]
    if(!s || !out_idx) return false;
 80021cc:	1e08      	subs	r0, r1, #0
    if(!c0 || !c1 || s[2]) return false; // exactly 2 chars like 'E2'
 80021ce:	d01c      	beq.n	800220a <cb_sq_from_str+0x4e>
    char c0 = s[0]; char c1 = s[1];
 80021d0:	785a      	ldrb	r2, [r3, #1]
    if(!s || !out_idx) return false;
 80021d2:	1e10      	subs	r0, r2, #0
    if(!c0 || !c1 || s[2]) return false; // exactly 2 chars like 'E2'
 80021d4:	d019      	beq.n	800220a <cb_sq_from_str+0x4e>
    if(!s || !out_idx) return false;
 80021d6:	2000      	movs	r0, #0
    if(!c0 || !c1 || s[2]) return false; // exactly 2 chars like 'E2'
 80021d8:	789d      	ldrb	r5, [r3, #2]
 80021da:	4285      	cmp	r5, r0
 80021dc:	d115      	bne.n	800220a <cb_sq_from_str+0x4e>
    if(c0>='a'&&c0<='h') c0 = (char)(c0 - 'a' + 'A');
 80021de:	000b      	movs	r3, r1
 80021e0:	3b61      	subs	r3, #97	@ 0x61
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b07      	cmp	r3, #7
 80021e6:	d904      	bls.n	80021f2 <cb_sq_from_str+0x36>
    if(!(c0>='A'&&c0<='H') || !(c1>='1'&&c1<='8')) return false;
 80021e8:	3941      	subs	r1, #65	@ 0x41
 80021ea:	b2cb      	uxtb	r3, r1
    if(!s || !out_idx) return false;
 80021ec:	0028      	movs	r0, r5
    if(!(c0>='A'&&c0<='H') || !(c1>='1'&&c1<='8')) return false;
 80021ee:	2b07      	cmp	r3, #7
 80021f0:	d80b      	bhi.n	800220a <cb_sq_from_str+0x4e>
 80021f2:	3a31      	subs	r2, #49	@ 0x31
 80021f4:	b2d2      	uxtb	r2, r2
    if(!s || !out_idx) return false;
 80021f6:	2000      	movs	r0, #0
    if(!(c0>='A'&&c0<='H') || !(c1>='1'&&c1<='8')) return false;
 80021f8:	2a07      	cmp	r2, #7
 80021fa:	d806      	bhi.n	800220a <cb_sq_from_str+0x4e>
    return (uint8_t)(rank*8u + file);
 80021fc:	00d2      	lsls	r2, r2, #3
 80021fe:	1898      	adds	r0, r3, r2
    uint8_t file = (uint8_t)(c0 - 'A');
    uint8_t rank = (uint8_t)(c1 - '1');
    *out_idx = cb_coords_to_idx(file, rank);
    *out_idx = convert_reed_index_to_led_index(*out_idx);
 8002200:	b2c0      	uxtb	r0, r0
 8002202:	f7ff ffd3 	bl	80021ac <convert_reed_index_to_led_index>
 8002206:	7020      	strb	r0, [r4, #0]
    return true;
 8002208:	2001      	movs	r0, #1
}
 800220a:	bd70      	pop	{r4, r5, r6, pc}

0800220c <cb_parse_cmd>:

bool cb_parse_cmd(const char* line_in, cb_cmd_t* out){
 800220c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220e:	0007      	movs	r7, r0
 8002210:	000c      	movs	r4, r1
 8002212:	b09d      	sub	sp, #116	@ 0x74
    if(!line_in || !out) return false;
 8002214:	2800      	cmp	r0, #0
 8002216:	d05d      	beq.n	80022d4 <cb_parse_cmd+0xc8>
 8002218:	2900      	cmp	r1, #0
 800221a:	d05b      	beq.n	80022d4 <cb_parse_cmd+0xc8>
    memset(out, 0, sizeof(*out));
 800221c:	1c48      	adds	r0, r1, #1
 800221e:	2297      	movs	r2, #151	@ 0x97
 8002220:	2100      	movs	r1, #0
 8002222:	f004 f8ef 	bl	8006404 <memset>
    out->type = CB_CMD_UNKNOWN;
 8002226:	231f      	movs	r3, #31
 8002228:	7023      	strb	r3, [r4, #0]

    // Doit commencer par ':'
    if(line_in[0] != ':') return false;
 800222a:	783b      	ldrb	r3, [r7, #0]
 800222c:	2b3a      	cmp	r3, #58	@ 0x3a
 800222e:	d151      	bne.n	80022d4 <cb_parse_cmd+0xc8>

    // Copie mutable
    size_t L = strnlen(line_in, CB_MAX_LINE);
 8002230:	2120      	movs	r1, #32
 8002232:	0038      	movs	r0, r7
 8002234:	f004 f910 	bl	8006458 <strnlen>
 8002238:	0006      	movs	r6, r0
    if(L >= sizeof(out->_scratch)) L = sizeof(out->_scratch)-1;
 800223a:	2821      	cmp	r0, #33	@ 0x21
 800223c:	d900      	bls.n	8002240 <cb_parse_cmd+0x34>
 800223e:	2621      	movs	r6, #33	@ 0x21
    memcpy(out->_scratch, line_in, L);
 8002240:	0025      	movs	r5, r4
 8002242:	3570      	adds	r5, #112	@ 0x70
 8002244:	0032      	movs	r2, r6
 8002246:	0039      	movs	r1, r7
 8002248:	0028      	movs	r0, r5
 800224a:	f004 f93d 	bl	80064c8 <memcpy>
    out->_scratch[L] = '\0';
 800224e:	2300      	movs	r3, #0
    while(*p && isspace((unsigned char)*p)) p++;
 8002250:	2208      	movs	r2, #8
    out->_scratch[L] = '\0';
 8002252:	19a6      	adds	r6, r4, r6
 8002254:	3670      	adds	r6, #112	@ 0x70
    while(*p && isspace((unsigned char)*p)) p++;
 8002256:	48b9      	ldr	r0, [pc, #740]	@ (800253c <cb_parse_cmd+0x330>)
    out->_scratch[L] = '\0';
 8002258:	7033      	strb	r3, [r6, #0]
    while(*p && isspace((unsigned char)*p)) p++;
 800225a:	782b      	ldrb	r3, [r5, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d004      	beq.n	800226a <cb_parse_cmd+0x5e>
 8002260:	5cc1      	ldrb	r1, [r0, r3]
 8002262:	000b      	movs	r3, r1
 8002264:	4013      	ands	r3, r2
 8002266:	4211      	tst	r1, r2
 8002268:	d116      	bne.n	8002298 <cb_parse_cmd+0x8c>
        while(*p && !isspace((unsigned char)*p)) p++;
 800226a:	2108      	movs	r1, #8
 800226c:	4ab3      	ldr	r2, [pc, #716]	@ (800253c <cb_parse_cmd+0x330>)
    while(*p && n<max_out){
 800226e:	7828      	ldrb	r0, [r5, #0]
 8002270:	2800      	cmp	r0, #0
 8002272:	d02d      	beq.n	80022d0 <cb_parse_cmd+0xc4>
 8002274:	2b18      	cmp	r3, #24
 8002276:	d111      	bne.n	800229c <cb_parse_cmd+0x90>
 8002278:	001e      	movs	r6, r3
    char* tok[CB_MAX_TOKENS];
    int nt = split_tokens_ro(out->_scratch, tok, CB_MAX_TOKENS);
    if(nt <= 0) return false;

    // tok[0] commence par ':'
    const char* T0 = tok[0] + 1;
 800227a:	9d04      	ldr	r5, [sp, #16]

    // --- Groupe simple ---
    if(strcmp(T0,"PING")==0 && nt==1){ out->type=CB_CMD_PING; return true; }
 800227c:	49b0      	ldr	r1, [pc, #704]	@ (8002540 <cb_parse_cmd+0x334>)
    const char* T0 = tok[0] + 1;
 800227e:	3501      	adds	r5, #1
    if(strcmp(T0,"PING")==0 && nt==1){ out->type=CB_CMD_PING; return true; }
 8002280:	0028      	movs	r0, r5
 8002282:	f7fd ff3d 	bl	8000100 <strcmp>
 8002286:	2800      	cmp	r0, #0
 8002288:	d126      	bne.n	80022d8 <cb_parse_cmd+0xcc>
 800228a:	2e01      	cmp	r6, #1
 800228c:	d124      	bne.n	80022d8 <cb_parse_cmd+0xcc>
 800228e:	7026      	strb	r6, [r4, #0]
 8002290:	2501      	movs	r5, #1
        out->u.cfg_set_kv.n_pairs = cnt;
        return cnt>0;
    }

    return false;
}
 8002292:	0028      	movs	r0, r5
 8002294:	b01d      	add	sp, #116	@ 0x74
 8002296:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(*p && isspace((unsigned char)*p)) p++;
 8002298:	3501      	adds	r5, #1
 800229a:	e7de      	b.n	800225a <cb_parse_cmd+0x4e>
        out[n++] = p;
 800229c:	1c5e      	adds	r6, r3, #1
 800229e:	a804      	add	r0, sp, #16
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	501d      	str	r5, [r3, r0]
        while(*p && !isspace((unsigned char)*p)) p++;
 80022a4:	782b      	ldrb	r3, [r5, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0e7      	beq.n	800227a <cb_parse_cmd+0x6e>
 80022aa:	5cd0      	ldrb	r0, [r2, r3]
 80022ac:	1c6b      	adds	r3, r5, #1
 80022ae:	4208      	tst	r0, r1
 80022b0:	d00a      	beq.n	80022c8 <cb_parse_cmd+0xbc>
        *p++ = '\0';
 80022b2:	2000      	movs	r0, #0
 80022b4:	7028      	strb	r0, [r5, #0]
 80022b6:	001d      	movs	r5, r3
        while(*p && isspace((unsigned char)*p)) p++;
 80022b8:	782b      	ldrb	r3, [r5, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <cb_parse_cmd+0xb8>
 80022be:	5cd3      	ldrb	r3, [r2, r3]
 80022c0:	420b      	tst	r3, r1
 80022c2:	d103      	bne.n	80022cc <cb_parse_cmd+0xc0>
        *p++ = '\0';
 80022c4:	0033      	movs	r3, r6
 80022c6:	e7d2      	b.n	800226e <cb_parse_cmd+0x62>
        while(*p && !isspace((unsigned char)*p)) p++;
 80022c8:	001d      	movs	r5, r3
 80022ca:	e7eb      	b.n	80022a4 <cb_parse_cmd+0x98>
        while(*p && isspace((unsigned char)*p)) p++;
 80022cc:	3501      	adds	r5, #1
 80022ce:	e7f3      	b.n	80022b8 <cb_parse_cmd+0xac>
 80022d0:	1e1e      	subs	r6, r3, #0
    if(nt <= 0) return false;
 80022d2:	d1d2      	bne.n	800227a <cb_parse_cmd+0x6e>
            if(!parse_u8(tok[3],&r)||!parse_u8(tok[4],&g)||!parse_u8(tok[5],&b)) return false;
 80022d4:	2500      	movs	r5, #0
 80022d6:	e7dc      	b.n	8002292 <cb_parse_cmd+0x86>
    if(strcmp(T0,"VER?")==0 && nt==1){ out->type=CB_CMD_VER_Q; return true; }
 80022d8:	0028      	movs	r0, r5
 80022da:	499a      	ldr	r1, [pc, #616]	@ (8002544 <cb_parse_cmd+0x338>)
 80022dc:	f7fd ff10 	bl	8000100 <strcmp>
 80022e0:	2800      	cmp	r0, #0
 80022e2:	d104      	bne.n	80022ee <cb_parse_cmd+0xe2>
 80022e4:	2e01      	cmp	r6, #1
 80022e6:	d102      	bne.n	80022ee <cb_parse_cmd+0xe2>
 80022e8:	2302      	movs	r3, #2
 80022ea:	7023      	strb	r3, [r4, #0]
 80022ec:	e7d0      	b.n	8002290 <cb_parse_cmd+0x84>
    if(strcmp(T0,"TIME?")==0 && nt==1){ out->type=CB_CMD_TIME_Q; return true; }
 80022ee:	0028      	movs	r0, r5
 80022f0:	4995      	ldr	r1, [pc, #596]	@ (8002548 <cb_parse_cmd+0x33c>)
 80022f2:	f7fd ff05 	bl	8000100 <strcmp>
 80022f6:	2800      	cmp	r0, #0
 80022f8:	d102      	bne.n	8002300 <cb_parse_cmd+0xf4>
 80022fa:	2303      	movs	r3, #3
 80022fc:	2e01      	cmp	r6, #1
 80022fe:	d0f4      	beq.n	80022ea <cb_parse_cmd+0xde>
    if(strcmp(T0,"RST")==0 && nt==1){ out->type=CB_CMD_RST; return true; }
 8002300:	0028      	movs	r0, r5
 8002302:	4992      	ldr	r1, [pc, #584]	@ (800254c <cb_parse_cmd+0x340>)
 8002304:	f7fd fefc 	bl	8000100 <strcmp>
 8002308:	2800      	cmp	r0, #0
 800230a:	d102      	bne.n	8002312 <cb_parse_cmd+0x106>
 800230c:	2304      	movs	r3, #4
 800230e:	2e01      	cmp	r6, #1
 8002310:	d0eb      	beq.n	80022ea <cb_parse_cmd+0xde>
    if(strcmp(T0,"SAVE")==0 && nt==1){ out->type=CB_CMD_SAVE; return true; }
 8002312:	0028      	movs	r0, r5
 8002314:	498e      	ldr	r1, [pc, #568]	@ (8002550 <cb_parse_cmd+0x344>)
 8002316:	f7fd fef3 	bl	8000100 <strcmp>
 800231a:	2800      	cmp	r0, #0
 800231c:	d102      	bne.n	8002324 <cb_parse_cmd+0x118>
 800231e:	2305      	movs	r3, #5
 8002320:	2e01      	cmp	r6, #1
 8002322:	d0e2      	beq.n	80022ea <cb_parse_cmd+0xde>
    if(strcmp(T0,"STREAM")==0 && nt==2){
 8002324:	0028      	movs	r0, r5
 8002326:	498b      	ldr	r1, [pc, #556]	@ (8002554 <cb_parse_cmd+0x348>)
 8002328:	f7fd feea 	bl	8000100 <strcmp>
 800232c:	2800      	cmp	r0, #0
 800232e:	d116      	bne.n	800235e <cb_parse_cmd+0x152>
 8002330:	2e02      	cmp	r6, #2
 8002332:	d114      	bne.n	800235e <cb_parse_cmd+0x152>
        bool on=false; if(!parse_bool_onoff(tok[1], &on)) return false;
 8002334:	9d05      	ldr	r5, [sp, #20]
    if(!t||!v) return false;
 8002336:	2d00      	cmp	r5, #0
 8002338:	d0cc      	beq.n	80022d4 <cb_parse_cmd+0xc8>
    if(strcmp(t,"ON")==0){*v=true; return true;}
 800233a:	0028      	movs	r0, r5
 800233c:	4986      	ldr	r1, [pc, #536]	@ (8002558 <cb_parse_cmd+0x34c>)
 800233e:	f7fd fedf 	bl	8000100 <strcmp>
 8002342:	2800      	cmp	r0, #0
 8002344:	d009      	beq.n	800235a <cb_parse_cmd+0x14e>
    if(strcmp(t,"OFF")==0){*v=false; return true;}
 8002346:	0028      	movs	r0, r5
 8002348:	4984      	ldr	r1, [pc, #528]	@ (800255c <cb_parse_cmd+0x350>)
 800234a:	f7fd fed9 	bl	8000100 <strcmp>
 800234e:	2800      	cmp	r0, #0
 8002350:	d1c0      	bne.n	80022d4 <cb_parse_cmd+0xc8>
        out->type = CB_CMD_STREAM; out->u.stream.on = on; return true;
 8002352:	2306      	movs	r3, #6
 8002354:	7220      	strb	r0, [r4, #8]
 8002356:	7023      	strb	r3, [r4, #0]
 8002358:	e79a      	b.n	8002290 <cb_parse_cmd+0x84>
    if(strcmp(t,"ON")==0){*v=true; return true;}
 800235a:	2001      	movs	r0, #1
 800235c:	e7f9      	b.n	8002352 <cb_parse_cmd+0x146>
    if(strcmp(T0,"READ")==0 && nt>=2){
 800235e:	0028      	movs	r0, r5
 8002360:	497f      	ldr	r1, [pc, #508]	@ (8002560 <cb_parse_cmd+0x354>)
 8002362:	f7fd fecd 	bl	8000100 <strcmp>
 8002366:	2800      	cmp	r0, #0
 8002368:	d120      	bne.n	80023ac <cb_parse_cmd+0x1a0>
 800236a:	2e01      	cmp	r6, #1
 800236c:	d01e      	beq.n	80023ac <cb_parse_cmd+0x1a0>
        if(strcmp(tok[1],"ALL")==0 && nt==2){ out->type=CB_CMD_READ_ALL; return true; }
 800236e:	9d05      	ldr	r5, [sp, #20]
 8002370:	497c      	ldr	r1, [pc, #496]	@ (8002564 <cb_parse_cmd+0x358>)
 8002372:	0028      	movs	r0, r5
 8002374:	f7fd fec4 	bl	8000100 <strcmp>
 8002378:	2800      	cmp	r0, #0
 800237a:	d102      	bne.n	8002382 <cb_parse_cmd+0x176>
 800237c:	2307      	movs	r3, #7
 800237e:	2e02      	cmp	r6, #2
 8002380:	d0b3      	beq.n	80022ea <cb_parse_cmd+0xde>
        if(strcmp(tok[1],"SQ")==0 && nt==3){
 8002382:	0028      	movs	r0, r5
 8002384:	4978      	ldr	r1, [pc, #480]	@ (8002568 <cb_parse_cmd+0x35c>)
 8002386:	f7fd febb 	bl	8000100 <strcmp>
 800238a:	2800      	cmp	r0, #0
 800238c:	d1a2      	bne.n	80022d4 <cb_parse_cmd+0xc8>
 800238e:	2e03      	cmp	r6, #3
 8002390:	d1a0      	bne.n	80022d4 <cb_parse_cmd+0xc8>
            uint8_t idx; if(!cb_sq_from_str(tok[2], &idx)) return false;
 8002392:	ae03      	add	r6, sp, #12
 8002394:	0031      	movs	r1, r6
 8002396:	9806      	ldr	r0, [sp, #24]
 8002398:	f7ff ff10 	bl	80021bc <cb_sq_from_str>
            out->type=CB_CMD_READ_SQ; out->u.read_sq.idx=idx; return true;
 800239c:	2308      	movs	r3, #8
            uint8_t idx; if(!cb_sq_from_str(tok[2], &idx)) return false;
 800239e:	1e05      	subs	r5, r0, #0
 80023a0:	d100      	bne.n	80023a4 <cb_parse_cmd+0x198>
 80023a2:	e776      	b.n	8002292 <cb_parse_cmd+0x86>
                out->type=CB_CMD_LED_OFF_SQ; out->u.led_off_sq.idx=idx; return true;
 80023a4:	7023      	strb	r3, [r4, #0]
 80023a6:	7833      	ldrb	r3, [r6, #0]
 80023a8:	7223      	strb	r3, [r4, #8]
 80023aa:	e772      	b.n	8002292 <cb_parse_cmd+0x86>
    if(strcmp(T0,"LED")==0 && nt>=2){
 80023ac:	0028      	movs	r0, r5
 80023ae:	496f      	ldr	r1, [pc, #444]	@ (800256c <cb_parse_cmd+0x360>)
 80023b0:	f7fd fea6 	bl	8000100 <strcmp>
 80023b4:	2800      	cmp	r0, #0
 80023b6:	d000      	beq.n	80023ba <cb_parse_cmd+0x1ae>
 80023b8:	e19f      	b.n	80026fa <cb_parse_cmd+0x4ee>
 80023ba:	2e01      	cmp	r6, #1
 80023bc:	d100      	bne.n	80023c0 <cb_parse_cmd+0x1b4>
 80023be:	e19c      	b.n	80026fa <cb_parse_cmd+0x4ee>
        if(strcmp(tok[1],"SET")==0 && nt==6){
 80023c0:	9d05      	ldr	r5, [sp, #20]
 80023c2:	496b      	ldr	r1, [pc, #428]	@ (8002570 <cb_parse_cmd+0x364>)
 80023c4:	0028      	movs	r0, r5
 80023c6:	f7fd fe9b 	bl	8000100 <strcmp>
 80023ca:	2800      	cmp	r0, #0
 80023cc:	d12f      	bne.n	800242e <cb_parse_cmd+0x222>
 80023ce:	2e06      	cmp	r6, #6
 80023d0:	d12d      	bne.n	800242e <cb_parse_cmd+0x222>
            if(!cb_sq_from_str(tok[2], &idx)) return false;
 80023d2:	ab02      	add	r3, sp, #8
 80023d4:	1c5f      	adds	r7, r3, #1
 80023d6:	0039      	movs	r1, r7
 80023d8:	9806      	ldr	r0, [sp, #24]
 80023da:	f7ff feef 	bl	80021bc <cb_sq_from_str>
 80023de:	2800      	cmp	r0, #0
 80023e0:	d100      	bne.n	80023e4 <cb_parse_cmd+0x1d8>
 80023e2:	e777      	b.n	80022d4 <cb_parse_cmd+0xc8>
            if(!parse_u8(tok[3], &r) || !parse_u8(tok[4], &g) || !parse_u8(tok[5], &b)) return false;
 80023e4:	ab02      	add	r3, sp, #8
 80023e6:	1c9e      	adds	r6, r3, #2
 80023e8:	0031      	movs	r1, r6
 80023ea:	9807      	ldr	r0, [sp, #28]
 80023ec:	f7ff feaf 	bl	800214e <parse_u8>
 80023f0:	2800      	cmp	r0, #0
 80023f2:	d100      	bne.n	80023f6 <cb_parse_cmd+0x1ea>
 80023f4:	e76e      	b.n	80022d4 <cb_parse_cmd+0xc8>
 80023f6:	ab02      	add	r3, sp, #8
 80023f8:	9808      	ldr	r0, [sp, #32]
 80023fa:	1cd9      	adds	r1, r3, #3
 80023fc:	f7ff fea7 	bl	800214e <parse_u8>
 8002400:	2800      	cmp	r0, #0
 8002402:	d100      	bne.n	8002406 <cb_parse_cmd+0x1fa>
 8002404:	e766      	b.n	80022d4 <cb_parse_cmd+0xc8>
 8002406:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002408:	a903      	add	r1, sp, #12
 800240a:	f7ff fea0 	bl	800214e <parse_u8>
 800240e:	1e05      	subs	r5, r0, #0
 8002410:	d100      	bne.n	8002414 <cb_parse_cmd+0x208>
 8002412:	e75f      	b.n	80022d4 <cb_parse_cmd+0xc8>
            out->type=CB_CMD_LED_SET; out->u.led_set.idx=idx; out->u.led_set.r=r; out->u.led_set.g=g; out->u.led_set.b=b; return true;
 8002414:	230b      	movs	r3, #11
 8002416:	7023      	strb	r3, [r4, #0]
 8002418:	783b      	ldrb	r3, [r7, #0]
 800241a:	7223      	strb	r3, [r4, #8]
 800241c:	7833      	ldrb	r3, [r6, #0]
 800241e:	7263      	strb	r3, [r4, #9]
 8002420:	ab02      	add	r3, sp, #8
 8002422:	78db      	ldrb	r3, [r3, #3]
 8002424:	72a3      	strb	r3, [r4, #10]
 8002426:	ab02      	add	r3, sp, #8
 8002428:	791b      	ldrb	r3, [r3, #4]
 800242a:	72e3      	strb	r3, [r4, #11]
 800242c:	e731      	b.n	8002292 <cb_parse_cmd+0x86>
        if(strcmp(tok[1],"OFF")==0){
 800242e:	0028      	movs	r0, r5
 8002430:	494a      	ldr	r1, [pc, #296]	@ (800255c <cb_parse_cmd+0x350>)
 8002432:	f7fd fe65 	bl	8000100 <strcmp>
 8002436:	2800      	cmp	r0, #0
 8002438:	d115      	bne.n	8002466 <cb_parse_cmd+0x25a>
            if(nt==3 && strcmp(tok[2],"ALL")==0){ out->type=CB_CMD_LED_OFF_ALL; return true; }
 800243a:	2e03      	cmp	r6, #3
 800243c:	d000      	beq.n	8002440 <cb_parse_cmd+0x234>
 800243e:	e749      	b.n	80022d4 <cb_parse_cmd+0xc8>
 8002440:	9d06      	ldr	r5, [sp, #24]
 8002442:	4948      	ldr	r1, [pc, #288]	@ (8002564 <cb_parse_cmd+0x358>)
 8002444:	0028      	movs	r0, r5
 8002446:	f7fd fe5b 	bl	8000100 <strcmp>
 800244a:	230d      	movs	r3, #13
 800244c:	2800      	cmp	r0, #0
 800244e:	d100      	bne.n	8002452 <cb_parse_cmd+0x246>
 8002450:	e74b      	b.n	80022ea <cb_parse_cmd+0xde>
                uint8_t idx; if(!cb_sq_from_str(tok[2], &idx)) return false;
 8002452:	ae03      	add	r6, sp, #12
 8002454:	0028      	movs	r0, r5
 8002456:	0031      	movs	r1, r6
 8002458:	f7ff feb0 	bl	80021bc <cb_sq_from_str>
 800245c:	1e05      	subs	r5, r0, #0
 800245e:	d100      	bne.n	8002462 <cb_parse_cmd+0x256>
 8002460:	e717      	b.n	8002292 <cb_parse_cmd+0x86>
                out->type=CB_CMD_LED_OFF_SQ; out->u.led_off_sq.idx=idx; return true;
 8002462:	230c      	movs	r3, #12
 8002464:	e79e      	b.n	80023a4 <cb_parse_cmd+0x198>
        if(strcmp(tok[1],"FILL")==0 && nt==5){
 8002466:	0028      	movs	r0, r5
 8002468:	4942      	ldr	r1, [pc, #264]	@ (8002574 <cb_parse_cmd+0x368>)
 800246a:	f7fd fe49 	bl	8000100 <strcmp>
 800246e:	2800      	cmp	r0, #0
 8002470:	d124      	bne.n	80024bc <cb_parse_cmd+0x2b0>
 8002472:	2e05      	cmp	r6, #5
 8002474:	d122      	bne.n	80024bc <cb_parse_cmd+0x2b0>
            uint8_t r,g,b; if(!parse_u8(tok[2],&r)||!parse_u8(tok[3],&g)||!parse_u8(tok[4],&b)) return false;
 8002476:	ab02      	add	r3, sp, #8
 8002478:	1c9f      	adds	r7, r3, #2
 800247a:	0039      	movs	r1, r7
 800247c:	9806      	ldr	r0, [sp, #24]
 800247e:	f7ff fe66 	bl	800214e <parse_u8>
 8002482:	2800      	cmp	r0, #0
 8002484:	d100      	bne.n	8002488 <cb_parse_cmd+0x27c>
 8002486:	e725      	b.n	80022d4 <cb_parse_cmd+0xc8>
 8002488:	ab02      	add	r3, sp, #8
 800248a:	1cde      	adds	r6, r3, #3
 800248c:	0031      	movs	r1, r6
 800248e:	9807      	ldr	r0, [sp, #28]
 8002490:	f7ff fe5d 	bl	800214e <parse_u8>
 8002494:	2800      	cmp	r0, #0
 8002496:	d100      	bne.n	800249a <cb_parse_cmd+0x28e>
 8002498:	e71c      	b.n	80022d4 <cb_parse_cmd+0xc8>
 800249a:	9808      	ldr	r0, [sp, #32]
 800249c:	a903      	add	r1, sp, #12
 800249e:	f7ff fe56 	bl	800214e <parse_u8>
 80024a2:	1e05      	subs	r5, r0, #0
 80024a4:	d100      	bne.n	80024a8 <cb_parse_cmd+0x29c>
 80024a6:	e715      	b.n	80022d4 <cb_parse_cmd+0xc8>
            out->type=CB_CMD_LED_FILL; out->u.led_fill.r=r; out->u.led_fill.g=g; out->u.led_fill.b=b; return true;
 80024a8:	230e      	movs	r3, #14
 80024aa:	7023      	strb	r3, [r4, #0]
 80024ac:	783b      	ldrb	r3, [r7, #0]
 80024ae:	7223      	strb	r3, [r4, #8]
 80024b0:	7833      	ldrb	r3, [r6, #0]
 80024b2:	7263      	strb	r3, [r4, #9]
 80024b4:	ab02      	add	r3, sp, #8
 80024b6:	791b      	ldrb	r3, [r3, #4]
 80024b8:	72a3      	strb	r3, [r4, #10]
 80024ba:	e6ea      	b.n	8002292 <cb_parse_cmd+0x86>
        if(strcmp(tok[1],"RECT")==0 && nt==8){
 80024bc:	0028      	movs	r0, r5
 80024be:	492e      	ldr	r1, [pc, #184]	@ (8002578 <cb_parse_cmd+0x36c>)
 80024c0:	f7fd fe1e 	bl	8000100 <strcmp>
 80024c4:	2800      	cmp	r0, #0
 80024c6:	d159      	bne.n	800257c <cb_parse_cmd+0x370>
 80024c8:	2e08      	cmp	r6, #8
 80024ca:	d157      	bne.n	800257c <cb_parse_cmd+0x370>
            if(!cb_sq_from_str(tok[2], &a) || !cb_sq_from_str(tok[3], &bi)) return false;
 80024cc:	9806      	ldr	r0, [sp, #24]
 80024ce:	a902      	add	r1, sp, #8
 80024d0:	f7ff fe74 	bl	80021bc <cb_sq_from_str>
 80024d4:	2800      	cmp	r0, #0
 80024d6:	d100      	bne.n	80024da <cb_parse_cmd+0x2ce>
 80024d8:	e6fc      	b.n	80022d4 <cb_parse_cmd+0xc8>
 80024da:	ab02      	add	r3, sp, #8
 80024dc:	1c5f      	adds	r7, r3, #1
 80024de:	0039      	movs	r1, r7
 80024e0:	9807      	ldr	r0, [sp, #28]
 80024e2:	f7ff fe6b 	bl	80021bc <cb_sq_from_str>
 80024e6:	2800      	cmp	r0, #0
 80024e8:	d100      	bne.n	80024ec <cb_parse_cmd+0x2e0>
 80024ea:	e6f3      	b.n	80022d4 <cb_parse_cmd+0xc8>
            if(!parse_u8(tok[4],&r)||!parse_u8(tok[5],&g)||!parse_u8(tok[6],&bb)) return false;
 80024ec:	ab02      	add	r3, sp, #8
 80024ee:	1c9e      	adds	r6, r3, #2
 80024f0:	0031      	movs	r1, r6
 80024f2:	9808      	ldr	r0, [sp, #32]
 80024f4:	f7ff fe2b 	bl	800214e <parse_u8>
 80024f8:	2800      	cmp	r0, #0
 80024fa:	d100      	bne.n	80024fe <cb_parse_cmd+0x2f2>
 80024fc:	e6ea      	b.n	80022d4 <cb_parse_cmd+0xc8>
 80024fe:	ab02      	add	r3, sp, #8
 8002500:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002502:	1cd9      	adds	r1, r3, #3
 8002504:	f7ff fe23 	bl	800214e <parse_u8>
 8002508:	2800      	cmp	r0, #0
 800250a:	d100      	bne.n	800250e <cb_parse_cmd+0x302>
 800250c:	e6e2      	b.n	80022d4 <cb_parse_cmd+0xc8>
 800250e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8002510:	a903      	add	r1, sp, #12
 8002512:	f7ff fe1c 	bl	800214e <parse_u8>
 8002516:	1e05      	subs	r5, r0, #0
 8002518:	d100      	bne.n	800251c <cb_parse_cmd+0x310>
 800251a:	e6db      	b.n	80022d4 <cb_parse_cmd+0xc8>
            out->type=CB_CMD_LED_RECT; out->u.led_rect.from_idx=a; out->u.led_rect.to_idx=bi; out->u.led_rect.r=r; out->u.led_rect.g=g; out->u.led_rect.b=bb; return true;
 800251c:	230f      	movs	r3, #15
 800251e:	7023      	strb	r3, [r4, #0]
 8002520:	ab02      	add	r3, sp, #8
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	7223      	strb	r3, [r4, #8]
 8002526:	783b      	ldrb	r3, [r7, #0]
 8002528:	7263      	strb	r3, [r4, #9]
 800252a:	7833      	ldrb	r3, [r6, #0]
 800252c:	72a3      	strb	r3, [r4, #10]
 800252e:	ab02      	add	r3, sp, #8
 8002530:	78db      	ldrb	r3, [r3, #3]
 8002532:	72e3      	strb	r3, [r4, #11]
 8002534:	ab02      	add	r3, sp, #8
 8002536:	791b      	ldrb	r3, [r3, #4]
 8002538:	7323      	strb	r3, [r4, #12]
 800253a:	e6aa      	b.n	8002292 <cb_parse_cmd+0x86>
 800253c:	0800702d 	.word	0x0800702d
 8002540:	08006e08 	.word	0x08006e08
 8002544:	08006e0d 	.word	0x08006e0d
 8002548:	08006e12 	.word	0x08006e12
 800254c:	08006e18 	.word	0x08006e18
 8002550:	08006e1c 	.word	0x08006e1c
 8002554:	08006e21 	.word	0x08006e21
 8002558:	08006e28 	.word	0x08006e28
 800255c:	08006e2b 	.word	0x08006e2b
 8002560:	08006e2f 	.word	0x08006e2f
 8002564:	08006e34 	.word	0x08006e34
 8002568:	08006e38 	.word	0x08006e38
 800256c:	08006e3b 	.word	0x08006e3b
 8002570:	08006e3f 	.word	0x08006e3f
 8002574:	08006e43 	.word	0x08006e43
 8002578:	08006e48 	.word	0x08006e48
        if(strcmp(tok[1],"BITBOARD")==0 && nt==4){
 800257c:	0028      	movs	r0, r5
 800257e:	49b2      	ldr	r1, [pc, #712]	@ (8002848 <cb_parse_cmd+0x63c>)
 8002580:	f7fd fdbe 	bl	8000100 <strcmp>
 8002584:	2800      	cmp	r0, #0
 8002586:	d138      	bne.n	80025fa <cb_parse_cmd+0x3ee>
 8002588:	2e04      	cmp	r6, #4
 800258a:	d136      	bne.n	80025fa <cb_parse_cmd+0x3ee>
            uint64_t bits; if(!parse_hex64(tok[2], &bits)) return false;
 800258c:	9d06      	ldr	r5, [sp, #24]
    if(!t||!v||!is_hex64(t)) return false;
 800258e:	2d00      	cmp	r5, #0
 8002590:	d100      	bne.n	8002594 <cb_parse_cmd+0x388>
 8002592:	e69f      	b.n	80022d4 <cb_parse_cmd+0xc8>
static bool is_hex64(const char* s){ if(!s) return false; size_t n=strlen(s);
 8002594:	0028      	movs	r0, r5
 8002596:	f7fd fdbd 	bl	8000114 <strlen>
    if(n<3) return false; if(!(s[0]=='0' && (s[1]=='x'||s[1]=='X'))) return false;
 800259a:	2802      	cmp	r0, #2
 800259c:	d800      	bhi.n	80025a0 <cb_parse_cmd+0x394>
 800259e:	e699      	b.n	80022d4 <cb_parse_cmd+0xc8>
 80025a0:	782b      	ldrb	r3, [r5, #0]
 80025a2:	2b30      	cmp	r3, #48	@ 0x30
 80025a4:	d000      	beq.n	80025a8 <cb_parse_cmd+0x39c>
 80025a6:	e695      	b.n	80022d4 <cb_parse_cmd+0xc8>
 80025a8:	2120      	movs	r1, #32
 80025aa:	786b      	ldrb	r3, [r5, #1]
 80025ac:	438b      	bics	r3, r1
 80025ae:	2b58      	cmp	r3, #88	@ 0x58
 80025b0:	d000      	beq.n	80025b4 <cb_parse_cmd+0x3a8>
 80025b2:	e68f      	b.n	80022d4 <cb_parse_cmd+0xc8>
 80025b4:	1caa      	adds	r2, r5, #2
 80025b6:	1828      	adds	r0, r5, r0
    for(size_t i=2;i<n;i++){ char c=s[i];
 80025b8:	7813      	ldrb	r3, [r2, #0]
        if(!((c>='0'&&c<='9')||(c>='a'&&c<='f')||(c>='A'&&c<='F'))) return false; }
 80025ba:	001e      	movs	r6, r3
 80025bc:	3e30      	subs	r6, #48	@ 0x30
 80025be:	2e09      	cmp	r6, #9
 80025c0:	d904      	bls.n	80025cc <cb_parse_cmd+0x3c0>
 80025c2:	438b      	bics	r3, r1
 80025c4:	3b41      	subs	r3, #65	@ 0x41
 80025c6:	2b05      	cmp	r3, #5
 80025c8:	d900      	bls.n	80025cc <cb_parse_cmd+0x3c0>
 80025ca:	e683      	b.n	80022d4 <cb_parse_cmd+0xc8>
    for(size_t i=2;i<n;i++){ char c=s[i];
 80025cc:	3201      	adds	r2, #1
 80025ce:	4290      	cmp	r0, r2
 80025d0:	d1f2      	bne.n	80025b8 <cb_parse_cmd+0x3ac>
    char* e=NULL; unsigned long long x=strtoull(t,&e,16); if(e==t||*e) return false;
 80025d2:	2300      	movs	r3, #0
 80025d4:	2210      	movs	r2, #16
 80025d6:	0028      	movs	r0, r5
 80025d8:	a903      	add	r1, sp, #12
 80025da:	9303      	str	r3, [sp, #12]
 80025dc:	f003 fe84 	bl	80062e8 <strtoull>
 80025e0:	9b03      	ldr	r3, [sp, #12]
 80025e2:	429d      	cmp	r5, r3
 80025e4:	d100      	bne.n	80025e8 <cb_parse_cmd+0x3dc>
 80025e6:	e675      	b.n	80022d4 <cb_parse_cmd+0xc8>
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d000      	beq.n	80025f0 <cb_parse_cmd+0x3e4>
 80025ee:	e671      	b.n	80022d4 <cb_parse_cmd+0xc8>
            out->type=CB_CMD_LED_BITBOARD; out->u.led_bitboard.bits=bits; return true;
 80025f0:	3310      	adds	r3, #16
 80025f2:	7023      	strb	r3, [r4, #0]
 80025f4:	60a0      	str	r0, [r4, #8]
 80025f6:	60e1      	str	r1, [r4, #12]
 80025f8:	e64a      	b.n	8002290 <cb_parse_cmd+0x84>
        if(strcmp(tok[1],"MOVES")==0 && nt>=5){
 80025fa:	0028      	movs	r0, r5
 80025fc:	4993      	ldr	r1, [pc, #588]	@ (800284c <cb_parse_cmd+0x640>)
 80025fe:	f7fd fd7f 	bl	8000100 <strcmp>
 8002602:	1e07      	subs	r7, r0, #0
 8002604:	d13c      	bne.n	8002680 <cb_parse_cmd+0x474>
 8002606:	2e04      	cmp	r6, #4
 8002608:	dd3a      	ble.n	8002680 <cb_parse_cmd+0x474>
            uint8_t from; if(!cb_sq_from_str(tok[2], &from)) return false;
 800260a:	ab02      	add	r3, sp, #8
 800260c:	9806      	ldr	r0, [sp, #24]
 800260e:	1cd9      	adds	r1, r3, #3
 8002610:	f7ff fdd4 	bl	80021bc <cb_sq_from_str>
 8002614:	2800      	cmp	r0, #0
 8002616:	d100      	bne.n	800261a <cb_parse_cmd+0x40e>
 8002618:	e65c      	b.n	80022d4 <cb_parse_cmd+0xc8>
            int n; if(!parse_i(tok[3], &n) || n<0 || n>64) return false;
 800261a:	9d07      	ldr	r5, [sp, #28]
static bool parse_i(const char* t, int* v){ if(!t||!v) return false;
 800261c:	2d00      	cmp	r5, #0
 800261e:	d100      	bne.n	8002622 <cb_parse_cmd+0x416>
 8002620:	e658      	b.n	80022d4 <cb_parse_cmd+0xc8>
    char* e=NULL; long x=strtol(t,&e,10); if(e==t||*e) return false; *v=(int)x; return true; }
 8002622:	9703      	str	r7, [sp, #12]
 8002624:	af03      	add	r7, sp, #12
 8002626:	220a      	movs	r2, #10
 8002628:	0039      	movs	r1, r7
 800262a:	0028      	movs	r0, r5
 800262c:	f003 fd22 	bl	8006074 <strtol>
 8002630:	9b03      	ldr	r3, [sp, #12]
 8002632:	429d      	cmp	r5, r3
 8002634:	d100      	bne.n	8002638 <cb_parse_cmd+0x42c>
 8002636:	e64d      	b.n	80022d4 <cb_parse_cmd+0xc8>
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d000      	beq.n	8002640 <cb_parse_cmd+0x434>
 800263e:	e649      	b.n	80022d4 <cb_parse_cmd+0xc8>
            int n; if(!parse_i(tok[3], &n) || n<0 || n>64) return false;
 8002640:	2840      	cmp	r0, #64	@ 0x40
 8002642:	d900      	bls.n	8002646 <cb_parse_cmd+0x43a>
 8002644:	e646      	b.n	80022d4 <cb_parse_cmd+0xc8>
            if(nt != 4 + n) return false;
 8002646:	1d03      	adds	r3, r0, #4
 8002648:	42b3      	cmp	r3, r6
 800264a:	d000      	beq.n	800264e <cb_parse_cmd+0x442>
 800264c:	e642      	b.n	80022d4 <cb_parse_cmd+0xc8>
            out->type=CB_CMD_LED_MOVES; out->u.led_moves.from_idx=from; out->u.led_moves.n_to=(uint8_t)n;
 800264e:	2317      	movs	r3, #23
 8002650:	7023      	strb	r3, [r4, #0]
 8002652:	ab02      	add	r3, sp, #8
 8002654:	78db      	ldrb	r3, [r3, #3]
 8002656:	7260      	strb	r0, [r4, #9]
 8002658:	7223      	strb	r3, [r4, #8]
            for(int i=0;i<n;i++){
 800265a:	1823      	adds	r3, r4, r0
 800265c:	ae04      	add	r6, sp, #16
 800265e:	9300      	str	r3, [sp, #0]
                uint8_t idx; if(!cb_sq_from_str(tok[4+i], &idx)) return false;
 8002660:	6930      	ldr	r0, [r6, #16]
 8002662:	0039      	movs	r1, r7
 8002664:	f7ff fdaa 	bl	80021bc <cb_sq_from_str>
 8002668:	3401      	adds	r4, #1
 800266a:	0005      	movs	r5, r0
 800266c:	3604      	adds	r6, #4
 800266e:	2800      	cmp	r0, #0
 8002670:	d100      	bne.n	8002674 <cb_parse_cmd+0x468>
 8002672:	e62f      	b.n	80022d4 <cb_parse_cmd+0xc8>
                out->u.led_moves.to_list[i]=idx;
 8002674:	783b      	ldrb	r3, [r7, #0]
 8002676:	7263      	strb	r3, [r4, #9]
            for(int i=0;i<n;i++){
 8002678:	9b00      	ldr	r3, [sp, #0]
 800267a:	42a3      	cmp	r3, r4
 800267c:	d1f0      	bne.n	8002660 <cb_parse_cmd+0x454>
 800267e:	e608      	b.n	8002292 <cb_parse_cmd+0x86>
        if(strcmp(tok[1],"OK")==0 && nt==4){
 8002680:	0028      	movs	r0, r5
 8002682:	4973      	ldr	r1, [pc, #460]	@ (8002850 <cb_parse_cmd+0x644>)
 8002684:	f7fd fd3c 	bl	8000100 <strcmp>
 8002688:	2800      	cmp	r0, #0
 800268a:	d119      	bne.n	80026c0 <cb_parse_cmd+0x4b4>
 800268c:	2e04      	cmp	r6, #4
 800268e:	d117      	bne.n	80026c0 <cb_parse_cmd+0x4b4>
            uint8_t a,b; if(!cb_sq_from_str(tok[2],&a)||!cb_sq_from_str(tok[3],&b)) return false;
 8002690:	ab02      	add	r3, sp, #8
 8002692:	1cdf      	adds	r7, r3, #3
 8002694:	0039      	movs	r1, r7
 8002696:	9806      	ldr	r0, [sp, #24]
 8002698:	f7ff fd90 	bl	80021bc <cb_sq_from_str>
 800269c:	2800      	cmp	r0, #0
 800269e:	d100      	bne.n	80026a2 <cb_parse_cmd+0x496>
 80026a0:	e618      	b.n	80022d4 <cb_parse_cmd+0xc8>
 80026a2:	ae03      	add	r6, sp, #12
 80026a4:	0031      	movs	r1, r6
 80026a6:	9807      	ldr	r0, [sp, #28]
 80026a8:	f7ff fd88 	bl	80021bc <cb_sq_from_str>
            out->type=CB_CMD_LED_OK; out->u.led_ok.from_idx=a; out->u.led_ok.to_idx=b; return true;
 80026ac:	2318      	movs	r3, #24
            uint8_t a,b; if(!cb_sq_from_str(tok[2],&a)||!cb_sq_from_str(tok[3],&b)) return false;
 80026ae:	1e05      	subs	r5, r0, #0
 80026b0:	d100      	bne.n	80026b4 <cb_parse_cmd+0x4a8>
 80026b2:	e60f      	b.n	80022d4 <cb_parse_cmd+0xc8>
            out->type=CB_CMD_LED_FAIL; out->u.led_fail.from_idx=a; out->u.led_fail.to_idx=b; return true;
 80026b4:	7023      	strb	r3, [r4, #0]
 80026b6:	783b      	ldrb	r3, [r7, #0]
 80026b8:	7223      	strb	r3, [r4, #8]
 80026ba:	7833      	ldrb	r3, [r6, #0]
 80026bc:	7263      	strb	r3, [r4, #9]
 80026be:	e5e8      	b.n	8002292 <cb_parse_cmd+0x86>
        if(strcmp(tok[1],"FAIL")==0 && nt==4){
 80026c0:	0028      	movs	r0, r5
 80026c2:	4964      	ldr	r1, [pc, #400]	@ (8002854 <cb_parse_cmd+0x648>)
 80026c4:	f7fd fd1c 	bl	8000100 <strcmp>
 80026c8:	2800      	cmp	r0, #0
 80026ca:	d000      	beq.n	80026ce <cb_parse_cmd+0x4c2>
 80026cc:	e602      	b.n	80022d4 <cb_parse_cmd+0xc8>
 80026ce:	2e04      	cmp	r6, #4
 80026d0:	d000      	beq.n	80026d4 <cb_parse_cmd+0x4c8>
 80026d2:	e5ff      	b.n	80022d4 <cb_parse_cmd+0xc8>
            uint8_t a,b; if(!cb_sq_from_str(tok[2],&a)||!cb_sq_from_str(tok[3],&b)) return false;
 80026d4:	ab02      	add	r3, sp, #8
 80026d6:	1cdf      	adds	r7, r3, #3
 80026d8:	0039      	movs	r1, r7
 80026da:	9806      	ldr	r0, [sp, #24]
 80026dc:	f7ff fd6e 	bl	80021bc <cb_sq_from_str>
 80026e0:	2800      	cmp	r0, #0
 80026e2:	d100      	bne.n	80026e6 <cb_parse_cmd+0x4da>
 80026e4:	e5f6      	b.n	80022d4 <cb_parse_cmd+0xc8>
 80026e6:	ae03      	add	r6, sp, #12
 80026e8:	0031      	movs	r1, r6
 80026ea:	9807      	ldr	r0, [sp, #28]
 80026ec:	f7ff fd66 	bl	80021bc <cb_sq_from_str>
 80026f0:	1e05      	subs	r5, r0, #0
 80026f2:	d100      	bne.n	80026f6 <cb_parse_cmd+0x4ea>
 80026f4:	e5ee      	b.n	80022d4 <cb_parse_cmd+0xc8>
            out->type=CB_CMD_LED_FAIL; out->u.led_fail.from_idx=a; out->u.led_fail.to_idx=b; return true;
 80026f6:	2319      	movs	r3, #25
 80026f8:	e7dc      	b.n	80026b4 <cb_parse_cmd+0x4a8>
    if(strcmp(T0,"COLOR")==0 && nt>=2){
 80026fa:	0028      	movs	r0, r5
 80026fc:	4956      	ldr	r1, [pc, #344]	@ (8002858 <cb_parse_cmd+0x64c>)
 80026fe:	f7fd fcff 	bl	8000100 <strcmp>
 8002702:	2800      	cmp	r0, #0
 8002704:	d153      	bne.n	80027ae <cb_parse_cmd+0x5a2>
 8002706:	2e01      	cmp	r6, #1
 8002708:	d051      	beq.n	80027ae <cb_parse_cmd+0x5a2>
        if(strcmp(tok[1],"SET")==0 && nt==6){
 800270a:	9d05      	ldr	r5, [sp, #20]
 800270c:	4953      	ldr	r1, [pc, #332]	@ (800285c <cb_parse_cmd+0x650>)
 800270e:	0028      	movs	r0, r5
 8002710:	f7fd fcf6 	bl	8000100 <strcmp>
 8002714:	2800      	cmp	r0, #0
 8002716:	d12d      	bne.n	8002774 <cb_parse_cmd+0x568>
 8002718:	2e06      	cmp	r6, #6
 800271a:	d12b      	bne.n	8002774 <cb_parse_cmd+0x568>
            if(!parse_u8(tok[3],&r)||!parse_u8(tok[4],&g)||!parse_u8(tok[5],&b)) return false;
 800271c:	ab02      	add	r3, sp, #8
 800271e:	1c9f      	adds	r7, r3, #2
 8002720:	0039      	movs	r1, r7
 8002722:	9807      	ldr	r0, [sp, #28]
 8002724:	f7ff fd13 	bl	800214e <parse_u8>
 8002728:	2800      	cmp	r0, #0
 800272a:	d100      	bne.n	800272e <cb_parse_cmd+0x522>
 800272c:	e5d2      	b.n	80022d4 <cb_parse_cmd+0xc8>
 800272e:	ab02      	add	r3, sp, #8
 8002730:	1cde      	adds	r6, r3, #3
 8002732:	0031      	movs	r1, r6
 8002734:	9808      	ldr	r0, [sp, #32]
 8002736:	f7ff fd0a 	bl	800214e <parse_u8>
 800273a:	2800      	cmp	r0, #0
 800273c:	d100      	bne.n	8002740 <cb_parse_cmd+0x534>
 800273e:	e5c9      	b.n	80022d4 <cb_parse_cmd+0xc8>
 8002740:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002742:	a903      	add	r1, sp, #12
 8002744:	f7ff fd03 	bl	800214e <parse_u8>
 8002748:	1e05      	subs	r5, r0, #0
 800274a:	d100      	bne.n	800274e <cb_parse_cmd+0x542>
 800274c:	e5c2      	b.n	80022d4 <cb_parse_cmd+0xc8>
            out->type=CB_CMD_COLOR_SET;
 800274e:	2314      	movs	r3, #20
            strncpy(out->u.color_set.name, tok[2], CB_MAX_STR-1);
 8002750:	0020      	movs	r0, r4
            out->type=CB_CMD_COLOR_SET;
 8002752:	7023      	strb	r3, [r4, #0]
            strncpy(out->u.color_set.name, tok[2], CB_MAX_STR-1);
 8002754:	2219      	movs	r2, #25
 8002756:	9906      	ldr	r1, [sp, #24]
 8002758:	3008      	adds	r0, #8
 800275a:	f003 fe69 	bl	8006430 <strncpy>
            out->u.color_set.r=r; out->u.color_set.g=g; out->u.color_set.b=b; return true;
 800275e:	783a      	ldrb	r2, [r7, #0]
 8002760:	1ce3      	adds	r3, r4, #3
 8002762:	77da      	strb	r2, [r3, #31]
 8002764:	7832      	ldrb	r2, [r6, #0]
 8002766:	1d23      	adds	r3, r4, #4
 8002768:	77da      	strb	r2, [r3, #31]
 800276a:	ab02      	add	r3, sp, #8
 800276c:	791b      	ldrb	r3, [r3, #4]
 800276e:	3405      	adds	r4, #5
 8002770:	77e3      	strb	r3, [r4, #31]
 8002772:	e58e      	b.n	8002292 <cb_parse_cmd+0x86>
        if(strcmp(tok[1],"GET")==0 && nt==3){
 8002774:	0028      	movs	r0, r5
 8002776:	493a      	ldr	r1, [pc, #232]	@ (8002860 <cb_parse_cmd+0x654>)
 8002778:	f7fd fcc2 	bl	8000100 <strcmp>
 800277c:	2800      	cmp	r0, #0
 800277e:	d10a      	bne.n	8002796 <cb_parse_cmd+0x58a>
 8002780:	2e03      	cmp	r6, #3
 8002782:	d108      	bne.n	8002796 <cb_parse_cmd+0x58a>
            out->type=CB_CMD_COLOR_GET;
 8002784:	2315      	movs	r3, #21
            strncpy(out->u.color_get.name, tok[2], CB_MAX_STR-1);
 8002786:	0020      	movs	r0, r4
 8002788:	2219      	movs	r2, #25
 800278a:	9906      	ldr	r1, [sp, #24]
            out->type=CB_CMD_COLOR_GET;
 800278c:	7023      	strb	r3, [r4, #0]
            strncpy(out->u.color_get.name, tok[2], CB_MAX_STR-1);
 800278e:	3008      	adds	r0, #8
        out->type=CB_CMD_CFG_GET; strncpy(out->u.cfg_get.key, tok[2], CB_MAX_STR-1); return true;
 8002790:	f003 fe4e 	bl	8006430 <strncpy>
 8002794:	e57c      	b.n	8002290 <cb_parse_cmd+0x84>
        if(strcmp(tok[1],"?")==0 && nt==2){
 8002796:	0028      	movs	r0, r5
 8002798:	4932      	ldr	r1, [pc, #200]	@ (8002864 <cb_parse_cmd+0x658>)
 800279a:	f7fd fcb1 	bl	8000100 <strcmp>
 800279e:	2800      	cmp	r0, #0
 80027a0:	d000      	beq.n	80027a4 <cb_parse_cmd+0x598>
 80027a2:	e597      	b.n	80022d4 <cb_parse_cmd+0xc8>
            out->type=CB_CMD_COLOR_LIST_Q; return true;
 80027a4:	2316      	movs	r3, #22
        if(strcmp(tok[1],"?")==0 && nt==2){
 80027a6:	2e02      	cmp	r6, #2
 80027a8:	d000      	beq.n	80027ac <cb_parse_cmd+0x5a0>
 80027aa:	e593      	b.n	80022d4 <cb_parse_cmd+0xc8>
 80027ac:	e59d      	b.n	80022ea <cb_parse_cmd+0xde>
    if(strcmp(T0,"CFG?")==0 && nt==1){ out->type=CB_CMD_CFG_Q; return true; }
 80027ae:	0028      	movs	r0, r5
 80027b0:	492d      	ldr	r1, [pc, #180]	@ (8002868 <cb_parse_cmd+0x65c>)
 80027b2:	f7fd fca5 	bl	8000100 <strcmp>
 80027b6:	2800      	cmp	r0, #0
 80027b8:	d103      	bne.n	80027c2 <cb_parse_cmd+0x5b6>
 80027ba:	231c      	movs	r3, #28
 80027bc:	2e01      	cmp	r6, #1
 80027be:	d100      	bne.n	80027c2 <cb_parse_cmd+0x5b6>
 80027c0:	e593      	b.n	80022ea <cb_parse_cmd+0xde>
    if(strcmp(T0,"CFG")==0 && nt>=3 && strcmp(tok[1],"GET")==0 && nt==3){
 80027c2:	0028      	movs	r0, r5
 80027c4:	4929      	ldr	r1, [pc, #164]	@ (800286c <cb_parse_cmd+0x660>)
 80027c6:	f7fd fc9b 	bl	8000100 <strcmp>
 80027ca:	2800      	cmp	r0, #0
 80027cc:	d000      	beq.n	80027d0 <cb_parse_cmd+0x5c4>
 80027ce:	e581      	b.n	80022d4 <cb_parse_cmd+0xc8>
 80027d0:	2e02      	cmp	r6, #2
 80027d2:	dc00      	bgt.n	80027d6 <cb_parse_cmd+0x5ca>
 80027d4:	e57e      	b.n	80022d4 <cb_parse_cmd+0xc8>
 80027d6:	9f05      	ldr	r7, [sp, #20]
 80027d8:	4921      	ldr	r1, [pc, #132]	@ (8002860 <cb_parse_cmd+0x654>)
 80027da:	0038      	movs	r0, r7
 80027dc:	ad04      	add	r5, sp, #16
 80027de:	f7fd fc8f 	bl	8000100 <strcmp>
 80027e2:	2800      	cmp	r0, #0
 80027e4:	d108      	bne.n	80027f8 <cb_parse_cmd+0x5ec>
 80027e6:	2e03      	cmp	r6, #3
 80027e8:	d106      	bne.n	80027f8 <cb_parse_cmd+0x5ec>
        out->type=CB_CMD_CFG_GET; strncpy(out->u.cfg_get.key, tok[2], CB_MAX_STR-1); return true;
 80027ea:	231d      	movs	r3, #29
 80027ec:	0020      	movs	r0, r4
 80027ee:	2219      	movs	r2, #25
 80027f0:	68a9      	ldr	r1, [r5, #8]
 80027f2:	7023      	strb	r3, [r4, #0]
 80027f4:	3008      	adds	r0, #8
 80027f6:	e7cb      	b.n	8002790 <cb_parse_cmd+0x584>
    if(strcmp(T0,"CFG")==0 && nt>=3 && strcmp(tok[1],"SET")==0){
 80027f8:	0038      	movs	r0, r7
 80027fa:	4918      	ldr	r1, [pc, #96]	@ (800285c <cb_parse_cmd+0x650>)
 80027fc:	f7fd fc80 	bl	8000100 <strcmp>
 8002800:	1e07      	subs	r7, r0, #0
 8002802:	d000      	beq.n	8002806 <cb_parse_cmd+0x5fa>
 8002804:	e566      	b.n	80022d4 <cb_parse_cmd+0xc8>
        out->type=CB_CMD_CFG_SET_KV;
 8002806:	231e      	movs	r3, #30
 8002808:	7023      	strb	r3, [r4, #0]
        for(int i=2;i<nt && cnt<CB_MAX_TOKENS;i++){
 800280a:	3b1c      	subs	r3, #28
 800280c:	9300      	str	r3, [sp, #0]
            if(strchr(tok[i],'=')) out->u.cfg_set_kv.pairs[cnt++] = tok[i];
 800280e:	9b00      	ldr	r3, [sp, #0]
 8002810:	213d      	movs	r1, #61	@ 0x3d
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	58eb      	ldr	r3, [r5, r3]
 8002816:	0018      	movs	r0, r3
 8002818:	9301      	str	r3, [sp, #4]
 800281a:	f003 fdfb 	bl	8006414 <strchr>
 800281e:	2800      	cmp	r0, #0
 8002820:	d005      	beq.n	800282e <cb_parse_cmd+0x622>
 8002822:	1cbb      	adds	r3, r7, #2
 8002824:	9a01      	ldr	r2, [sp, #4]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	18e3      	adds	r3, r4, r3
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	3701      	adds	r7, #1
        for(int i=2;i<nt && cnt<CB_MAX_TOKENS;i++){
 800282e:	9b00      	ldr	r3, [sp, #0]
 8002830:	3301      	adds	r3, #1
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	429e      	cmp	r6, r3
 8002836:	d001      	beq.n	800283c <cb_parse_cmd+0x630>
 8002838:	2f18      	cmp	r7, #24
 800283a:	d1e8      	bne.n	800280e <cb_parse_cmd+0x602>
        return cnt>0;
 800283c:	17fd      	asrs	r5, r7, #31
 800283e:	1bed      	subs	r5, r5, r7
        out->u.cfg_set_kv.n_pairs = cnt;
 8002840:	60a7      	str	r7, [r4, #8]
        return cnt>0;
 8002842:	0fed      	lsrs	r5, r5, #31
 8002844:	e525      	b.n	8002292 <cb_parse_cmd+0x86>
 8002846:	46c0      	nop			@ (mov r8, r8)
 8002848:	08006e4d 	.word	0x08006e4d
 800284c:	08006e56 	.word	0x08006e56
 8002850:	08006e5c 	.word	0x08006e5c
 8002854:	08006e5f 	.word	0x08006e5f
 8002858:	08006e64 	.word	0x08006e64
 800285c:	08006e3f 	.word	0x08006e3f
 8002860:	08006e6a 	.word	0x08006e6a
 8002864:	08006e16 	.word	0x08006e16
 8002868:	08006e6e 	.word	0x08006e6e
 800286c:	08006e73 	.word	0x08006e73

08002870 <cb_fmt_evt_lift>:
    if(hw && *hw)  pos += s_write(out+pos, cap-pos, " HW=%s", hw);
    pos += s_write(out+pos, cap-pos, " t=%u\r\n", (unsigned)t_ms);
    return pos>cap?cap:pos;
}

size_t cb_fmt_evt_lift(char* out, size_t cap, uint8_t idx, uint32_t t_ms){
 8002870:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002872:	001e      	movs	r6, r3
 8002874:	0004      	movs	r4, r0
 8002876:	000d      	movs	r5, r1
 8002878:	0010      	movs	r0, r2
    char sq[3]; cb_sq_to_str(idx, sq);
 800287a:	a903      	add	r1, sp, #12
 800287c:	f7ff fc5d 	bl	800213a <cb_sq_to_str>
    return s_write(out, cap, "EVT LIFT %s t=%u\r\n", sq, (unsigned)t_ms);
 8002880:	0029      	movs	r1, r5
 8002882:	0020      	movs	r0, r4
 8002884:	4a03      	ldr	r2, [pc, #12]	@ (8002894 <cb_fmt_evt_lift+0x24>)
 8002886:	9600      	str	r6, [sp, #0]
 8002888:	ab03      	add	r3, sp, #12
 800288a:	f7ff fc78 	bl	800217e <s_write>
}
 800288e:	b004      	add	sp, #16
 8002890:	bd70      	pop	{r4, r5, r6, pc}
 8002892:	46c0      	nop			@ (mov r8, r8)
 8002894:	08006e77 	.word	0x08006e77

08002898 <cb_fmt_evt_place>:

size_t cb_fmt_evt_place(char* out, size_t cap, uint8_t idx, uint32_t t_ms){
 8002898:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800289a:	001e      	movs	r6, r3
 800289c:	0004      	movs	r4, r0
 800289e:	000d      	movs	r5, r1
 80028a0:	0010      	movs	r0, r2
    char sq[3]; cb_sq_to_str(idx, sq);
 80028a2:	a903      	add	r1, sp, #12
 80028a4:	f7ff fc49 	bl	800213a <cb_sq_to_str>
    return s_write(out, cap, "EVT PLACE %s t=%u\r\n", sq, (unsigned)t_ms);
 80028a8:	0029      	movs	r1, r5
 80028aa:	0020      	movs	r0, r4
 80028ac:	4a03      	ldr	r2, [pc, #12]	@ (80028bc <cb_fmt_evt_place+0x24>)
 80028ae:	9600      	str	r6, [sp, #0]
 80028b0:	ab03      	add	r3, sp, #12
 80028b2:	f7ff fc64 	bl	800217e <s_write>
}
 80028b6:	b004      	add	sp, #16
 80028b8:	bd70      	pop	{r4, r5, r6, pc}
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	08006e8a 	.word	0x08006e8a

080028c0 <uart_fifo_init>:
#include "fifo.h"
#include <string.h>
#include "stm32g0xx_hal.h"

void uart_fifo_init(uart_fifo_t *f) {
    f->len = 0;
 80028c0:	2280      	movs	r2, #128	@ 0x80
 80028c2:	2300      	movs	r3, #0
 80028c4:	0092      	lsls	r2, r2, #2
 80028c6:	5283      	strh	r3, [r0, r2]
    f->overflow = 0;
 80028c8:	3204      	adds	r2, #4
 80028ca:	5083      	str	r3, [r0, r2]
}
 80028cc:	4770      	bx	lr

080028ce <uart_fifo_push_isr>:

int uart_fifo_push_isr(uart_fifo_t *f, uint8_t c) {
    // appelé depuis ISR : pas de désactivation d'interrupt ici
    uint16_t l = f->len;
 80028ce:	2280      	movs	r2, #128	@ 0x80
int uart_fifo_push_isr(uart_fifo_t *f, uint8_t c) {
 80028d0:	b510      	push	{r4, lr}
    uint16_t l = f->len;
 80028d2:	0092      	lsls	r2, r2, #2
 80028d4:	5a84      	ldrh	r4, [r0, r2]
 80028d6:	b2a3      	uxth	r3, r4
    if (l >= UART_FIFO_SIZE) {
 80028d8:	4294      	cmp	r4, r2
 80028da:	d305      	bcc.n	80028e8 <uart_fifo_push_isr+0x1a>
        f->overflow++;
 80028dc:	3204      	adds	r2, #4
 80028de:	5883      	ldr	r3, [r0, r2]
 80028e0:	3301      	adds	r3, #1
 80028e2:	5083      	str	r3, [r0, r2]
        return 0; // overflow, on jette l'octet
 80028e4:	2000      	movs	r0, #0
    }
    f->buf[l] = c;
    // écrire len en dernier pour éviter de laisser état incohérent
    f->len = l + 1;
    return 1;
}
 80028e6:	bd10      	pop	{r4, pc}
    f->buf[l] = c;
 80028e8:	54c1      	strb	r1, [r0, r3]
    f->len = l + 1;
 80028ea:	3301      	adds	r3, #1
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	5283      	strh	r3, [r0, r2]
    return 1;
 80028f0:	2001      	movs	r0, #1
 80028f2:	e7f8      	b.n	80028e6 <uart_fifo_push_isr+0x18>

080028f4 <uart_fifo_get_command>:

int uart_fifo_get_command(uart_fifo_t *f, char *out, size_t out_size) {
 80028f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028f6:	0005      	movs	r5, r0
 80028f8:	000f      	movs	r7, r1
 80028fa:	b085      	sub	sp, #20
    if (out_size == 0) return 0;
 80028fc:	2a00      	cmp	r2, #0
 80028fe:	d00c      	beq.n	800291a <uart_fifo_get_command+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002900:	b672      	cpsid	i

    // courte section critique pour éviter que l'ISR ne modifie len pendant la recherche/copie.
    __disable_irq();

    uint16_t len = f->len;
 8002902:	2380      	movs	r3, #128	@ 0x80
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	5ac3      	ldrh	r3, [r0, r3]
    uint16_t pos = 0xFFFF;
    // chercher '\n'
    for (uint16_t i = 0; i < len; ++i) {
        if (f->buf[i] == '\n') {
 8002908:	1e41      	subs	r1, r0, #1
    uint16_t len = f->len;
 800290a:	b29b      	uxth	r3, r3
 800290c:	9302      	str	r3, [sp, #8]
    for (uint16_t i = 0; i < len; ++i) {
 800290e:	2300      	movs	r3, #0
 8002910:	9802      	ldr	r0, [sp, #8]
 8002912:	b29e      	uxth	r6, r3
 8002914:	42b0      	cmp	r0, r6
 8002916:	d804      	bhi.n	8002922 <uart_fifo_get_command+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 8002918:	b662      	cpsie	i
    if (out_size == 0) return 0;
 800291a:	2400      	movs	r4, #0
    }
    f->len = remaining;

    __enable_irq();
    return ret;
}
 800291c:	0020      	movs	r0, r4
 800291e:	b005      	add	sp, #20
 8002920:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (f->buf[i] == '\n') {
 8002922:	1c58      	adds	r0, r3, #1
 8002924:	9003      	str	r0, [sp, #12]
 8002926:	5c08      	ldrb	r0, [r1, r0]
 8002928:	280a      	cmp	r0, #10
 800292a:	d030      	beq.n	800298e <uart_fifo_get_command+0x9a>
 800292c:	9b03      	ldr	r3, [sp, #12]
 800292e:	e7ef      	b.n	8002910 <uart_fifo_get_command+0x1c>
    if (cmd_end > 0 && f->buf[cmd_end - 1] == '\r') {
 8002930:	18eb      	adds	r3, r5, r3
 8002932:	3b01      	subs	r3, #1
 8002934:	781b      	ldrb	r3, [r3, #0]
    uint16_t cmd_end = pos; // index du '\n'
 8002936:	0034      	movs	r4, r6
    if (cmd_end > 0 && f->buf[cmd_end - 1] == '\r') {
 8002938:	2b0d      	cmp	r3, #13
 800293a:	d101      	bne.n	8002940 <uart_fifo_get_command+0x4c>
        cmd_end -= 1;
 800293c:	1e74      	subs	r4, r6, #1
 800293e:	b2a4      	uxth	r4, r4
    if ((size_t)cmd_end < out_size) {
 8002940:	9401      	str	r4, [sp, #4]
 8002942:	4294      	cmp	r4, r2
 8002944:	d218      	bcs.n	8002978 <uart_fifo_get_command+0x84>
        memcpy(out, f->buf, cmd_end);
 8002946:	9a01      	ldr	r2, [sp, #4]
 8002948:	0029      	movs	r1, r5
 800294a:	0038      	movs	r0, r7
 800294c:	f003 fdbc 	bl	80064c8 <memcpy>
        out[cmd_end] = '\0';
 8002950:	2300      	movs	r3, #0
 8002952:	9a01      	ldr	r2, [sp, #4]
 8002954:	54bb      	strb	r3, [r7, r2]
    uint16_t remaining = len - (pos + 1);
 8002956:	9b02      	ldr	r3, [sp, #8]
 8002958:	3b01      	subs	r3, #1
 800295a:	1b9e      	subs	r6, r3, r6
 800295c:	b2b6      	uxth	r6, r6
    if (remaining > 0) {
 800295e:	2e00      	cmp	r6, #0
 8002960:	d005      	beq.n	800296e <uart_fifo_get_command+0x7a>
        memmove(f->buf, f->buf + pos + 1, remaining);
 8002962:	9b03      	ldr	r3, [sp, #12]
 8002964:	0032      	movs	r2, r6
 8002966:	0028      	movs	r0, r5
 8002968:	18e9      	adds	r1, r5, r3
 800296a:	f003 fd39 	bl	80063e0 <memmove>
    f->len = remaining;
 800296e:	2380      	movs	r3, #128	@ 0x80
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	52ee      	strh	r6, [r5, r3]
 8002974:	b662      	cpsie	i
    return ret;
 8002976:	e7d1      	b.n	800291c <uart_fifo_get_command+0x28>
        memcpy(out, f->buf, out_size - 1);
 8002978:	1e54      	subs	r4, r2, #1
 800297a:	0022      	movs	r2, r4
 800297c:	0029      	movs	r1, r5
 800297e:	0038      	movs	r0, r7
 8002980:	f003 fda2 	bl	80064c8 <memcpy>
        out[out_size - 1] = '\0';
 8002984:	2300      	movs	r3, #0
 8002986:	553b      	strb	r3, [r7, r4]
        ret = -1;
 8002988:	2401      	movs	r4, #1
 800298a:	4264      	negs	r4, r4
 800298c:	e7e3      	b.n	8002956 <uart_fifo_get_command+0x62>
    if (cmd_end > 0 && f->buf[cmd_end - 1] == '\r') {
 800298e:	2e00      	cmp	r6, #0
 8002990:	d1ce      	bne.n	8002930 <uart_fifo_get_command+0x3c>
    uint16_t cmd_end = pos; // index du '\n'
 8002992:	0034      	movs	r4, r6
    if ((size_t)cmd_end < out_size) {
 8002994:	9601      	str	r6, [sp, #4]
 8002996:	e7d6      	b.n	8002946 <uart_fifo_get_command+0x52>

08002998 <uart_write>:


/* --- helpers UART --- */
static inline uint32_t t_ms(void){ return HAL_GetTick(); }
static void uart_write(const char *s)
{
 8002998:	b510      	push	{r4, lr}
 800299a:	0004      	movs	r4, r0
    HAL_UART_Transmit(&huart2, (uint8_t*)s, (uint16_t)strlen(s), 100);
 800299c:	f7fd fbba 	bl	8000114 <strlen>
 80029a0:	2364      	movs	r3, #100	@ 0x64
 80029a2:	b282      	uxth	r2, r0
 80029a4:	0021      	movs	r1, r4
 80029a6:	4802      	ldr	r0, [pc, #8]	@ (80029b0 <uart_write+0x18>)
 80029a8:	f003 f90b 	bl	8005bc2 <HAL_UART_Transmit>
}
 80029ac:	bd10      	pop	{r4, pc}
 80029ae:	46c0      	nop			@ (mov r8, r8)
 80029b0:	20000288 	.word	0x20000288

080029b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029b4:	b510      	push	{r4, lr}
 80029b6:	b092      	sub	sp, #72	@ 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029b8:	2234      	movs	r2, #52	@ 0x34
 80029ba:	2100      	movs	r1, #0
 80029bc:	a805      	add	r0, sp, #20
 80029be:	f003 fd21 	bl	8006404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029c2:	2210      	movs	r2, #16
 80029c4:	2100      	movs	r1, #0
 80029c6:	a801      	add	r0, sp, #4
 80029c8:	f003 fd1c 	bl	8006404 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029cc:	2080      	movs	r0, #128	@ 0x80
 80029ce:	0080      	lsls	r0, r0, #2
 80029d0:	f001 f99a 	bl	8003d08 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029d4:	2380      	movs	r3, #128	@ 0x80
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80029da:	2300      	movs	r3, #0
 80029dc:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80029de:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 8;
 80029e0:	3308      	adds	r3, #8
 80029e2:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029e4:	2380      	movs	r3, #128	@ 0x80
 80029e6:	029b      	lsls	r3, r3, #10
 80029e8:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80029ea:	23c0      	movs	r3, #192	@ 0xc0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029ec:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029ee:	2240      	movs	r2, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80029f0:	05db      	lsls	r3, r3, #23
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029f2:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029f4:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029f6:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029f8:	940c      	str	r4, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029fa:	940d      	str	r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80029fc:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029fe:	f001 f9af 	bl	8003d60 <HAL_RCC_OscConfig>
 8002a02:	2800      	cmp	r0, #0
 8002a04:	d001      	beq.n	8002a0a <SystemClock_Config+0x56>
  __ASM volatile ("cpsid i" : : : "memory");
 8002a06:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a08:	e7fe      	b.n	8002a08 <SystemClock_Config+0x54>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a0a:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a0c:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a0e:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a10:	2101      	movs	r1, #1
 8002a12:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a14:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a16:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a18:	f001 fc02 	bl	8004220 <HAL_RCC_ClockConfig>
 8002a1c:	2800      	cmp	r0, #0
 8002a1e:	d001      	beq.n	8002a24 <SystemClock_Config+0x70>
 8002a20:	b672      	cpsid	i
  while (1)
 8002a22:	e7fe      	b.n	8002a22 <SystemClock_Config+0x6e>
}
 8002a24:	b012      	add	sp, #72	@ 0x48
 8002a26:	bd10      	pop	{r4, pc}

08002a28 <HAL_TIM_PWM_Send_To_DMA>:
    ws2812_transfer_complete = 0;
 8002a28:	2100      	movs	r1, #0
{
 8002a2a:	b570      	push	{r4, r5, r6, lr}
    HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t*)pwm_data, LED_BUFFER_SIZE);
 8002a2c:	4c05      	ldr	r4, [pc, #20]	@ (8002a44 <HAL_TIM_PWM_Send_To_DMA+0x1c>)
    ws2812_transfer_complete = 0;
 8002a2e:	4d06      	ldr	r5, [pc, #24]	@ (8002a48 <HAL_TIM_PWM_Send_To_DMA+0x20>)
{
 8002a30:	0002      	movs	r2, r0
    HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t*)pwm_data, LED_BUFFER_SIZE);
 8002a32:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <HAL_TIM_PWM_Send_To_DMA+0x24>)
 8002a34:	0020      	movs	r0, r4
    ws2812_transfer_complete = 0;
 8002a36:	7029      	strb	r1, [r5, #0]
    HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t*)pwm_data, LED_BUFFER_SIZE);
 8002a38:	f002 f9fc 	bl	8004e34 <HAL_TIM_PWM_Start_DMA>
    while(!ws2812_transfer_complete) {}
 8002a3c:	782b      	ldrb	r3, [r5, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0fc      	beq.n	8002a3c <HAL_TIM_PWM_Send_To_DMA+0x14>
}
 8002a42:	bd70      	pop	{r4, r5, r6, pc}
 8002a44:	20000378 	.word	0x20000378
 8002a48:	20000418 	.word	0x20000418
 8002a4c:	00000632 	.word	0x00000632

08002a50 <HAL_TIM_PWM_PulseFinishedCallback>:
    if(htim->Instance == TIM17)
 8002a50:	4b05      	ldr	r3, [pc, #20]	@ (8002a68 <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 8002a52:	6802      	ldr	r2, [r0, #0]
{
 8002a54:	b510      	push	{r4, lr}
    if(htim->Instance == TIM17)
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d105      	bne.n	8002a66 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
        HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	f002 fa64 	bl	8004f28 <HAL_TIM_PWM_Stop_DMA>
        ws2812_transfer_complete = 1;
 8002a60:	2201      	movs	r2, #1
 8002a62:	4b02      	ldr	r3, [pc, #8]	@ (8002a6c <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8002a64:	701a      	strb	r2, [r3, #0]
}
 8002a66:	bd10      	pop	{r4, pc}
 8002a68:	40014800 	.word	0x40014800
 8002a6c:	20000418 	.word	0x20000418

08002a70 <HAL_UART_RxCpltCallback>:
    if (huart->Instance == USART2)
 8002a70:	4b07      	ldr	r3, [pc, #28]	@ (8002a90 <HAL_UART_RxCpltCallback+0x20>)
 8002a72:	6802      	ldr	r2, [r0, #0]
{
 8002a74:	b510      	push	{r4, lr}
    if (huart->Instance == USART2)
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d109      	bne.n	8002a8e <HAL_UART_RxCpltCallback+0x1e>
    		uart_fifo_push_isr(&uartFifo, rx_data);
 8002a7a:	4c06      	ldr	r4, [pc, #24]	@ (8002a94 <HAL_UART_RxCpltCallback+0x24>)
 8002a7c:	4806      	ldr	r0, [pc, #24]	@ (8002a98 <HAL_UART_RxCpltCallback+0x28>)
 8002a7e:	7821      	ldrb	r1, [r4, #0]
 8002a80:	f7ff ff25 	bl	80028ce <uart_fifo_push_isr>
        HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8002a84:	2201      	movs	r2, #1
 8002a86:	0021      	movs	r1, r4
 8002a88:	4804      	ldr	r0, [pc, #16]	@ (8002a9c <HAL_UART_RxCpltCallback+0x2c>)
 8002a8a:	f003 fa37 	bl	8005efc <HAL_UART_Receive_IT>
}
 8002a8e:	bd10      	pop	{r4, pc}
 8002a90:	40004400 	.word	0x40004400
 8002a94:	20000284 	.word	0x20000284
 8002a98:	2000007c 	.word	0x2000007c
 8002a9c:	20000288 	.word	0x20000288

08002aa0 <is_board_at_init_setup>:
uint8_t is_board_at_init_setup(uint64_t board_bitmap) {
 8002aa0:	b570      	push	{r4, r5, r6, lr}
 8002aa2:	0005      	movs	r5, r0
 8002aa4:	000e      	movs	r6, r1
 8002aa6:	2400      	movs	r4, #0
		if(bitmap_get_bit(board_bitmap, index) == 0) {
 8002aa8:	0022      	movs	r2, r4
 8002aaa:	0028      	movs	r0, r5
 8002aac:	0031      	movs	r1, r6
 8002aae:	f7ff fb39 	bl	8002124 <bitmap_get_bit>
 8002ab2:	2800      	cmp	r0, #0
 8002ab4:	d00f      	beq.n	8002ad6 <is_board_at_init_setup+0x36>
	for(uint8_t index = 0; index < 16; ++index) {
 8002ab6:	3401      	adds	r4, #1
 8002ab8:	2c10      	cmp	r4, #16
 8002aba:	d1f5      	bne.n	8002aa8 <is_board_at_init_setup+0x8>
 8002abc:	3420      	adds	r4, #32
		if(bitmap_get_bit(board_bitmap, index) == 0) {
 8002abe:	0022      	movs	r2, r4
 8002ac0:	0028      	movs	r0, r5
 8002ac2:	0031      	movs	r1, r6
 8002ac4:	f7ff fb2e 	bl	8002124 <bitmap_get_bit>
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	d004      	beq.n	8002ad6 <is_board_at_init_setup+0x36>
	for(uint8_t index = 48; index < 64; ++index) {
 8002acc:	3401      	adds	r4, #1
 8002ace:	2c40      	cmp	r4, #64	@ 0x40
 8002ad0:	d1f5      	bne.n	8002abe <is_board_at_init_setup+0x1e>
	return 1;
 8002ad2:	2001      	movs	r0, #1
}
 8002ad4:	bd70      	pop	{r4, r5, r6, pc}
				return 0;
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	e7fc      	b.n	8002ad4 <is_board_at_init_setup+0x34>

08002ada <is_a_piece_lift>:
uint8_t is_a_piece_lift(uint64_t current, uint64_t old) {
 8002ada:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002adc:	0005      	movs	r5, r0
 8002ade:	0016      	movs	r6, r2
 8002ae0:	001f      	movs	r7, r3
 8002ae2:	2400      	movs	r4, #0
 8002ae4:	9101      	str	r1, [sp, #4]
		if(bitmap_get_bit(old, index) == 1 && bitmap_get_bit(current, index) == 0) {
 8002ae6:	0022      	movs	r2, r4
 8002ae8:	0030      	movs	r0, r6
 8002aea:	0039      	movs	r1, r7
 8002aec:	f7ff fb1a 	bl	8002124 <bitmap_get_bit>
 8002af0:	2801      	cmp	r0, #1
 8002af2:	d004      	beq.n	8002afe <is_a_piece_lift+0x24>
	for(uint8_t index = 0; index < 64; ++index) {
 8002af4:	3401      	adds	r4, #1
 8002af6:	2c40      	cmp	r4, #64	@ 0x40
 8002af8:	d1f5      	bne.n	8002ae6 <is_a_piece_lift+0xc>
	return NO_INDEX_FOUND;
 8002afa:	20ff      	movs	r0, #255	@ 0xff
}
 8002afc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if(bitmap_get_bit(old, index) == 1 && bitmap_get_bit(current, index) == 0) {
 8002afe:	0022      	movs	r2, r4
 8002b00:	0028      	movs	r0, r5
 8002b02:	9901      	ldr	r1, [sp, #4]
 8002b04:	f7ff fb0e 	bl	8002124 <bitmap_get_bit>
 8002b08:	2800      	cmp	r0, #0
 8002b0a:	d1f3      	bne.n	8002af4 <is_a_piece_lift+0x1a>
 8002b0c:	b2e0      	uxtb	r0, r4
 8002b0e:	e7f5      	b.n	8002afc <is_a_piece_lift+0x22>

08002b10 <is_a_piece_placed>:
uint8_t is_a_piece_placed(uint64_t current, uint64_t old) {
 8002b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b12:	0005      	movs	r5, r0
 8002b14:	0016      	movs	r6, r2
 8002b16:	001f      	movs	r7, r3
 8002b18:	2400      	movs	r4, #0
 8002b1a:	9101      	str	r1, [sp, #4]
		if(bitmap_get_bit(old, index) == 0 && bitmap_get_bit(current, index) == 1) {
 8002b1c:	0022      	movs	r2, r4
 8002b1e:	0030      	movs	r0, r6
 8002b20:	0039      	movs	r1, r7
 8002b22:	f7ff faff 	bl	8002124 <bitmap_get_bit>
 8002b26:	2800      	cmp	r0, #0
 8002b28:	d004      	beq.n	8002b34 <is_a_piece_placed+0x24>
	for(uint8_t index = 0; index < 64; ++index) {
 8002b2a:	3401      	adds	r4, #1
 8002b2c:	2c40      	cmp	r4, #64	@ 0x40
 8002b2e:	d1f5      	bne.n	8002b1c <is_a_piece_placed+0xc>
	return NO_INDEX_FOUND;
 8002b30:	20ff      	movs	r0, #255	@ 0xff
}
 8002b32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if(bitmap_get_bit(old, index) == 0 && bitmap_get_bit(current, index) == 1) {
 8002b34:	0022      	movs	r2, r4
 8002b36:	0028      	movs	r0, r5
 8002b38:	9901      	ldr	r1, [sp, #4]
 8002b3a:	f7ff faf3 	bl	8002124 <bitmap_get_bit>
 8002b3e:	2801      	cmp	r0, #1
 8002b40:	d1f3      	bne.n	8002b2a <is_a_piece_placed+0x1a>
 8002b42:	b2e0      	uxtb	r0, r4
 8002b44:	e7f5      	b.n	8002b32 <is_a_piece_placed+0x22>
	...

08002b48 <set_gpio_column>:
void set_gpio_column(uint8_t column) {
 8002b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b4a:	0006      	movs	r6, r0
	uint8_t mask = 1;
 8002b4c:	2401      	movs	r4, #1
 8002b4e:	4d08      	ldr	r5, [pc, #32]	@ (8002b70 <set_gpio_column+0x28>)
 8002b50:	4f08      	ldr	r7, [pc, #32]	@ (8002b74 <set_gpio_column+0x2c>)
		if(column & mask) {
 8002b52:	0022      	movs	r2, r4
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_SET);
 8002b54:	69a8      	ldr	r0, [r5, #24]
 8002b56:	8ba9      	ldrh	r1, [r5, #28]
		if(column & mask) {
 8002b58:	4032      	ands	r2, r6
 8002b5a:	4234      	tst	r4, r6
 8002b5c:	d000      	beq.n	8002b60 <set_gpio_column+0x18>
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_SET);
 8002b5e:	2201      	movs	r2, #1
		mask *= 2;
 8002b60:	0064      	lsls	r4, r4, #1
	for(uint8_t i = COL0; i < PIN_NUMBER_FOR_COLUMN + COL0; ++i) {
 8002b62:	3508      	adds	r5, #8
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_RESET);
 8002b64:	f001 f822 	bl	8003bac <HAL_GPIO_WritePin>
		mask *= 2;
 8002b68:	b2e4      	uxtb	r4, r4
	for(uint8_t i = COL0; i < PIN_NUMBER_FOR_COLUMN + COL0; ++i) {
 8002b6a:	42bd      	cmp	r5, r7
 8002b6c:	d1f1      	bne.n	8002b52 <set_gpio_column+0xa>
}
 8002b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b70:	08006f70 	.word	0x08006f70
 8002b74:	08006f88 	.word	0x08006f88

08002b78 <set_gpio_line>:
void set_gpio_line(uint8_t line) {
 8002b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7a:	0006      	movs	r6, r0
	uint8_t mask = 1;
 8002b7c:	2401      	movs	r4, #1
 8002b7e:	4d08      	ldr	r5, [pc, #32]	@ (8002ba0 <set_gpio_line+0x28>)
 8002b80:	4f08      	ldr	r7, [pc, #32]	@ (8002ba4 <set_gpio_line+0x2c>)
		if(line & mask) {
 8002b82:	0022      	movs	r2, r4
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_SET);
 8002b84:	6828      	ldr	r0, [r5, #0]
 8002b86:	88a9      	ldrh	r1, [r5, #4]
		if(line & mask) {
 8002b88:	4032      	ands	r2, r6
 8002b8a:	4234      	tst	r4, r6
 8002b8c:	d000      	beq.n	8002b90 <set_gpio_line+0x18>
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_SET);
 8002b8e:	2201      	movs	r2, #1
		mask *= 2;
 8002b90:	0064      	lsls	r4, r4, #1
	for(uint8_t i = ROW0; i < PIN_NUMBER_FOR_LINE; ++i) {
 8002b92:	3508      	adds	r5, #8
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_RESET);
 8002b94:	f001 f80a 	bl	8003bac <HAL_GPIO_WritePin>
		mask *= 2;
 8002b98:	b2e4      	uxtb	r4, r4
	for(uint8_t i = ROW0; i < PIN_NUMBER_FOR_LINE; ++i) {
 8002b9a:	42bd      	cmp	r5, r7
 8002b9c:	d1f1      	bne.n	8002b82 <set_gpio_line+0xa>
}
 8002b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ba0:	08006f70 	.word	0x08006f70
 8002ba4:	08006f88 	.word	0x08006f88

08002ba8 <read_reed_value>:
uint8_t read_reed_value(Square square) {
 8002ba8:	b513      	push	{r0, r1, r4, lr}
 8002baa:	ac01      	add	r4, sp, #4
 8002bac:	8020      	strh	r0, [r4, #0]
	set_gpio_column(square.column);
 8002bae:	b2c0      	uxtb	r0, r0
 8002bb0:	f7ff ffca 	bl	8002b48 <set_gpio_column>
	set_gpio_line(square.line);
 8002bb4:	7860      	ldrb	r0, [r4, #1]
 8002bb6:	f7ff ffdf 	bl	8002b78 <set_gpio_line>
	return HAL_GPIO_ReadPin(gpio_pins[READ].port, gpio_pins[READ].pin);
 8002bba:	2101      	movs	r1, #1
 8002bbc:	4801      	ldr	r0, [pc, #4]	@ (8002bc4 <read_reed_value+0x1c>)
 8002bbe:	f000 ffef 	bl	8003ba0 <HAL_GPIO_ReadPin>
}
 8002bc2:	bd16      	pop	{r1, r2, r4, pc}
 8002bc4:	50000400 	.word	0x50000400

08002bc8 <read_full_board>:
void read_full_board(uint64_t *board_bitmap) {
 8002bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bca:	0006      	movs	r6, r0
 8002bcc:	2500      	movs	r5, #0
 8002bce:	b085      	sub	sp, #20
 8002bd0:	2400      	movs	r4, #0
 8002bd2:	00eb      	lsls	r3, r5, #3
 8002bd4:	b2ef      	uxtb	r7, r5
		for(uint8_t column = 0; column < BOARD_HEIGHT; ++column) {
 8002bd6:	9301      	str	r3, [sp, #4]
			square.column = column;
 8002bd8:	ab03      	add	r3, sp, #12
 8002bda:	701c      	strb	r4, [r3, #0]
			square.line = line;
 8002bdc:	705f      	strb	r7, [r3, #1]
			if(read_reed_value(square)) {
 8002bde:	9803      	ldr	r0, [sp, #12]
 8002be0:	f7ff ffe2 	bl	8002ba8 <read_reed_value>
				bitmap_set_bit(board_bitmap, line * BOARD_WIDTH + column);
 8002be4:	9b01      	ldr	r3, [sp, #4]
 8002be6:	18e1      	adds	r1, r4, r3
			if(read_reed_value(square)) {
 8002be8:	2800      	cmp	r0, #0
 8002bea:	d00a      	beq.n	8002c02 <read_full_board+0x3a>
				bitmap_set_bit(board_bitmap, line * BOARD_WIDTH + column);
 8002bec:	0030      	movs	r0, r6
 8002bee:	f7ff fa7b 	bl	80020e8 <bitmap_set_bit>
		for(uint8_t column = 0; column < BOARD_HEIGHT; ++column) {
 8002bf2:	3401      	adds	r4, #1
 8002bf4:	2c08      	cmp	r4, #8
 8002bf6:	d1ef      	bne.n	8002bd8 <read_full_board+0x10>
	for(uint8_t line = 0; line < BOARD_WIDTH; ++line) {
 8002bf8:	3501      	adds	r5, #1
 8002bfa:	2d08      	cmp	r5, #8
 8002bfc:	d1e8      	bne.n	8002bd0 <read_full_board+0x8>
}
 8002bfe:	b005      	add	sp, #20
 8002c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bitmap_clear_bit(board_bitmap, line * BOARD_WIDTH + column);
 8002c02:	0030      	movs	r0, r6
 8002c04:	f7ff fa7f 	bl	8002106 <bitmap_clear_bit>
 8002c08:	e7f3      	b.n	8002bf2 <read_full_board+0x2a>

08002c0a <leds_clear>:
	for(uint8_t index = 0; index < LED_NUMBER; ++index) {
 8002c0a:	0002      	movs	r2, r0
		colors[index][0] = 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	32c0      	adds	r2, #192	@ 0xc0
 8002c10:	7003      	strb	r3, [r0, #0]
		colors[index][1] = 0;
 8002c12:	7043      	strb	r3, [r0, #1]
		colors[index][2] = 0;
 8002c14:	7083      	strb	r3, [r0, #2]
	for(uint8_t index = 0; index < LED_NUMBER; ++index) {
 8002c16:	3003      	adds	r0, #3
 8002c18:	4290      	cmp	r0, r2
 8002c1a:	d1f9      	bne.n	8002c10 <leds_clear+0x6>
}
 8002c1c:	4770      	bx	lr

08002c1e <led_set>:
void led_set(uint8_t index, uint8_t r, uint8_t g, uint8_t b, uint8_t colors[][3], uint8_t brightness) {
 8002c1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c20:	001f      	movs	r7, r3
 8002c22:	ab06      	add	r3, sp, #24
 8002c24:	cb10      	ldmia	r3!, {r4}
 8002c26:	0016      	movs	r6, r2
 8002c28:	781d      	ldrb	r5, [r3, #0]
	colors[index][0] = (uint8_t)(r * brightness / 255);
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	4369      	muls	r1, r5
 8002c2e:	4343      	muls	r3, r0
 8002c30:	0008      	movs	r0, r1
 8002c32:	21ff      	movs	r1, #255	@ 0xff
 8002c34:	18e4      	adds	r4, r4, r3
 8002c36:	f7fd fb13 	bl	8000260 <__divsi3>
 8002c3a:	7020      	strb	r0, [r4, #0]
	colors[index][1] = (uint8_t)(g * brightness / 255);
 8002c3c:	0030      	movs	r0, r6
 8002c3e:	21ff      	movs	r1, #255	@ 0xff
 8002c40:	4368      	muls	r0, r5
 8002c42:	f7fd fb0d 	bl	8000260 <__divsi3>
 8002c46:	7060      	strb	r0, [r4, #1]
	colors[index][2] = (uint8_t)(b * brightness / 255);
 8002c48:	0028      	movs	r0, r5
 8002c4a:	21ff      	movs	r1, #255	@ 0xff
 8002c4c:	4378      	muls	r0, r7
 8002c4e:	f7fd fb07 	bl	8000260 <__divsi3>
 8002c52:	70a0      	strb	r0, [r4, #2]
}
 8002c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c58 <hsv_to_rgb>:
void hsv_to_rgb(int h, int s, int v, uint8_t colors[][3], int from_index) {
 8002c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c5a:	0005      	movs	r5, r0
 8002c5c:	b087      	sub	sp, #28
 8002c5e:	0008      	movs	r0, r1
 8002c60:	0014      	movs	r4, r2
 8002c62:	9304      	str	r3, [sp, #16]
  float ss = s / 255.0;
 8002c64:	f7ff f874 	bl	8001d50 <__aeabi_i2d>
 8002c68:	2200      	movs	r2, #0
 8002c6a:	4b4e      	ldr	r3, [pc, #312]	@ (8002da4 <hsv_to_rgb+0x14c>)
 8002c6c:	f7fe fa72 	bl	8001154 <__aeabi_ddiv>
 8002c70:	f7ff f89c 	bl	8001dac <__aeabi_d2f>
 8002c74:	9002      	str	r0, [sp, #8]
  float vv = v / 255.0;
 8002c76:	0020      	movs	r0, r4
 8002c78:	f7ff f86a 	bl	8001d50 <__aeabi_i2d>
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	4b49      	ldr	r3, [pc, #292]	@ (8002da4 <hsv_to_rgb+0x14c>)
 8002c80:	f7fe fa68 	bl	8001154 <__aeabi_ddiv>
 8002c84:	f7ff f892 	bl	8001dac <__aeabi_d2f>
 8002c88:	1c04      	adds	r4, r0, #0
  float hh = h / 255.0 * 360;
 8002c8a:	0028      	movs	r0, r5
 8002c8c:	f7ff f860 	bl	8001d50 <__aeabi_i2d>
 8002c90:	2200      	movs	r2, #0
 8002c92:	4b44      	ldr	r3, [pc, #272]	@ (8002da4 <hsv_to_rgb+0x14c>)
 8002c94:	f7fe fa5e 	bl	8001154 <__aeabi_ddiv>
 8002c98:	4b43      	ldr	r3, [pc, #268]	@ (8002da8 <hsv_to_rgb+0x150>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f7fe fd72 	bl	8001784 <__aeabi_dmul>
 8002ca0:	f7ff f884 	bl	8001dac <__aeabi_d2f>
  int i = (int)(hh / 60) % 6;
 8002ca4:	4941      	ldr	r1, [pc, #260]	@ (8002dac <hsv_to_rgb+0x154>)
 8002ca6:	f7fd fd11 	bl	80006cc <__aeabi_fdiv>
 8002caa:	1c07      	adds	r7, r0, #0
 8002cac:	f7fe f9e2 	bl	8001074 <__aeabi_f2iz>
 8002cb0:	2106      	movs	r1, #6
 8002cb2:	f7fd fbbb 	bl	800042c <__aeabi_idivmod>
  float f = (hh / 60) - i;
 8002cb6:	0008      	movs	r0, r1
  int i = (int)(hh / 60) % 6;
 8002cb8:	000d      	movs	r5, r1
  float f = (hh / 60) - i;
 8002cba:	f7fe f9fb 	bl	80010b4 <__aeabi_i2f>
 8002cbe:	1c01      	adds	r1, r0, #0
 8002cc0:	1c38      	adds	r0, r7, #0
 8002cc2:	f7fd ff73 	bl	8000bac <__aeabi_fsub>
 8002cc6:	9003      	str	r0, [sp, #12]
  float p = vv * (1 - ss);
 8002cc8:	20fe      	movs	r0, #254	@ 0xfe
 8002cca:	9902      	ldr	r1, [sp, #8]
 8002ccc:	0580      	lsls	r0, r0, #22
 8002cce:	f7fd ff6d 	bl	8000bac <__aeabi_fsub>
 8002cd2:	1c21      	adds	r1, r4, #0
 8002cd4:	f7fd fe10 	bl	80008f8 <__aeabi_fmul>
  float q = vv * (1 - f * ss);
 8002cd8:	9903      	ldr	r1, [sp, #12]
  float p = vv * (1 - ss);
 8002cda:	1c06      	adds	r6, r0, #0
  float q = vv * (1 - f * ss);
 8002cdc:	9802      	ldr	r0, [sp, #8]
 8002cde:	f7fd fe0b 	bl	80008f8 <__aeabi_fmul>
 8002ce2:	1c01      	adds	r1, r0, #0
 8002ce4:	20fe      	movs	r0, #254	@ 0xfe
 8002ce6:	0580      	lsls	r0, r0, #22
 8002ce8:	f7fd ff60 	bl	8000bac <__aeabi_fsub>
 8002cec:	1c21      	adds	r1, r4, #0
 8002cee:	f7fd fe03 	bl	80008f8 <__aeabi_fmul>
 8002cf2:	9005      	str	r0, [sp, #20]
 8002cf4:	1c07      	adds	r7, r0, #0
  float t = vv * (1 - (1 - f) * ss);
 8002cf6:	20fe      	movs	r0, #254	@ 0xfe
 8002cf8:	9903      	ldr	r1, [sp, #12]
 8002cfa:	0580      	lsls	r0, r0, #22
 8002cfc:	f7fd ff56 	bl	8000bac <__aeabi_fsub>
 8002d00:	9902      	ldr	r1, [sp, #8]
 8002d02:	f7fd fdf9 	bl	80008f8 <__aeabi_fmul>
 8002d06:	1c01      	adds	r1, r0, #0
 8002d08:	20fe      	movs	r0, #254	@ 0xfe
 8002d0a:	0580      	lsls	r0, r0, #22
 8002d0c:	f7fd ff4e 	bl	8000bac <__aeabi_fsub>
 8002d10:	1c21      	adds	r1, r4, #0
 8002d12:	f7fd fdf1 	bl	80008f8 <__aeabi_fmul>
 8002d16:	1c03      	adds	r3, r0, #0
  switch (i) {
 8002d18:	2d04      	cmp	r5, #4
 8002d1a:	d81b      	bhi.n	8002d54 <hsv_to_rgb+0xfc>
 8002d1c:	0028      	movs	r0, r5
 8002d1e:	f7fd fa01 	bl	8000124 <__gnu_thumb1_case_uqi>
 8002d22:	0803      	.short	0x0803
 8002d24:	1006      	.short	0x1006
 8002d26:	14          	.byte	0x14
 8002d27:	00          	.byte	0x00
    case 0: rf = vv; gf = t; bf = p; break;
 8002d28:	1c27      	adds	r7, r4, #0
    case 3: rf = p; gf = q; bf = vv; break;
 8002d2a:	1c1c      	adds	r4, r3, #0
 8002d2c:	e001      	b.n	8002d32 <hsv_to_rgb+0xda>
    case 2: rf = p; gf = vv; bf = t; break;
 8002d2e:	1c37      	adds	r7, r6, #0
 8002d30:	1c1e      	adds	r6, r3, #0
  for(uint8_t i = from_index; i < from_index + 8; ++i) {
 8002d32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002d34:	b2dd      	uxtb	r5, r3
 8002d36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002d38:	3307      	adds	r3, #7
 8002d3a:	42ab      	cmp	r3, r5
 8002d3c:	da0e      	bge.n	8002d5c <hsv_to_rgb+0x104>
}
 8002d3e:	b007      	add	sp, #28
 8002d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    case 3: rf = p; gf = q; bf = vv; break;
 8002d42:	1c3b      	adds	r3, r7, #0
 8002d44:	1c37      	adds	r7, r6, #0
 8002d46:	1c26      	adds	r6, r4, #0
 8002d48:	e7ef      	b.n	8002d2a <hsv_to_rgb+0xd2>
    case 4: rf = t; gf = p; bf = vv; break;
 8002d4a:	1c22      	adds	r2, r4, #0
 8002d4c:	1c1f      	adds	r7, r3, #0
 8002d4e:	1c34      	adds	r4, r6, #0
 8002d50:	1c16      	adds	r6, r2, #0
 8002d52:	e7ee      	b.n	8002d32 <hsv_to_rgb+0xda>
    default: rf = vv; gf = p; bf = q; break;
 8002d54:	1c27      	adds	r7, r4, #0
 8002d56:	1c34      	adds	r4, r6, #0
 8002d58:	9e05      	ldr	r6, [sp, #20]
 8002d5a:	e7ea      	b.n	8002d32 <hsv_to_rgb+0xda>
  	int b = (uint8_t)(bf*255);
 8002d5c:	4914      	ldr	r1, [pc, #80]	@ (8002db0 <hsv_to_rgb+0x158>)
 8002d5e:	1c30      	adds	r0, r6, #0
 8002d60:	f7fd fdca 	bl	80008f8 <__aeabi_fmul>
 8002d64:	f7fd fbce 	bl	8000504 <__aeabi_f2uiz>
  	int g = (uint8_t)(gf*255);
 8002d68:	4911      	ldr	r1, [pc, #68]	@ (8002db0 <hsv_to_rgb+0x158>)
  	led_set(i, r, g, b, colors, GLOBAL_BRIGHTNESS);
 8002d6a:	b2c3      	uxtb	r3, r0
  	int g = (uint8_t)(gf*255);
 8002d6c:	1c20      	adds	r0, r4, #0
  	led_set(i, r, g, b, colors, GLOBAL_BRIGHTNESS);
 8002d6e:	9302      	str	r3, [sp, #8]
  	int g = (uint8_t)(gf*255);
 8002d70:	f7fd fdc2 	bl	80008f8 <__aeabi_fmul>
 8002d74:	f7fd fbc6 	bl	8000504 <__aeabi_f2uiz>
  	int r = (uint8_t)(rf*255);
 8002d78:	490d      	ldr	r1, [pc, #52]	@ (8002db0 <hsv_to_rgb+0x158>)
  	led_set(i, r, g, b, colors, GLOBAL_BRIGHTNESS);
 8002d7a:	b2c3      	uxtb	r3, r0
  	int r = (uint8_t)(rf*255);
 8002d7c:	1c38      	adds	r0, r7, #0
  	led_set(i, r, g, b, colors, GLOBAL_BRIGHTNESS);
 8002d7e:	9303      	str	r3, [sp, #12]
  	int r = (uint8_t)(rf*255);
 8002d80:	f7fd fdba 	bl	80008f8 <__aeabi_fmul>
 8002d84:	f7fd fbbe 	bl	8000504 <__aeabi_f2uiz>
  	led_set(i, r, g, b, colors, GLOBAL_BRIGHTNESS);
 8002d88:	2308      	movs	r3, #8
 8002d8a:	9301      	str	r3, [sp, #4]
 8002d8c:	9b04      	ldr	r3, [sp, #16]
 8002d8e:	b2c1      	uxtb	r1, r0
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	0028      	movs	r0, r5
 8002d94:	9b02      	ldr	r3, [sp, #8]
 8002d96:	9a03      	ldr	r2, [sp, #12]
  for(uint8_t i = from_index; i < from_index + 8; ++i) {
 8002d98:	3501      	adds	r5, #1
  	led_set(i, r, g, b, colors, GLOBAL_BRIGHTNESS);
 8002d9a:	f7ff ff40 	bl	8002c1e <led_set>
  for(uint8_t i = from_index; i < from_index + 8; ++i) {
 8002d9e:	b2ed      	uxtb	r5, r5
 8002da0:	e7c9      	b.n	8002d36 <hsv_to_rgb+0xde>
 8002da2:	46c0      	nop			@ (mov r8, r8)
 8002da4:	406fe000 	.word	0x406fe000
 8002da8:	40768000 	.word	0x40768000
 8002dac:	42700000 	.word	0x42700000
 8002db0:	437f0000 	.word	0x437f0000

08002db4 <main>:
{
 8002db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002db6:	4c79      	ldr	r4, [pc, #484]	@ (8002f9c <main+0x1e8>)
	uint16_t  pwm_data[LED_BUFFER_SIZE] = {0};
 8002db8:	2100      	movs	r1, #0
{
 8002dba:	44a5      	add	sp, r4
	uint16_t  pwm_data[LED_BUFFER_SIZE] = {0};
 8002dbc:	4a78      	ldr	r2, [pc, #480]	@ (8002fa0 <main+0x1ec>)
 8002dbe:	a89d      	add	r0, sp, #628	@ 0x274
 8002dc0:	f003 fb20 	bl	8006404 <memset>
	uint8_t   colors[LED_NUMBER][3] = {0};
 8002dc4:	22c0      	movs	r2, #192	@ 0xc0
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	a86d      	add	r0, sp, #436	@ 0x1b4
 8002dca:	f003 fb1b 	bl	8006404 <memset>
  uint64_t  board_bitmap = 0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd2:	2702      	movs	r7, #2
  uint64_t  board_bitmap = 0;
 8002dd4:	9208      	str	r2, [sp, #32]
 8002dd6:	9309      	str	r3, [sp, #36]	@ 0x24
  char msg[64] = {0};
 8002dd8:	2100      	movs	r1, #0
 8002dda:	3240      	adds	r2, #64	@ 0x40
 8002ddc:	a816      	add	r0, sp, #88	@ 0x58
 8002dde:	f003 fb11 	bl	8006404 <memset>
  HAL_Init();
 8002de2:	f000 fbff 	bl	80035e4 <HAL_Init>
  SystemClock_Config();
 8002de6:	f7ff fde5 	bl	80029b4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dea:	2214      	movs	r2, #20
 8002dec:	2100      	movs	r1, #0
 8002dee:	a846      	add	r0, sp, #280	@ 0x118
 8002df0:	f003 fb08 	bl	8006404 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002df4:	2204      	movs	r2, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df6:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8002df8:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfa:	4d6a      	ldr	r5, [pc, #424]	@ (8002fa4 <main+0x1f0>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8002dfc:	486a      	ldr	r0, [pc, #424]	@ (8002fa8 <main+0x1f4>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfe:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8002e00:	0209      	lsls	r1, r1, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e02:	433b      	orrs	r3, r7
 8002e04:	636b      	str	r3, [r5, #52]	@ 0x34
 8002e06:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e08:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0a:	403b      	ands	r3, r7
 8002e0c:	9305      	str	r3, [sp, #20]
 8002e0e:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e10:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8002e12:	4313      	orrs	r3, r2
 8002e14:	636b      	str	r3, [r5, #52]	@ 0x34
 8002e16:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8002e18:	4013      	ands	r3, r2
 8002e1a:	9306      	str	r3, [sp, #24]
 8002e1c:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8002e20:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e22:	4333      	orrs	r3, r6
 8002e24:	636b      	str	r3, [r5, #52]	@ 0x34
 8002e26:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8002e28:	4033      	ands	r3, r6
 8002e2a:	9307      	str	r3, [sp, #28]
 8002e2c:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8002e2e:	f000 febd 	bl	8003bac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 8002e32:	20a0      	movs	r0, #160	@ 0xa0
 8002e34:	2200      	movs	r2, #0
 8002e36:	495d      	ldr	r1, [pc, #372]	@ (8002fac <main+0x1f8>)
 8002e38:	05c0      	lsls	r0, r0, #23
 8002e3a:	f000 feb7 	bl	8003bac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002e3e:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e40:	485b      	ldr	r0, [pc, #364]	@ (8002fb0 <main+0x1fc>)
 8002e42:	a946      	add	r1, sp, #280	@ 0x118
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002e44:	9346      	str	r3, [sp, #280]	@ 0x118
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e46:	9447      	str	r4, [sp, #284]	@ 0x11c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e48:	9448      	str	r4, [sp, #288]	@ 0x120
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4a:	f000 fdf7 	bl	8003a3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e4e:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e50:	4855      	ldr	r0, [pc, #340]	@ (8002fa8 <main+0x1f4>)
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e52:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e54:	a946      	add	r1, sp, #280	@ 0x118
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e56:	9346      	str	r3, [sp, #280]	@ 0x118
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e58:	9647      	str	r6, [sp, #284]	@ 0x11c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5a:	9448      	str	r4, [sp, #288]	@ 0x120
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5c:	9449      	str	r4, [sp, #292]	@ 0x124
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e5e:	f000 fded 	bl	8003a3c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e62:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 8002e64:	4b51      	ldr	r3, [pc, #324]	@ (8002fac <main+0x1f8>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e66:	a946      	add	r1, sp, #280	@ 0x118
 8002e68:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 8002e6a:	9346      	str	r3, [sp, #280]	@ 0x118
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e6c:	9647      	str	r6, [sp, #284]	@ 0x11c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6e:	9448      	str	r4, [sp, #288]	@ 0x120
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e70:	9449      	str	r4, [sp, #292]	@ 0x124
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e72:	f000 fde3 	bl	8003a3c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e76:	484e      	ldr	r0, [pc, #312]	@ (8002fb0 <main+0x1fc>)
 8002e78:	a946      	add	r1, sp, #280	@ 0x118
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e7a:	9646      	str	r6, [sp, #280]	@ 0x118
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e7c:	9447      	str	r4, [sp, #284]	@ 0x11c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e7e:	9748      	str	r7, [sp, #288]	@ 0x120
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e80:	f000 fddc 	bl	8003a3c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e84:	6bab      	ldr	r3, [r5, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002e86:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e88:	4333      	orrs	r3, r6
 8002e8a:	63ab      	str	r3, [r5, #56]	@ 0x38
 8002e8c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002e8e:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e90:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002e92:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e94:	9304      	str	r3, [sp, #16]
 8002e96:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002e98:	f000 fbdc 	bl	8003654 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002e9c:	2009      	movs	r0, #9
 8002e9e:	f000 fc03 	bl	80036a8 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8002ea2:	4d44      	ldr	r5, [pc, #272]	@ (8002fb4 <main+0x200>)
 8002ea4:	4b44      	ldr	r3, [pc, #272]	@ (8002fb8 <main+0x204>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ea6:	0028      	movs	r0, r5
  hi2c1.Instance = I2C1;
 8002ea8:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8002eaa:	4b44      	ldr	r3, [pc, #272]	@ (8002fbc <main+0x208>)
  hi2c1.Init.OwnAddress1 = 0;
 8002eac:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.Timing = 0x00B07CB4;
 8002eae:	606b      	str	r3, [r5, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002eb0:	60ee      	str	r6, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002eb2:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002eb4:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002eb6:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002eb8:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002eba:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ebc:	f000 fe7c 	bl	8003bb8 <HAL_I2C_Init>
 8002ec0:	0001      	movs	r1, r0
 8002ec2:	42a0      	cmp	r0, r4
 8002ec4:	d001      	beq.n	8002eca <main+0x116>
 8002ec6:	b672      	cpsid	i
  while (1)
 8002ec8:	e7fe      	b.n	8002ec8 <main+0x114>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002eca:	0028      	movs	r0, r5
 8002ecc:	f000 fed2 	bl	8003c74 <HAL_I2CEx_ConfigAnalogFilter>
 8002ed0:	1e01      	subs	r1, r0, #0
 8002ed2:	d001      	beq.n	8002ed8 <main+0x124>
 8002ed4:	b672      	cpsid	i
  while (1)
 8002ed6:	e7fe      	b.n	8002ed6 <main+0x122>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ed8:	0028      	movs	r0, r5
 8002eda:	f000 fef1 	bl	8003cc0 <HAL_I2CEx_ConfigDigitalFilter>
 8002ede:	2800      	cmp	r0, #0
 8002ee0:	d001      	beq.n	8002ee6 <main+0x132>
 8002ee2:	b672      	cpsid	i
  while (1)
 8002ee4:	e7fe      	b.n	8002ee4 <main+0x130>
  huart2.Instance = USART2;
 8002ee6:	4c36      	ldr	r4, [pc, #216]	@ (8002fc0 <main+0x20c>)
 8002ee8:	4b36      	ldr	r3, [pc, #216]	@ (8002fc4 <main+0x210>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002eea:	60a0      	str	r0, [r4, #8]
  huart2.Instance = USART2;
 8002eec:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 115200;
 8002eee:	23e1      	movs	r3, #225	@ 0xe1
 8002ef0:	025b      	lsls	r3, r3, #9
 8002ef2:	6063      	str	r3, [r4, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ef4:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ef6:	60e0      	str	r0, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ef8:	6120      	str	r0, [r4, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002efa:	61a0      	str	r0, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002efc:	61e0      	str	r0, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002efe:	6220      	str	r0, [r4, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f00:	6260      	str	r0, [r4, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f02:	62a0      	str	r0, [r4, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f04:	0020      	movs	r0, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f06:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f08:	f002 ff2a 	bl	8005d60 <HAL_UART_Init>
 8002f0c:	1e07      	subs	r7, r0, #0
 8002f0e:	d001      	beq.n	8002f14 <main+0x160>
 8002f10:	b672      	cpsid	i
  while (1)
 8002f12:	e7fe      	b.n	8002f12 <main+0x15e>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f14:	0001      	movs	r1, r0
 8002f16:	221c      	movs	r2, #28
 8002f18:	a826      	add	r0, sp, #152	@ 0x98
 8002f1a:	f003 fa73 	bl	8006404 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f1e:	2234      	movs	r2, #52	@ 0x34
 8002f20:	0039      	movs	r1, r7
 8002f22:	a846      	add	r0, sp, #280	@ 0x118
 8002f24:	f003 fa6e 	bl	8006404 <memset>
  htim17.Instance = TIM17;
 8002f28:	4d27      	ldr	r5, [pc, #156]	@ (8002fc8 <main+0x214>)
 8002f2a:	4b28      	ldr	r3, [pc, #160]	@ (8002fcc <main+0x218>)
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002f2c:	0028      	movs	r0, r5
  htim17.Instance = TIM17;
 8002f2e:	602b      	str	r3, [r5, #0]
  htim17.Init.Period = 39;
 8002f30:	2327      	movs	r3, #39	@ 0x27
  htim17.Init.Prescaler = 0;
 8002f32:	606f      	str	r7, [r5, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f34:	60af      	str	r7, [r5, #8]
  htim17.Init.Period = 39;
 8002f36:	60eb      	str	r3, [r5, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f38:	612f      	str	r7, [r5, #16]
  htim17.Init.RepetitionCounter = 0;
 8002f3a:	616f      	str	r7, [r5, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f3c:	61af      	str	r7, [r5, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002f3e:	f001 fd61 	bl	8004a04 <HAL_TIM_Base_Init>
 8002f42:	2800      	cmp	r0, #0
 8002f44:	d001      	beq.n	8002f4a <main+0x196>
 8002f46:	b672      	cpsid	i
  while (1)
 8002f48:	e7fe      	b.n	8002f48 <main+0x194>
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002f4a:	0028      	movs	r0, r5
 8002f4c:	f001 fd84 	bl	8004a58 <HAL_TIM_PWM_Init>
 8002f50:	1e02      	subs	r2, r0, #0
 8002f52:	d001      	beq.n	8002f58 <main+0x1a4>
 8002f54:	b672      	cpsid	i
  while (1)
 8002f56:	e7fe      	b.n	8002f56 <main+0x1a2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f58:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.Pulse = 0;
 8002f5a:	9027      	str	r0, [sp, #156]	@ 0x9c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f5c:	9028      	str	r0, [sp, #160]	@ 0xa0
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f5e:	9029      	str	r0, [sp, #164]	@ 0xa4
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f60:	902a      	str	r0, [sp, #168]	@ 0xa8
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f62:	902b      	str	r0, [sp, #172]	@ 0xac
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f64:	902c      	str	r0, [sp, #176]	@ 0xb0
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f66:	a926      	add	r1, sp, #152	@ 0x98
 8002f68:	0028      	movs	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f6a:	9326      	str	r3, [sp, #152]	@ 0x98
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f6c:	f001 fdda 	bl	8004b24 <HAL_TIM_PWM_ConfigChannel>
 8002f70:	2800      	cmp	r0, #0
 8002f72:	d001      	beq.n	8002f78 <main+0x1c4>
 8002f74:	b672      	cpsid	i
  while (1)
 8002f76:	e7fe      	b.n	8002f76 <main+0x1c2>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f78:	2380      	movs	r3, #128	@ 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f7a:	9046      	str	r0, [sp, #280]	@ 0x118
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f7c:	9047      	str	r0, [sp, #284]	@ 0x11c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f7e:	9048      	str	r0, [sp, #288]	@ 0x120
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f80:	9049      	str	r0, [sp, #292]	@ 0x124
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f82:	904a      	str	r0, [sp, #296]	@ 0x128
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f84:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002f86:	904c      	str	r0, [sp, #304]	@ 0x130
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f88:	9052      	str	r0, [sp, #328]	@ 0x148
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002f8a:	a946      	add	r1, sp, #280	@ 0x118
 8002f8c:	0028      	movs	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f8e:	934b      	str	r3, [sp, #300]	@ 0x12c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002f90:	f001 ffce 	bl	8004f30 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f94:	2800      	cmp	r0, #0
 8002f96:	d01b      	beq.n	8002fd0 <main+0x21c>
 8002f98:	b672      	cpsid	i
  while (1)
 8002f9a:	e7fe      	b.n	8002f9a <main+0x1e6>
 8002f9c:	fffff124 	.word	0xfffff124
 8002fa0:	00000c64 	.word	0x00000c64
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	50000800 	.word	0x50000800
 8002fac:	00001870 	.word	0x00001870
 8002fb0:	50000400 	.word	0x50000400
 8002fb4:	200003c4 	.word	0x200003c4
 8002fb8:	40005400 	.word	0x40005400
 8002fbc:	00b07cb4 	.word	0x00b07cb4
 8002fc0:	20000288 	.word	0x20000288
 8002fc4:	40004400 	.word	0x40004400
 8002fc8:	20000378 	.word	0x20000378
 8002fcc:	40014800 	.word	0x40014800
  HAL_TIM_MspPostInit(&htim17);
 8002fd0:	0028      	movs	r0, r5
 8002fd2:	f000 fa17 	bl	8003404 <HAL_TIM_MspPostInit>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8002fd6:	0032      	movs	r2, r6
 8002fd8:	0020      	movs	r0, r4
 8002fda:	4994      	ldr	r1, [pc, #592]	@ (800322c <main+0x478>)
 8002fdc:	f002 ff8e 	bl	8005efc <HAL_UART_Receive_IT>
  uart_fifo_init(&uartFifo);
 8002fe0:	4893      	ldr	r0, [pc, #588]	@ (8003230 <main+0x47c>)
 8002fe2:	f7ff fc6d 	bl	80028c0 <uart_fifo_init>
 8002fe6:	24ff      	movs	r4, #255	@ 0xff
 8002fe8:	2603      	movs	r6, #3
					if(colors[63][0] != 0 || colors[63][1] != 0 || colors[63][2] != 0) {
 8002fea:	4b92      	ldr	r3, [pc, #584]	@ (8003234 <main+0x480>)
 8002fec:	4a92      	ldr	r2, [pc, #584]	@ (8003238 <main+0x484>)
 8002fee:	446b      	add	r3, sp
 8002ff0:	446a      	add	r2, sp
 8002ff2:	7812      	ldrb	r2, [r2, #0]
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	4a90      	ldr	r2, [pc, #576]	@ (800323c <main+0x488>)
 8002ffa:	446a      	add	r2, sp
 8002ffc:	7812      	ldrb	r2, [r2, #0]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	d009      	beq.n	8003016 <main+0x262>
						rgb_update_buffer(pwm_data, colors);
 8003002:	a96d      	add	r1, sp, #436	@ 0x1b4
 8003004:	a89d      	add	r0, sp, #628	@ 0x274
 8003006:	f000 f93f 	bl	8003288 <rgb_update_buffer>
						HAL_TIM_PWM_Send_To_DMA(pwm_data);
 800300a:	a89d      	add	r0, sp, #628	@ 0x274
 800300c:	f7ff fd0c 	bl	8002a28 <HAL_TIM_PWM_Send_To_DMA>
						HAL_Delay(50);
 8003010:	2032      	movs	r0, #50	@ 0x32
 8003012:	f000 fb0d 	bl	8003630 <HAL_Delay>
						for(int k = 0; k < 8; ++k) {
 8003016:	2230      	movs	r2, #48	@ 0x30
 8003018:	0033      	movs	r3, r6
 800301a:	4353      	muls	r3, r2
 800301c:	a96d      	add	r1, sp, #436	@ 0x1b4
 800301e:	18cb      	adds	r3, r1, r3
 8003020:	2100      	movs	r1, #0
							colors[(i)*8+k][0] = colors[(i-1)*8+k][0];
 8003022:	7818      	ldrb	r0, [r3, #0]
						for(int k = 0; k < 8; ++k) {
 8003024:	3101      	adds	r1, #1
							colors[(i)*8+k][0] = colors[(i-1)*8+k][0];
 8003026:	7618      	strb	r0, [r3, #24]
							colors[(i)*8+k][1] = colors[(i-1)*8+k][1];
 8003028:	7858      	ldrb	r0, [r3, #1]
 800302a:	7658      	strb	r0, [r3, #25]
							colors[(i)*8+k][2] = colors[(i-1)*8+k][2];
 800302c:	7898      	ldrb	r0, [r3, #2]
						for(int k = 0; k < 8; ++k) {
 800302e:	3303      	adds	r3, #3
							colors[(i)*8+k][2] = colors[(i-1)*8+k][2];
 8003030:	75d8      	strb	r0, [r3, #23]
						for(int k = 0; k < 8; ++k) {
 8003032:	2908      	cmp	r1, #8
 8003034:	d1f5      	bne.n	8003022 <main+0x26e>
					for(int i = 7; i > 0; --i) {
 8003036:	3a08      	subs	r2, #8
 8003038:	0013      	movs	r3, r2
 800303a:	3308      	adds	r3, #8
 800303c:	d1ec      	bne.n	8003018 <main+0x264>
					hsv_to_rgb(hue, 255, 255, colors, 0);
 800303e:	2300      	movs	r3, #0
 8003040:	22ff      	movs	r2, #255	@ 0xff
 8003042:	4d7f      	ldr	r5, [pc, #508]	@ (8003240 <main+0x48c>)
 8003044:	0011      	movs	r1, r2
 8003046:	682f      	ldr	r7, [r5, #0]
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	0038      	movs	r0, r7
 800304c:	ab6d      	add	r3, sp, #436	@ 0x1b4
 800304e:	f7ff fe03 	bl	8002c58 <hsv_to_rgb>
					hue = (hue + 4) % 256;
 8003052:	4b7c      	ldr	r3, [pc, #496]	@ (8003244 <main+0x490>)
 8003054:	1d38      	adds	r0, r7, #4
 8003056:	4018      	ands	r0, r3
 8003058:	d503      	bpl.n	8003062 <main+0x2ae>
 800305a:	4b7b      	ldr	r3, [pc, #492]	@ (8003248 <main+0x494>)
 800305c:	3801      	subs	r0, #1
 800305e:	4318      	orrs	r0, r3
 8003060:	3001      	adds	r0, #1
				for(uint8_t j = 0; j < 255; ++j) {
 8003062:	3c01      	subs	r4, #1
 8003064:	b2e4      	uxtb	r4, r4
					hue = (hue + 4) % 256;
 8003066:	6028      	str	r0, [r5, #0]
				for(uint8_t j = 0; j < 255; ++j) {
 8003068:	2c00      	cmp	r4, #0
 800306a:	d1be      	bne.n	8002fea <main+0x236>
				leds_clear(colors);
 800306c:	a86d      	add	r0, sp, #436	@ 0x1b4
 800306e:	f7ff fdcc 	bl	8002c0a <leds_clear>
				read_full_board(&board_bitmap);
 8003072:	a808      	add	r0, sp, #32
 8003074:	f7ff fda8 	bl	8002bc8 <read_full_board>
				status = is_board_at_init_setup(board_bitmap);
 8003078:	9808      	ldr	r0, [sp, #32]
 800307a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800307c:	f7ff fd10 	bl	8002aa0 <is_board_at_init_setup>
				for(uint8_t i = 0; i < LED_NUMBER; ++i){
 8003080:	2603      	movs	r6, #3
	colors[index][0] = (uint8_t)(r * brightness / 255);
 8003082:	2708      	movs	r7, #8
					uint8_t led_index = convert_reed_index_to_led_index(i);
 8003084:	b2e0      	uxtb	r0, r4
 8003086:	f7ff f891 	bl	80021ac <convert_reed_index_to_led_index>
 800308a:	0005      	movs	r5, r0
					if(bitmap_get_bit(board_bitmap, i)) {
 800308c:	9808      	ldr	r0, [sp, #32]
 800308e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003090:	0022      	movs	r2, r4
 8003092:	f7ff f847 	bl	8002124 <bitmap_get_bit>
	colors[index][0] = (uint8_t)(r * brightness / 255);
 8003096:	4375      	muls	r5, r6
 8003098:	ab6d      	add	r3, sp, #436	@ 0x1b4
 800309a:	195b      	adds	r3, r3, r5
					if(bitmap_get_bit(board_bitmap, i)) {
 800309c:	2800      	cmp	r0, #0
 800309e:	d074      	beq.n	800318a <main+0x3d6>
	colors[index][0] = (uint8_t)(r * brightness / 255);
 80030a0:	2200      	movs	r2, #0
	colors[index][1] = (uint8_t)(g * brightness / 255);
 80030a2:	705f      	strb	r7, [r3, #1]
	colors[index][0] = (uint8_t)(r * brightness / 255);
 80030a4:	701a      	strb	r2, [r3, #0]
	colors[index][2] = (uint8_t)(b * brightness / 255);
 80030a6:	709a      	strb	r2, [r3, #2]
				for(uint8_t i = 0; i < LED_NUMBER; ++i){
 80030a8:	3401      	adds	r4, #1
 80030aa:	2c40      	cmp	r4, #64	@ 0x40
 80030ac:	d1ea      	bne.n	8003084 <main+0x2d0>
				rgb_update_buffer(pwm_data, colors);
 80030ae:	a89d      	add	r0, sp, #628	@ 0x274
 80030b0:	a96d      	add	r1, sp, #436	@ 0x1b4
 80030b2:	f000 f8e9 	bl	8003288 <rgb_update_buffer>
				HAL_TIM_PWM_Send_To_DMA(pwm_data);
 80030b6:	a89d      	add	r0, sp, #628	@ 0x274
 80030b8:	f7ff fcb6 	bl	8002a28 <HAL_TIM_PWM_Send_To_DMA>
  			old_board_bitmap = board_bitmap;
 80030bc:	9e08      	ldr	r6, [sp, #32]
 80030be:	9f09      	ldr	r7, [sp, #36]	@ 0x24
				read_full_board(&board_bitmap);
 80030c0:	a808      	add	r0, sp, #32
 80030c2:	f7ff fd81 	bl	8002bc8 <read_full_board>
				idx = is_a_piece_lift(board_bitmap, old_board_bitmap);
 80030c6:	9808      	ldr	r0, [sp, #32]
 80030c8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80030ca:	0032      	movs	r2, r6
 80030cc:	003b      	movs	r3, r7
 80030ce:	f7ff fd04 	bl	8002ada <is_a_piece_lift>
 80030d2:	0004      	movs	r4, r0
				if(idx != NO_INDEX_FOUND) {
 80030d4:	28ff      	cmp	r0, #255	@ 0xff
 80030d6:	d011      	beq.n	80030fc <main+0x348>
					cb_fmt_evt_lift(msg, 64, idx, HAL_GetTick());
 80030d8:	f000 faa4 	bl	8003624 <HAL_GetTick>
 80030dc:	0022      	movs	r2, r4
 80030de:	0003      	movs	r3, r0
 80030e0:	2140      	movs	r1, #64	@ 0x40
 80030e2:	a816      	add	r0, sp, #88	@ 0x58
 80030e4:	f7ff fbc4 	bl	8002870 <cb_fmt_evt_lift>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80030e8:	a816      	add	r0, sp, #88	@ 0x58
 80030ea:	f7fd f813 	bl	8000114 <strlen>
 80030ee:	2301      	movs	r3, #1
 80030f0:	b282      	uxth	r2, r0
 80030f2:	425b      	negs	r3, r3
 80030f4:	4855      	ldr	r0, [pc, #340]	@ (800324c <main+0x498>)
 80030f6:	a916      	add	r1, sp, #88	@ 0x58
 80030f8:	f002 fd63 	bl	8005bc2 <HAL_UART_Transmit>
				idx = is_a_piece_placed(board_bitmap, old_board_bitmap);
 80030fc:	9808      	ldr	r0, [sp, #32]
 80030fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003100:	0032      	movs	r2, r6
 8003102:	003b      	movs	r3, r7
 8003104:	f7ff fd04 	bl	8002b10 <is_a_piece_placed>
 8003108:	0004      	movs	r4, r0
				if(idx != NO_INDEX_FOUND) {
 800310a:	28ff      	cmp	r0, #255	@ 0xff
 800310c:	d014      	beq.n	8003138 <main+0x384>
					leds_clear(colors);
 800310e:	a86d      	add	r0, sp, #436	@ 0x1b4
 8003110:	f7ff fd7b 	bl	8002c0a <leds_clear>
					cb_fmt_evt_place(msg, 64, idx, HAL_GetTick());
 8003114:	f000 fa86 	bl	8003624 <HAL_GetTick>
 8003118:	0022      	movs	r2, r4
 800311a:	0003      	movs	r3, r0
 800311c:	2140      	movs	r1, #64	@ 0x40
 800311e:	a816      	add	r0, sp, #88	@ 0x58
 8003120:	f7ff fbba 	bl	8002898 <cb_fmt_evt_place>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003124:	a816      	add	r0, sp, #88	@ 0x58
 8003126:	f7fc fff5 	bl	8000114 <strlen>
 800312a:	2301      	movs	r3, #1
 800312c:	b282      	uxth	r2, r0
 800312e:	425b      	negs	r3, r3
 8003130:	4846      	ldr	r0, [pc, #280]	@ (800324c <main+0x498>)
 8003132:	a916      	add	r1, sp, #88	@ 0x58
 8003134:	f002 fd45 	bl	8005bc2 <HAL_UART_Transmit>
  			int r = uart_fifo_get_command(&uartFifo, command, sizeof(command));
 8003138:	2280      	movs	r2, #128	@ 0x80
 800313a:	483d      	ldr	r0, [pc, #244]	@ (8003230 <main+0x47c>)
 800313c:	a926      	add	r1, sp, #152	@ 0x98
 800313e:	f7ff fbd9 	bl	80028f4 <uart_fifo_get_command>
				if (r > 0) {
 8003142:	2800      	cmp	r0, #0
 8003144:	dd6a      	ble.n	800321c <main+0x468>
					uart_write(command);
 8003146:	a826      	add	r0, sp, #152	@ 0x98
					cb_parse_cmd(command, &cmd);
 8003148:	ac46      	add	r4, sp, #280	@ 0x118
					uart_write(command);
 800314a:	f7ff fc25 	bl	8002998 <uart_write>
					cb_parse_cmd(command, &cmd);
 800314e:	0021      	movs	r1, r4
 8003150:	a826      	add	r0, sp, #152	@ 0x98
 8003152:	f7ff f85b 	bl	800220c <cb_parse_cmd>
					memset(command, 0, 64);
 8003156:	2240      	movs	r2, #64	@ 0x40
 8003158:	2100      	movs	r1, #0
 800315a:	a826      	add	r0, sp, #152	@ 0x98
 800315c:	f003 f952 	bl	8006404 <memset>
					switch(cmd.type) {
 8003160:	7820      	ldrb	r0, [r4, #0]
 8003162:	3801      	subs	r0, #1
 8003164:	281c      	cmp	r0, #28
 8003166:	d857      	bhi.n	8003218 <main+0x464>
 8003168:	f7fc ffdc 	bl	8000124 <__gnu_thumb1_case_uqi>
 800316c:	28191713 	.word	0x28191713
 8003170:	37353331 	.word	0x37353331
 8003174:	56465656 	.word	0x56465656
 8003178:	56565656 	.word	0x56565656
 800317c:	56505656 	.word	0x56505656
 8003180:	50505656 	.word	0x50505656
 8003184:	52505050 	.word	0x52505050
 8003188:	54          	.byte	0x54
 8003189:	00          	.byte	0x00
	colors[index][0] = (uint8_t)(r * brightness / 255);
 800318a:	701f      	strb	r7, [r3, #0]
	colors[index][1] = (uint8_t)(g * brightness / 255);
 800318c:	7058      	strb	r0, [r3, #1]
	colors[index][2] = (uint8_t)(b * brightness / 255);
 800318e:	7098      	strb	r0, [r3, #2]
}
 8003190:	e78a      	b.n	80030a8 <main+0x2f4>
						case CB_CMD_PING:      uart_write("OK PING\r\n"); break;
 8003192:	482f      	ldr	r0, [pc, #188]	@ (8003250 <main+0x49c>)
						default: uart_write("ERR CMD\r\n"); break;
 8003194:	f7ff fc00 	bl	8002998 <uart_write>
 8003198:	e789      	b.n	80030ae <main+0x2fa>
						case CB_CMD_VER_Q:     uart_write("OK FW=FW1.0.0 HW=PCBv1\r\n"); break;
 800319a:	482e      	ldr	r0, [pc, #184]	@ (8003254 <main+0x4a0>)
 800319c:	e7fa      	b.n	8003194 <main+0x3e0>
static inline uint32_t t_ms(void){ return HAL_GetTick(); }
 800319e:	f000 fa41 	bl	8003624 <HAL_GetTick>
						case CB_CMD_TIME_Q:   { char o[48]; int n=snprintf(o,sizeof o,"OK TIME %lu\r\n",(unsigned long)t_ms()); uart_write_n(o,(size_t)n); } break;
 80031a2:	2130      	movs	r1, #48	@ 0x30
static inline uint32_t t_ms(void){ return HAL_GetTick(); }
 80031a4:	0003      	movs	r3, r0
						case CB_CMD_TIME_Q:   { char o[48]; int n=snprintf(o,sizeof o,"OK TIME %lu\r\n",(unsigned long)t_ms()); uart_write_n(o,(size_t)n); } break;
 80031a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003258 <main+0x4a4>)
																		char o[32]; int n=snprintf(o,sizeof o,"OK READ SQ %s 0\r\n",sq); uart_write_n(o,(size_t)n); } break;
 80031a8:	a80a      	add	r0, sp, #40	@ 0x28
 80031aa:	f003 f8a9 	bl	8006300 <sniprintf>
static void uart_write_n(const char *s, size_t n){ HAL_UART_Transmit(&huart2,(uint8_t*)s,(uint16_t)n,100); }
 80031ae:	2364      	movs	r3, #100	@ 0x64
 80031b0:	b282      	uxth	r2, r0
 80031b2:	a90a      	add	r1, sp, #40	@ 0x28
 80031b4:	4825      	ldr	r0, [pc, #148]	@ (800324c <main+0x498>)
 80031b6:	f002 fd04 	bl	8005bc2 <HAL_UART_Transmit>
																		char o[32]; int n=snprintf(o,sizeof o,"OK READ SQ %s 0\r\n",sq); uart_write_n(o,(size_t)n); } break;
 80031ba:	e778      	b.n	80030ae <main+0x2fa>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80031bc:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c0:	4b26      	ldr	r3, [pc, #152]	@ (800325c <main+0x4a8>)
 80031c2:	4a27      	ldr	r2, [pc, #156]	@ (8003260 <main+0x4ac>)
 80031c4:	60da      	str	r2, [r3, #12]
 80031c6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80031ca:	46c0      	nop			@ (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 80031cc:	e7fd      	b.n	80031ca <main+0x416>
						case CB_CMD_SAVE:      uart_write("OK SAVE\r\n"); break;
 80031ce:	4825      	ldr	r0, [pc, #148]	@ (8003264 <main+0x4b0>)
 80031d0:	e7e0      	b.n	8003194 <main+0x3e0>
						case CB_CMD_STREAM:    /* cmd.u.stream.on */ uart_write("OK STREAM\r\n"); break;
 80031d2:	4825      	ldr	r0, [pc, #148]	@ (8003268 <main+0x4b4>)
 80031d4:	e7de      	b.n	8003194 <main+0x3e0>
						case CB_CMD_READ_ALL:  uart_write("OK READ ALL 0x0000000000000000\r\n"); break;
 80031d6:	4825      	ldr	r0, [pc, #148]	@ (800326c <main+0x4b8>)
 80031d8:	e7dc      	b.n	8003194 <main+0x3e0>
    *file = (uint8_t)(idx % 8u);
 80031da:	2207      	movs	r2, #7
    out[0] = (char)('A'+f); out[1]=(char)('1'+r); out[2]='\0';
 80031dc:	4669      	mov	r1, sp
						case CB_CMD_READ_SQ:  { char sq[3]; cb_sq_to_str(cmd.u.read_sq.idx,sq);
 80031de:	7a23      	ldrb	r3, [r4, #8]
    *file = (uint8_t)(idx % 8u);
 80031e0:	401a      	ands	r2, r3
    *rank = (uint8_t)(idx / 8u);
 80031e2:	08db      	lsrs	r3, r3, #3
    out[0] = (char)('A'+f); out[1]=(char)('1'+r); out[2]='\0';
 80031e4:	3331      	adds	r3, #49	@ 0x31
 80031e6:	734b      	strb	r3, [r1, #13]
 80031e8:	2300      	movs	r3, #0
 80031ea:	3241      	adds	r2, #65	@ 0x41
 80031ec:	730a      	strb	r2, [r1, #12]
 80031ee:	738b      	strb	r3, [r1, #14]
																		char o[32]; int n=snprintf(o,sizeof o,"OK READ SQ %s 0\r\n",sq); uart_write_n(o,(size_t)n); } break;
 80031f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003270 <main+0x4bc>)
 80031f2:	2120      	movs	r1, #32
 80031f4:	ab03      	add	r3, sp, #12
 80031f6:	e7d7      	b.n	80031a8 <main+0x3f4>
						case CB_CMD_LED_SET:       led_set(cmd.u.led_set.idx, cmd.u.led_set.r, cmd.u.led_set.g, cmd.u.led_set.b, colors, GLOBAL_BRIGHTNESS); uart_write("OK\r\n"); break;
 80031f8:	7ae3      	ldrb	r3, [r4, #11]
 80031fa:	7aa2      	ldrb	r2, [r4, #10]
 80031fc:	7a61      	ldrb	r1, [r4, #9]
 80031fe:	7a20      	ldrb	r0, [r4, #8]
 8003200:	2408      	movs	r4, #8
 8003202:	9401      	str	r4, [sp, #4]
 8003204:	ac6d      	add	r4, sp, #436	@ 0x1b4
 8003206:	9400      	str	r4, [sp, #0]
 8003208:	f7ff fd09 	bl	8002c1e <led_set>
						case CB_CMD_LED_MAP_HEX:   /* cmd.u.led_map_hex.hex192 */ uart_write("OK\r\n"); break;
 800320c:	4819      	ldr	r0, [pc, #100]	@ (8003274 <main+0x4c0>)
 800320e:	e7c1      	b.n	8003194 <main+0x3e0>
						case CB_CMD_CFG_Q:         uart_write("OK CFG\r\n"); break;
 8003210:	4819      	ldr	r0, [pc, #100]	@ (8003278 <main+0x4c4>)
 8003212:	e7bf      	b.n	8003194 <main+0x3e0>
						case CB_CMD_CFG_GET:       uart_write("OK CFG VAL\r\n"); break;
 8003214:	4819      	ldr	r0, [pc, #100]	@ (800327c <main+0x4c8>)
 8003216:	e7bd      	b.n	8003194 <main+0x3e0>
						default: uart_write("ERR CMD\r\n"); break;
 8003218:	4819      	ldr	r0, [pc, #100]	@ (8003280 <main+0x4cc>)
 800321a:	e7bb      	b.n	8003194 <main+0x3e0>
				} else if (r == -1) {
 800321c:	3001      	adds	r0, #1
 800321e:	d000      	beq.n	8003222 <main+0x46e>
 8003220:	e74c      	b.n	80030bc <main+0x308>
						uart_write(command);
 8003222:	a826      	add	r0, sp, #152	@ 0x98
 8003224:	f7ff fbb8 	bl	8002998 <uart_write>
 8003228:	e748      	b.n	80030bc <main+0x308>
 800322a:	46c0      	nop			@ (mov r8, r8)
 800322c:	20000284 	.word	0x20000284
 8003230:	2000007c 	.word	0x2000007c
 8003234:	00000271 	.word	0x00000271
 8003238:	00000272 	.word	0x00000272
 800323c:	00000273 	.word	0x00000273
 8003240:	20000078 	.word	0x20000078
 8003244:	800000ff 	.word	0x800000ff
 8003248:	ffffff00 	.word	0xffffff00
 800324c:	20000288 	.word	0x20000288
 8003250:	08006e9e 	.word	0x08006e9e
 8003254:	08006ea8 	.word	0x08006ea8
 8003258:	08006ec1 	.word	0x08006ec1
 800325c:	e000ed00 	.word	0xe000ed00
 8003260:	05fa0004 	.word	0x05fa0004
 8003264:	08006ecf 	.word	0x08006ecf
 8003268:	08006ed9 	.word	0x08006ed9
 800326c:	08006ee5 	.word	0x08006ee5
 8003270:	08006f06 	.word	0x08006f06
 8003274:	08006f18 	.word	0x08006f18
 8003278:	08006f1d 	.word	0x08006f1d
 800327c:	08006f26 	.word	0x08006f26
 8003280:	08006f33 	.word	0x08006f33

08003284 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8003284:	b672      	cpsid	i
  while (1)
 8003286:	e7fe      	b.n	8003286 <Error_Handler+0x2>

08003288 <rgb_update_buffer>:

// -------------------------------------------------------------------
// Fill the buffer PWM depending on the table "colors"
// -------------------------------------------------------------------
void rgb_update_buffer(uint16_t *pwm_data, uint8_t colors[][3])
{
 8003288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        uint32_t color = ((uint32_t)colors[led][1] << 16) |  // R
        				 ((uint32_t)colors[led][0] << 8) |  // G
                         ((uint32_t)colors[led][2] << 0);  // R
        for(int i = 0; i < 24; i++)
        {
            if(color & (1 << (23-i)))
 800328a:	230d      	movs	r3, #13
{
 800328c:	2400      	movs	r4, #0
            if(color & (1 << (23-i)))
 800328e:	469c      	mov	ip, r3
        uint32_t color = ((uint32_t)colors[led][1] << 16) |  // R
 8003290:	2517      	movs	r5, #23
 8003292:	784b      	ldrb	r3, [r1, #1]
        				 ((uint32_t)colors[led][0] << 8) |  // G
 8003294:	780a      	ldrb	r2, [r1, #0]
        uint32_t color = ((uint32_t)colors[led][1] << 16) |  // R
 8003296:	041b      	lsls	r3, r3, #16
        				 ((uint32_t)colors[led][0] << 8) |  // G
 8003298:	0212      	lsls	r2, r2, #8
        uint32_t color = ((uint32_t)colors[led][1] << 16) |  // R
 800329a:	4313      	orrs	r3, r2
                         ((uint32_t)colors[led][2] << 0);  // R
 800329c:	788a      	ldrb	r2, [r1, #2]
        uint32_t color = ((uint32_t)colors[led][1] << 16) |  // R
 800329e:	4313      	orrs	r3, r2
        for(int i = 0; i < 24; i++)
 80032a0:	0062      	lsls	r2, r4, #1
 80032a2:	1882      	adds	r2, r0, r2
            if(color & (1 << (23-i)))
 80032a4:	2601      	movs	r6, #1
 80032a6:	40ae      	lsls	r6, r5
 80032a8:	271a      	movs	r7, #26
 80032aa:	4233      	tst	r3, r6
 80032ac:	d100      	bne.n	80032b0 <rgb_update_buffer+0x28>
 80032ae:	4667      	mov	r7, ip
            	pwm_data[led*24 + i] = HIGH_DUTY;
 80032b0:	8017      	strh	r7, [r2, #0]
        for(int i = 0; i < 24; i++)
 80032b2:	3202      	adds	r2, #2
 80032b4:	3d01      	subs	r5, #1
 80032b6:	d2f5      	bcs.n	80032a4 <rgb_update_buffer+0x1c>
    for(int led = 0; led < LED_NUMBER; led++)
 80032b8:	23c0      	movs	r3, #192	@ 0xc0
 80032ba:	3418      	adds	r4, #24
 80032bc:	3103      	adds	r1, #3
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	429c      	cmp	r4, r3
 80032c2:	d1e5      	bne.n	8003290 <rgb_update_buffer+0x8>
    }

    // Ajoute les zéros pour le reset (>50µs)
    for(int i = 24*LED_NUMBER; i < LED_BUFFER_SIZE; i++)
    {
    	pwm_data[i] = 0;
 80032c4:	23c0      	movs	r3, #192	@ 0xc0
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	2264      	movs	r2, #100	@ 0x64
 80032ca:	2100      	movs	r1, #0
 80032cc:	18c0      	adds	r0, r0, r3
 80032ce:	f003 f899 	bl	8006404 <memset>
    }
}
 80032d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080032d4 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032d4:	2101      	movs	r1, #1
 80032d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003300 <HAL_MspInit+0x2c>)
{
 80032d8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032dc:	430a      	orrs	r2, r1
 80032de:	641a      	str	r2, [r3, #64]	@ 0x40
 80032e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032e2:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80032e4:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e6:	9200      	str	r2, [sp, #0]
 80032e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032ec:	0549      	lsls	r1, r1, #21
 80032ee:	430a      	orrs	r2, r1
 80032f0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80032f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f4:	400b      	ands	r3, r1
 80032f6:	9301      	str	r3, [sp, #4]
 80032f8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032fa:	b002      	add	sp, #8
 80032fc:	4770      	bx	lr
 80032fe:	46c0      	nop			@ (mov r8, r8)
 8003300:	40021000 	.word	0x40021000

08003304 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003304:	b510      	push	{r4, lr}
 8003306:	0004      	movs	r4, r0
 8003308:	b08e      	sub	sp, #56	@ 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800330a:	2214      	movs	r2, #20
 800330c:	2100      	movs	r1, #0
 800330e:	a803      	add	r0, sp, #12
 8003310:	f003 f878 	bl	8006404 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003314:	2218      	movs	r2, #24
 8003316:	2100      	movs	r1, #0
 8003318:	a808      	add	r0, sp, #32
 800331a:	f003 f873 	bl	8006404 <memset>
  if(hi2c->Instance==I2C1)
 800331e:	4b17      	ldr	r3, [pc, #92]	@ (800337c <HAL_I2C_MspInit+0x78>)
 8003320:	6822      	ldr	r2, [r4, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d128      	bne.n	8003378 <HAL_I2C_MspInit+0x74>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003326:	2320      	movs	r3, #32
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003328:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800332a:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800332c:	f001 f836 	bl	800439c <HAL_RCCEx_PeriphCLKConfig>
 8003330:	2800      	cmp	r0, #0
 8003332:	d001      	beq.n	8003338 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8003334:	f7ff ffa6 	bl	8003284 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003338:	2202      	movs	r2, #2
 800333a:	4c11      	ldr	r4, [pc, #68]	@ (8003380 <HAL_I2C_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800333c:	4811      	ldr	r0, [pc, #68]	@ (8003384 <HAL_I2C_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800333e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003340:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003342:	4313      	orrs	r3, r2
 8003344:	6363      	str	r3, [r4, #52]	@ 0x34
 8003346:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003348:	4013      	ands	r3, r2
 800334a:	9301      	str	r3, [sp, #4]
 800334c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 800334e:	2390      	movs	r3, #144	@ 0x90
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003354:	2312      	movs	r3, #18
 8003356:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003358:	2300      	movs	r3, #0
 800335a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800335e:	3306      	adds	r3, #6
 8003360:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003362:	f000 fb6b 	bl	8003a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003366:	2280      	movs	r2, #128	@ 0x80
 8003368:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800336a:	0392      	lsls	r2, r2, #14
 800336c:	4313      	orrs	r3, r2
 800336e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8003370:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003372:	4013      	ands	r3, r2
 8003374:	9302      	str	r3, [sp, #8]
 8003376:	9b02      	ldr	r3, [sp, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003378:	b00e      	add	sp, #56	@ 0x38
 800337a:	bd10      	pop	{r4, pc}
 800337c:	40005400 	.word	0x40005400
 8003380:	40021000 	.word	0x40021000
 8003384:	50000400 	.word	0x50000400

08003388 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003388:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(htim_base->Instance==TIM17)
 800338a:	4b1a      	ldr	r3, [pc, #104]	@ (80033f4 <HAL_TIM_Base_MspInit+0x6c>)
 800338c:	6802      	ldr	r2, [r0, #0]
{
 800338e:	0005      	movs	r5, r0
  if(htim_base->Instance==TIM17)
 8003390:	429a      	cmp	r2, r3
 8003392:	d12e      	bne.n	80033f2 <HAL_TIM_Base_MspInit+0x6a>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003394:	2180      	movs	r1, #128	@ 0x80
 8003396:	4b18      	ldr	r3, [pc, #96]	@ (80033f8 <HAL_TIM_Base_MspInit+0x70>)
 8003398:	02c9      	lsls	r1, r1, #11
 800339a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40

    /* TIM17 DMA Init */
    /* TIM17_CH1 Init */
    hdma_tim17_ch1.Instance = DMA1_Channel1;
 800339c:	4c17      	ldr	r4, [pc, #92]	@ (80033fc <HAL_TIM_Base_MspInit+0x74>)
    __HAL_RCC_TIM17_CLK_ENABLE();
 800339e:	430a      	orrs	r2, r1
 80033a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80033a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
    hdma_tim17_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80033a4:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_TIM17_CLK_ENABLE();
 80033a6:	400b      	ands	r3, r1
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	9b01      	ldr	r3, [sp, #4]
    hdma_tim17_ch1.Instance = DMA1_Channel1;
 80033ac:	4b14      	ldr	r3, [pc, #80]	@ (8003400 <HAL_TIM_Base_MspInit+0x78>)
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80033ae:	6122      	str	r2, [r4, #16]
    hdma_tim17_ch1.Instance = DMA1_Channel1;
 80033b0:	6023      	str	r3, [r4, #0]
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
 80033b2:	232f      	movs	r3, #47	@ 0x2f
 80033b4:	6063      	str	r3, [r4, #4]
    hdma_tim17_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033b6:	3b1f      	subs	r3, #31
 80033b8:	60a3      	str	r3, [r4, #8]
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033ba:	2300      	movs	r3, #0
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033bc:	1892      	adds	r2, r2, r2
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033be:	60e3      	str	r3, [r4, #12]
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033c0:	6162      	str	r2, [r4, #20]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_tim17_ch1.Init.Mode = DMA_NORMAL;
 80033c2:	61e3      	str	r3, [r4, #28]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033c4:	2280      	movs	r2, #128	@ 0x80
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80033c6:	2380      	movs	r3, #128	@ 0x80
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033c8:	00d2      	lsls	r2, r2, #3
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80033ca:	015b      	lsls	r3, r3, #5
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 80033cc:	0020      	movs	r0, r4
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033ce:	61a2      	str	r2, [r4, #24]
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80033d0:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 80033d2:	f000 f9c9 	bl	8003768 <HAL_DMA_Init>
 80033d6:	2800      	cmp	r0, #0
 80033d8:	d001      	beq.n	80033de <HAL_TIM_Base_MspInit+0x56>
    {
      Error_Handler();
 80033da:	f7ff ff53 	bl	8003284 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80033de:	2200      	movs	r2, #0
 80033e0:	2016      	movs	r0, #22
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 80033e2:	626c      	str	r4, [r5, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80033e4:	0011      	movs	r1, r2
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 80033e6:	62a5      	str	r5, [r4, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80033e8:	f000 f934 	bl	8003654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80033ec:	2016      	movs	r0, #22
 80033ee:	f000 f95b 	bl	80036a8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 80033f2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80033f4:	40014800 	.word	0x40014800
 80033f8:	40021000 	.word	0x40021000
 80033fc:	2000031c 	.word	0x2000031c
 8003400:	40020008 	.word	0x40020008

08003404 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003404:	b510      	push	{r4, lr}
 8003406:	0004      	movs	r4, r0
 8003408:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800340a:	2214      	movs	r2, #20
 800340c:	2100      	movs	r1, #0
 800340e:	a801      	add	r0, sp, #4
 8003410:	f002 fff8 	bl	8006404 <memset>
  if(htim->Instance==TIM17)
 8003414:	4b0c      	ldr	r3, [pc, #48]	@ (8003448 <HAL_TIM_MspPostInit+0x44>)
 8003416:	6822      	ldr	r2, [r4, #0]
 8003418:	429a      	cmp	r2, r3
 800341a:	d113      	bne.n	8003444 <HAL_TIM_MspPostInit+0x40>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800341c:	2101      	movs	r1, #1
 800341e:	4b0b      	ldr	r3, [pc, #44]	@ (800344c <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003420:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003422:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003424:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003426:	430a      	orrs	r2, r1
 8003428:	635a      	str	r2, [r3, #52]	@ 0x34
 800342a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800342c:	400b      	ands	r3, r1
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003432:	2380      	movs	r3, #128	@ 0x80
 8003434:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003436:	3b7e      	subs	r3, #126	@ 0x7e
 8003438:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 800343c:	3303      	adds	r3, #3
 800343e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003440:	f000 fafc 	bl	8003a3c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003444:	b006      	add	sp, #24
 8003446:	bd10      	pop	{r4, pc}
 8003448:	40014800 	.word	0x40014800
 800344c:	40021000 	.word	0x40021000

08003450 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003450:	b510      	push	{r4, lr}
 8003452:	0004      	movs	r4, r0
 8003454:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003456:	2214      	movs	r2, #20
 8003458:	2100      	movs	r1, #0
 800345a:	a803      	add	r0, sp, #12
 800345c:	f002 ffd2 	bl	8006404 <memset>
  if(huart->Instance==USART2)
 8003460:	4b14      	ldr	r3, [pc, #80]	@ (80034b4 <HAL_UART_MspInit+0x64>)
 8003462:	6822      	ldr	r2, [r4, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d123      	bne.n	80034b0 <HAL_UART_MspInit+0x60>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003468:	2180      	movs	r1, #128	@ 0x80
 800346a:	4b13      	ldr	r3, [pc, #76]	@ (80034b8 <HAL_UART_MspInit+0x68>)
 800346c:	0289      	lsls	r1, r1, #10
 800346e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003470:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8003472:	430a      	orrs	r2, r1
 8003474:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003476:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003478:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 800347a:	400a      	ands	r2, r1
 800347c:	9201      	str	r2, [sp, #4]
 800347e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003480:	2201      	movs	r2, #1
 8003482:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003484:	4311      	orrs	r1, r2
 8003486:	6359      	str	r1, [r3, #52]	@ 0x34
 8003488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800348a:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800348c:	4013      	ands	r3, r2
 800348e:	9302      	str	r3, [sp, #8]
 8003490:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003492:	230c      	movs	r3, #12
 8003494:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003496:	3b0a      	subs	r3, #10
 8003498:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800349a:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800349c:	f000 face 	bl	8003a3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80034a0:	2200      	movs	r2, #0
 80034a2:	201c      	movs	r0, #28
 80034a4:	0011      	movs	r1, r2
 80034a6:	f000 f8d5 	bl	8003654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80034aa:	201c      	movs	r0, #28
 80034ac:	f000 f8fc 	bl	80036a8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80034b0:	b008      	add	sp, #32
 80034b2:	bd10      	pop	{r4, pc}
 80034b4:	40004400 	.word	0x40004400
 80034b8:	40021000 	.word	0x40021000

080034bc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034bc:	e7fe      	b.n	80034bc <NMI_Handler>

080034be <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034be:	e7fe      	b.n	80034be <HardFault_Handler>

080034c0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80034c0:	4770      	bx	lr

080034c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80034c2:	4770      	bx	lr

080034c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034c4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034c6:	f000 f8a1 	bl	800360c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034ca:	bd10      	pop	{r4, pc}

080034cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80034cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1);
 80034ce:	4802      	ldr	r0, [pc, #8]	@ (80034d8 <DMA1_Channel1_IRQHandler+0xc>)
 80034d0:	f000 fa60 	bl	8003994 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80034d4:	bd10      	pop	{r4, pc}
 80034d6:	46c0      	nop			@ (mov r8, r8)
 80034d8:	2000031c 	.word	0x2000031c

080034dc <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80034dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80034de:	4802      	ldr	r0, [pc, #8]	@ (80034e8 <TIM17_IRQHandler+0xc>)
 80034e0:	f001 f970 	bl	80047c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80034e4:	bd10      	pop	{r4, pc}
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	20000378 	.word	0x20000378

080034ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80034ec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80034ee:	4802      	ldr	r0, [pc, #8]	@ (80034f8 <USART2_IRQHandler+0xc>)
 80034f0:	f001 fdc0 	bl	8005074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80034f4:	bd10      	pop	{r4, pc}
 80034f6:	46c0      	nop			@ (mov r8, r8)
 80034f8:	20000288 	.word	0x20000288

080034fc <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034fc:	490b      	ldr	r1, [pc, #44]	@ (800352c <_sbrk+0x30>)
 80034fe:	4a0c      	ldr	r2, [pc, #48]	@ (8003530 <_sbrk+0x34>)
{
 8003500:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003502:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003504:	490b      	ldr	r1, [pc, #44]	@ (8003534 <_sbrk+0x38>)
{
 8003506:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8003508:	6808      	ldr	r0, [r1, #0]
 800350a:	2800      	cmp	r0, #0
 800350c:	d101      	bne.n	8003512 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 800350e:	480a      	ldr	r0, [pc, #40]	@ (8003538 <_sbrk+0x3c>)
 8003510:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003512:	6808      	ldr	r0, [r1, #0]
 8003514:	18c3      	adds	r3, r0, r3
 8003516:	4293      	cmp	r3, r2
 8003518:	d906      	bls.n	8003528 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 800351a:	f002 ffa9 	bl	8006470 <__errno>
 800351e:	230c      	movs	r3, #12
 8003520:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003522:	2001      	movs	r0, #1
 8003524:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8003526:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8003528:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 800352a:	e7fc      	b.n	8003526 <_sbrk+0x2a>
 800352c:	00000400 	.word	0x00000400
 8003530:	20002000 	.word	0x20002000
 8003534:	2000041c 	.word	0x2000041c
 8003538:	20000570 	.word	0x20000570

0800353c <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800353c:	4770      	bx	lr
	...

08003540 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003540:	480d      	ldr	r0, [pc, #52]	@ (8003578 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003542:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003544:	f7ff fffa 	bl	800353c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003548:	480c      	ldr	r0, [pc, #48]	@ (800357c <LoopForever+0x6>)
  ldr r1, =_edata
 800354a:	490d      	ldr	r1, [pc, #52]	@ (8003580 <LoopForever+0xa>)
  ldr r2, =_sidata
 800354c:	4a0d      	ldr	r2, [pc, #52]	@ (8003584 <LoopForever+0xe>)
  movs r3, #0
 800354e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003550:	e002      	b.n	8003558 <LoopCopyDataInit>

08003552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003556:	3304      	adds	r3, #4

08003558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800355a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800355c:	d3f9      	bcc.n	8003552 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800355e:	4a0a      	ldr	r2, [pc, #40]	@ (8003588 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003560:	4c0a      	ldr	r4, [pc, #40]	@ (800358c <LoopForever+0x16>)
  movs r3, #0
 8003562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003564:	e001      	b.n	800356a <LoopFillZerobss>

08003566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003568:	3204      	adds	r2, #4

0800356a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800356a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800356c:	d3fb      	bcc.n	8003566 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800356e:	f002 ff85 	bl	800647c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003572:	f7ff fc1f 	bl	8002db4 <main>

08003576 <LoopForever>:

LoopForever:
  b LoopForever
 8003576:	e7fe      	b.n	8003576 <LoopForever>
  ldr   r0, =_estack
 8003578:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800357c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003580:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8003584:	08007140 	.word	0x08007140
  ldr r2, =_sbss
 8003588:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800358c:	2000056c 	.word	0x2000056c

08003590 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003590:	e7fe      	b.n	8003590 <ADC1_IRQHandler>
	...

08003594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003594:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003596:	4b10      	ldr	r3, [pc, #64]	@ (80035d8 <HAL_InitTick+0x44>)
{
 8003598:	0005      	movs	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 800359a:	7819      	ldrb	r1, [r3, #0]
 800359c:	2900      	cmp	r1, #0
 800359e:	d101      	bne.n	80035a4 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 80035a0:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 80035a2:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80035a4:	20fa      	movs	r0, #250	@ 0xfa
 80035a6:	0080      	lsls	r0, r0, #2
 80035a8:	f7fc fdd0 	bl	800014c <__udivsi3>
 80035ac:	4c0b      	ldr	r4, [pc, #44]	@ (80035dc <HAL_InitTick+0x48>)
 80035ae:	0001      	movs	r1, r0
 80035b0:	6820      	ldr	r0, [r4, #0]
 80035b2:	f7fc fdcb 	bl	800014c <__udivsi3>
 80035b6:	f000 f883 	bl	80036c0 <HAL_SYSTICK_Config>
 80035ba:	1e04      	subs	r4, r0, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035be:	2d03      	cmp	r5, #3
 80035c0:	d8ee      	bhi.n	80035a0 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035c2:	0002      	movs	r2, r0
 80035c4:	2001      	movs	r0, #1
 80035c6:	0029      	movs	r1, r5
 80035c8:	4240      	negs	r0, r0
 80035ca:	f000 f843 	bl	8003654 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035ce:	4b04      	ldr	r3, [pc, #16]	@ (80035e0 <HAL_InitTick+0x4c>)
 80035d0:	0020      	movs	r0, r4
 80035d2:	601d      	str	r5, [r3, #0]
  return status;
 80035d4:	e7e5      	b.n	80035a2 <HAL_InitTick+0xe>
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	20000004 	.word	0x20000004
 80035dc:	20000000 	.word	0x20000000
 80035e0:	20000008 	.word	0x20000008

080035e4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035e4:	2380      	movs	r3, #128	@ 0x80
 80035e6:	4a08      	ldr	r2, [pc, #32]	@ (8003608 <HAL_Init+0x24>)
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	6811      	ldr	r1, [r2, #0]
{
 80035ec:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035ee:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035f0:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035f2:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035f4:	f7ff ffce 	bl	8003594 <HAL_InitTick>
 80035f8:	1e04      	subs	r4, r0, #0
 80035fa:	d103      	bne.n	8003604 <HAL_Init+0x20>
  HAL_MspInit();
 80035fc:	f7ff fe6a 	bl	80032d4 <HAL_MspInit>
}
 8003600:	0020      	movs	r0, r4
 8003602:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8003604:	2401      	movs	r4, #1
 8003606:	e7fb      	b.n	8003600 <HAL_Init+0x1c>
 8003608:	40022000 	.word	0x40022000

0800360c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800360c:	4a03      	ldr	r2, [pc, #12]	@ (800361c <HAL_IncTick+0x10>)
 800360e:	4b04      	ldr	r3, [pc, #16]	@ (8003620 <HAL_IncTick+0x14>)
 8003610:	6811      	ldr	r1, [r2, #0]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	185b      	adds	r3, r3, r1
 8003616:	6013      	str	r3, [r2, #0]
}
 8003618:	4770      	bx	lr
 800361a:	46c0      	nop			@ (mov r8, r8)
 800361c:	20000420 	.word	0x20000420
 8003620:	20000004 	.word	0x20000004

08003624 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003624:	4b01      	ldr	r3, [pc, #4]	@ (800362c <HAL_GetTick+0x8>)
 8003626:	6818      	ldr	r0, [r3, #0]
}
 8003628:	4770      	bx	lr
 800362a:	46c0      	nop			@ (mov r8, r8)
 800362c:	20000420 	.word	0x20000420

08003630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003630:	b570      	push	{r4, r5, r6, lr}
 8003632:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003634:	f7ff fff6 	bl	8003624 <HAL_GetTick>
 8003638:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800363a:	1c63      	adds	r3, r4, #1
 800363c:	d002      	beq.n	8003644 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800363e:	4b04      	ldr	r3, [pc, #16]	@ (8003650 <HAL_Delay+0x20>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003644:	f7ff ffee 	bl	8003624 <HAL_GetTick>
 8003648:	1b40      	subs	r0, r0, r5
 800364a:	42a0      	cmp	r0, r4
 800364c:	d3fa      	bcc.n	8003644 <HAL_Delay+0x14>
  {
  }
}
 800364e:	bd70      	pop	{r4, r5, r6, pc}
 8003650:	20000004 	.word	0x20000004

08003654 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003654:	b510      	push	{r4, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003656:	24ff      	movs	r4, #255	@ 0xff
 8003658:	2203      	movs	r2, #3
 800365a:	000b      	movs	r3, r1
 800365c:	0021      	movs	r1, r4
 800365e:	4002      	ands	r2, r0
 8003660:	00d2      	lsls	r2, r2, #3
 8003662:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003664:	019b      	lsls	r3, r3, #6
 8003666:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003668:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800366a:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 800366c:	2800      	cmp	r0, #0
 800366e:	db0a      	blt.n	8003686 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003670:	24c0      	movs	r4, #192	@ 0xc0
 8003672:	4a0b      	ldr	r2, [pc, #44]	@ (80036a0 <HAL_NVIC_SetPriority+0x4c>)
 8003674:	0880      	lsrs	r0, r0, #2
 8003676:	0080      	lsls	r0, r0, #2
 8003678:	1880      	adds	r0, r0, r2
 800367a:	00a4      	lsls	r4, r4, #2
 800367c:	5902      	ldr	r2, [r0, r4]
 800367e:	400a      	ands	r2, r1
 8003680:	4313      	orrs	r3, r2
 8003682:	5103      	str	r3, [r0, r4]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8003684:	bd10      	pop	{r4, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003686:	220f      	movs	r2, #15
 8003688:	4010      	ands	r0, r2
 800368a:	3808      	subs	r0, #8
 800368c:	4a05      	ldr	r2, [pc, #20]	@ (80036a4 <HAL_NVIC_SetPriority+0x50>)
 800368e:	0880      	lsrs	r0, r0, #2
 8003690:	0080      	lsls	r0, r0, #2
 8003692:	1880      	adds	r0, r0, r2
 8003694:	69c2      	ldr	r2, [r0, #28]
 8003696:	4011      	ands	r1, r2
 8003698:	4319      	orrs	r1, r3
 800369a:	61c1      	str	r1, [r0, #28]
 800369c:	e7f2      	b.n	8003684 <HAL_NVIC_SetPriority+0x30>
 800369e:	46c0      	nop			@ (mov r8, r8)
 80036a0:	e000e100 	.word	0xe000e100
 80036a4:	e000ed00 	.word	0xe000ed00

080036a8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80036a8:	2800      	cmp	r0, #0
 80036aa:	db05      	blt.n	80036b8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ac:	231f      	movs	r3, #31
 80036ae:	4018      	ands	r0, r3
 80036b0:	3b1e      	subs	r3, #30
 80036b2:	4083      	lsls	r3, r0
 80036b4:	4a01      	ldr	r2, [pc, #4]	@ (80036bc <HAL_NVIC_EnableIRQ+0x14>)
 80036b6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80036b8:	4770      	bx	lr
 80036ba:	46c0      	nop			@ (mov r8, r8)
 80036bc:	e000e100 	.word	0xe000e100

080036c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036c0:	2280      	movs	r2, #128	@ 0x80
 80036c2:	1e43      	subs	r3, r0, #1
 80036c4:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80036c6:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d20d      	bcs.n	80036e8 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036cc:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ce:	4a07      	ldr	r2, [pc, #28]	@ (80036ec <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036d0:	4807      	ldr	r0, [pc, #28]	@ (80036f0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036d2:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036d4:	6a03      	ldr	r3, [r0, #32]
 80036d6:	0609      	lsls	r1, r1, #24
 80036d8:	021b      	lsls	r3, r3, #8
 80036da:	0a1b      	lsrs	r3, r3, #8
 80036dc:	430b      	orrs	r3, r1
 80036de:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036e0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036e2:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036e4:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036e6:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 80036e8:	4770      	bx	lr
 80036ea:	46c0      	nop			@ (mov r8, r8)
 80036ec:	e000e010 	.word	0xe000e010
 80036f0:	e000ed00 	.word	0xe000ed00

080036f4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036f6:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 80036f8:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 80036fa:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80036fc:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 80036fe:	2c00      	cmp	r4, #0
 8003700:	d002      	beq.n	8003708 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003702:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8003704:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8003706:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003708:	241c      	movs	r4, #28
 800370a:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800370c:	4e08      	ldr	r6, [pc, #32]	@ (8003730 <DMA_SetConfig+0x3c>)
 800370e:	4025      	ands	r5, r4
 8003710:	3c1b      	subs	r4, #27
 8003712:	40ac      	lsls	r4, r5
 8003714:	6877      	ldr	r7, [r6, #4]
 8003716:	433c      	orrs	r4, r7
 8003718:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800371a:	6804      	ldr	r4, [r0, #0]
 800371c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800371e:	6883      	ldr	r3, [r0, #8]
 8003720:	2b10      	cmp	r3, #16
 8003722:	d102      	bne.n	800372a <DMA_SetConfig+0x36>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003724:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003726:	60e1      	str	r1, [r4, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003728:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 800372a:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 800372c:	60e2      	str	r2, [r4, #12]
}
 800372e:	e7fb      	b.n	8003728 <DMA_SetConfig+0x34>
 8003730:	40020000 	.word	0x40020000

08003734 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003734:	b510      	push	{r4, lr}
 8003736:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003738:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800373a:	4a09      	ldr	r2, [pc, #36]	@ (8003760 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 800373c:	089b      	lsrs	r3, r3, #2
 800373e:	189b      	adds	r3, r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	6443      	str	r3, [r0, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003744:	6800      	ldr	r0, [r0, #0]
 8003746:	2114      	movs	r1, #20
 8003748:	b2c0      	uxtb	r0, r0
 800374a:	3808      	subs	r0, #8
 800374c:	f7fc fcfe 	bl	800014c <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003750:	4b04      	ldr	r3, [pc, #16]	@ (8003764 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8003752:	64a3      	str	r3, [r4, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003754:	231f      	movs	r3, #31
 8003756:	4018      	ands	r0, r3
 8003758:	3b1e      	subs	r3, #30
 800375a:	4083      	lsls	r3, r0
 800375c:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 800375e:	bd10      	pop	{r4, pc}
 8003760:	10008200 	.word	0x10008200
 8003764:	40020880 	.word	0x40020880

08003768 <HAL_DMA_Init>:
{
 8003768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800376c:	2001      	movs	r0, #1
  if (hdma == NULL)
 800376e:	2c00      	cmp	r4, #0
 8003770:	d046      	beq.n	8003800 <HAL_DMA_Init+0x98>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003772:	6825      	ldr	r5, [r4, #0]
 8003774:	4b25      	ldr	r3, [pc, #148]	@ (800380c <HAL_DMA_Init+0xa4>)
 8003776:	2114      	movs	r1, #20
 8003778:	18e8      	adds	r0, r5, r3
 800377a:	f7fc fce7 	bl	800014c <__udivsi3>
  hdma->State = HAL_DMA_STATE_BUSY;
 800377e:	2302      	movs	r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003780:	0080      	lsls	r0, r0, #2
  hdma->State = HAL_DMA_STATE_BUSY;
 8003782:	1da6      	adds	r6, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003784:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003786:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003788:	682b      	ldr	r3, [r5, #0]
 800378a:	4a21      	ldr	r2, [pc, #132]	@ (8003810 <HAL_DMA_Init+0xa8>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800378c:	68a7      	ldr	r7, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800378e:	4013      	ands	r3, r2
 8003790:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003792:	68e3      	ldr	r3, [r4, #12]
 8003794:	6921      	ldr	r1, [r4, #16]
 8003796:	433b      	orrs	r3, r7
 8003798:	430b      	orrs	r3, r1
 800379a:	6961      	ldr	r1, [r4, #20]
 800379c:	682a      	ldr	r2, [r5, #0]
 800379e:	430b      	orrs	r3, r1
 80037a0:	69a1      	ldr	r1, [r4, #24]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037a2:	0020      	movs	r0, r4
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80037a4:	430b      	orrs	r3, r1
 80037a6:	69e1      	ldr	r1, [r4, #28]
 80037a8:	430b      	orrs	r3, r1
 80037aa:	6a21      	ldr	r1, [r4, #32]
 80037ac:	430b      	orrs	r3, r1
 80037ae:	4313      	orrs	r3, r2
 80037b0:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037b2:	f7ff ffbf 	bl	8003734 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037b6:	2380      	movs	r3, #128	@ 0x80
 80037b8:	01db      	lsls	r3, r3, #7
 80037ba:	429f      	cmp	r7, r3
 80037bc:	d101      	bne.n	80037c2 <HAL_DMA_Init+0x5a>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037be:	2300      	movs	r3, #0
 80037c0:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037c2:	233f      	movs	r3, #63	@ 0x3f
 80037c4:	6862      	ldr	r2, [r4, #4]
 80037c6:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80037c8:	4013      	ands	r3, r2
 80037ca:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037cc:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80037ce:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80037d0:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037d2:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80037d4:	2a03      	cmp	r2, #3
 80037d6:	d814      	bhi.n	8003802 <HAL_DMA_Init+0x9a>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80037d8:	4a0e      	ldr	r2, [pc, #56]	@ (8003814 <HAL_DMA_Init+0xac>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80037da:	480f      	ldr	r0, [pc, #60]	@ (8003818 <HAL_DMA_Init+0xb0>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80037dc:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80037de:	2201      	movs	r2, #1
 80037e0:	3b01      	subs	r3, #1
 80037e2:	409a      	lsls	r2, r3
 80037e4:	65a2      	str	r2, [r4, #88]	@ 0x58
 80037e6:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80037e8:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80037ea:	0089      	lsls	r1, r1, #2
 80037ec:	6521      	str	r1, [r4, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80037ee:	6560      	str	r0, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80037f0:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037f2:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f4:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80037f6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f8:	63e0      	str	r0, [r4, #60]	@ 0x3c
  __HAL_UNLOCK(hdma);
 80037fa:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_READY;
 80037fc:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 80037fe:	77e0      	strb	r0, [r4, #31]
}
 8003800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->DMAmuxRequestGen = 0U;
 8003802:	2300      	movs	r3, #0
 8003804:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003806:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003808:	65a3      	str	r3, [r4, #88]	@ 0x58
 800380a:	e7f3      	b.n	80037f4 <HAL_DMA_Init+0x8c>
 800380c:	bffdfff8 	.word	0xbffdfff8
 8003810:	ffff800f 	.word	0xffff800f
 8003814:	1000823f 	.word	0x1000823f
 8003818:	40020940 	.word	0x40020940

0800381c <HAL_DMA_Start_IT>:
{
 800381c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800381e:	1d45      	adds	r5, r0, #5
{
 8003820:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8003822:	7fee      	ldrb	r6, [r5, #31]
{
 8003824:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8003826:	2002      	movs	r0, #2
 8003828:	2e01      	cmp	r6, #1
 800382a:	d033      	beq.n	8003894 <HAL_DMA_Start_IT+0x78>
 800382c:	3801      	subs	r0, #1
 800382e:	77e8      	strb	r0, [r5, #31]
  if (hdma->State == HAL_DMA_STATE_READY)
 8003830:	1da7      	adds	r7, r4, #6
 8003832:	7ffe      	ldrb	r6, [r7, #31]
 8003834:	46b4      	mov	ip, r6
 8003836:	4663      	mov	r3, ip
 8003838:	b2f6      	uxtb	r6, r6
 800383a:	9600      	str	r6, [sp, #0]
 800383c:	2600      	movs	r6, #0
 800383e:	4283      	cmp	r3, r0
 8003840:	d130      	bne.n	80038a4 <HAL_DMA_Start_IT+0x88>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003842:	3001      	adds	r0, #1
 8003844:	77f8      	strb	r0, [r7, #31]
    __HAL_DMA_DISABLE(hdma);
 8003846:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003848:	63e6      	str	r6, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 800384a:	6828      	ldr	r0, [r5, #0]
 800384c:	9b00      	ldr	r3, [sp, #0]
 800384e:	4398      	bics	r0, r3
 8003850:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003852:	9b01      	ldr	r3, [sp, #4]
 8003854:	0020      	movs	r0, r4
 8003856:	f7ff ff4d 	bl	80036f4 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800385a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800385c:	42b3      	cmp	r3, r6
 800385e:	d01a      	beq.n	8003896 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003860:	230e      	movs	r3, #14
 8003862:	682a      	ldr	r2, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003864:	4313      	orrs	r3, r2
 8003866:	602b      	str	r3, [r5, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003868:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	03d2      	lsls	r2, r2, #15
 800386e:	d504      	bpl.n	800387a <HAL_DMA_Start_IT+0x5e>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003870:	2280      	movs	r2, #128	@ 0x80
 8003872:	6819      	ldr	r1, [r3, #0]
 8003874:	0052      	lsls	r2, r2, #1
 8003876:	430a      	orrs	r2, r1
 8003878:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800387a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800387c:	2b00      	cmp	r3, #0
 800387e:	d004      	beq.n	800388a <HAL_DMA_Start_IT+0x6e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003880:	2280      	movs	r2, #128	@ 0x80
 8003882:	6819      	ldr	r1, [r3, #0]
 8003884:	0052      	lsls	r2, r2, #1
 8003886:	430a      	orrs	r2, r1
 8003888:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 800388a:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 800388c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800388e:	682a      	ldr	r2, [r5, #0]
 8003890:	4313      	orrs	r3, r2
 8003892:	602b      	str	r3, [r5, #0]
}
 8003894:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003896:	2204      	movs	r2, #4
 8003898:	682b      	ldr	r3, [r5, #0]
 800389a:	4393      	bics	r3, r2
 800389c:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800389e:	682a      	ldr	r2, [r5, #0]
 80038a0:	230a      	movs	r3, #10
 80038a2:	e7df      	b.n	8003864 <HAL_DMA_Start_IT+0x48>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80038a4:	2380      	movs	r3, #128	@ 0x80
 80038a6:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80038a8:	77ee      	strb	r6, [r5, #31]
    status = HAL_ERROR;
 80038aa:	e7f3      	b.n	8003894 <HAL_DMA_Start_IT+0x78>

080038ac <HAL_DMA_Abort>:
{
 80038ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (NULL == hdma)
 80038ae:	2800      	cmp	r0, #0
 80038b0:	d008      	beq.n	80038c4 <HAL_DMA_Abort+0x18>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80038b2:	1d84      	adds	r4, r0, #6
 80038b4:	7fe3      	ldrb	r3, [r4, #31]
 80038b6:	1d41      	adds	r1, r0, #5
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d005      	beq.n	80038c8 <HAL_DMA_Abort+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038bc:	2304      	movs	r3, #4
 80038be:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80038c0:	2300      	movs	r3, #0
 80038c2:	77cb      	strb	r3, [r1, #31]
    return HAL_ERROR;
 80038c4:	2001      	movs	r0, #1
}
 80038c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038c8:	250e      	movs	r5, #14
 80038ca:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038cc:	6c46      	ldr	r6, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ce:	6813      	ldr	r3, [r2, #0]
 80038d0:	43ab      	bics	r3, r5
 80038d2:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038d4:	6833      	ldr	r3, [r6, #0]
 80038d6:	4d10      	ldr	r5, [pc, #64]	@ (8003918 <HAL_DMA_Abort+0x6c>)
 80038d8:	402b      	ands	r3, r5
 80038da:	6033      	str	r3, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 80038dc:	2301      	movs	r3, #1
 80038de:	6816      	ldr	r6, [r2, #0]
 80038e0:	439e      	bics	r6, r3
 80038e2:	6016      	str	r6, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80038e4:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80038e6:	331b      	adds	r3, #27
 80038e8:	401a      	ands	r2, r3
 80038ea:	3b1b      	subs	r3, #27
 80038ec:	4093      	lsls	r3, r2
 80038ee:	4e0b      	ldr	r6, [pc, #44]	@ (800391c <HAL_DMA_Abort+0x70>)
 80038f0:	6877      	ldr	r7, [r6, #4]
 80038f2:	433b      	orrs	r3, r7
 80038f4:	6073      	str	r3, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038f6:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80038f8:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80038fa:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80038fc:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	402a      	ands	r2, r5
 8003906:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003908:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800390a:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800390c:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800390e:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8003910:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8003912:	77e3      	strb	r3, [r4, #31]
    __HAL_UNLOCK(hdma);
 8003914:	77c8      	strb	r0, [r1, #31]
  return HAL_OK;
 8003916:	e7d6      	b.n	80038c6 <HAL_DMA_Abort+0x1a>
 8003918:	fffffeff 	.word	0xfffffeff
 800391c:	40020000 	.word	0x40020000

08003920 <HAL_DMA_Abort_IT>:
{
 8003920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003922:	1d81      	adds	r1, r0, #6
 8003924:	7fcb      	ldrb	r3, [r1, #31]
 8003926:	2b02      	cmp	r3, #2
 8003928:	d003      	beq.n	8003932 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800392a:	2304      	movs	r3, #4
 800392c:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 800392e:	2001      	movs	r0, #1
}
 8003930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003932:	240e      	movs	r4, #14
 8003934:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003936:	271c      	movs	r7, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003938:	6813      	ldr	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800393a:	6c45      	ldr	r5, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800393c:	43a3      	bics	r3, r4
 800393e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003940:	2301      	movs	r3, #1
 8003942:	6814      	ldr	r4, [r2, #0]
 8003944:	439c      	bics	r4, r3
 8003946:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003948:	682a      	ldr	r2, [r5, #0]
 800394a:	4c10      	ldr	r4, [pc, #64]	@ (800398c <HAL_DMA_Abort_IT+0x6c>)
 800394c:	4022      	ands	r2, r4
 800394e:	602a      	str	r2, [r5, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003950:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003952:	4d0f      	ldr	r5, [pc, #60]	@ (8003990 <HAL_DMA_Abort_IT+0x70>)
 8003954:	403a      	ands	r2, r7
 8003956:	4093      	lsls	r3, r2
 8003958:	686e      	ldr	r6, [r5, #4]
 800395a:	4333      	orrs	r3, r6
 800395c:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800395e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8003960:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8003962:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003964:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003966:	2b00      	cmp	r3, #0
 8003968:	d005      	beq.n	8003976 <HAL_DMA_Abort_IT+0x56>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4022      	ands	r2, r4
 800396e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003970:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003972:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8003974:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003976:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8003978:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_READY;
 800397a:	77cb      	strb	r3, [r1, #31]
    __HAL_UNLOCK(hdma);
 800397c:	1d43      	adds	r3, r0, #5
 800397e:	77da      	strb	r2, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 8003980:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003982:	4293      	cmp	r3, r2
 8003984:	d000      	beq.n	8003988 <HAL_DMA_Abort_IT+0x68>
      hdma->XferAbortCallback(hdma);
 8003986:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003988:	2000      	movs	r0, #0
 800398a:	e7d1      	b.n	8003930 <HAL_DMA_Abort_IT+0x10>
 800398c:	fffffeff 	.word	0xfffffeff
 8003990:	40020000 	.word	0x40020000

08003994 <HAL_DMA_IRQHandler>:
{
 8003994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003996:	241c      	movs	r4, #28
 8003998:	2704      	movs	r7, #4
 800399a:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t flag_it = DMA1->ISR;
 800399c:	4a26      	ldr	r2, [pc, #152]	@ (8003a38 <HAL_DMA_IRQHandler+0xa4>)
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800399e:	4021      	ands	r1, r4
 80039a0:	003c      	movs	r4, r7
 80039a2:	408c      	lsls	r4, r1
  uint32_t flag_it = DMA1->ISR;
 80039a4:	6816      	ldr	r6, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80039a6:	6803      	ldr	r3, [r0, #0]
 80039a8:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80039aa:	4226      	tst	r6, r4
 80039ac:	d00f      	beq.n	80039ce <HAL_DMA_IRQHandler+0x3a>
 80039ae:	423d      	tst	r5, r7
 80039b0:	d00d      	beq.n	80039ce <HAL_DMA_IRQHandler+0x3a>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039b2:	6819      	ldr	r1, [r3, #0]
 80039b4:	0689      	lsls	r1, r1, #26
 80039b6:	d402      	bmi.n	80039be <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039b8:	6819      	ldr	r1, [r3, #0]
 80039ba:	43b9      	bics	r1, r7
 80039bc:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80039be:	6853      	ldr	r3, [r2, #4]
 80039c0:	431c      	orrs	r4, r3
      if (hdma->XferHalfCpltCallback != NULL)
 80039c2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80039c4:	6054      	str	r4, [r2, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d01b      	beq.n	8003a02 <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 80039ca:	4798      	blx	r3
  return;
 80039cc:	e019      	b.n	8003a02 <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80039ce:	2702      	movs	r7, #2
 80039d0:	003c      	movs	r4, r7
 80039d2:	408c      	lsls	r4, r1
 80039d4:	4226      	tst	r6, r4
 80039d6:	d015      	beq.n	8003a04 <HAL_DMA_IRQHandler+0x70>
 80039d8:	423d      	tst	r5, r7
 80039da:	d013      	beq.n	8003a04 <HAL_DMA_IRQHandler+0x70>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039dc:	6819      	ldr	r1, [r3, #0]
 80039de:	0689      	lsls	r1, r1, #26
 80039e0:	d406      	bmi.n	80039f0 <HAL_DMA_IRQHandler+0x5c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039e2:	250a      	movs	r5, #10
 80039e4:	6819      	ldr	r1, [r3, #0]
 80039e6:	43a9      	bics	r1, r5
 80039e8:	6019      	str	r1, [r3, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80039ea:	2101      	movs	r1, #1
 80039ec:	1d83      	adds	r3, r0, #6
 80039ee:	77d9      	strb	r1, [r3, #31]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80039f0:	6853      	ldr	r3, [r2, #4]
 80039f2:	431c      	orrs	r4, r3
 80039f4:	6054      	str	r4, [r2, #4]
      __HAL_UNLOCK(hdma);
 80039f6:	2200      	movs	r2, #0
 80039f8:	1d43      	adds	r3, r0, #5
 80039fa:	77da      	strb	r2, [r3, #31]
      if (hdma->XferCpltCallback != NULL)
 80039fc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d1e3      	bne.n	80039ca <HAL_DMA_IRQHandler+0x36>
}
 8003a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003a04:	2408      	movs	r4, #8
 8003a06:	0027      	movs	r7, r4
 8003a08:	408f      	lsls	r7, r1
 8003a0a:	423e      	tst	r6, r7
 8003a0c:	d0f9      	beq.n	8003a02 <HAL_DMA_IRQHandler+0x6e>
 8003a0e:	4225      	tst	r5, r4
 8003a10:	d0f7      	beq.n	8003a02 <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a12:	250e      	movs	r5, #14
 8003a14:	681c      	ldr	r4, [r3, #0]
 8003a16:	43ac      	bics	r4, r5
 8003a18:	601c      	str	r4, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	001d      	movs	r5, r3
 8003a1e:	408d      	lsls	r5, r1
 8003a20:	0029      	movs	r1, r5
 8003a22:	6854      	ldr	r4, [r2, #4]
 8003a24:	4321      	orrs	r1, r4
 8003a26:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003a28:	1d82      	adds	r2, r0, #6
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a2a:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003a2c:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8003a2e:	2200      	movs	r2, #0
 8003a30:	1d43      	adds	r3, r0, #5
 8003a32:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8003a34:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003a36:	e7e2      	b.n	80039fe <HAL_DMA_IRQHandler+0x6a>
 8003a38:	40020000 	.word	0x40020000

08003a3c <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8003a3c:	2300      	movs	r3, #0
{
 8003a3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a40:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a42:	680a      	ldr	r2, [r1, #0]
 8003a44:	0014      	movs	r4, r2
 8003a46:	40dc      	lsrs	r4, r3
 8003a48:	d101      	bne.n	8003a4e <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 8003a4a:	b005      	add	sp, #20
 8003a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a4e:	2501      	movs	r5, #1
 8003a50:	0014      	movs	r4, r2
 8003a52:	409d      	lsls	r5, r3
 8003a54:	402c      	ands	r4, r5
 8003a56:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8003a58:	422a      	tst	r2, r5
 8003a5a:	d100      	bne.n	8003a5e <HAL_GPIO_Init+0x22>
 8003a5c:	e091      	b.n	8003b82 <HAL_GPIO_Init+0x146>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a5e:	684a      	ldr	r2, [r1, #4]
 8003a60:	005f      	lsls	r7, r3, #1
 8003a62:	4694      	mov	ip, r2
 8003a64:	2203      	movs	r2, #3
 8003a66:	4664      	mov	r4, ip
 8003a68:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a6a:	2403      	movs	r4, #3
 8003a6c:	40bc      	lsls	r4, r7
 8003a6e:	43e4      	mvns	r4, r4
 8003a70:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a72:	1e54      	subs	r4, r2, #1
 8003a74:	2c01      	cmp	r4, #1
 8003a76:	d82e      	bhi.n	8003ad6 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8003a78:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a7a:	9c01      	ldr	r4, [sp, #4]
 8003a7c:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a7e:	68cc      	ldr	r4, [r1, #12]
 8003a80:	40bc      	lsls	r4, r7
 8003a82:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8003a84:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003a86:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a88:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a8a:	43ac      	bics	r4, r5
 8003a8c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a8e:	4664      	mov	r4, ip
 8003a90:	0924      	lsrs	r4, r4, #4
 8003a92:	4034      	ands	r4, r6
 8003a94:	409c      	lsls	r4, r3
 8003a96:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003a98:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8003a9a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a9c:	9c01      	ldr	r4, [sp, #4]
 8003a9e:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003aa0:	688c      	ldr	r4, [r1, #8]
 8003aa2:	40bc      	lsls	r4, r7
 8003aa4:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8003aa6:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aa8:	2a02      	cmp	r2, #2
 8003aaa:	d116      	bne.n	8003ada <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003aac:	2507      	movs	r5, #7
 8003aae:	260f      	movs	r6, #15
 8003ab0:	401d      	ands	r5, r3
 8003ab2:	00ad      	lsls	r5, r5, #2
 8003ab4:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8003ab6:	08dc      	lsrs	r4, r3, #3
 8003ab8:	00a4      	lsls	r4, r4, #2
 8003aba:	1904      	adds	r4, r0, r4
 8003abc:	9402      	str	r4, [sp, #8]
 8003abe:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ac0:	9603      	str	r6, [sp, #12]
 8003ac2:	0026      	movs	r6, r4
 8003ac4:	9c03      	ldr	r4, [sp, #12]
 8003ac6:	43a6      	bics	r6, r4
 8003ac8:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003aca:	690e      	ldr	r6, [r1, #16]
 8003acc:	40ae      	lsls	r6, r5
 8003ace:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8003ad0:	9c02      	ldr	r4, [sp, #8]
 8003ad2:	6226      	str	r6, [r4, #32]
 8003ad4:	e001      	b.n	8003ada <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ad6:	2a03      	cmp	r2, #3
 8003ad8:	d1df      	bne.n	8003a9a <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ada:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8003adc:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ade:	9d01      	ldr	r5, [sp, #4]
 8003ae0:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ae2:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ae4:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8003ae6:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ae8:	4662      	mov	r2, ip
 8003aea:	02a4      	lsls	r4, r4, #10
 8003aec:	4222      	tst	r2, r4
 8003aee:	d048      	beq.n	8003b82 <HAL_GPIO_Init+0x146>
        temp = EXTI->EXTICR[position >> 2u];
 8003af0:	4a25      	ldr	r2, [pc, #148]	@ (8003b88 <HAL_GPIO_Init+0x14c>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003af2:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 8003af4:	089c      	lsrs	r4, r3, #2
 8003af6:	00a4      	lsls	r4, r4, #2
 8003af8:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003afa:	220f      	movs	r2, #15
 8003afc:	401d      	ands	r5, r3
 8003afe:	00ed      	lsls	r5, r5, #3
 8003b00:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003b02:	27a0      	movs	r7, #160	@ 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 8003b04:	6e26      	ldr	r6, [r4, #96]	@ 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003b06:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003b08:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	42b8      	cmp	r0, r7
 8003b0e:	d00c      	beq.n	8003b2a <HAL_GPIO_Init+0xee>
 8003b10:	4f1e      	ldr	r7, [pc, #120]	@ (8003b8c <HAL_GPIO_Init+0x150>)
 8003b12:	3201      	adds	r2, #1
 8003b14:	42b8      	cmp	r0, r7
 8003b16:	d008      	beq.n	8003b2a <HAL_GPIO_Init+0xee>
 8003b18:	4f1d      	ldr	r7, [pc, #116]	@ (8003b90 <HAL_GPIO_Init+0x154>)
 8003b1a:	3201      	adds	r2, #1
 8003b1c:	42b8      	cmp	r0, r7
 8003b1e:	d004      	beq.n	8003b2a <HAL_GPIO_Init+0xee>
 8003b20:	4f1c      	ldr	r7, [pc, #112]	@ (8003b94 <HAL_GPIO_Init+0x158>)
 8003b22:	3203      	adds	r2, #3
 8003b24:	42b8      	cmp	r0, r7
 8003b26:	d100      	bne.n	8003b2a <HAL_GPIO_Init+0xee>
 8003b28:	3a02      	subs	r2, #2
 8003b2a:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b2c:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003b2e:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 8003b30:	6622      	str	r2, [r4, #96]	@ 0x60
        temp = EXTI->RTSR1;
 8003b32:	4c15      	ldr	r4, [pc, #84]	@ (8003b88 <HAL_GPIO_Init+0x14c>)
        temp &= ~(iocurrent);
 8003b34:	9a00      	ldr	r2, [sp, #0]
        temp = EXTI->RTSR1;
 8003b36:	6826      	ldr	r6, [r4, #0]
          temp |= iocurrent;
 8003b38:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8003b3a:	43d2      	mvns	r2, r2
          temp |= iocurrent;
 8003b3c:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b3e:	02ff      	lsls	r7, r7, #11
 8003b40:	d401      	bmi.n	8003b46 <HAL_GPIO_Init+0x10a>
        temp &= ~(iocurrent);
 8003b42:	0035      	movs	r5, r6
 8003b44:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b46:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 8003b48:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8003b4a:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 8003b4c:	9d00      	ldr	r5, [sp, #0]
 8003b4e:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b50:	02bf      	lsls	r7, r7, #10
 8003b52:	d401      	bmi.n	8003b58 <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 8003b54:	0035      	movs	r5, r6
 8003b56:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b58:	4667      	mov	r7, ip
        EXTI->FTSR1 = temp;
 8003b5a:	6065      	str	r5, [r4, #4]
        temp = EXTI->EMR1;
 8003b5c:	4c0e      	ldr	r4, [pc, #56]	@ (8003b98 <HAL_GPIO_Init+0x15c>)
          temp |= iocurrent;
 8003b5e:	9d00      	ldr	r5, [sp, #0]
        temp = EXTI->EMR1;
 8003b60:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 8003b62:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b64:	03bf      	lsls	r7, r7, #14
 8003b66:	d401      	bmi.n	8003b6c <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 8003b68:	0035      	movs	r5, r6
 8003b6a:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b6c:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 8003b6e:	67e5      	str	r5, [r4, #124]	@ 0x7c
        temp = EXTI->IMR1;
 8003b70:	4c0a      	ldr	r4, [pc, #40]	@ (8003b9c <HAL_GPIO_Init+0x160>)
          temp |= iocurrent;
 8003b72:	9e00      	ldr	r6, [sp, #0]
        temp = EXTI->IMR1;
 8003b74:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 8003b76:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b78:	03ff      	lsls	r7, r7, #15
 8003b7a:	d401      	bmi.n	8003b80 <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 8003b7c:	4015      	ands	r5, r2
 8003b7e:	002e      	movs	r6, r5
        EXTI->IMR1 = temp;
 8003b80:	67e6      	str	r6, [r4, #124]	@ 0x7c
    position++;
 8003b82:	3301      	adds	r3, #1
 8003b84:	e75d      	b.n	8003a42 <HAL_GPIO_Init+0x6>
 8003b86:	46c0      	nop			@ (mov r8, r8)
 8003b88:	40021800 	.word	0x40021800
 8003b8c:	50000400 	.word	0x50000400
 8003b90:	50000800 	.word	0x50000800
 8003b94:	50000c00 	.word	0x50000c00
 8003b98:	40021808 	.word	0x40021808
 8003b9c:	40021804 	.word	0x40021804

08003ba0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003ba0:	6900      	ldr	r0, [r0, #16]
 8003ba2:	4008      	ands	r0, r1
 8003ba4:	1e43      	subs	r3, r0, #1
 8003ba6:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8003ba8:	b2c0      	uxtb	r0, r0
}
 8003baa:	4770      	bx	lr

08003bac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bac:	2a00      	cmp	r2, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bb0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bb2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bb4:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8003bb6:	e7fc      	b.n	8003bb2 <HAL_GPIO_WritePin+0x6>

08003bb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bb8:	b570      	push	{r4, r5, r6, lr}
 8003bba:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 8003bbc:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8003bbe:	2c00      	cmp	r4, #0
 8003bc0:	d04e      	beq.n	8003c60 <HAL_I2C_Init+0xa8>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bc2:	0025      	movs	r5, r4
 8003bc4:	3541      	adds	r5, #65	@ 0x41
 8003bc6:	782b      	ldrb	r3, [r5, #0]
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d105      	bne.n	8003bda <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bce:	0023      	movs	r3, r4
 8003bd0:	3340      	adds	r3, #64	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bd2:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8003bd4:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8003bd6:	f7ff fb95 	bl	8003304 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bda:	2324      	movs	r3, #36	@ 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bdc:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bde:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8003be0:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003be2:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8003be4:	681a      	ldr	r2, [r3, #0]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003be6:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8003be8:	438a      	bics	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bec:	491d      	ldr	r1, [pc, #116]	@ (8003c64 <HAL_I2C_Init+0xac>)
 8003bee:	6862      	ldr	r2, [r4, #4]
 8003bf0:	400a      	ands	r2, r1
 8003bf2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	491c      	ldr	r1, [pc, #112]	@ (8003c68 <HAL_I2C_Init+0xb0>)
 8003bf8:	400a      	ands	r2, r1
 8003bfa:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bfc:	2801      	cmp	r0, #1
 8003bfe:	d107      	bne.n	8003c10 <HAL_I2C_Init+0x58>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c00:	2280      	movs	r2, #128	@ 0x80
 8003c02:	0212      	lsls	r2, r2, #8
 8003c04:	4332      	orrs	r2, r6
 8003c06:	609a      	str	r2, [r3, #8]
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	4818      	ldr	r0, [pc, #96]	@ (8003c6c <HAL_I2C_Init+0xb4>)
 8003c0c:	4002      	ands	r2, r0
 8003c0e:	e009      	b.n	8003c24 <HAL_I2C_Init+0x6c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c10:	2284      	movs	r2, #132	@ 0x84
 8003c12:	0212      	lsls	r2, r2, #8
 8003c14:	4332      	orrs	r2, r6
 8003c16:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c18:	2802      	cmp	r0, #2
 8003c1a:	d1f5      	bne.n	8003c08 <HAL_I2C_Init+0x50>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c1c:	2280      	movs	r2, #128	@ 0x80
 8003c1e:	6858      	ldr	r0, [r3, #4]
 8003c20:	0112      	lsls	r2, r2, #4
 8003c22:	4302      	orrs	r2, r0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c26:	6858      	ldr	r0, [r3, #4]
 8003c28:	4a11      	ldr	r2, [pc, #68]	@ (8003c70 <HAL_I2C_Init+0xb8>)
 8003c2a:	4302      	orrs	r2, r0
 8003c2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c2e:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c30:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c32:	400a      	ands	r2, r1
 8003c34:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c36:	6961      	ldr	r1, [r4, #20]
 8003c38:	6922      	ldr	r2, [r4, #16]
 8003c3a:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c3c:	69a1      	ldr	r1, [r4, #24]
 8003c3e:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c40:	430a      	orrs	r2, r1
 8003c42:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c44:	6a21      	ldr	r1, [r4, #32]
 8003c46:	69e2      	ldr	r2, [r4, #28]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	6819      	ldr	r1, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003c54:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c56:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c58:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c5a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5c:	3442      	adds	r4, #66	@ 0x42
 8003c5e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003c60:	bd70      	pop	{r4, r5, r6, pc}
 8003c62:	46c0      	nop			@ (mov r8, r8)
 8003c64:	f0ffffff 	.word	0xf0ffffff
 8003c68:	ffff7fff 	.word	0xffff7fff
 8003c6c:	fffff7ff 	.word	0xfffff7ff
 8003c70:	02008000 	.word	0x02008000

08003c74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c74:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c76:	0004      	movs	r4, r0
 8003c78:	3441      	adds	r4, #65	@ 0x41
 8003c7a:	7822      	ldrb	r2, [r4, #0]
{
 8003c7c:	0003      	movs	r3, r0
 8003c7e:	000f      	movs	r7, r1
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c80:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c82:	b2d6      	uxtb	r6, r2
 8003c84:	2a20      	cmp	r2, #32
 8003c86:	d118      	bne.n	8003cba <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8003c88:	001d      	movs	r5, r3
 8003c8a:	3540      	adds	r5, #64	@ 0x40
 8003c8c:	782a      	ldrb	r2, [r5, #0]
 8003c8e:	2a01      	cmp	r2, #1
 8003c90:	d013      	beq.n	8003cba <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c92:	2224      	movs	r2, #36	@ 0x24
 8003c94:	7022      	strb	r2, [r4, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3a23      	subs	r2, #35	@ 0x23
 8003c9a:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c9c:	4807      	ldr	r0, [pc, #28]	@ (8003cbc <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8003c9e:	4391      	bics	r1, r2
 8003ca0:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ca2:	6819      	ldr	r1, [r3, #0]
 8003ca4:	4001      	ands	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca6:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ca8:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8003caa:	6819      	ldr	r1, [r3, #0]
 8003cac:	4339      	orrs	r1, r7
 8003cae:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003cb0:	6819      	ldr	r1, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003cb6:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8003cb8:	7028      	strb	r0, [r5, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cbc:	ffffefff 	.word	0xffffefff

08003cc0 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc0:	0002      	movs	r2, r0
{
 8003cc2:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc4:	3241      	adds	r2, #65	@ 0x41
 8003cc6:	7814      	ldrb	r4, [r2, #0]
{
 8003cc8:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cca:	b2e5      	uxtb	r5, r4
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ccc:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cce:	2c20      	cmp	r4, #32
 8003cd0:	d117      	bne.n	8003d02 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8003cd2:	001c      	movs	r4, r3
 8003cd4:	3440      	adds	r4, #64	@ 0x40
 8003cd6:	7826      	ldrb	r6, [r4, #0]
 8003cd8:	2e01      	cmp	r6, #1
 8003cda:	d012      	beq.n	8003d02 <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cdc:	3022      	adds	r0, #34	@ 0x22
 8003cde:	7010      	strb	r0, [r2, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3823      	subs	r0, #35	@ 0x23
 8003ce4:	681e      	ldr	r6, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ce6:	4f07      	ldr	r7, [pc, #28]	@ (8003d04 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8003ce8:	4386      	bics	r6, r0
 8003cea:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8003cec:	681e      	ldr	r6, [r3, #0]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cee:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8003cf0:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8003cf2:	4331      	orrs	r1, r6

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cf4:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cf6:	6819      	ldr	r1, [r3, #0]
 8003cf8:	4308      	orrs	r0, r1
 8003cfa:	6018      	str	r0, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cfc:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003cfe:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003d00:	7020      	strb	r0, [r4, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d04:	fffff0ff 	.word	0xfffff0ff

08003d08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d08:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003d0a:	4c11      	ldr	r4, [pc, #68]	@ (8003d50 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8003d0c:	4911      	ldr	r1, [pc, #68]	@ (8003d54 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8003d0e:	6823      	ldr	r3, [r4, #0]
{
 8003d10:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003d12:	400b      	ands	r3, r1
 8003d14:	4303      	orrs	r3, r0
 8003d16:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d18:	2380      	movs	r3, #128	@ 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003d1a:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d10e      	bne.n	8003d40 <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003d22:	4b0d      	ldr	r3, [pc, #52]	@ (8003d58 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8003d24:	490d      	ldr	r1, [pc, #52]	@ (8003d5c <HAL_PWREx_ControlVoltageScaling+0x54>)
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	2306      	movs	r3, #6
 8003d2a:	4358      	muls	r0, r3
 8003d2c:	f7fc fa0e 	bl	800014c <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d30:	2280      	movs	r2, #128	@ 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003d32:	1c43      	adds	r3, r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d34:	00d2      	lsls	r2, r2, #3
 8003d36:	6961      	ldr	r1, [r4, #20]
 8003d38:	0008      	movs	r0, r1
 8003d3a:	4010      	ands	r0, r2
 8003d3c:	4211      	tst	r1, r2
 8003d3e:	d100      	bne.n	8003d42 <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 8003d40:	bd10      	pop	{r4, pc}
      if (wait_loop_index != 0U)
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 8003d46:	3b01      	subs	r3, #1
 8003d48:	e7f5      	b.n	8003d36 <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 8003d4a:	2003      	movs	r0, #3
 8003d4c:	e7f8      	b.n	8003d40 <HAL_PWREx_ControlVoltageScaling+0x38>
 8003d4e:	46c0      	nop			@ (mov r8, r8)
 8003d50:	40007000 	.word	0x40007000
 8003d54:	fffff9ff 	.word	0xfffff9ff
 8003d58:	20000000 	.word	0x20000000
 8003d5c:	000f4240 	.word	0x000f4240

08003d60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d62:	0004      	movs	r4, r0
 8003d64:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d66:	2800      	cmp	r0, #0
 8003d68:	d102      	bne.n	8003d70 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8003d6a:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8003d6c:	b005      	add	sp, #20
 8003d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d70:	6803      	ldr	r3, [r0, #0]
 8003d72:	07db      	lsls	r3, r3, #31
 8003d74:	d410      	bmi.n	8003d98 <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d76:	6823      	ldr	r3, [r4, #0]
 8003d78:	079b      	lsls	r3, r3, #30
 8003d7a:	d45c      	bmi.n	8003e36 <HAL_RCC_OscConfig+0xd6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d7c:	6823      	ldr	r3, [r4, #0]
 8003d7e:	071b      	lsls	r3, r3, #28
 8003d80:	d500      	bpl.n	8003d84 <HAL_RCC_OscConfig+0x24>
 8003d82:	e0c1      	b.n	8003f08 <HAL_RCC_OscConfig+0x1a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	075b      	lsls	r3, r3, #29
 8003d88:	d500      	bpl.n	8003d8c <HAL_RCC_OscConfig+0x2c>
 8003d8a:	e0f2      	b.n	8003f72 <HAL_RCC_OscConfig+0x212>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d8c:	69e3      	ldr	r3, [r4, #28]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d000      	beq.n	8003d94 <HAL_RCC_OscConfig+0x34>
 8003d92:	e179      	b.n	8004088 <HAL_RCC_OscConfig+0x328>
  return HAL_OK;
 8003d94:	2000      	movs	r0, #0
 8003d96:	e7e9      	b.n	8003d6c <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d98:	2238      	movs	r2, #56	@ 0x38
 8003d9a:	4daf      	ldr	r5, [pc, #700]	@ (8004058 <HAL_RCC_OscConfig+0x2f8>)
 8003d9c:	68ab      	ldr	r3, [r5, #8]
 8003d9e:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003da0:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003da2:	2b10      	cmp	r3, #16
 8003da4:	d109      	bne.n	8003dba <HAL_RCC_OscConfig+0x5a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003da6:	43d3      	mvns	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003da8:	079b      	lsls	r3, r3, #30
 8003daa:	d108      	bne.n	8003dbe <HAL_RCC_OscConfig+0x5e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dac:	682b      	ldr	r3, [r5, #0]
 8003dae:	039b      	lsls	r3, r3, #14
 8003db0:	d5e1      	bpl.n	8003d76 <HAL_RCC_OscConfig+0x16>
 8003db2:	6863      	ldr	r3, [r4, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1de      	bne.n	8003d76 <HAL_RCC_OscConfig+0x16>
 8003db8:	e7d7      	b.n	8003d6a <HAL_RCC_OscConfig+0xa>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d0f6      	beq.n	8003dac <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dbe:	2280      	movs	r2, #128	@ 0x80
 8003dc0:	6863      	ldr	r3, [r4, #4]
 8003dc2:	0252      	lsls	r2, r2, #9
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d111      	bne.n	8003dec <HAL_RCC_OscConfig+0x8c>
 8003dc8:	682a      	ldr	r2, [r5, #0]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003dce:	f7ff fc29 	bl	8003624 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dd2:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8003dd4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dd6:	02bf      	lsls	r7, r7, #10
 8003dd8:	682b      	ldr	r3, [r5, #0]
 8003dda:	423b      	tst	r3, r7
 8003ddc:	d1cb      	bne.n	8003d76 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dde:	f7ff fc21 	bl	8003624 <HAL_GetTick>
 8003de2:	1b80      	subs	r0, r0, r6
 8003de4:	2864      	cmp	r0, #100	@ 0x64
 8003de6:	d9f7      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8003de8:	2003      	movs	r0, #3
 8003dea:	e7bf      	b.n	8003d6c <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dec:	21a0      	movs	r1, #160	@ 0xa0
 8003dee:	02c9      	lsls	r1, r1, #11
 8003df0:	428b      	cmp	r3, r1
 8003df2:	d108      	bne.n	8003e06 <HAL_RCC_OscConfig+0xa6>
 8003df4:	2380      	movs	r3, #128	@ 0x80
 8003df6:	6829      	ldr	r1, [r5, #0]
 8003df8:	02db      	lsls	r3, r3, #11
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	602b      	str	r3, [r5, #0]
 8003dfe:	682b      	ldr	r3, [r5, #0]
 8003e00:	431a      	orrs	r2, r3
 8003e02:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e04:	e7e3      	b.n	8003dce <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e06:	682a      	ldr	r2, [r5, #0]
 8003e08:	4994      	ldr	r1, [pc, #592]	@ (800405c <HAL_RCC_OscConfig+0x2fc>)
 8003e0a:	400a      	ands	r2, r1
 8003e0c:	602a      	str	r2, [r5, #0]
 8003e0e:	682a      	ldr	r2, [r5, #0]
 8003e10:	4993      	ldr	r1, [pc, #588]	@ (8004060 <HAL_RCC_OscConfig+0x300>)
 8003e12:	400a      	ands	r2, r1
 8003e14:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1d9      	bne.n	8003dce <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8003e1a:	f7ff fc03 	bl	8003624 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e1e:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8003e20:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e22:	02bf      	lsls	r7, r7, #10
 8003e24:	682b      	ldr	r3, [r5, #0]
 8003e26:	423b      	tst	r3, r7
 8003e28:	d0a5      	beq.n	8003d76 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e2a:	f7ff fbfb 	bl	8003624 <HAL_GetTick>
 8003e2e:	1b80      	subs	r0, r0, r6
 8003e30:	2864      	cmp	r0, #100	@ 0x64
 8003e32:	d9f7      	bls.n	8003e24 <HAL_RCC_OscConfig+0xc4>
 8003e34:	e7d8      	b.n	8003de8 <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e36:	2238      	movs	r2, #56	@ 0x38
 8003e38:	4d87      	ldr	r5, [pc, #540]	@ (8004058 <HAL_RCC_OscConfig+0x2f8>)
 8003e3a:	68ab      	ldr	r3, [r5, #8]
 8003e3c:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e3e:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003e40:	2b10      	cmp	r3, #16
 8003e42:	d128      	bne.n	8003e96 <HAL_RCC_OscConfig+0x136>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e44:	2103      	movs	r1, #3
 8003e46:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003e48:	2a02      	cmp	r2, #2
 8003e4a:	d126      	bne.n	8003e9a <HAL_RCC_OscConfig+0x13a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e4c:	682a      	ldr	r2, [r5, #0]
 8003e4e:	0552      	lsls	r2, r2, #21
 8003e50:	d503      	bpl.n	8003e5a <HAL_RCC_OscConfig+0xfa>
 8003e52:	68e2      	ldr	r2, [r4, #12]
 8003e54:	2a00      	cmp	r2, #0
 8003e56:	d100      	bne.n	8003e5a <HAL_RCC_OscConfig+0xfa>
 8003e58:	e787      	b.n	8003d6a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5a:	6869      	ldr	r1, [r5, #4]
 8003e5c:	6962      	ldr	r2, [r4, #20]
 8003e5e:	4881      	ldr	r0, [pc, #516]	@ (8004064 <HAL_RCC_OscConfig+0x304>)
 8003e60:	0212      	lsls	r2, r2, #8
 8003e62:	4001      	ands	r1, r0
 8003e64:	430a      	orrs	r2, r1
 8003e66:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10c      	bne.n	8003e86 <HAL_RCC_OscConfig+0x126>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e6c:	682b      	ldr	r3, [r5, #0]
 8003e6e:	4a7e      	ldr	r2, [pc, #504]	@ (8004068 <HAL_RCC_OscConfig+0x308>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003e70:	497e      	ldr	r1, [pc, #504]	@ (800406c <HAL_RCC_OscConfig+0x30c>)
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e72:	4013      	ands	r3, r2
 8003e74:	6922      	ldr	r2, [r4, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003e7a:	682b      	ldr	r3, [r5, #0]
 8003e7c:	4a7c      	ldr	r2, [pc, #496]	@ (8004070 <HAL_RCC_OscConfig+0x310>)
 8003e7e:	049b      	lsls	r3, r3, #18
 8003e80:	0f5b      	lsrs	r3, r3, #29
 8003e82:	40da      	lsrs	r2, r3
 8003e84:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e86:	4b7b      	ldr	r3, [pc, #492]	@ (8004074 <HAL_RCC_OscConfig+0x314>)
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	f7ff fb83 	bl	8003594 <HAL_InitTick>
 8003e8e:	2800      	cmp	r0, #0
 8003e90:	d100      	bne.n	8003e94 <HAL_RCC_OscConfig+0x134>
 8003e92:	e773      	b.n	8003d7c <HAL_RCC_OscConfig+0x1c>
 8003e94:	e769      	b.n	8003d6a <HAL_RCC_OscConfig+0xa>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0d8      	beq.n	8003e4c <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e9a:	68e3      	ldr	r3, [r4, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d020      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003ea0:	682b      	ldr	r3, [r5, #0]
 8003ea2:	4a71      	ldr	r2, [pc, #452]	@ (8004068 <HAL_RCC_OscConfig+0x308>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ea4:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eaa:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003eac:	4313      	orrs	r3, r2
 8003eae:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8003eb0:	2380      	movs	r3, #128	@ 0x80
 8003eb2:	682a      	ldr	r2, [r5, #0]
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003eba:	f7ff fbb3 	bl	8003624 <HAL_GetTick>
 8003ebe:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ec0:	682b      	ldr	r3, [r5, #0]
 8003ec2:	423b      	tst	r3, r7
 8003ec4:	d007      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x176>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec6:	686a      	ldr	r2, [r5, #4]
 8003ec8:	6963      	ldr	r3, [r4, #20]
 8003eca:	4966      	ldr	r1, [pc, #408]	@ (8004064 <HAL_RCC_OscConfig+0x304>)
 8003ecc:	021b      	lsls	r3, r3, #8
 8003ece:	400a      	ands	r2, r1
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	606b      	str	r3, [r5, #4]
 8003ed4:	e752      	b.n	8003d7c <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed6:	f7ff fba5 	bl	8003624 <HAL_GetTick>
 8003eda:	1b80      	subs	r0, r0, r6
 8003edc:	2802      	cmp	r0, #2
 8003ede:	d9ef      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x160>
 8003ee0:	e782      	b.n	8003de8 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8003ee2:	682b      	ldr	r3, [r5, #0]
 8003ee4:	4a64      	ldr	r2, [pc, #400]	@ (8004078 <HAL_RCC_OscConfig+0x318>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ee6:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8003ee8:	4013      	ands	r3, r2
 8003eea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003eec:	f7ff fb9a 	bl	8003624 <HAL_GetTick>
 8003ef0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ef2:	00ff      	lsls	r7, r7, #3
 8003ef4:	682b      	ldr	r3, [r5, #0]
 8003ef6:	423b      	tst	r3, r7
 8003ef8:	d100      	bne.n	8003efc <HAL_RCC_OscConfig+0x19c>
 8003efa:	e73f      	b.n	8003d7c <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003efc:	f7ff fb92 	bl	8003624 <HAL_GetTick>
 8003f00:	1b80      	subs	r0, r0, r6
 8003f02:	2802      	cmp	r0, #2
 8003f04:	d9f6      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x194>
 8003f06:	e76f      	b.n	8003de8 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003f08:	2238      	movs	r2, #56	@ 0x38
 8003f0a:	4d53      	ldr	r5, [pc, #332]	@ (8004058 <HAL_RCC_OscConfig+0x2f8>)
 8003f0c:	68ab      	ldr	r3, [r5, #8]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2b18      	cmp	r3, #24
 8003f12:	d108      	bne.n	8003f26 <HAL_RCC_OscConfig+0x1c6>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003f14:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8003f16:	079b      	lsls	r3, r3, #30
 8003f18:	d400      	bmi.n	8003f1c <HAL_RCC_OscConfig+0x1bc>
 8003f1a:	e733      	b.n	8003d84 <HAL_RCC_OscConfig+0x24>
 8003f1c:	69a3      	ldr	r3, [r4, #24]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d000      	beq.n	8003f24 <HAL_RCC_OscConfig+0x1c4>
 8003f22:	e72f      	b.n	8003d84 <HAL_RCC_OscConfig+0x24>
 8003f24:	e721      	b.n	8003d6a <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f26:	69a2      	ldr	r2, [r4, #24]
 8003f28:	2301      	movs	r3, #1
 8003f2a:	2a00      	cmp	r2, #0
 8003f2c:	d010      	beq.n	8003f50 <HAL_RCC_OscConfig+0x1f0>
        __HAL_RCC_LSI_ENABLE();
 8003f2e:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f30:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8003f32:	4313      	orrs	r3, r2
 8003f34:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003f36:	f7ff fb75 	bl	8003624 <HAL_GetTick>
 8003f3a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f3c:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8003f3e:	423b      	tst	r3, r7
 8003f40:	d000      	beq.n	8003f44 <HAL_RCC_OscConfig+0x1e4>
 8003f42:	e71f      	b.n	8003d84 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f44:	f7ff fb6e 	bl	8003624 <HAL_GetTick>
 8003f48:	1b80      	subs	r0, r0, r6
 8003f4a:	2802      	cmp	r0, #2
 8003f4c:	d9f6      	bls.n	8003f3c <HAL_RCC_OscConfig+0x1dc>
 8003f4e:	e74b      	b.n	8003de8 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_LSI_DISABLE();
 8003f50:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f52:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8003f54:	439a      	bics	r2, r3
 8003f56:	662a      	str	r2, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003f58:	f7ff fb64 	bl	8003624 <HAL_GetTick>
 8003f5c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f5e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8003f60:	423b      	tst	r3, r7
 8003f62:	d100      	bne.n	8003f66 <HAL_RCC_OscConfig+0x206>
 8003f64:	e70e      	b.n	8003d84 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f66:	f7ff fb5d 	bl	8003624 <HAL_GetTick>
 8003f6a:	1b80      	subs	r0, r0, r6
 8003f6c:	2802      	cmp	r0, #2
 8003f6e:	d9f6      	bls.n	8003f5e <HAL_RCC_OscConfig+0x1fe>
 8003f70:	e73a      	b.n	8003de8 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003f72:	2238      	movs	r2, #56	@ 0x38
 8003f74:	4d38      	ldr	r5, [pc, #224]	@ (8004058 <HAL_RCC_OscConfig+0x2f8>)
 8003f76:	68ab      	ldr	r3, [r5, #8]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	2b20      	cmp	r3, #32
 8003f7c:	d108      	bne.n	8003f90 <HAL_RCC_OscConfig+0x230>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003f7e:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8003f80:	079b      	lsls	r3, r3, #30
 8003f82:	d400      	bmi.n	8003f86 <HAL_RCC_OscConfig+0x226>
 8003f84:	e702      	b.n	8003d8c <HAL_RCC_OscConfig+0x2c>
 8003f86:	68a3      	ldr	r3, [r4, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d000      	beq.n	8003f8e <HAL_RCC_OscConfig+0x22e>
 8003f8c:	e6fe      	b.n	8003d8c <HAL_RCC_OscConfig+0x2c>
 8003f8e:	e6ec      	b.n	8003d6a <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f90:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003f92:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f94:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8003f96:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 8003f98:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f9a:	4213      	tst	r3, r2
 8003f9c:	d108      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x250>
        __HAL_RCC_PWR_CLK_ENABLE();
 8003f9e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8003fa4:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	9303      	str	r3, [sp, #12]
 8003faa:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8003fac:	2301      	movs	r3, #1
 8003fae:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb0:	2780      	movs	r7, #128	@ 0x80
 8003fb2:	4e32      	ldr	r6, [pc, #200]	@ (800407c <HAL_RCC_OscConfig+0x31c>)
 8003fb4:	007f      	lsls	r7, r7, #1
 8003fb6:	6833      	ldr	r3, [r6, #0]
 8003fb8:	423b      	tst	r3, r7
 8003fba:	d015      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fbc:	68a3      	ldr	r3, [r4, #8]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d122      	bne.n	8004008 <HAL_RCC_OscConfig+0x2a8>
 8003fc2:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	65eb      	str	r3, [r5, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 8003fc8:	f7ff fb2c 	bl	8003624 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fcc:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8003fce:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fd0:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8003fd2:	423b      	tst	r3, r7
 8003fd4:	d038      	beq.n	8004048 <HAL_RCC_OscConfig+0x2e8>
      if (pwrclkchanged == SET)
 8003fd6:	9b00      	ldr	r3, [sp, #0]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d000      	beq.n	8003fde <HAL_RCC_OscConfig+0x27e>
 8003fdc:	e6d6      	b.n	8003d8c <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 8003fde:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8003fe0:	4a27      	ldr	r2, [pc, #156]	@ (8004080 <HAL_RCC_OscConfig+0x320>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8003fe6:	e6d1      	b.n	8003d8c <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fe8:	6833      	ldr	r3, [r6, #0]
 8003fea:	433b      	orrs	r3, r7
 8003fec:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003fee:	f7ff fb19 	bl	8003624 <HAL_GetTick>
 8003ff2:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ff4:	6833      	ldr	r3, [r6, #0]
 8003ff6:	423b      	tst	r3, r7
 8003ff8:	d1e0      	bne.n	8003fbc <HAL_RCC_OscConfig+0x25c>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffa:	f7ff fb13 	bl	8003624 <HAL_GetTick>
 8003ffe:	9b01      	ldr	r3, [sp, #4]
 8004000:	1ac0      	subs	r0, r0, r3
 8004002:	2802      	cmp	r0, #2
 8004004:	d9f6      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x294>
 8004006:	e6ef      	b.n	8003de8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004008:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 800400a:	2b05      	cmp	r3, #5
 800400c:	d105      	bne.n	800401a <HAL_RCC_OscConfig+0x2ba>
 800400e:	3b01      	subs	r3, #1
 8004010:	4313      	orrs	r3, r2
 8004012:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8004014:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8004016:	2301      	movs	r3, #1
 8004018:	e7d4      	b.n	8003fc4 <HAL_RCC_OscConfig+0x264>
 800401a:	2101      	movs	r1, #1
 800401c:	438a      	bics	r2, r1
 800401e:	65ea      	str	r2, [r5, #92]	@ 0x5c
 8004020:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8004022:	3103      	adds	r1, #3
 8004024:	438a      	bics	r2, r1
 8004026:	65ea      	str	r2, [r5, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1cd      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x268>
        tickstart = HAL_GetTick();
 800402c:	f7ff fafa 	bl	8003624 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004030:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8004032:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004034:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8004036:	423b      	tst	r3, r7
 8004038:	d0cd      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x276>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800403a:	f7ff faf3 	bl	8003624 <HAL_GetTick>
 800403e:	4b11      	ldr	r3, [pc, #68]	@ (8004084 <HAL_RCC_OscConfig+0x324>)
 8004040:	1b80      	subs	r0, r0, r6
 8004042:	4298      	cmp	r0, r3
 8004044:	d9f6      	bls.n	8004034 <HAL_RCC_OscConfig+0x2d4>
 8004046:	e6cf      	b.n	8003de8 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004048:	f7ff faec 	bl	8003624 <HAL_GetTick>
 800404c:	4b0d      	ldr	r3, [pc, #52]	@ (8004084 <HAL_RCC_OscConfig+0x324>)
 800404e:	1b80      	subs	r0, r0, r6
 8004050:	4298      	cmp	r0, r3
 8004052:	d9bd      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x270>
 8004054:	e6c8      	b.n	8003de8 <HAL_RCC_OscConfig+0x88>
 8004056:	46c0      	nop			@ (mov r8, r8)
 8004058:	40021000 	.word	0x40021000
 800405c:	fffeffff 	.word	0xfffeffff
 8004060:	fffbffff 	.word	0xfffbffff
 8004064:	ffff80ff 	.word	0xffff80ff
 8004068:	ffffc7ff 	.word	0xffffc7ff
 800406c:	20000000 	.word	0x20000000
 8004070:	00f42400 	.word	0x00f42400
 8004074:	20000008 	.word	0x20000008
 8004078:	fffffeff 	.word	0xfffffeff
 800407c:	40007000 	.word	0x40007000
 8004080:	efffffff 	.word	0xefffffff
 8004084:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004088:	2138      	movs	r1, #56	@ 0x38
 800408a:	4d3f      	ldr	r5, [pc, #252]	@ (8004188 <HAL_RCC_OscConfig+0x428>)
 800408c:	68aa      	ldr	r2, [r5, #8]
 800408e:	400a      	ands	r2, r1
 8004090:	2a10      	cmp	r2, #16
 8004092:	d051      	beq.n	8004138 <HAL_RCC_OscConfig+0x3d8>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004094:	4a3d      	ldr	r2, [pc, #244]	@ (800418c <HAL_RCC_OscConfig+0x42c>)
 8004096:	2b02      	cmp	r3, #2
 8004098:	d138      	bne.n	800410c <HAL_RCC_OscConfig+0x3ac>
        __HAL_RCC_PLL_DISABLE();
 800409a:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800409c:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 800409e:	4013      	ands	r3, r2
 80040a0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80040a2:	f7ff fabf 	bl	8003624 <HAL_GetTick>
 80040a6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040a8:	04bf      	lsls	r7, r7, #18
 80040aa:	682b      	ldr	r3, [r5, #0]
 80040ac:	423b      	tst	r3, r7
 80040ae:	d127      	bne.n	8004100 <HAL_RCC_OscConfig+0x3a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040b0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80040b2:	6a23      	ldr	r3, [r4, #32]
 80040b4:	68ea      	ldr	r2, [r5, #12]
 80040b6:	430b      	orrs	r3, r1
 80040b8:	4935      	ldr	r1, [pc, #212]	@ (8004190 <HAL_RCC_OscConfig+0x430>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ba:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040bc:	400a      	ands	r2, r1
 80040be:	4313      	orrs	r3, r2
 80040c0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040c2:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040c4:	4313      	orrs	r3, r2
 80040c6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80040c8:	4313      	orrs	r3, r2
 80040ca:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80040cc:	0212      	lsls	r2, r2, #8
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80040d2:	2380      	movs	r3, #128	@ 0x80
 80040d4:	682a      	ldr	r2, [r5, #0]
 80040d6:	045b      	lsls	r3, r3, #17
 80040d8:	4313      	orrs	r3, r2
 80040da:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80040dc:	2380      	movs	r3, #128	@ 0x80
 80040de:	68ea      	ldr	r2, [r5, #12]
 80040e0:	055b      	lsls	r3, r3, #21
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80040e6:	f7ff fa9d 	bl	8003624 <HAL_GetTick>
 80040ea:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ec:	682b      	ldr	r3, [r5, #0]
 80040ee:	4233      	tst	r3, r6
 80040f0:	d000      	beq.n	80040f4 <HAL_RCC_OscConfig+0x394>
 80040f2:	e64f      	b.n	8003d94 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f4:	f7ff fa96 	bl	8003624 <HAL_GetTick>
 80040f8:	1b00      	subs	r0, r0, r4
 80040fa:	2802      	cmp	r0, #2
 80040fc:	d9f6      	bls.n	80040ec <HAL_RCC_OscConfig+0x38c>
 80040fe:	e673      	b.n	8003de8 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004100:	f7ff fa90 	bl	8003624 <HAL_GetTick>
 8004104:	1b80      	subs	r0, r0, r6
 8004106:	2802      	cmp	r0, #2
 8004108:	d9cf      	bls.n	80040aa <HAL_RCC_OscConfig+0x34a>
 800410a:	e66d      	b.n	8003de8 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_PLL_DISABLE();
 800410c:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800410e:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8004110:	4013      	ands	r3, r2
 8004112:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004114:	f7ff fa86 	bl	8003624 <HAL_GetTick>
 8004118:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800411a:	04b6      	lsls	r6, r6, #18
 800411c:	682b      	ldr	r3, [r5, #0]
 800411e:	4233      	tst	r3, r6
 8004120:	d104      	bne.n	800412c <HAL_RCC_OscConfig+0x3cc>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004122:	68eb      	ldr	r3, [r5, #12]
 8004124:	4a1b      	ldr	r2, [pc, #108]	@ (8004194 <HAL_RCC_OscConfig+0x434>)
 8004126:	4013      	ands	r3, r2
 8004128:	60eb      	str	r3, [r5, #12]
 800412a:	e633      	b.n	8003d94 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800412c:	f7ff fa7a 	bl	8003624 <HAL_GetTick>
 8004130:	1b00      	subs	r0, r0, r4
 8004132:	2802      	cmp	r0, #2
 8004134:	d9f2      	bls.n	800411c <HAL_RCC_OscConfig+0x3bc>
 8004136:	e657      	b.n	8003de8 <HAL_RCC_OscConfig+0x88>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004138:	2b01      	cmp	r3, #1
 800413a:	d100      	bne.n	800413e <HAL_RCC_OscConfig+0x3de>
 800413c:	e615      	b.n	8003d6a <HAL_RCC_OscConfig+0xa>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800413e:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8004140:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004142:	6a21      	ldr	r1, [r4, #32]
 8004144:	4002      	ands	r2, r0
 8004146:	428a      	cmp	r2, r1
 8004148:	d000      	beq.n	800414c <HAL_RCC_OscConfig+0x3ec>
 800414a:	e60e      	b.n	8003d6a <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800414c:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004150:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004152:	428a      	cmp	r2, r1
 8004154:	d000      	beq.n	8004158 <HAL_RCC_OscConfig+0x3f8>
 8004156:	e608      	b.n	8003d6a <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004158:	21fe      	movs	r1, #254	@ 0xfe
 800415a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800415c:	01c9      	lsls	r1, r1, #7
 800415e:	4001      	ands	r1, r0
 8004160:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004162:	4291      	cmp	r1, r2
 8004164:	d000      	beq.n	8004168 <HAL_RCC_OscConfig+0x408>
 8004166:	e600      	b.n	8003d6a <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004168:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800416a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800416c:	0392      	lsls	r2, r2, #14
 800416e:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004170:	428a      	cmp	r2, r1
 8004172:	d000      	beq.n	8004176 <HAL_RCC_OscConfig+0x416>
 8004174:	e5f9      	b.n	8003d6a <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004176:	6b23      	ldr	r3, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004178:	0f40      	lsrs	r0, r0, #29
 800417a:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800417c:	1ac0      	subs	r0, r0, r3
 800417e:	1e43      	subs	r3, r0, #1
 8004180:	4198      	sbcs	r0, r3
 8004182:	b2c0      	uxtb	r0, r0
 8004184:	e5f2      	b.n	8003d6c <HAL_RCC_OscConfig+0xc>
 8004186:	46c0      	nop			@ (mov r8, r8)
 8004188:	40021000 	.word	0x40021000
 800418c:	feffffff 	.word	0xfeffffff
 8004190:	1fc1808c 	.word	0x1fc1808c
 8004194:	effefffc 	.word	0xeffefffc

08004198 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004198:	2338      	movs	r3, #56	@ 0x38
{
 800419a:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800419c:	4c1d      	ldr	r4, [pc, #116]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x7c>)
 800419e:	68a2      	ldr	r2, [r4, #8]
 80041a0:	421a      	tst	r2, r3
 80041a2:	d105      	bne.n	80041b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80041a4:	6823      	ldr	r3, [r4, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80041a6:	481c      	ldr	r0, [pc, #112]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x80>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80041a8:	049b      	lsls	r3, r3, #18
 80041aa:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 80041ac:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80041ae:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041b0:	68a2      	ldr	r2, [r4, #8]
 80041b2:	401a      	ands	r2, r3
 80041b4:	2a08      	cmp	r2, #8
 80041b6:	d027      	beq.n	8004208 <HAL_RCC_GetSysClockFreq+0x70>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041b8:	68a2      	ldr	r2, [r4, #8]
 80041ba:	401a      	ands	r2, r3
 80041bc:	2a10      	cmp	r2, #16
 80041be:	d117      	bne.n	80041f0 <HAL_RCC_GetSysClockFreq+0x58>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80041c0:	68e3      	ldr	r3, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041c2:	68e1      	ldr	r1, [r4, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80041c4:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80041c6:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041c8:	0649      	lsls	r1, r1, #25
 80041ca:	0f49      	lsrs	r1, r1, #29
 80041cc:	326f      	adds	r2, #111	@ 0x6f
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80041ce:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041d0:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80041d2:	4015      	ands	r5, r2
    switch (pllsource)
 80041d4:	079b      	lsls	r3, r3, #30
 80041d6:	d109      	bne.n	80041ec <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041d8:	4810      	ldr	r0, [pc, #64]	@ (800421c <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80041da:	f7fb ffb7 	bl	800014c <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80041de:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80041e0:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80041e2:	0f49      	lsrs	r1, r1, #29
 80041e4:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 80041e6:	f7fb ffb1 	bl	800014c <__udivsi3>
 80041ea:	e7e0      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80041ec:	480a      	ldr	r0, [pc, #40]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x80>)
 80041ee:	e7f4      	b.n	80041da <HAL_RCC_GetSysClockFreq+0x42>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80041f0:	68a2      	ldr	r2, [r4, #8]
 80041f2:	401a      	ands	r2, r3
 80041f4:	2a20      	cmp	r2, #32
 80041f6:	d009      	beq.n	800420c <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80041f8:	68a2      	ldr	r2, [r4, #8]
    sysclockfreq = 0U;
 80041fa:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80041fc:	4013      	ands	r3, r2
 80041fe:	2b18      	cmp	r3, #24
 8004200:	d1d5      	bne.n	80041ae <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSI_VALUE;
 8004202:	20fa      	movs	r0, #250	@ 0xfa
 8004204:	01c0      	lsls	r0, r0, #7
 8004206:	e7d2      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8004208:	4804      	ldr	r0, [pc, #16]	@ (800421c <HAL_RCC_GetSysClockFreq+0x84>)
 800420a:	e7d0      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 800420c:	2080      	movs	r0, #128	@ 0x80
 800420e:	0200      	lsls	r0, r0, #8
 8004210:	e7cd      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x16>
 8004212:	46c0      	nop			@ (mov r8, r8)
 8004214:	40021000 	.word	0x40021000
 8004218:	00f42400 	.word	0x00f42400
 800421c:	007a1200 	.word	0x007a1200

08004220 <HAL_RCC_ClockConfig>:
{
 8004220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004222:	0004      	movs	r4, r0
 8004224:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8004226:	2800      	cmp	r0, #0
 8004228:	d101      	bne.n	800422e <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800422a:	2001      	movs	r0, #1
}
 800422c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800422e:	2707      	movs	r7, #7
 8004230:	4e48      	ldr	r6, [pc, #288]	@ (8004354 <HAL_RCC_ClockConfig+0x134>)
 8004232:	6833      	ldr	r3, [r6, #0]
 8004234:	403b      	ands	r3, r7
 8004236:	428b      	cmp	r3, r1
 8004238:	d32a      	bcc.n	8004290 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800423a:	6822      	ldr	r2, [r4, #0]
 800423c:	0793      	lsls	r3, r2, #30
 800423e:	d43b      	bmi.n	80042b8 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004240:	07d2      	lsls	r2, r2, #31
 8004242:	d448      	bmi.n	80042d6 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004244:	2707      	movs	r7, #7
 8004246:	6833      	ldr	r3, [r6, #0]
 8004248:	403b      	ands	r3, r7
 800424a:	42ab      	cmp	r3, r5
 800424c:	d90a      	bls.n	8004264 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	6833      	ldr	r3, [r6, #0]
 8004250:	43bb      	bics	r3, r7
 8004252:	432b      	orrs	r3, r5
 8004254:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004256:	f7ff f9e5 	bl	8003624 <HAL_GetTick>
 800425a:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800425c:	6833      	ldr	r3, [r6, #0]
 800425e:	403b      	ands	r3, r7
 8004260:	42ab      	cmp	r3, r5
 8004262:	d168      	bne.n	8004336 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	4d3c      	ldr	r5, [pc, #240]	@ (8004358 <HAL_RCC_ClockConfig+0x138>)
 8004268:	075b      	lsls	r3, r3, #29
 800426a:	d46c      	bmi.n	8004346 <HAL_RCC_ClockConfig+0x126>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800426c:	f7ff ff94 	bl	8004198 <HAL_RCC_GetSysClockFreq>
 8004270:	68ab      	ldr	r3, [r5, #8]
 8004272:	493a      	ldr	r1, [pc, #232]	@ (800435c <HAL_RCC_ClockConfig+0x13c>)
 8004274:	051b      	lsls	r3, r3, #20
 8004276:	0f1b      	lsrs	r3, r3, #28
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	585b      	ldr	r3, [r3, r1]
 800427c:	211f      	movs	r1, #31
 800427e:	400b      	ands	r3, r1
 8004280:	40d8      	lsrs	r0, r3
 8004282:	4a37      	ldr	r2, [pc, #220]	@ (8004360 <HAL_RCC_ClockConfig+0x140>)
  return HAL_InitTick(uwTickPrio);
 8004284:	4b37      	ldr	r3, [pc, #220]	@ (8004364 <HAL_RCC_ClockConfig+0x144>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004286:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	f7ff f983 	bl	8003594 <HAL_InitTick>
 800428e:	e7cd      	b.n	800422c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004290:	6833      	ldr	r3, [r6, #0]
 8004292:	43bb      	bics	r3, r7
 8004294:	430b      	orrs	r3, r1
 8004296:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004298:	f7ff f9c4 	bl	8003624 <HAL_GetTick>
 800429c:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800429e:	6833      	ldr	r3, [r6, #0]
 80042a0:	403b      	ands	r3, r7
 80042a2:	42ab      	cmp	r3, r5
 80042a4:	d0c9      	beq.n	800423a <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042a6:	f7ff f9bd 	bl	8003624 <HAL_GetTick>
 80042aa:	9b01      	ldr	r3, [sp, #4]
 80042ac:	1ac0      	subs	r0, r0, r3
 80042ae:	4b2e      	ldr	r3, [pc, #184]	@ (8004368 <HAL_RCC_ClockConfig+0x148>)
 80042b0:	4298      	cmp	r0, r3
 80042b2:	d9f4      	bls.n	800429e <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 80042b4:	2003      	movs	r0, #3
 80042b6:	e7b9      	b.n	800422c <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b8:	4927      	ldr	r1, [pc, #156]	@ (8004358 <HAL_RCC_ClockConfig+0x138>)
 80042ba:	0753      	lsls	r3, r2, #29
 80042bc:	d504      	bpl.n	80042c8 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80042be:	23e0      	movs	r3, #224	@ 0xe0
 80042c0:	6888      	ldr	r0, [r1, #8]
 80042c2:	01db      	lsls	r3, r3, #7
 80042c4:	4303      	orrs	r3, r0
 80042c6:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042c8:	688b      	ldr	r3, [r1, #8]
 80042ca:	4828      	ldr	r0, [pc, #160]	@ (800436c <HAL_RCC_ClockConfig+0x14c>)
 80042cc:	4003      	ands	r3, r0
 80042ce:	68a0      	ldr	r0, [r4, #8]
 80042d0:	4303      	orrs	r3, r0
 80042d2:	608b      	str	r3, [r1, #8]
 80042d4:	e7b4      	b.n	8004240 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042d6:	6860      	ldr	r0, [r4, #4]
 80042d8:	4f1f      	ldr	r7, [pc, #124]	@ (8004358 <HAL_RCC_ClockConfig+0x138>)
 80042da:	2803      	cmp	r0, #3
 80042dc:	d829      	bhi.n	8004332 <HAL_RCC_ClockConfig+0x112>
 80042de:	f7fb ff21 	bl	8000124 <__gnu_thumb1_case_uqi>
 80042e2:	0220      	.short	0x0220
 80042e4:	241c      	.short	0x241c
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	039b      	lsls	r3, r3, #14
 80042ea:	d59e      	bpl.n	800422a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042ec:	2207      	movs	r2, #7
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	4393      	bics	r3, r2
 80042f2:	4303      	orrs	r3, r0
 80042f4:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 80042f6:	f7ff f995 	bl	8003624 <HAL_GetTick>
 80042fa:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fc:	2338      	movs	r3, #56	@ 0x38
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	401a      	ands	r2, r3
 8004302:	6863      	ldr	r3, [r4, #4]
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	429a      	cmp	r2, r3
 8004308:	d09c      	beq.n	8004244 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800430a:	f7ff f98b 	bl	8003624 <HAL_GetTick>
 800430e:	9b01      	ldr	r3, [sp, #4]
 8004310:	1ac0      	subs	r0, r0, r3
 8004312:	4b15      	ldr	r3, [pc, #84]	@ (8004368 <HAL_RCC_ClockConfig+0x148>)
 8004314:	4298      	cmp	r0, r3
 8004316:	d9f1      	bls.n	80042fc <HAL_RCC_ClockConfig+0xdc>
 8004318:	e7cc      	b.n	80042b4 <HAL_RCC_ClockConfig+0x94>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	019b      	lsls	r3, r3, #6
 800431e:	d4e5      	bmi.n	80042ec <HAL_RCC_ClockConfig+0xcc>
 8004320:	e783      	b.n	800422a <HAL_RCC_ClockConfig+0xa>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	055b      	lsls	r3, r3, #21
 8004326:	d4e1      	bmi.n	80042ec <HAL_RCC_ClockConfig+0xcc>
 8004328:	e77f      	b.n	800422a <HAL_RCC_ClockConfig+0xa>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800432a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800432c:	079b      	lsls	r3, r3, #30
 800432e:	d4dd      	bmi.n	80042ec <HAL_RCC_ClockConfig+0xcc>
 8004330:	e77b      	b.n	800422a <HAL_RCC_ClockConfig+0xa>
 8004332:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004334:	e7fa      	b.n	800432c <HAL_RCC_ClockConfig+0x10c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004336:	f7ff f975 	bl	8003624 <HAL_GetTick>
 800433a:	9b01      	ldr	r3, [sp, #4]
 800433c:	1ac0      	subs	r0, r0, r3
 800433e:	4b0a      	ldr	r3, [pc, #40]	@ (8004368 <HAL_RCC_ClockConfig+0x148>)
 8004340:	4298      	cmp	r0, r3
 8004342:	d98b      	bls.n	800425c <HAL_RCC_ClockConfig+0x3c>
 8004344:	e7b6      	b.n	80042b4 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004346:	68ab      	ldr	r3, [r5, #8]
 8004348:	4a09      	ldr	r2, [pc, #36]	@ (8004370 <HAL_RCC_ClockConfig+0x150>)
 800434a:	4013      	ands	r3, r2
 800434c:	68e2      	ldr	r2, [r4, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	60ab      	str	r3, [r5, #8]
 8004352:	e78b      	b.n	800426c <HAL_RCC_ClockConfig+0x4c>
 8004354:	40022000 	.word	0x40022000
 8004358:	40021000 	.word	0x40021000
 800435c:	08006fd0 	.word	0x08006fd0
 8004360:	20000000 	.word	0x20000000
 8004364:	20000008 	.word	0x20000008
 8004368:	00001388 	.word	0x00001388
 800436c:	fffff0ff 	.word	0xfffff0ff
 8004370:	ffff8fff 	.word	0xffff8fff

08004374 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004374:	4b06      	ldr	r3, [pc, #24]	@ (8004390 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004376:	4907      	ldr	r1, [pc, #28]	@ (8004394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004378:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800437a:	4a07      	ldr	r2, [pc, #28]	@ (8004398 <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800437c:	045b      	lsls	r3, r3, #17
 800437e:	0f5b      	lsrs	r3, r3, #29
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	585b      	ldr	r3, [r3, r1]
 8004384:	211f      	movs	r1, #31
 8004386:	6810      	ldr	r0, [r2, #0]
 8004388:	400b      	ands	r3, r1
 800438a:	40d8      	lsrs	r0, r3
}
 800438c:	4770      	bx	lr
 800438e:	46c0      	nop			@ (mov r8, r8)
 8004390:	40021000 	.word	0x40021000
 8004394:	08006fb0 	.word	0x08006fb0
 8004398:	20000000 	.word	0x20000000

0800439c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800439c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800439e:	6803      	ldr	r3, [r0, #0]
{
 80043a0:	0005      	movs	r5, r0
 80043a2:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043a4:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043a6:	039b      	lsls	r3, r3, #14
 80043a8:	d551      	bpl.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xb2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043aa:	2280      	movs	r2, #128	@ 0x80
 80043ac:	4c48      	ldr	r4, [pc, #288]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043ae:	0552      	lsls	r2, r2, #21
 80043b0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80043b2:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043b4:	4213      	tst	r3, r2
 80043b6:	d108      	bne.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80043ba:	4313      	orrs	r3, r2
 80043bc:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80043be:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80043c0:	4013      	ands	r3, r2
 80043c2:	9303      	str	r3, [sp, #12]
 80043c4:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80043c6:	2301      	movs	r3, #1
 80043c8:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043ca:	2780      	movs	r7, #128	@ 0x80
 80043cc:	4e41      	ldr	r6, [pc, #260]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80043ce:	007f      	lsls	r7, r7, #1
 80043d0:	6833      	ldr	r3, [r6, #0]
 80043d2:	433b      	orrs	r3, r7
 80043d4:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043d6:	f7ff f925 	bl	8003624 <HAL_GetTick>
 80043da:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043dc:	6833      	ldr	r3, [r6, #0]
 80043de:	423b      	tst	r3, r7
 80043e0:	d027      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x96>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043e2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80043e4:	23c0      	movs	r3, #192	@ 0xc0
 80043e6:	0010      	movs	r0, r2
 80043e8:	009b      	lsls	r3, r3, #2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043ea:	6969      	ldr	r1, [r5, #20]
 80043ec:	4e3a      	ldr	r6, [pc, #232]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043ee:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043f0:	421a      	tst	r2, r3
 80043f2:	d017      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x88>
 80043f4:	4281      	cmp	r1, r0
 80043f6:	d015      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043f8:	2280      	movs	r2, #128	@ 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043fa:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 80043fc:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043fe:	0019      	movs	r1, r3
        __HAL_RCC_BACKUPRESET_FORCE();
 8004400:	0252      	lsls	r2, r2, #9
 8004402:	4302      	orrs	r2, r0
 8004404:	65e2      	str	r2, [r4, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004406:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004408:	4834      	ldr	r0, [pc, #208]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x140>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800440a:	4031      	ands	r1, r6
        __HAL_RCC_BACKUPRESET_RELEASE();
 800440c:	4002      	ands	r2, r0
 800440e:	65e2      	str	r2, [r4, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004410:	65e1      	str	r1, [r4, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004412:	07db      	lsls	r3, r3, #31
 8004414:	d506      	bpl.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004416:	f7ff f905 	bl	8003624 <HAL_GetTick>
 800441a:	0007      	movs	r7, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800441c:	2202      	movs	r2, #2
 800441e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004420:	4213      	tst	r3, r2
 8004422:	d04d      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004424:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004426:	696a      	ldr	r2, [r5, #20]
 8004428:	4033      	ands	r3, r6
 800442a:	4313      	orrs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800442c:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800442e:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8004430:	e006      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004432:	f7ff f8f7 	bl	8003624 <HAL_GetTick>
 8004436:	9b01      	ldr	r3, [sp, #4]
 8004438:	1ac0      	subs	r0, r0, r3
 800443a:	2802      	cmp	r0, #2
 800443c:	d9ce      	bls.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x40>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800443e:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004440:	9b00      	ldr	r3, [sp, #0]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d103      	bne.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004446:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004448:	4a25      	ldr	r2, [pc, #148]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800444a:	4013      	ands	r3, r2
 800444c:	63e3      	str	r3, [r4, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800444e:	682a      	ldr	r2, [r5, #0]
 8004450:	07d3      	lsls	r3, r2, #31
 8004452:	d506      	bpl.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004454:	2403      	movs	r4, #3
 8004456:	491e      	ldr	r1, [pc, #120]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004458:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 800445a:	43a3      	bics	r3, r4
 800445c:	686c      	ldr	r4, [r5, #4]
 800445e:	4323      	orrs	r3, r4
 8004460:	654b      	str	r3, [r1, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004462:	0693      	lsls	r3, r2, #26
 8004464:	d506      	bpl.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004466:	491a      	ldr	r1, [pc, #104]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004468:	4c1e      	ldr	r4, [pc, #120]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800446a:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 800446c:	4023      	ands	r3, r4
 800446e:	68ac      	ldr	r4, [r5, #8]
 8004470:	4323      	orrs	r3, r4
 8004472:	654b      	str	r3, [r1, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004474:	0453      	lsls	r3, r2, #17
 8004476:	d50f      	bpl.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004478:	4915      	ldr	r1, [pc, #84]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800447a:	692c      	ldr	r4, [r5, #16]
 800447c:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	089b      	lsrs	r3, r3, #2
 8004482:	4323      	orrs	r3, r4
 8004484:	654b      	str	r3, [r1, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004486:	2380      	movs	r3, #128	@ 0x80
 8004488:	05db      	lsls	r3, r3, #23
 800448a:	429c      	cmp	r4, r3
 800448c:	d104      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800448e:	2380      	movs	r3, #128	@ 0x80
 8004490:	68cc      	ldr	r4, [r1, #12]
 8004492:	025b      	lsls	r3, r3, #9
 8004494:	4323      	orrs	r3, r4
 8004496:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004498:	0512      	lsls	r2, r2, #20
 800449a:	d50f      	bpl.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800449c:	4a0c      	ldr	r2, [pc, #48]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800449e:	4c12      	ldr	r4, [pc, #72]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80044a0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80044a2:	68e9      	ldr	r1, [r5, #12]
 80044a4:	4023      	ands	r3, r4
 80044a6:	430b      	orrs	r3, r1
 80044a8:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80044aa:	2380      	movs	r3, #128	@ 0x80
 80044ac:	01db      	lsls	r3, r3, #7
 80044ae:	4299      	cmp	r1, r3
 80044b0:	d104      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80044b2:	2380      	movs	r3, #128	@ 0x80
 80044b4:	68d1      	ldr	r1, [r2, #12]
 80044b6:	025b      	lsls	r3, r3, #9
 80044b8:	430b      	orrs	r3, r1
 80044ba:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 80044bc:	b005      	add	sp, #20
 80044be:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c0:	f7ff f8b0 	bl	8003624 <HAL_GetTick>
 80044c4:	4b09      	ldr	r3, [pc, #36]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80044c6:	1bc0      	subs	r0, r0, r7
 80044c8:	4298      	cmp	r0, r3
 80044ca:	d9a7      	bls.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x80>
 80044cc:	e7b7      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80044ce:	46c0      	nop			@ (mov r8, r8)
 80044d0:	40021000 	.word	0x40021000
 80044d4:	40007000 	.word	0x40007000
 80044d8:	fffffcff 	.word	0xfffffcff
 80044dc:	fffeffff 	.word	0xfffeffff
 80044e0:	efffffff 	.word	0xefffffff
 80044e4:	ffffcfff 	.word	0xffffcfff
 80044e8:	ffff3fff 	.word	0xffff3fff
 80044ec:	00001388 	.word	0x00001388

080044f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044f0:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044f2:	2401      	movs	r4, #1
  tmpccer = TIMx->CCER;
 80044f4:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044f6:	6a02      	ldr	r2, [r0, #32]
 80044f8:	43a2      	bics	r2, r4
 80044fa:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044fc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044fe:	4a12      	ldr	r2, [pc, #72]	@ (8004548 <TIM_OC1_SetConfig+0x58>)
  tmpccmrx = TIMx->CCMR1;
 8004500:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004502:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004504:	680a      	ldr	r2, [r1, #0]
 8004506:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004508:	2202      	movs	r2, #2
 800450a:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800450c:	688a      	ldr	r2, [r1, #8]
 800450e:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004510:	4a0e      	ldr	r2, [pc, #56]	@ (800454c <TIM_OC1_SetConfig+0x5c>)
 8004512:	4290      	cmp	r0, r2
 8004514:	d005      	beq.n	8004522 <TIM_OC1_SetConfig+0x32>
 8004516:	4a0e      	ldr	r2, [pc, #56]	@ (8004550 <TIM_OC1_SetConfig+0x60>)
 8004518:	4290      	cmp	r0, r2
 800451a:	d002      	beq.n	8004522 <TIM_OC1_SetConfig+0x32>
 800451c:	4a0d      	ldr	r2, [pc, #52]	@ (8004554 <TIM_OC1_SetConfig+0x64>)
 800451e:	4290      	cmp	r0, r2
 8004520:	d10b      	bne.n	800453a <TIM_OC1_SetConfig+0x4a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004522:	2208      	movs	r2, #8
 8004524:	4393      	bics	r3, r2
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004526:	68ca      	ldr	r2, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004528:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 800452a:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 800452c:	2204      	movs	r2, #4
 800452e:	4393      	bics	r3, r2
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004530:	4a09      	ldr	r2, [pc, #36]	@ (8004558 <TIM_OC1_SetConfig+0x68>)
 8004532:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004534:	694c      	ldr	r4, [r1, #20]
 8004536:	4334      	orrs	r4, r6
 8004538:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800453a:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800453c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800453e:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004540:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004542:	6203      	str	r3, [r0, #32]
}
 8004544:	bd70      	pop	{r4, r5, r6, pc}
 8004546:	46c0      	nop			@ (mov r8, r8)
 8004548:	fffeff8c 	.word	0xfffeff8c
 800454c:	40012c00 	.word	0x40012c00
 8004550:	40014400 	.word	0x40014400
 8004554:	40014800 	.word	0x40014800
 8004558:	fffffcff 	.word	0xfffffcff

0800455c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800455c:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800455e:	4a17      	ldr	r2, [pc, #92]	@ (80045bc <TIM_OC3_SetConfig+0x60>)
  tmpccer = TIMx->CCER;
 8004560:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004562:	6a03      	ldr	r3, [r0, #32]
 8004564:	4013      	ands	r3, r2
 8004566:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004568:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800456a:	4b15      	ldr	r3, [pc, #84]	@ (80045c0 <TIM_OC3_SetConfig+0x64>)
  tmpccmrx = TIMx->CCMR2;
 800456c:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800456e:	401c      	ands	r4, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004570:	680b      	ldr	r3, [r1, #0]
 8004572:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004574:	4b13      	ldr	r3, [pc, #76]	@ (80045c4 <TIM_OC3_SetConfig+0x68>)
 8004576:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004578:	688b      	ldr	r3, [r1, #8]
 800457a:	021b      	lsls	r3, r3, #8
 800457c:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800457e:	4d12      	ldr	r5, [pc, #72]	@ (80045c8 <TIM_OC3_SetConfig+0x6c>)
 8004580:	42a8      	cmp	r0, r5
 8004582:	d10e      	bne.n	80045a2 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004584:	4d11      	ldr	r5, [pc, #68]	@ (80045cc <TIM_OC3_SetConfig+0x70>)
 8004586:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004588:	68cb      	ldr	r3, [r1, #12]
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800458e:	4d10      	ldr	r5, [pc, #64]	@ (80045d0 <TIM_OC3_SetConfig+0x74>)
 8004590:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004592:	4d10      	ldr	r5, [pc, #64]	@ (80045d4 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004594:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004596:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004598:	694a      	ldr	r2, [r1, #20]
 800459a:	4332      	orrs	r2, r6
 800459c:	0112      	lsls	r2, r2, #4
 800459e:	432a      	orrs	r2, r5
 80045a0:	e005      	b.n	80045ae <TIM_OC3_SetConfig+0x52>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a2:	4d0d      	ldr	r5, [pc, #52]	@ (80045d8 <TIM_OC3_SetConfig+0x7c>)
 80045a4:	42a8      	cmp	r0, r5
 80045a6:	d0f4      	beq.n	8004592 <TIM_OC3_SetConfig+0x36>
 80045a8:	4d0c      	ldr	r5, [pc, #48]	@ (80045dc <TIM_OC3_SetConfig+0x80>)
 80045aa:	42a8      	cmp	r0, r5
 80045ac:	d0f1      	beq.n	8004592 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ae:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045b0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80045b2:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80045b4:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b6:	6203      	str	r3, [r0, #32]
}
 80045b8:	bd70      	pop	{r4, r5, r6, pc}
 80045ba:	46c0      	nop			@ (mov r8, r8)
 80045bc:	fffffeff 	.word	0xfffffeff
 80045c0:	fffeff8c 	.word	0xfffeff8c
 80045c4:	fffffdff 	.word	0xfffffdff
 80045c8:	40012c00 	.word	0x40012c00
 80045cc:	fffff7ff 	.word	0xfffff7ff
 80045d0:	fffffbff 	.word	0xfffffbff
 80045d4:	ffffcfff 	.word	0xffffcfff
 80045d8:	40014400 	.word	0x40014400
 80045dc:	40014800 	.word	0x40014800

080045e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045e0:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045e2:	4a12      	ldr	r2, [pc, #72]	@ (800462c <TIM_OC4_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 80045e4:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045e6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045e8:	4d11      	ldr	r5, [pc, #68]	@ (8004630 <TIM_OC4_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045ea:	4013      	ands	r3, r2
 80045ec:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80045ee:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80045f0:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045f2:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045f4:	680d      	ldr	r5, [r1, #0]
 80045f6:	022d      	lsls	r5, r5, #8
 80045f8:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004634 <TIM_OC4_SetConfig+0x54>)
 80045fc:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045fe:	688a      	ldr	r2, [r1, #8]
 8004600:	0312      	lsls	r2, r2, #12
 8004602:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004604:	4c0c      	ldr	r4, [pc, #48]	@ (8004638 <TIM_OC4_SetConfig+0x58>)
 8004606:	42a0      	cmp	r0, r4
 8004608:	d005      	beq.n	8004616 <TIM_OC4_SetConfig+0x36>
 800460a:	4c0c      	ldr	r4, [pc, #48]	@ (800463c <TIM_OC4_SetConfig+0x5c>)
 800460c:	42a0      	cmp	r0, r4
 800460e:	d002      	beq.n	8004616 <TIM_OC4_SetConfig+0x36>
 8004610:	4c0b      	ldr	r4, [pc, #44]	@ (8004640 <TIM_OC4_SetConfig+0x60>)
 8004612:	42a0      	cmp	r0, r4
 8004614:	d104      	bne.n	8004620 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004616:	4c0b      	ldr	r4, [pc, #44]	@ (8004644 <TIM_OC4_SetConfig+0x64>)
 8004618:	401c      	ands	r4, r3

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800461a:	694b      	ldr	r3, [r1, #20]
 800461c:	019b      	lsls	r3, r3, #6
 800461e:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004620:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004622:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004624:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004626:	6403      	str	r3, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004628:	6202      	str	r2, [r0, #32]
}
 800462a:	bd30      	pop	{r4, r5, pc}
 800462c:	ffffefff 	.word	0xffffefff
 8004630:	feff8cff 	.word	0xfeff8cff
 8004634:	ffffdfff 	.word	0xffffdfff
 8004638:	40012c00 	.word	0x40012c00
 800463c:	40014400 	.word	0x40014400
 8004640:	40014800 	.word	0x40014800
 8004644:	ffffbfff 	.word	0xffffbfff

08004648 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004648:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800464a:	6a06      	ldr	r6, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800464c:	4c10      	ldr	r4, [pc, #64]	@ (8004690 <TIM_OC5_SetConfig+0x48>)
 800464e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004650:	4a10      	ldr	r2, [pc, #64]	@ (8004694 <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004652:	4023      	ands	r3, r4
 8004654:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004656:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8004658:	6d45      	ldr	r5, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800465a:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800465c:	680a      	ldr	r2, [r1, #0]
 800465e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004660:	4a0d      	ldr	r2, [pc, #52]	@ (8004698 <TIM_OC5_SetConfig+0x50>)
 8004662:	4016      	ands	r6, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004664:	688a      	ldr	r2, [r1, #8]
 8004666:	0412      	lsls	r2, r2, #16
 8004668:	4332      	orrs	r2, r6

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800466a:	4e0c      	ldr	r6, [pc, #48]	@ (800469c <TIM_OC5_SetConfig+0x54>)
 800466c:	42b0      	cmp	r0, r6
 800466e:	d005      	beq.n	800467c <TIM_OC5_SetConfig+0x34>
 8004670:	4e0b      	ldr	r6, [pc, #44]	@ (80046a0 <TIM_OC5_SetConfig+0x58>)
 8004672:	42b0      	cmp	r0, r6
 8004674:	d002      	beq.n	800467c <TIM_OC5_SetConfig+0x34>
 8004676:	4e0b      	ldr	r6, [pc, #44]	@ (80046a4 <TIM_OC5_SetConfig+0x5c>)
 8004678:	42b0      	cmp	r0, r6
 800467a:	d103      	bne.n	8004684 <TIM_OC5_SetConfig+0x3c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800467c:	401c      	ands	r4, r3
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800467e:	694b      	ldr	r3, [r1, #20]
 8004680:	021b      	lsls	r3, r3, #8
 8004682:	4323      	orrs	r3, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004684:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004686:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004688:	6545      	str	r5, [r0, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800468a:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800468c:	6202      	str	r2, [r0, #32]
}
 800468e:	bd70      	pop	{r4, r5, r6, pc}
 8004690:	fffeffff 	.word	0xfffeffff
 8004694:	fffeff8f 	.word	0xfffeff8f
 8004698:	fffdffff 	.word	0xfffdffff
 800469c:	40012c00 	.word	0x40012c00
 80046a0:	40014400 	.word	0x40014400
 80046a4:	40014800 	.word	0x40014800

080046a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046a8:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80046aa:	4a12      	ldr	r2, [pc, #72]	@ (80046f4 <TIM_OC6_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 80046ac:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80046ae:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80046b0:	4d11      	ldr	r5, [pc, #68]	@ (80046f8 <TIM_OC6_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80046b2:	4013      	ands	r3, r2
 80046b4:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80046b6:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 80046b8:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80046ba:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046bc:	680d      	ldr	r5, [r1, #0]
 80046be:	022d      	lsls	r5, r5, #8
 80046c0:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80046c2:	4a0e      	ldr	r2, [pc, #56]	@ (80046fc <TIM_OC6_SetConfig+0x54>)
 80046c4:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80046c6:	688a      	ldr	r2, [r1, #8]
 80046c8:	0512      	lsls	r2, r2, #20
 80046ca:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046cc:	4c0c      	ldr	r4, [pc, #48]	@ (8004700 <TIM_OC6_SetConfig+0x58>)
 80046ce:	42a0      	cmp	r0, r4
 80046d0:	d005      	beq.n	80046de <TIM_OC6_SetConfig+0x36>
 80046d2:	4c0c      	ldr	r4, [pc, #48]	@ (8004704 <TIM_OC6_SetConfig+0x5c>)
 80046d4:	42a0      	cmp	r0, r4
 80046d6:	d002      	beq.n	80046de <TIM_OC6_SetConfig+0x36>
 80046d8:	4c0b      	ldr	r4, [pc, #44]	@ (8004708 <TIM_OC6_SetConfig+0x60>)
 80046da:	42a0      	cmp	r0, r4
 80046dc:	d104      	bne.n	80046e8 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80046de:	4c0b      	ldr	r4, [pc, #44]	@ (800470c <TIM_OC6_SetConfig+0x64>)
 80046e0:	401c      	ands	r4, r3
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80046e2:	694b      	ldr	r3, [r1, #20]
 80046e4:	029b      	lsls	r3, r3, #10
 80046e6:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e8:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046ea:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 80046ec:	6545      	str	r5, [r0, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 80046ee:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f0:	6202      	str	r2, [r0, #32]
}
 80046f2:	bd30      	pop	{r4, r5, pc}
 80046f4:	ffefffff 	.word	0xffefffff
 80046f8:	feff8fff 	.word	0xfeff8fff
 80046fc:	ffdfffff 	.word	0xffdfffff
 8004700:	40012c00 	.word	0x40012c00
 8004704:	40014400 	.word	0x40014400
 8004708:	40014800 	.word	0x40014800
 800470c:	fffbffff 	.word	0xfffbffff

08004710 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8004710:	4770      	bx	lr

08004712 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8004712:	4770      	bx	lr

08004714 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8004714:	4770      	bx	lr

08004716 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8004716:	4770      	bx	lr

08004718 <TIM_DMADelayPulseCplt>:
{
 8004718:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800471a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800471c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800471e:	4282      	cmp	r2, r0
 8004720:	d10d      	bne.n	800473e <TIM_DMADelayPulseCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004722:	2301      	movs	r3, #1
 8004724:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8004726:	69d2      	ldr	r2, [r2, #28]
 8004728:	2a00      	cmp	r2, #0
 800472a:	d102      	bne.n	8004732 <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800472c:	0022      	movs	r2, r4
 800472e:	323e      	adds	r2, #62	@ 0x3e
 8004730:	7013      	strb	r3, [r2, #0]
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004732:	0020      	movs	r0, r4
 8004734:	f7fe f98c 	bl	8002a50 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004738:	2300      	movs	r3, #0
 800473a:	7723      	strb	r3, [r4, #28]
}
 800473c:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800473e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004740:	4283      	cmp	r3, r0
 8004742:	d109      	bne.n	8004758 <TIM_DMADelayPulseCplt+0x40>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004744:	2202      	movs	r2, #2
 8004746:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f1      	bne.n	8004732 <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800474e:	0023      	movs	r3, r4
 8004750:	3a01      	subs	r2, #1
 8004752:	333f      	adds	r3, #63	@ 0x3f
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004754:	701a      	strb	r2, [r3, #0]
 8004756:	e7ec      	b.n	8004732 <TIM_DMADelayPulseCplt+0x1a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004758:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800475a:	4283      	cmp	r3, r0
 800475c:	d108      	bne.n	8004770 <TIM_DMADelayPulseCplt+0x58>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800475e:	2204      	movs	r2, #4
 8004760:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1e4      	bne.n	8004732 <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004768:	0023      	movs	r3, r4
 800476a:	3a03      	subs	r2, #3
 800476c:	3340      	adds	r3, #64	@ 0x40
 800476e:	e7f1      	b.n	8004754 <TIM_DMADelayPulseCplt+0x3c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004770:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004772:	4283      	cmp	r3, r0
 8004774:	d1dd      	bne.n	8004732 <TIM_DMADelayPulseCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004776:	2208      	movs	r2, #8
 8004778:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1d8      	bne.n	8004732 <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004780:	0023      	movs	r3, r4
 8004782:	3a07      	subs	r2, #7
 8004784:	3341      	adds	r3, #65	@ 0x41
 8004786:	e7e5      	b.n	8004754 <TIM_DMADelayPulseCplt+0x3c>

08004788 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
 8004788:	4770      	bx	lr

0800478a <TIM_DMADelayPulseHalfCplt>:
{
 800478a:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800478c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800478e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004790:	4283      	cmp	r3, r0
 8004792:	d107      	bne.n	80047a4 <TIM_DMADelayPulseHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004794:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004796:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004798:	0020      	movs	r0, r4
 800479a:	f7ff fff5 	bl	8004788 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479e:	2300      	movs	r3, #0
 80047a0:	7723      	strb	r3, [r4, #28]
}
 80047a2:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80047a4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80047a6:	4283      	cmp	r3, r0
 80047a8:	d101      	bne.n	80047ae <TIM_DMADelayPulseHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047aa:	2302      	movs	r3, #2
 80047ac:	e7f3      	b.n	8004796 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80047ae:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80047b0:	4283      	cmp	r3, r0
 80047b2:	d101      	bne.n	80047b8 <TIM_DMADelayPulseHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047b4:	2304      	movs	r3, #4
 80047b6:	e7ee      	b.n	8004796 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80047b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80047ba:	4283      	cmp	r3, r0
 80047bc:	d1ec      	bne.n	8004798 <TIM_DMADelayPulseHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047be:	2308      	movs	r3, #8
 80047c0:	e7e9      	b.n	8004796 <TIM_DMADelayPulseHalfCplt+0xc>

080047c2 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80047c2:	4770      	bx	lr

080047c4 <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047c4:	2202      	movs	r2, #2
  uint32_t itsource = htim->Instance->DIER;
 80047c6:	6803      	ldr	r3, [r0, #0]
{
 80047c8:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 80047ca:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047cc:	691e      	ldr	r6, [r3, #16]
{
 80047ce:	0004      	movs	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047d0:	4216      	tst	r6, r2
 80047d2:	d00d      	beq.n	80047f0 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047d4:	4215      	tst	r5, r2
 80047d6:	d00b      	beq.n	80047f0 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047d8:	3a05      	subs	r2, #5
 80047da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047dc:	3204      	adds	r2, #4
 80047de:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	079b      	lsls	r3, r3, #30
 80047e4:	d100      	bne.n	80047e8 <HAL_TIM_IRQHandler+0x24>
 80047e6:	e07c      	b.n	80048e2 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80047e8:	f7ff ff95 	bl	8004716 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ec:	2300      	movs	r3, #0
 80047ee:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80047f0:	2304      	movs	r3, #4
 80047f2:	421e      	tst	r6, r3
 80047f4:	d012      	beq.n	800481c <HAL_TIM_IRQHandler+0x58>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80047f6:	421d      	tst	r5, r3
 80047f8:	d010      	beq.n	800481c <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80047fa:	2205      	movs	r2, #5
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	4252      	negs	r2, r2
 8004800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004802:	3207      	adds	r2, #7
 8004804:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004806:	699a      	ldr	r2, [r3, #24]
 8004808:	23c0      	movs	r3, #192	@ 0xc0
 800480a:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800480c:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800480e:	421a      	tst	r2, r3
 8004810:	d100      	bne.n	8004814 <HAL_TIM_IRQHandler+0x50>
 8004812:	e06c      	b.n	80048ee <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004814:	f7ff ff7f 	bl	8004716 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004818:	2300      	movs	r3, #0
 800481a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800481c:	2308      	movs	r3, #8
 800481e:	421e      	tst	r6, r3
 8004820:	d00f      	beq.n	8004842 <HAL_TIM_IRQHandler+0x7e>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004822:	421d      	tst	r5, r3
 8004824:	d00d      	beq.n	8004842 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004826:	2209      	movs	r2, #9
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	4252      	negs	r2, r2
 800482c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800482e:	320d      	adds	r2, #13
 8004830:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004832:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004834:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004836:	079b      	lsls	r3, r3, #30
 8004838:	d05f      	beq.n	80048fa <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800483a:	f7ff ff6c 	bl	8004716 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483e:	2300      	movs	r3, #0
 8004840:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004842:	2310      	movs	r3, #16
 8004844:	421e      	tst	r6, r3
 8004846:	d011      	beq.n	800486c <HAL_TIM_IRQHandler+0xa8>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004848:	421d      	tst	r5, r3
 800484a:	d00f      	beq.n	800486c <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800484c:	2211      	movs	r2, #17
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	4252      	negs	r2, r2
 8004852:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004854:	3219      	adds	r2, #25
 8004856:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004858:	69da      	ldr	r2, [r3, #28]
 800485a:	23c0      	movs	r3, #192	@ 0xc0
 800485c:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800485e:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004860:	421a      	tst	r2, r3
 8004862:	d050      	beq.n	8004906 <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8004864:	f7ff ff57 	bl	8004716 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004868:	2300      	movs	r3, #0
 800486a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800486c:	2301      	movs	r3, #1
 800486e:	421e      	tst	r6, r3
 8004870:	d008      	beq.n	8004884 <HAL_TIM_IRQHandler+0xc0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004872:	421d      	tst	r5, r3
 8004874:	d006      	beq.n	8004884 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004876:	2202      	movs	r2, #2
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	4252      	negs	r2, r2
      HAL_TIM_PeriodElapsedCallback(htim);
 800487c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800487e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004880:	f7ff ff47 	bl	8004712 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004884:	2382      	movs	r3, #130	@ 0x82
 8004886:	019b      	lsls	r3, r3, #6
 8004888:	421e      	tst	r6, r3
 800488a:	d007      	beq.n	800489c <HAL_TIM_IRQHandler+0xd8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800488c:	062b      	lsls	r3, r5, #24
 800488e:	d505      	bpl.n	800489c <HAL_TIM_IRQHandler+0xd8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	4a20      	ldr	r2, [pc, #128]	@ (8004914 <HAL_TIM_IRQHandler+0x150>)
      HAL_TIMEx_BreakCallback(htim);
 8004894:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004896:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004898:	f000 fba9 	bl	8004fee <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800489c:	05f3      	lsls	r3, r6, #23
 800489e:	d507      	bpl.n	80048b0 <HAL_TIM_IRQHandler+0xec>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048a0:	062b      	lsls	r3, r5, #24
 80048a2:	d505      	bpl.n	80048b0 <HAL_TIM_IRQHandler+0xec>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004918 <HAL_TIM_IRQHandler+0x154>)
      HAL_TIMEx_Break2Callback(htim);
 80048a8:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048aa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80048ac:	f000 fba0 	bl	8004ff0 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80048b0:	2340      	movs	r3, #64	@ 0x40
 80048b2:	421e      	tst	r6, r3
 80048b4:	d008      	beq.n	80048c8 <HAL_TIM_IRQHandler+0x104>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80048b6:	421d      	tst	r5, r3
 80048b8:	d006      	beq.n	80048c8 <HAL_TIM_IRQHandler+0x104>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048ba:	2241      	movs	r2, #65	@ 0x41
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	4252      	negs	r2, r2
      HAL_TIM_TriggerCallback(htim);
 80048c0:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80048c4:	f7ff ff7d 	bl	80047c2 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048c8:	2320      	movs	r3, #32
 80048ca:	421e      	tst	r6, r3
 80048cc:	d008      	beq.n	80048e0 <HAL_TIM_IRQHandler+0x11c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048ce:	421d      	tst	r5, r3
 80048d0:	d006      	beq.n	80048e0 <HAL_TIM_IRQHandler+0x11c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80048d2:	2221      	movs	r2, #33	@ 0x21
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	4252      	negs	r2, r2
      HAL_TIMEx_CommutCallback(htim);
 80048d8:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80048da:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80048dc:	f000 fb86 	bl	8004fec <HAL_TIMEx_CommutCallback>
}
 80048e0:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e2:	f7ff ff17 	bl	8004714 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e6:	0020      	movs	r0, r4
 80048e8:	f7fe f8b2 	bl	8002a50 <HAL_TIM_PWM_PulseFinishedCallback>
 80048ec:	e77e      	b.n	80047ec <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ee:	f7ff ff11 	bl	8004714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f2:	0020      	movs	r0, r4
 80048f4:	f7fe f8ac 	bl	8002a50 <HAL_TIM_PWM_PulseFinishedCallback>
 80048f8:	e78e      	b.n	8004818 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fa:	f7ff ff0b 	bl	8004714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fe:	0020      	movs	r0, r4
 8004900:	f7fe f8a6 	bl	8002a50 <HAL_TIM_PWM_PulseFinishedCallback>
 8004904:	e79b      	b.n	800483e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004906:	f7ff ff05 	bl	8004714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800490a:	0020      	movs	r0, r4
 800490c:	f7fe f8a0 	bl	8002a50 <HAL_TIM_PWM_PulseFinishedCallback>
 8004910:	e7aa      	b.n	8004868 <HAL_TIM_IRQHandler+0xa4>
 8004912:	46c0      	nop			@ (mov r8, r8)
 8004914:	ffffdf7f 	.word	0xffffdf7f
 8004918:	fffffeff 	.word	0xfffffeff

0800491c <HAL_TIM_ErrorCallback>:
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
 800491c:	4770      	bx	lr

0800491e <TIM_DMAError>:
{
 800491e:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004920:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004922:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004924:	4283      	cmp	r3, r0
 8004926:	d105      	bne.n	8004934 <TIM_DMAError+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004928:	2301      	movs	r3, #1
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800492a:	0022      	movs	r2, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800492c:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800492e:	323e      	adds	r2, #62	@ 0x3e
    htim->State = HAL_TIM_STATE_READY;
 8004930:	7013      	strb	r3, [r2, #0]
 8004932:	e008      	b.n	8004946 <TIM_DMAError+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004934:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004936:	4283      	cmp	r3, r0
 8004938:	d10b      	bne.n	8004952 <TIM_DMAError+0x34>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800493a:	2302      	movs	r3, #2
 800493c:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800493e:	0023      	movs	r3, r4
 8004940:	2201      	movs	r2, #1
 8004942:	333f      	adds	r3, #63	@ 0x3f
 8004944:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ErrorCallback(htim);
 8004946:	0020      	movs	r0, r4
 8004948:	f7ff ffe8 	bl	800491c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494c:	2300      	movs	r3, #0
 800494e:	7723      	strb	r3, [r4, #28]
}
 8004950:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004952:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004954:	2301      	movs	r3, #1
 8004956:	4282      	cmp	r2, r0
 8004958:	d104      	bne.n	8004964 <TIM_DMAError+0x46>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800495a:	2204      	movs	r2, #4
 800495c:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800495e:	0022      	movs	r2, r4
 8004960:	3240      	adds	r2, #64	@ 0x40
 8004962:	e7e5      	b.n	8004930 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004964:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004966:	4282      	cmp	r2, r0
 8004968:	d104      	bne.n	8004974 <TIM_DMAError+0x56>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800496a:	2208      	movs	r2, #8
 800496c:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800496e:	0022      	movs	r2, r4
 8004970:	3241      	adds	r2, #65	@ 0x41
 8004972:	e7dd      	b.n	8004930 <TIM_DMAError+0x12>
    htim->State = HAL_TIM_STATE_READY;
 8004974:	0022      	movs	r2, r4
 8004976:	323d      	adds	r2, #61	@ 0x3d
 8004978:	e7da      	b.n	8004930 <TIM_DMAError+0x12>
	...

0800497c <TIM_Base_SetConfig>:
{
 800497c:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800497e:	4c1b      	ldr	r4, [pc, #108]	@ (80049ec <TIM_Base_SetConfig+0x70>)
  tmpcr1 = TIMx->CR1;
 8004980:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004982:	42a0      	cmp	r0, r4
 8004984:	d00a      	beq.n	800499c <TIM_Base_SetConfig+0x20>
 8004986:	4a1a      	ldr	r2, [pc, #104]	@ (80049f0 <TIM_Base_SetConfig+0x74>)
 8004988:	4290      	cmp	r0, r2
 800498a:	d007      	beq.n	800499c <TIM_Base_SetConfig+0x20>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800498c:	4a19      	ldr	r2, [pc, #100]	@ (80049f4 <TIM_Base_SetConfig+0x78>)
 800498e:	4290      	cmp	r0, r2
 8004990:	d109      	bne.n	80049a6 <TIM_Base_SetConfig+0x2a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004992:	4a19      	ldr	r2, [pc, #100]	@ (80049f8 <TIM_Base_SetConfig+0x7c>)
 8004994:	401a      	ands	r2, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004996:	68cb      	ldr	r3, [r1, #12]
 8004998:	4313      	orrs	r3, r2
 800499a:	e00a      	b.n	80049b2 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800499c:	2270      	movs	r2, #112	@ 0x70
 800499e:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80049a0:	684a      	ldr	r2, [r1, #4]
 80049a2:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049a4:	e7f5      	b.n	8004992 <TIM_Base_SetConfig+0x16>
 80049a6:	4a15      	ldr	r2, [pc, #84]	@ (80049fc <TIM_Base_SetConfig+0x80>)
 80049a8:	4290      	cmp	r0, r2
 80049aa:	d0f2      	beq.n	8004992 <TIM_Base_SetConfig+0x16>
 80049ac:	4a14      	ldr	r2, [pc, #80]	@ (8004a00 <TIM_Base_SetConfig+0x84>)
 80049ae:	4290      	cmp	r0, r2
 80049b0:	d0ef      	beq.n	8004992 <TIM_Base_SetConfig+0x16>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049b2:	2280      	movs	r2, #128	@ 0x80
 80049b4:	4393      	bics	r3, r2
 80049b6:	694a      	ldr	r2, [r1, #20]
 80049b8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80049ba:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049bc:	688b      	ldr	r3, [r1, #8]
 80049be:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80049c0:	680b      	ldr	r3, [r1, #0]
 80049c2:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049c4:	42a0      	cmp	r0, r4
 80049c6:	d005      	beq.n	80049d4 <TIM_Base_SetConfig+0x58>
 80049c8:	4b0c      	ldr	r3, [pc, #48]	@ (80049fc <TIM_Base_SetConfig+0x80>)
 80049ca:	4298      	cmp	r0, r3
 80049cc:	d002      	beq.n	80049d4 <TIM_Base_SetConfig+0x58>
 80049ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004a00 <TIM_Base_SetConfig+0x84>)
 80049d0:	4298      	cmp	r0, r3
 80049d2:	d101      	bne.n	80049d8 <TIM_Base_SetConfig+0x5c>
    TIMx->RCR = Structure->RepetitionCounter;
 80049d4:	690b      	ldr	r3, [r1, #16]
 80049d6:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80049d8:	2201      	movs	r2, #1
 80049da:	6142      	str	r2, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049dc:	6903      	ldr	r3, [r0, #16]
 80049de:	4213      	tst	r3, r2
 80049e0:	d002      	beq.n	80049e8 <TIM_Base_SetConfig+0x6c>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049e2:	6903      	ldr	r3, [r0, #16]
 80049e4:	4393      	bics	r3, r2
 80049e6:	6103      	str	r3, [r0, #16]
}
 80049e8:	bd10      	pop	{r4, pc}
 80049ea:	46c0      	nop			@ (mov r8, r8)
 80049ec:	40012c00 	.word	0x40012c00
 80049f0:	40000400 	.word	0x40000400
 80049f4:	40002000 	.word	0x40002000
 80049f8:	fffffcff 	.word	0xfffffcff
 80049fc:	40014400 	.word	0x40014400
 8004a00:	40014800 	.word	0x40014800

08004a04 <HAL_TIM_Base_Init>:
{
 8004a04:	b570      	push	{r4, r5, r6, lr}
 8004a06:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004a08:	2001      	movs	r0, #1
  if (htim == NULL)
 8004a0a:	2c00      	cmp	r4, #0
 8004a0c:	d023      	beq.n	8004a56 <HAL_TIM_Base_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004a0e:	0025      	movs	r5, r4
 8004a10:	353d      	adds	r5, #61	@ 0x3d
 8004a12:	782b      	ldrb	r3, [r5, #0]
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d105      	bne.n	8004a26 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8004a1a:	0023      	movs	r3, r4
 8004a1c:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004a1e:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8004a20:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8004a22:	f7fe fcb1 	bl	8003388 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004a26:	2302      	movs	r3, #2
 8004a28:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a2a:	6820      	ldr	r0, [r4, #0]
 8004a2c:	1d21      	adds	r1, r4, #4
 8004a2e:	f7ff ffa5 	bl	800497c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a32:	0022      	movs	r2, r4
 8004a34:	2301      	movs	r3, #1
  return HAL_OK;
 8004a36:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a38:	3248      	adds	r2, #72	@ 0x48
 8004a3a:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a3c:	3447      	adds	r4, #71	@ 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a3e:	3a0a      	subs	r2, #10
 8004a40:	7013      	strb	r3, [r2, #0]
 8004a42:	7053      	strb	r3, [r2, #1]
 8004a44:	7093      	strb	r3, [r2, #2]
 8004a46:	70d3      	strb	r3, [r2, #3]
 8004a48:	7113      	strb	r3, [r2, #4]
 8004a4a:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a4c:	7193      	strb	r3, [r2, #6]
 8004a4e:	71d3      	strb	r3, [r2, #7]
 8004a50:	7213      	strb	r3, [r2, #8]
 8004a52:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004a54:	702b      	strb	r3, [r5, #0]
}
 8004a56:	bd70      	pop	{r4, r5, r6, pc}

08004a58 <HAL_TIM_PWM_Init>:
{
 8004a58:	b570      	push	{r4, r5, r6, lr}
 8004a5a:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004a5c:	2001      	movs	r0, #1
  if (htim == NULL)
 8004a5e:	2c00      	cmp	r4, #0
 8004a60:	d023      	beq.n	8004aaa <HAL_TIM_PWM_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004a62:	0025      	movs	r5, r4
 8004a64:	353d      	adds	r5, #61	@ 0x3d
 8004a66:	782b      	ldrb	r3, [r5, #0]
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d105      	bne.n	8004a7a <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8004a6e:	0023      	movs	r3, r4
 8004a70:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004a72:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8004a74:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 8004a76:	f7ff fe4b 	bl	8004710 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a7e:	6820      	ldr	r0, [r4, #0]
 8004a80:	1d21      	adds	r1, r4, #4
 8004a82:	f7ff ff7b 	bl	800497c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a86:	0022      	movs	r2, r4
 8004a88:	2301      	movs	r3, #1
  return HAL_OK;
 8004a8a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a8c:	3248      	adds	r2, #72	@ 0x48
 8004a8e:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a90:	3447      	adds	r4, #71	@ 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a92:	3a0a      	subs	r2, #10
 8004a94:	7013      	strb	r3, [r2, #0]
 8004a96:	7053      	strb	r3, [r2, #1]
 8004a98:	7093      	strb	r3, [r2, #2]
 8004a9a:	70d3      	strb	r3, [r2, #3]
 8004a9c:	7113      	strb	r3, [r2, #4]
 8004a9e:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa0:	7193      	strb	r3, [r2, #6]
 8004aa2:	71d3      	strb	r3, [r2, #7]
 8004aa4:	7213      	strb	r3, [r2, #8]
 8004aa6:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004aa8:	702b      	strb	r3, [r5, #0]
}
 8004aaa:	bd70      	pop	{r4, r5, r6, pc}

08004aac <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aac:	2210      	movs	r2, #16
{
 8004aae:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 8004ab0:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ab2:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ab4:	4c16      	ldr	r4, [pc, #88]	@ (8004b10 <TIM_OC2_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ab6:	4393      	bics	r3, r2
 8004ab8:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004aba:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004abc:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004abe:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ac0:	680c      	ldr	r4, [r1, #0]
 8004ac2:	0224      	lsls	r4, r4, #8
 8004ac4:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 8004ac6:	2320      	movs	r3, #32
 8004ac8:	439d      	bics	r5, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004aca:	688b      	ldr	r3, [r1, #8]
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	432b      	orrs	r3, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ad0:	4d10      	ldr	r5, [pc, #64]	@ (8004b14 <TIM_OC2_SetConfig+0x68>)
 8004ad2:	42a8      	cmp	r0, r5
 8004ad4:	d10f      	bne.n	8004af6 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ad6:	2580      	movs	r5, #128	@ 0x80
 8004ad8:	43ab      	bics	r3, r5
 8004ada:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004adc:	68cb      	ldr	r3, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ade:	3d40      	subs	r5, #64	@ 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ae4:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ae6:	4d0c      	ldr	r5, [pc, #48]	@ (8004b18 <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ae8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004aea:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004aec:	694a      	ldr	r2, [r1, #20]
 8004aee:	4332      	orrs	r2, r6
 8004af0:	0092      	lsls	r2, r2, #2
 8004af2:	432a      	orrs	r2, r5
 8004af4:	e005      	b.n	8004b02 <TIM_OC2_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af6:	4d09      	ldr	r5, [pc, #36]	@ (8004b1c <TIM_OC2_SetConfig+0x70>)
 8004af8:	42a8      	cmp	r0, r5
 8004afa:	d0f4      	beq.n	8004ae6 <TIM_OC2_SetConfig+0x3a>
 8004afc:	4d08      	ldr	r5, [pc, #32]	@ (8004b20 <TIM_OC2_SetConfig+0x74>)
 8004afe:	42a8      	cmp	r0, r5
 8004b00:	d0f1      	beq.n	8004ae6 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8004b02:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8004b04:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004b06:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004b08:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8004b0a:	6203      	str	r3, [r0, #32]
}
 8004b0c:	bd70      	pop	{r4, r5, r6, pc}
 8004b0e:	46c0      	nop			@ (mov r8, r8)
 8004b10:	feff8cff 	.word	0xfeff8cff
 8004b14:	40012c00 	.word	0x40012c00
 8004b18:	fffff3ff 	.word	0xfffff3ff
 8004b1c:	40014400 	.word	0x40014400
 8004b20:	40014800 	.word	0x40014800

08004b24 <HAL_TIM_PWM_ConfigChannel>:
{
 8004b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004b26:	0007      	movs	r7, r0
 8004b28:	373c      	adds	r7, #60	@ 0x3c
{
 8004b2a:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 8004b2c:	783a      	ldrb	r2, [r7, #0]
{
 8004b2e:	0003      	movs	r3, r0
 8004b30:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 8004b32:	2002      	movs	r0, #2
 8004b34:	2a01      	cmp	r2, #1
 8004b36:	d00c      	beq.n	8004b52 <HAL_TIM_PWM_ConfigChannel+0x2e>
 8004b38:	3801      	subs	r0, #1
 8004b3a:	7038      	strb	r0, [r7, #0]
  switch (Channel)
 8004b3c:	2d0c      	cmp	r5, #12
 8004b3e:	d051      	beq.n	8004be4 <HAL_TIM_PWM_ConfigChannel+0xc0>
 8004b40:	d808      	bhi.n	8004b54 <HAL_TIM_PWM_ConfigChannel+0x30>
 8004b42:	2d04      	cmp	r5, #4
 8004b44:	d02d      	beq.n	8004ba2 <HAL_TIM_PWM_ConfigChannel+0x7e>
 8004b46:	2d08      	cmp	r5, #8
 8004b48:	d03c      	beq.n	8004bc4 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8004b4a:	2d00      	cmp	r5, #0
 8004b4c:	d017      	beq.n	8004b7e <HAL_TIM_PWM_ConfigChannel+0x5a>
  __HAL_UNLOCK(htim);
 8004b4e:	2300      	movs	r3, #0
 8004b50:	703b      	strb	r3, [r7, #0]
}
 8004b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8004b54:	2d10      	cmp	r5, #16
 8004b56:	d058      	beq.n	8004c0a <HAL_TIM_PWM_ConfigChannel+0xe6>
 8004b58:	2d14      	cmp	r5, #20
 8004b5a:	d1f8      	bne.n	8004b4e <HAL_TIM_PWM_ConfigChannel+0x2a>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b5c:	681d      	ldr	r5, [r3, #0]
 8004b5e:	0028      	movs	r0, r5
 8004b60:	f7ff fda2 	bl	80046a8 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b64:	2380      	movs	r3, #128	@ 0x80
 8004b66:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b6e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8004b70:	4a2e      	ldr	r2, [pc, #184]	@ (8004c2c <HAL_TIM_PWM_ConfigChannel+0x108>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b76:	6923      	ldr	r3, [r4, #16]
 8004b78:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8004b7a:	021b      	lsls	r3, r3, #8
 8004b7c:	e053      	b.n	8004c26 <HAL_TIM_PWM_ConfigChannel+0x102>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b7e:	681d      	ldr	r5, [r3, #0]
 8004b80:	0028      	movs	r0, r5
 8004b82:	f7ff fcb5 	bl	80044f0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b86:	2308      	movs	r3, #8
 8004b88:	69aa      	ldr	r2, [r5, #24]
 8004b8a:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b8c:	2204      	movs	r2, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b8e:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b90:	69ab      	ldr	r3, [r5, #24]
 8004b92:	4393      	bics	r3, r2
 8004b94:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b96:	69ab      	ldr	r3, [r5, #24]
 8004b98:	6922      	ldr	r2, [r4, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	61ab      	str	r3, [r5, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	e7d5      	b.n	8004b4e <HAL_TIM_PWM_ConfigChannel+0x2a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ba2:	681d      	ldr	r5, [r3, #0]
 8004ba4:	0028      	movs	r0, r5
 8004ba6:	f7ff ff81 	bl	8004aac <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004baa:	2380      	movs	r3, #128	@ 0x80
 8004bac:	69aa      	ldr	r2, [r5, #24]
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bb4:	69ab      	ldr	r3, [r5, #24]
 8004bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8004c2c <HAL_TIM_PWM_ConfigChannel+0x108>)
 8004bb8:	4013      	ands	r3, r2
 8004bba:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bbc:	6923      	ldr	r3, [r4, #16]
 8004bbe:	69aa      	ldr	r2, [r5, #24]
 8004bc0:	021b      	lsls	r3, r3, #8
 8004bc2:	e7ea      	b.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bc4:	681e      	ldr	r6, [r3, #0]
 8004bc6:	0030      	movs	r0, r6
 8004bc8:	f7ff fcc8 	bl	800455c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bcc:	2204      	movs	r2, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bce:	69f3      	ldr	r3, [r6, #28]
 8004bd0:	431d      	orrs	r5, r3
 8004bd2:	61f5      	str	r5, [r6, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bd4:	69f3      	ldr	r3, [r6, #28]
 8004bd6:	4393      	bics	r3, r2
 8004bd8:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bda:	69f3      	ldr	r3, [r6, #28]
 8004bdc:	6922      	ldr	r2, [r4, #16]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	61f3      	str	r3, [r6, #28]
      break;
 8004be2:	e7dc      	b.n	8004b9e <HAL_TIM_PWM_ConfigChannel+0x7a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004be4:	681d      	ldr	r5, [r3, #0]
 8004be6:	0028      	movs	r0, r5
 8004be8:	f7ff fcfa 	bl	80045e0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bec:	2380      	movs	r3, #128	@ 0x80
 8004bee:	69ea      	ldr	r2, [r5, #28]
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bf6:	69eb      	ldr	r3, [r5, #28]
 8004bf8:	4a0c      	ldr	r2, [pc, #48]	@ (8004c2c <HAL_TIM_PWM_ConfigChannel+0x108>)
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bfe:	6923      	ldr	r3, [r4, #16]
 8004c00:	69ea      	ldr	r2, [r5, #28]
 8004c02:	021b      	lsls	r3, r3, #8
 8004c04:	4313      	orrs	r3, r2
 8004c06:	61eb      	str	r3, [r5, #28]
      break;
 8004c08:	e7c9      	b.n	8004b9e <HAL_TIM_PWM_ConfigChannel+0x7a>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c0a:	681d      	ldr	r5, [r3, #0]
 8004c0c:	0028      	movs	r0, r5
 8004c0e:	f7ff fd1b 	bl	8004648 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c12:	2308      	movs	r3, #8
 8004c14:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8004c16:	4313      	orrs	r3, r2
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c18:	2204      	movs	r2, #4
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c1a:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c1c:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8004c1e:	4393      	bics	r3, r2
 8004c20:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c22:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8004c24:	6922      	ldr	r2, [r4, #16]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c26:	4313      	orrs	r3, r2
 8004c28:	656b      	str	r3, [r5, #84]	@ 0x54
      break;
 8004c2a:	e7b8      	b.n	8004b9e <HAL_TIM_PWM_ConfigChannel+0x7a>
 8004c2c:	fffffbff 	.word	0xfffffbff

08004c30 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c30:	231f      	movs	r3, #31
{
 8004c32:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c34:	2401      	movs	r4, #1
 8004c36:	4019      	ands	r1, r3
 8004c38:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c3a:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8004c3c:	6a03      	ldr	r3, [r0, #32]
 8004c3e:	43a3      	bics	r3, r4
 8004c40:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c42:	6a03      	ldr	r3, [r0, #32]
 8004c44:	431a      	orrs	r2, r3
 8004c46:	6202      	str	r2, [r0, #32]
}
 8004c48:	bd10      	pop	{r4, pc}
	...

08004c4c <HAL_TIM_OC_Start_DMA>:
{
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	000e      	movs	r6, r1
 8004c50:	0005      	movs	r5, r0
 8004c52:	0011      	movs	r1, r2
 8004c54:	2e08      	cmp	r6, #8
 8004c56:	d01c      	beq.n	8004c92 <HAL_TIM_OC_Start_DMA+0x46>
 8004c58:	d806      	bhi.n	8004c68 <HAL_TIM_OC_Start_DMA+0x1c>
 8004c5a:	2e00      	cmp	r6, #0
 8004c5c:	d00b      	beq.n	8004c76 <HAL_TIM_OC_Start_DMA+0x2a>
 8004c5e:	2e04      	cmp	r6, #4
 8004c60:	d014      	beq.n	8004c8c <HAL_TIM_OC_Start_DMA+0x40>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004c62:	002a      	movs	r2, r5
 8004c64:	3243      	adds	r2, #67	@ 0x43
 8004c66:	e008      	b.n	8004c7a <HAL_TIM_OC_Start_DMA+0x2e>
 8004c68:	2e0c      	cmp	r6, #12
 8004c6a:	d015      	beq.n	8004c98 <HAL_TIM_OC_Start_DMA+0x4c>
 8004c6c:	2e10      	cmp	r6, #16
 8004c6e:	d1f8      	bne.n	8004c62 <HAL_TIM_OC_Start_DMA+0x16>
 8004c70:	0002      	movs	r2, r0
 8004c72:	3242      	adds	r2, #66	@ 0x42
 8004c74:	e001      	b.n	8004c7a <HAL_TIM_OC_Start_DMA+0x2e>
 8004c76:	0002      	movs	r2, r0
 8004c78:	323e      	adds	r2, #62	@ 0x3e
 8004c7a:	7814      	ldrb	r4, [r2, #0]
    return HAL_BUSY;
 8004c7c:	2002      	movs	r0, #2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004c7e:	3c02      	subs	r4, #2
 8004c80:	4262      	negs	r2, r4
 8004c82:	4154      	adcs	r4, r2
 8004c84:	b2e4      	uxtb	r4, r4
 8004c86:	2c00      	cmp	r4, #0
 8004c88:	d009      	beq.n	8004c9e <HAL_TIM_OC_Start_DMA+0x52>
}
 8004c8a:	bd70      	pop	{r4, r5, r6, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004c8c:	0002      	movs	r2, r0
 8004c8e:	323f      	adds	r2, #63	@ 0x3f
 8004c90:	e7f3      	b.n	8004c7a <HAL_TIM_OC_Start_DMA+0x2e>
 8004c92:	0002      	movs	r2, r0
 8004c94:	3240      	adds	r2, #64	@ 0x40
 8004c96:	e7f0      	b.n	8004c7a <HAL_TIM_OC_Start_DMA+0x2e>
 8004c98:	0002      	movs	r2, r0
 8004c9a:	3241      	adds	r2, #65	@ 0x41
 8004c9c:	e7ed      	b.n	8004c7a <HAL_TIM_OC_Start_DMA+0x2e>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004c9e:	2e08      	cmp	r6, #8
 8004ca0:	d024      	beq.n	8004cec <HAL_TIM_OC_Start_DMA+0xa0>
 8004ca2:	d806      	bhi.n	8004cb2 <HAL_TIM_OC_Start_DMA+0x66>
 8004ca4:	2e00      	cmp	r6, #0
 8004ca6:	d00b      	beq.n	8004cc0 <HAL_TIM_OC_Start_DMA+0x74>
 8004ca8:	2e04      	cmp	r6, #4
 8004caa:	d01c      	beq.n	8004ce6 <HAL_TIM_OC_Start_DMA+0x9a>
 8004cac:	002a      	movs	r2, r5
 8004cae:	3243      	adds	r2, #67	@ 0x43
 8004cb0:	e008      	b.n	8004cc4 <HAL_TIM_OC_Start_DMA+0x78>
 8004cb2:	2e0c      	cmp	r6, #12
 8004cb4:	d025      	beq.n	8004d02 <HAL_TIM_OC_Start_DMA+0xb6>
 8004cb6:	2e10      	cmp	r6, #16
 8004cb8:	d1f8      	bne.n	8004cac <HAL_TIM_OC_Start_DMA+0x60>
 8004cba:	002a      	movs	r2, r5
 8004cbc:	3242      	adds	r2, #66	@ 0x42
 8004cbe:	e017      	b.n	8004cf0 <HAL_TIM_OC_Start_DMA+0xa4>
 8004cc0:	002a      	movs	r2, r5
 8004cc2:	323e      	adds	r2, #62	@ 0x3e
 8004cc4:	7812      	ldrb	r2, [r2, #0]
 8004cc6:	2a01      	cmp	r2, #1
 8004cc8:	d119      	bne.n	8004cfe <HAL_TIM_OC_Start_DMA+0xb2>
    if ((pData == NULL) || (Length == 0U))
 8004cca:	2900      	cmp	r1, #0
 8004ccc:	d017      	beq.n	8004cfe <HAL_TIM_OC_Start_DMA+0xb2>
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d015      	beq.n	8004cfe <HAL_TIM_OC_Start_DMA+0xb2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	2e08      	cmp	r6, #8
 8004cd6:	d066      	beq.n	8004da6 <HAL_TIM_OC_Start_DMA+0x15a>
 8004cd8:	d816      	bhi.n	8004d08 <HAL_TIM_OC_Start_DMA+0xbc>
 8004cda:	2e00      	cmp	r6, #0
 8004cdc:	d01b      	beq.n	8004d16 <HAL_TIM_OC_Start_DMA+0xca>
 8004cde:	2e04      	cmp	r6, #4
 8004ce0:	d04c      	beq.n	8004d7c <HAL_TIM_OC_Start_DMA+0x130>
 8004ce2:	3543      	adds	r5, #67	@ 0x43
 8004ce4:	e015      	b.n	8004d12 <HAL_TIM_OC_Start_DMA+0xc6>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004ce6:	002a      	movs	r2, r5
 8004ce8:	323f      	adds	r2, #63	@ 0x3f
 8004cea:	e7eb      	b.n	8004cc4 <HAL_TIM_OC_Start_DMA+0x78>
 8004cec:	002a      	movs	r2, r5
 8004cee:	3240      	adds	r2, #64	@ 0x40
 8004cf0:	7812      	ldrb	r2, [r2, #0]
 8004cf2:	3a01      	subs	r2, #1
 8004cf4:	4250      	negs	r0, r2
 8004cf6:	4142      	adcs	r2, r0
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	2a00      	cmp	r2, #0
 8004cfc:	d1e5      	bne.n	8004cca <HAL_TIM_OC_Start_DMA+0x7e>
      return HAL_ERROR;
 8004cfe:	2001      	movs	r0, #1
 8004d00:	e7c3      	b.n	8004c8a <HAL_TIM_OC_Start_DMA+0x3e>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004d02:	002a      	movs	r2, r5
 8004d04:	3241      	adds	r2, #65	@ 0x41
 8004d06:	e7f3      	b.n	8004cf0 <HAL_TIM_OC_Start_DMA+0xa4>
 8004d08:	2e0c      	cmp	r6, #12
 8004d0a:	d061      	beq.n	8004dd0 <HAL_TIM_OC_Start_DMA+0x184>
 8004d0c:	2e10      	cmp	r6, #16
 8004d0e:	d1e8      	bne.n	8004ce2 <HAL_TIM_OC_Start_DMA+0x96>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d10:	3542      	adds	r5, #66	@ 0x42
 8004d12:	702a      	strb	r2, [r5, #0]
  switch (Channel)
 8004d14:	e7f3      	b.n	8004cfe <HAL_TIM_OC_Start_DMA+0xb2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d16:	0028      	movs	r0, r5
 8004d18:	303e      	adds	r0, #62	@ 0x3e
 8004d1a:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004d1c:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8004d1e:	4a3d      	ldr	r2, [pc, #244]	@ (8004e14 <HAL_TIM_OC_Start_DMA+0x1c8>)
 8004d20:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004d22:	4a3d      	ldr	r2, [pc, #244]	@ (8004e18 <HAL_TIM_OC_Start_DMA+0x1cc>)
 8004d24:	6302      	str	r2, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004d26:	4a3d      	ldr	r2, [pc, #244]	@ (8004e1c <HAL_TIM_OC_Start_DMA+0x1d0>)
 8004d28:	6342      	str	r2, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004d2a:	682a      	ldr	r2, [r5, #0]
 8004d2c:	3234      	adds	r2, #52	@ 0x34
 8004d2e:	f7fe fd75 	bl	800381c <HAL_DMA_Start_IT>
 8004d32:	2800      	cmp	r0, #0
 8004d34:	d1e3      	bne.n	8004cfe <HAL_TIM_OC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004d36:	2380      	movs	r3, #128	@ 0x80
 8004d38:	682a      	ldr	r2, [r5, #0]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	68d1      	ldr	r1, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d3e:	682c      	ldr	r4, [r5, #0]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004d40:	430b      	orrs	r3, r1
 8004d42:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d44:	0031      	movs	r1, r6
 8004d46:	2201      	movs	r2, #1
 8004d48:	0020      	movs	r0, r4
 8004d4a:	f7ff ff71 	bl	8004c30 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d4e:	4a34      	ldr	r2, [pc, #208]	@ (8004e20 <HAL_TIM_OC_Start_DMA+0x1d4>)
 8004d50:	4294      	cmp	r4, r2
 8004d52:	d005      	beq.n	8004d60 <HAL_TIM_OC_Start_DMA+0x114>
 8004d54:	4b33      	ldr	r3, [pc, #204]	@ (8004e24 <HAL_TIM_OC_Start_DMA+0x1d8>)
 8004d56:	429c      	cmp	r4, r3
 8004d58:	d002      	beq.n	8004d60 <HAL_TIM_OC_Start_DMA+0x114>
 8004d5a:	4b33      	ldr	r3, [pc, #204]	@ (8004e28 <HAL_TIM_OC_Start_DMA+0x1dc>)
 8004d5c:	429c      	cmp	r4, r3
 8004d5e:	d14c      	bne.n	8004dfa <HAL_TIM_OC_Start_DMA+0x1ae>
      __HAL_TIM_MOE_ENABLE(htim);
 8004d60:	2380      	movs	r3, #128	@ 0x80
 8004d62:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004d64:	021b      	lsls	r3, r3, #8
 8004d66:	430b      	orrs	r3, r1
 8004d68:	6463      	str	r3, [r4, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d6a:	4294      	cmp	r4, r2
 8004d6c:	d148      	bne.n	8004e00 <HAL_TIM_OC_Start_DMA+0x1b4>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d6e:	68a3      	ldr	r3, [r4, #8]
 8004d70:	4a2e      	ldr	r2, [pc, #184]	@ (8004e2c <HAL_TIM_OC_Start_DMA+0x1e0>)
 8004d72:	4013      	ands	r3, r2
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d74:	2b06      	cmp	r3, #6
 8004d76:	d148      	bne.n	8004e0a <HAL_TIM_OC_Start_DMA+0x1be>
    return HAL_BUSY;
 8004d78:	2000      	movs	r0, #0
 8004d7a:	e786      	b.n	8004c8a <HAL_TIM_OC_Start_DMA+0x3e>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d7c:	0028      	movs	r0, r5
 8004d7e:	303f      	adds	r0, #63	@ 0x3f
 8004d80:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004d82:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8004d84:	4a23      	ldr	r2, [pc, #140]	@ (8004e14 <HAL_TIM_OC_Start_DMA+0x1c8>)
 8004d86:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004d88:	4a23      	ldr	r2, [pc, #140]	@ (8004e18 <HAL_TIM_OC_Start_DMA+0x1cc>)
 8004d8a:	6302      	str	r2, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004d8c:	4a23      	ldr	r2, [pc, #140]	@ (8004e1c <HAL_TIM_OC_Start_DMA+0x1d0>)
 8004d8e:	6342      	str	r2, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004d90:	682a      	ldr	r2, [r5, #0]
 8004d92:	3238      	adds	r2, #56	@ 0x38
 8004d94:	f7fe fd42 	bl	800381c <HAL_DMA_Start_IT>
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	d1b0      	bne.n	8004cfe <HAL_TIM_OC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004d9c:	2380      	movs	r3, #128	@ 0x80
 8004d9e:	682a      	ldr	r2, [r5, #0]
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	68d1      	ldr	r1, [r2, #12]
 8004da4:	e7cb      	b.n	8004d3e <HAL_TIM_OC_Start_DMA+0xf2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004da6:	0028      	movs	r0, r5
 8004da8:	3040      	adds	r0, #64	@ 0x40
 8004daa:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004dac:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8004dae:	4a19      	ldr	r2, [pc, #100]	@ (8004e14 <HAL_TIM_OC_Start_DMA+0x1c8>)
 8004db0:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004db2:	4a19      	ldr	r2, [pc, #100]	@ (8004e18 <HAL_TIM_OC_Start_DMA+0x1cc>)
 8004db4:	6302      	str	r2, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004db6:	4a19      	ldr	r2, [pc, #100]	@ (8004e1c <HAL_TIM_OC_Start_DMA+0x1d0>)
 8004db8:	6342      	str	r2, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004dba:	682a      	ldr	r2, [r5, #0]
 8004dbc:	323c      	adds	r2, #60	@ 0x3c
 8004dbe:	f7fe fd2d 	bl	800381c <HAL_DMA_Start_IT>
 8004dc2:	2800      	cmp	r0, #0
 8004dc4:	d19b      	bne.n	8004cfe <HAL_TIM_OC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004dc6:	2380      	movs	r3, #128	@ 0x80
 8004dc8:	682a      	ldr	r2, [r5, #0]
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	68d1      	ldr	r1, [r2, #12]
 8004dce:	e7b6      	b.n	8004d3e <HAL_TIM_OC_Start_DMA+0xf2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dd0:	0028      	movs	r0, r5
 8004dd2:	3041      	adds	r0, #65	@ 0x41
 8004dd4:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004dd6:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8004dd8:	4a0e      	ldr	r2, [pc, #56]	@ (8004e14 <HAL_TIM_OC_Start_DMA+0x1c8>)
 8004dda:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ddc:	4a0e      	ldr	r2, [pc, #56]	@ (8004e18 <HAL_TIM_OC_Start_DMA+0x1cc>)
 8004dde:	6302      	str	r2, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004de0:	4a0e      	ldr	r2, [pc, #56]	@ (8004e1c <HAL_TIM_OC_Start_DMA+0x1d0>)
 8004de2:	6342      	str	r2, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004de4:	682a      	ldr	r2, [r5, #0]
 8004de6:	3240      	adds	r2, #64	@ 0x40
 8004de8:	f7fe fd18 	bl	800381c <HAL_DMA_Start_IT>
 8004dec:	2800      	cmp	r0, #0
 8004dee:	d186      	bne.n	8004cfe <HAL_TIM_OC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004df0:	2380      	movs	r3, #128	@ 0x80
 8004df2:	682a      	ldr	r2, [r5, #0]
 8004df4:	015b      	lsls	r3, r3, #5
 8004df6:	68d1      	ldr	r1, [r2, #12]
 8004df8:	e7a1      	b.n	8004d3e <HAL_TIM_OC_Start_DMA+0xf2>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8004e30 <HAL_TIM_OC_Start_DMA+0x1e4>)
 8004dfc:	429c      	cmp	r4, r3
 8004dfe:	d0b6      	beq.n	8004d6e <HAL_TIM_OC_Start_DMA+0x122>
      __HAL_TIM_ENABLE(htim);
 8004e00:	2301      	movs	r3, #1
 8004e02:	6822      	ldr	r2, [r4, #0]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	6023      	str	r3, [r4, #0]
 8004e08:	e7b6      	b.n	8004d78 <HAL_TIM_OC_Start_DMA+0x12c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e0a:	2280      	movs	r2, #128	@ 0x80
 8004e0c:	0252      	lsls	r2, r2, #9
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d1f6      	bne.n	8004e00 <HAL_TIM_OC_Start_DMA+0x1b4>
 8004e12:	e7b1      	b.n	8004d78 <HAL_TIM_OC_Start_DMA+0x12c>
 8004e14:	08004719 	.word	0x08004719
 8004e18:	0800478b 	.word	0x0800478b
 8004e1c:	0800491f 	.word	0x0800491f
 8004e20:	40012c00 	.word	0x40012c00
 8004e24:	40014400 	.word	0x40014400
 8004e28:	40014800 	.word	0x40014800
 8004e2c:	00010007 	.word	0x00010007
 8004e30:	40000400 	.word	0x40000400

08004e34 <HAL_TIM_PWM_Start_DMA>:
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
 8004e34:	b510      	push	{r4, lr}
 8004e36:	f7ff ff09 	bl	8004c4c <HAL_TIM_OC_Start_DMA>
 8004e3a:	bd10      	pop	{r4, pc}

08004e3c <HAL_TIM_OC_Stop_DMA>:
{
 8004e3c:	b570      	push	{r4, r5, r6, lr}
 8004e3e:	0004      	movs	r4, r0
 8004e40:	000e      	movs	r6, r1
  switch (Channel)
 8004e42:	2908      	cmp	r1, #8
 8004e44:	d04b      	beq.n	8004ede <HAL_TIM_OC_Stop_DMA+0xa2>
 8004e46:	d805      	bhi.n	8004e54 <HAL_TIM_OC_Stop_DMA+0x18>
 8004e48:	2900      	cmp	r1, #0
 8004e4a:	d00c      	beq.n	8004e66 <HAL_TIM_OC_Stop_DMA+0x2a>
 8004e4c:	2904      	cmp	r1, #4
 8004e4e:	d03f      	beq.n	8004ed0 <HAL_TIM_OC_Stop_DMA+0x94>
 8004e50:	2001      	movs	r0, #1
}
 8004e52:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8004e54:	290c      	cmp	r1, #12
 8004e56:	d1fb      	bne.n	8004e50 <HAL_TIM_OC_Stop_DMA+0x14>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004e58:	6802      	ldr	r2, [r0, #0]
 8004e5a:	4929      	ldr	r1, [pc, #164]	@ (8004f00 <HAL_TIM_OC_Stop_DMA+0xc4>)
 8004e5c:	68d3      	ldr	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004e5e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004e60:	400b      	ands	r3, r1
 8004e62:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004e64:	e005      	b.n	8004e72 <HAL_TIM_OC_Stop_DMA+0x36>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004e66:	6802      	ldr	r2, [r0, #0]
 8004e68:	4926      	ldr	r1, [pc, #152]	@ (8004f04 <HAL_TIM_OC_Stop_DMA+0xc8>)
 8004e6a:	68d3      	ldr	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004e6c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004e6e:	400b      	ands	r3, r1
 8004e70:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004e72:	f7fe fd55 	bl	8003920 <HAL_DMA_Abort_IT>
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e76:	6825      	ldr	r5, [r4, #0]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	0031      	movs	r1, r6
 8004e7c:	0028      	movs	r0, r5
 8004e7e:	f7ff fed7 	bl	8004c30 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e82:	4b21      	ldr	r3, [pc, #132]	@ (8004f08 <HAL_TIM_OC_Stop_DMA+0xcc>)
 8004e84:	4a21      	ldr	r2, [pc, #132]	@ (8004f0c <HAL_TIM_OC_Stop_DMA+0xd0>)
 8004e86:	429d      	cmp	r5, r3
 8004e88:	d005      	beq.n	8004e96 <HAL_TIM_OC_Stop_DMA+0x5a>
 8004e8a:	4b21      	ldr	r3, [pc, #132]	@ (8004f10 <HAL_TIM_OC_Stop_DMA+0xd4>)
 8004e8c:	429d      	cmp	r5, r3
 8004e8e:	d002      	beq.n	8004e96 <HAL_TIM_OC_Stop_DMA+0x5a>
 8004e90:	4b20      	ldr	r3, [pc, #128]	@ (8004f14 <HAL_TIM_OC_Stop_DMA+0xd8>)
 8004e92:	429d      	cmp	r5, r3
 8004e94:	d10a      	bne.n	8004eac <HAL_TIM_OC_Stop_DMA+0x70>
      __HAL_TIM_MOE_DISABLE(htim);
 8004e96:	6a2b      	ldr	r3, [r5, #32]
 8004e98:	4213      	tst	r3, r2
 8004e9a:	d107      	bne.n	8004eac <HAL_TIM_OC_Stop_DMA+0x70>
 8004e9c:	6a29      	ldr	r1, [r5, #32]
 8004e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8004f18 <HAL_TIM_OC_Stop_DMA+0xdc>)
 8004ea0:	4219      	tst	r1, r3
 8004ea2:	d103      	bne.n	8004eac <HAL_TIM_OC_Stop_DMA+0x70>
 8004ea4:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8004ea6:	491d      	ldr	r1, [pc, #116]	@ (8004f1c <HAL_TIM_OC_Stop_DMA+0xe0>)
 8004ea8:	400b      	ands	r3, r1
 8004eaa:	646b      	str	r3, [r5, #68]	@ 0x44
    __HAL_TIM_DISABLE(htim);
 8004eac:	6a2b      	ldr	r3, [r5, #32]
 8004eae:	4213      	tst	r3, r2
 8004eb0:	d107      	bne.n	8004ec2 <HAL_TIM_OC_Stop_DMA+0x86>
 8004eb2:	6a2a      	ldr	r2, [r5, #32]
 8004eb4:	4b18      	ldr	r3, [pc, #96]	@ (8004f18 <HAL_TIM_OC_Stop_DMA+0xdc>)
 8004eb6:	421a      	tst	r2, r3
 8004eb8:	d103      	bne.n	8004ec2 <HAL_TIM_OC_Stop_DMA+0x86>
 8004eba:	2201      	movs	r2, #1
 8004ebc:	682b      	ldr	r3, [r5, #0]
 8004ebe:	4393      	bics	r3, r2
 8004ec0:	602b      	str	r3, [r5, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	2e00      	cmp	r6, #0
 8004ec6:	d111      	bne.n	8004eec <HAL_TIM_OC_Stop_DMA+0xb0>
 8004ec8:	343e      	adds	r4, #62	@ 0x3e
  switch (Channel)
 8004eca:	2000      	movs	r0, #0
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ecc:	7023      	strb	r3, [r4, #0]
 8004ece:	e7c0      	b.n	8004e52 <HAL_TIM_OC_Stop_DMA+0x16>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004ed0:	6802      	ldr	r2, [r0, #0]
 8004ed2:	4913      	ldr	r1, [pc, #76]	@ (8004f20 <HAL_TIM_OC_Stop_DMA+0xe4>)
 8004ed4:	68d3      	ldr	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004ed6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004ed8:	400b      	ands	r3, r1
 8004eda:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004edc:	e7c9      	b.n	8004e72 <HAL_TIM_OC_Stop_DMA+0x36>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004ede:	6802      	ldr	r2, [r0, #0]
 8004ee0:	4910      	ldr	r1, [pc, #64]	@ (8004f24 <HAL_TIM_OC_Stop_DMA+0xe8>)
 8004ee2:	68d3      	ldr	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004ee4:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004ee6:	400b      	ands	r3, r1
 8004ee8:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004eea:	e7c2      	b.n	8004e72 <HAL_TIM_OC_Stop_DMA+0x36>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004eec:	2e04      	cmp	r6, #4
 8004eee:	d101      	bne.n	8004ef4 <HAL_TIM_OC_Stop_DMA+0xb8>
 8004ef0:	343f      	adds	r4, #63	@ 0x3f
 8004ef2:	e7ea      	b.n	8004eca <HAL_TIM_OC_Stop_DMA+0x8e>
 8004ef4:	2e08      	cmp	r6, #8
 8004ef6:	d101      	bne.n	8004efc <HAL_TIM_OC_Stop_DMA+0xc0>
 8004ef8:	3440      	adds	r4, #64	@ 0x40
 8004efa:	e7e6      	b.n	8004eca <HAL_TIM_OC_Stop_DMA+0x8e>
 8004efc:	3441      	adds	r4, #65	@ 0x41
 8004efe:	e7e4      	b.n	8004eca <HAL_TIM_OC_Stop_DMA+0x8e>
 8004f00:	ffffefff 	.word	0xffffefff
 8004f04:	fffffdff 	.word	0xfffffdff
 8004f08:	40012c00 	.word	0x40012c00
 8004f0c:	00001111 	.word	0x00001111
 8004f10:	40014400 	.word	0x40014400
 8004f14:	40014800 	.word	0x40014800
 8004f18:	00000444 	.word	0x00000444
 8004f1c:	ffff7fff 	.word	0xffff7fff
 8004f20:	fffffbff 	.word	0xfffffbff
 8004f24:	fffff7ff 	.word	0xfffff7ff

08004f28 <HAL_TIM_PWM_Stop_DMA>:
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
 8004f28:	b510      	push	{r4, lr}
 8004f2a:	f7ff ff87 	bl	8004e3c <HAL_TIM_OC_Stop_DMA>
 8004f2e:	bd10      	pop	{r4, pc}

08004f30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f30:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f32:	0004      	movs	r4, r0
 8004f34:	343c      	adds	r4, #60	@ 0x3c
 8004f36:	7823      	ldrb	r3, [r4, #0]
{
 8004f38:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8004f3a:	2002      	movs	r0, #2
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d039      	beq.n	8004fb4 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f40:	481d      	ldr	r0, [pc, #116]	@ (8004fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8004f42:	68cb      	ldr	r3, [r1, #12]
 8004f44:	4003      	ands	r3, r0
 8004f46:	6888      	ldr	r0, [r1, #8]
 8004f48:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f4a:	481c      	ldr	r0, [pc, #112]	@ (8004fbc <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8004f4c:	4003      	ands	r3, r0
 8004f4e:	6848      	ldr	r0, [r1, #4]
 8004f50:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f52:	481b      	ldr	r0, [pc, #108]	@ (8004fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8004f54:	4003      	ands	r3, r0
 8004f56:	6808      	ldr	r0, [r1, #0]
 8004f58:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f5a:	481a      	ldr	r0, [pc, #104]	@ (8004fc4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8004f5c:	4003      	ands	r3, r0
 8004f5e:	6908      	ldr	r0, [r1, #16]
 8004f60:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f62:	4819      	ldr	r0, [pc, #100]	@ (8004fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8004f64:	4003      	ands	r3, r0
 8004f66:	6948      	ldr	r0, [r1, #20]
 8004f68:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f6a:	4818      	ldr	r0, [pc, #96]	@ (8004fcc <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8004f6c:	4003      	ands	r3, r0
 8004f6e:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 8004f70:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f72:	4817      	ldr	r0, [pc, #92]	@ (8004fd0 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8004f74:	4003      	ands	r3, r0
 8004f76:	6988      	ldr	r0, [r1, #24]
 8004f78:	0400      	lsls	r0, r0, #16
 8004f7a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004f7c:	4815      	ldr	r0, [pc, #84]	@ (8004fd4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004f7e:	4003      	ands	r3, r0
 8004f80:	69c8      	ldr	r0, [r1, #28]
 8004f82:	4303      	orrs	r3, r0

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f84:	6810      	ldr	r0, [r2, #0]
 8004f86:	4a14      	ldr	r2, [pc, #80]	@ (8004fd8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004f88:	4290      	cmp	r0, r2
 8004f8a:	d110      	bne.n	8004fae <HAL_TIMEx_ConfigBreakDeadTime+0x7e>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004f8c:	4a13      	ldr	r2, [pc, #76]	@ (8004fdc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004f8e:	4013      	ands	r3, r2
 8004f90:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8004f92:	0512      	lsls	r2, r2, #20
 8004f94:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004f96:	4b12      	ldr	r3, [pc, #72]	@ (8004fe0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004f98:	401a      	ands	r2, r3
 8004f9a:	6a0b      	ldr	r3, [r1, #32]
 8004f9c:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004f9e:	4b11      	ldr	r3, [pc, #68]	@ (8004fe4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004fa0:	401a      	ands	r2, r3
 8004fa2:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8004fa4:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004fa6:	4b10      	ldr	r3, [pc, #64]	@ (8004fe8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004fa8:	401a      	ands	r2, r3
 8004faa:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8004fac:	4313      	orrs	r3, r2
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004fae:	6443      	str	r3, [r0, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8004fb4:	bd10      	pop	{r4, pc}
 8004fb6:	46c0      	nop			@ (mov r8, r8)
 8004fb8:	fffffcff 	.word	0xfffffcff
 8004fbc:	fffffbff 	.word	0xfffffbff
 8004fc0:	fffff7ff 	.word	0xfffff7ff
 8004fc4:	ffffefff 	.word	0xffffefff
 8004fc8:	ffffdfff 	.word	0xffffdfff
 8004fcc:	ffffbfff 	.word	0xffffbfff
 8004fd0:	fff0ffff 	.word	0xfff0ffff
 8004fd4:	efffffff 	.word	0xefffffff
 8004fd8:	40012c00 	.word	0x40012c00
 8004fdc:	ff0fffff 	.word	0xff0fffff
 8004fe0:	feffffff 	.word	0xfeffffff
 8004fe4:	fdffffff 	.word	0xfdffffff
 8004fe8:	dfffffff 	.word	0xdfffffff

08004fec <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8004fec:	4770      	bx	lr

08004fee <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8004fee:	4770      	bx	lr

08004ff0 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8004ff0:	4770      	bx	lr
	...

08004ff4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ff4:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ff6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005000:	6801      	ldr	r1, [r0, #0]
 8005002:	4d13      	ldr	r5, [pc, #76]	@ (8005050 <UART_EndRxTransfer+0x5c>)
 8005004:	680b      	ldr	r3, [r1, #0]
 8005006:	402b      	ands	r3, r5
 8005008:	600b      	str	r3, [r1, #0]
 800500a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800500e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005012:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005016:	6802      	ldr	r2, [r0, #0]
 8005018:	4c0e      	ldr	r4, [pc, #56]	@ (8005054 <UART_EndRxTransfer+0x60>)
 800501a:	6893      	ldr	r3, [r2, #8]
 800501c:	4023      	ands	r3, r4
 800501e:	6093      	str	r3, [r2, #8]
 8005020:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005024:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8005026:	2b01      	cmp	r3, #1
 8005028:	d10a      	bne.n	8005040 <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800502a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800502e:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005032:	2410      	movs	r4, #16
 8005034:	6802      	ldr	r2, [r0, #0]
 8005036:	6813      	ldr	r3, [r2, #0]
 8005038:	43a3      	bics	r3, r4
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005040:	0003      	movs	r3, r0
 8005042:	2220      	movs	r2, #32
 8005044:	338c      	adds	r3, #140	@ 0x8c
 8005046:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005048:	2300      	movs	r3, #0
 800504a:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800504c:	6743      	str	r3, [r0, #116]	@ 0x74
}
 800504e:	bd30      	pop	{r4, r5, pc}
 8005050:	fffffedf 	.word	0xfffffedf
 8005054:	effffffe 	.word	0xeffffffe

08005058 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8005058:	4770      	bx	lr

0800505a <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800505a:	4770      	bx	lr

0800505c <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800505c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	0002      	movs	r2, r0
{
 8005062:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8005064:	325e      	adds	r2, #94	@ 0x5e
 8005066:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8005068:	3a08      	subs	r2, #8
 800506a:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800506c:	f7ff fff5 	bl	800505a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005070:	bd10      	pop	{r4, pc}

08005072 <HAL_UARTEx_RxEventCallback>:
}
 8005072:	4770      	bx	lr

08005074 <HAL_UART_IRQHandler>:
{
 8005074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005076:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005078:	4dc1      	ldr	r5, [pc, #772]	@ (8005380 <HAL_UART_IRQHandler+0x30c>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800507a:	69cb      	ldr	r3, [r1, #28]
{
 800507c:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800507e:	680a      	ldr	r2, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005080:	6888      	ldr	r0, [r1, #8]
  if (errorflags == 0U)
 8005082:	422b      	tst	r3, r5
 8005084:	d110      	bne.n	80050a8 <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005086:	2520      	movs	r5, #32
 8005088:	422b      	tst	r3, r5
 800508a:	d100      	bne.n	800508e <HAL_UART_IRQHandler+0x1a>
 800508c:	e09b      	b.n	80051c6 <HAL_UART_IRQHandler+0x152>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800508e:	2680      	movs	r6, #128	@ 0x80
 8005090:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005092:	4015      	ands	r5, r2
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005094:	4006      	ands	r6, r0
 8005096:	4335      	orrs	r5, r6
 8005098:	d100      	bne.n	800509c <HAL_UART_IRQHandler+0x28>
 800509a:	e094      	b.n	80051c6 <HAL_UART_IRQHandler+0x152>
      if (huart->RxISR != NULL)
 800509c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
      huart->TxISR(huart);
 800509e:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d000      	beq.n	80050a6 <HAL_UART_IRQHandler+0x32>
 80050a4:	e085      	b.n	80051b2 <HAL_UART_IRQHandler+0x13e>
 80050a6:	e085      	b.n	80051b4 <HAL_UART_IRQHandler+0x140>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80050a8:	4db6      	ldr	r5, [pc, #728]	@ (8005384 <HAL_UART_IRQHandler+0x310>)
 80050aa:	4005      	ands	r5, r0
 80050ac:	9500      	str	r5, [sp, #0]
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80050ae:	4db6      	ldr	r5, [pc, #728]	@ (8005388 <HAL_UART_IRQHandler+0x314>)
 80050b0:	9e00      	ldr	r6, [sp, #0]
 80050b2:	4015      	ands	r5, r2
 80050b4:	4335      	orrs	r5, r6
 80050b6:	d100      	bne.n	80050ba <HAL_UART_IRQHandler+0x46>
 80050b8:	e085      	b.n	80051c6 <HAL_UART_IRQHandler+0x152>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050ba:	0025      	movs	r5, r4
 80050bc:	2601      	movs	r6, #1
 80050be:	3590      	adds	r5, #144	@ 0x90
 80050c0:	4233      	tst	r3, r6
 80050c2:	d005      	beq.n	80050d0 <HAL_UART_IRQHandler+0x5c>
 80050c4:	05d7      	lsls	r7, r2, #23
 80050c6:	d503      	bpl.n	80050d0 <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050c8:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050ca:	682f      	ldr	r7, [r5, #0]
 80050cc:	433e      	orrs	r6, r7
 80050ce:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050d0:	2602      	movs	r6, #2
 80050d2:	4233      	tst	r3, r6
 80050d4:	d00c      	beq.n	80050f0 <HAL_UART_IRQHandler+0x7c>
 80050d6:	07c7      	lsls	r7, r0, #31
 80050d8:	d50a      	bpl.n	80050f0 <HAL_UART_IRQHandler+0x7c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050da:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050dc:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050de:	3790      	adds	r7, #144	@ 0x90
 80050e0:	683e      	ldr	r6, [r7, #0]
 80050e2:	9701      	str	r7, [sp, #4]
 80050e4:	46b4      	mov	ip, r6
 80050e6:	2604      	movs	r6, #4
 80050e8:	4667      	mov	r7, ip
 80050ea:	433e      	orrs	r6, r7
 80050ec:	9f01      	ldr	r7, [sp, #4]
 80050ee:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050f0:	2604      	movs	r6, #4
 80050f2:	4233      	tst	r3, r6
 80050f4:	d00c      	beq.n	8005110 <HAL_UART_IRQHandler+0x9c>
 80050f6:	07c7      	lsls	r7, r0, #31
 80050f8:	d50a      	bpl.n	8005110 <HAL_UART_IRQHandler+0x9c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050fa:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050fc:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050fe:	3790      	adds	r7, #144	@ 0x90
 8005100:	683e      	ldr	r6, [r7, #0]
 8005102:	9701      	str	r7, [sp, #4]
 8005104:	46b4      	mov	ip, r6
 8005106:	2602      	movs	r6, #2
 8005108:	4667      	mov	r7, ip
 800510a:	433e      	orrs	r6, r7
 800510c:	9f01      	ldr	r7, [sp, #4]
 800510e:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005110:	2608      	movs	r6, #8
 8005112:	46b4      	mov	ip, r6
 8005114:	4233      	tst	r3, r6
 8005116:	d009      	beq.n	800512c <HAL_UART_IRQHandler+0xb8>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005118:	2720      	movs	r7, #32
 800511a:	9e00      	ldr	r6, [sp, #0]
 800511c:	4017      	ands	r7, r2
 800511e:	4337      	orrs	r7, r6
 8005120:	d004      	beq.n	800512c <HAL_UART_IRQHandler+0xb8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005122:	4666      	mov	r6, ip
 8005124:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005126:	682f      	ldr	r7, [r5, #0]
 8005128:	433e      	orrs	r6, r7
 800512a:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800512c:	2680      	movs	r6, #128	@ 0x80
 800512e:	0136      	lsls	r6, r6, #4
 8005130:	4233      	tst	r3, r6
 8005132:	d006      	beq.n	8005142 <HAL_UART_IRQHandler+0xce>
 8005134:	0157      	lsls	r7, r2, #5
 8005136:	d504      	bpl.n	8005142 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005138:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800513a:	2120      	movs	r1, #32
 800513c:	682e      	ldr	r6, [r5, #0]
 800513e:	4331      	orrs	r1, r6
 8005140:	6029      	str	r1, [r5, #0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005142:	6829      	ldr	r1, [r5, #0]
 8005144:	2900      	cmp	r1, #0
 8005146:	d035      	beq.n	80051b4 <HAL_UART_IRQHandler+0x140>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005148:	2120      	movs	r1, #32
 800514a:	420b      	tst	r3, r1
 800514c:	d00a      	beq.n	8005164 <HAL_UART_IRQHandler+0xf0>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800514e:	2380      	movs	r3, #128	@ 0x80
 8005150:	055b      	lsls	r3, r3, #21
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005152:	4011      	ands	r1, r2
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005154:	4003      	ands	r3, r0
 8005156:	4319      	orrs	r1, r3
 8005158:	d004      	beq.n	8005164 <HAL_UART_IRQHandler+0xf0>
        if (huart->RxISR != NULL)
 800515a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <HAL_UART_IRQHandler+0xf0>
          huart->RxISR(huart);
 8005160:	0020      	movs	r0, r4
 8005162:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005164:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8005166:	682b      	ldr	r3, [r5, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005168:	2740      	movs	r7, #64	@ 0x40
 800516a:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800516c:	2228      	movs	r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800516e:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005170:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8005172:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005174:	431e      	orrs	r6, r3
 8005176:	d022      	beq.n	80051be <HAL_UART_IRQHandler+0x14a>
        UART_EndRxTransfer(huart);
 8005178:	f7ff ff3c 	bl	8004ff4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517c:	6823      	ldr	r3, [r4, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	423b      	tst	r3, r7
 8005182:	d018      	beq.n	80051b6 <HAL_UART_IRQHandler+0x142>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005184:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005188:	2301      	movs	r3, #1
 800518a:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800518e:	0025      	movs	r5, r4
 8005190:	cd04      	ldmia	r5!, {r2}
 8005192:	6893      	ldr	r3, [r2, #8]
 8005194:	43bb      	bics	r3, r7
 8005196:	6093      	str	r3, [r2, #8]
 8005198:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 800519c:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 800519e:	2800      	cmp	r0, #0
 80051a0:	d009      	beq.n	80051b6 <HAL_UART_IRQHandler+0x142>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051a2:	4b7a      	ldr	r3, [pc, #488]	@ (800538c <HAL_UART_IRQHandler+0x318>)
 80051a4:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051a6:	f7fe fbbb 	bl	8003920 <HAL_DMA_Abort_IT>
 80051aa:	2800      	cmp	r0, #0
 80051ac:	d002      	beq.n	80051b4 <HAL_UART_IRQHandler+0x140>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051ae:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 80051b0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80051b2:	4798      	blx	r3
}
 80051b4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 80051b6:	0020      	movs	r0, r4
 80051b8:	f7ff ff4f 	bl	800505a <HAL_UART_ErrorCallback>
 80051bc:	e7fa      	b.n	80051b4 <HAL_UART_IRQHandler+0x140>
        HAL_UART_ErrorCallback(huart);
 80051be:	f7ff ff4c 	bl	800505a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051c2:	602e      	str	r6, [r5, #0]
 80051c4:	e7f6      	b.n	80051b4 <HAL_UART_IRQHandler+0x140>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c6:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 80051c8:	2d01      	cmp	r5, #1
 80051ca:	d000      	beq.n	80051ce <HAL_UART_IRQHandler+0x15a>
 80051cc:	e09f      	b.n	800530e <HAL_UART_IRQHandler+0x29a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051ce:	2610      	movs	r6, #16
 80051d0:	4233      	tst	r3, r6
 80051d2:	d100      	bne.n	80051d6 <HAL_UART_IRQHandler+0x162>
 80051d4:	e09b      	b.n	800530e <HAL_UART_IRQHandler+0x29a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051d6:	4232      	tst	r2, r6
 80051d8:	d100      	bne.n	80051dc <HAL_UART_IRQHandler+0x168>
 80051da:	e098      	b.n	800530e <HAL_UART_IRQHandler+0x29a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051dc:	620e      	str	r6, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051de:	6889      	ldr	r1, [r1, #8]
 80051e0:	2340      	movs	r3, #64	@ 0x40
 80051e2:	000a      	movs	r2, r1
 80051e4:	401a      	ands	r2, r3
 80051e6:	4219      	tst	r1, r3
 80051e8:	d057      	beq.n	800529a <HAL_UART_IRQHandler+0x226>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051ea:	1d21      	adds	r1, r4, #4
 80051ec:	6fca      	ldr	r2, [r1, #124]	@ 0x7c
 80051ee:	6810      	ldr	r0, [r2, #0]
 80051f0:	6842      	ldr	r2, [r0, #4]
 80051f2:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80051f4:	2a00      	cmp	r2, #0
 80051f6:	d0dd      	beq.n	80051b4 <HAL_UART_IRQHandler+0x140>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051f8:	0027      	movs	r7, r4
 80051fa:	375c      	adds	r7, #92	@ 0x5c
 80051fc:	883f      	ldrh	r7, [r7, #0]
 80051fe:	4297      	cmp	r7, r2
 8005200:	d9d8      	bls.n	80051b4 <HAL_UART_IRQHandler+0x140>
        huart->RxXferCount = nb_remaining_rx_data;
 8005202:	0027      	movs	r7, r4
 8005204:	375e      	adds	r7, #94	@ 0x5e
 8005206:	803a      	strh	r2, [r7, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005208:	6802      	ldr	r2, [r0, #0]
 800520a:	2020      	movs	r0, #32
 800520c:	4684      	mov	ip, r0
 800520e:	4010      	ands	r0, r2
 8005210:	9000      	str	r0, [sp, #0]
 8005212:	4660      	mov	r0, ip
 8005214:	4202      	tst	r2, r0
 8005216:	d132      	bne.n	800527e <HAL_UART_IRQHandler+0x20a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005218:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800521c:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005220:	6820      	ldr	r0, [r4, #0]
 8005222:	4e5b      	ldr	r6, [pc, #364]	@ (8005390 <HAL_UART_IRQHandler+0x31c>)
 8005224:	6802      	ldr	r2, [r0, #0]
 8005226:	4032      	ands	r2, r6
 8005228:	6002      	str	r2, [r0, #0]
 800522a:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800522e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005232:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005236:	6820      	ldr	r0, [r4, #0]
 8005238:	6882      	ldr	r2, [r0, #8]
 800523a:	43aa      	bics	r2, r5
 800523c:	6082      	str	r2, [r0, #8]
 800523e:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005242:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005246:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800524a:	6820      	ldr	r0, [r4, #0]
 800524c:	6882      	ldr	r2, [r0, #8]
 800524e:	439a      	bics	r2, r3
 8005250:	6082      	str	r2, [r0, #8]
 8005252:	f387 8810 	msr	PRIMASK, r7
          huart->RxState = HAL_UART_STATE_READY;
 8005256:	0023      	movs	r3, r4
 8005258:	4662      	mov	r2, ip
 800525a:	338c      	adds	r3, #140	@ 0x8c
 800525c:	601a      	str	r2, [r3, #0]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525e:	9b00      	ldr	r3, [sp, #0]
 8005260:	66e3      	str	r3, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005262:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005266:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800526a:	6822      	ldr	r2, [r4, #0]
 800526c:	350f      	adds	r5, #15
 800526e:	6813      	ldr	r3, [r2, #0]
 8005270:	43ab      	bics	r3, r5
 8005272:	6013      	str	r3, [r2, #0]
 8005274:	f380 8810 	msr	PRIMASK, r0
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005278:	6fc8      	ldr	r0, [r1, #124]	@ 0x7c
 800527a:	f7fe fb17 	bl	80038ac <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800527e:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005280:	0022      	movs	r2, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005282:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005284:	0023      	movs	r3, r4
 8005286:	325c      	adds	r2, #92	@ 0x5c
 8005288:	335e      	adds	r3, #94	@ 0x5e
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	8811      	ldrh	r1, [r2, #0]
 800528e:	1ac9      	subs	r1, r1, r3
 8005290:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005292:	0020      	movs	r0, r4
 8005294:	f7ff feed 	bl	8005072 <HAL_UARTEx_RxEventCallback>
 8005298:	e78c      	b.n	80051b4 <HAL_UART_IRQHandler+0x140>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800529a:	0023      	movs	r3, r4
 800529c:	0020      	movs	r0, r4
 800529e:	335c      	adds	r3, #92	@ 0x5c
 80052a0:	305e      	adds	r0, #94	@ 0x5e
 80052a2:	8819      	ldrh	r1, [r3, #0]
 80052a4:	8803      	ldrh	r3, [r0, #0]
      if ((huart->RxXferCount > 0U)
 80052a6:	8800      	ldrh	r0, [r0, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052a8:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 80052aa:	2800      	cmp	r0, #0
 80052ac:	d100      	bne.n	80052b0 <HAL_UART_IRQHandler+0x23c>
 80052ae:	e781      	b.n	80051b4 <HAL_UART_IRQHandler+0x140>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052b0:	1ac9      	subs	r1, r1, r3
 80052b2:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80052b4:	2900      	cmp	r1, #0
 80052b6:	d100      	bne.n	80052ba <HAL_UART_IRQHandler+0x246>
 80052b8:	e77c      	b.n	80051b4 <HAL_UART_IRQHandler+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ba:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052be:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052c2:	6820      	ldr	r0, [r4, #0]
 80052c4:	4e33      	ldr	r6, [pc, #204]	@ (8005394 <HAL_UART_IRQHandler+0x320>)
 80052c6:	6803      	ldr	r3, [r0, #0]
 80052c8:	4033      	ands	r3, r6
 80052ca:	6003      	str	r3, [r0, #0]
 80052cc:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052d0:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d4:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052d8:	6820      	ldr	r0, [r4, #0]
 80052da:	4e2f      	ldr	r6, [pc, #188]	@ (8005398 <HAL_UART_IRQHandler+0x324>)
 80052dc:	6883      	ldr	r3, [r0, #8]
 80052de:	4033      	ands	r3, r6
 80052e0:	6083      	str	r3, [r0, #8]
 80052e2:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 80052e6:	0023      	movs	r3, r4
 80052e8:	2020      	movs	r0, #32
 80052ea:	338c      	adds	r3, #140	@ 0x8c
 80052ec:	6018      	str	r0, [r3, #0]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ee:	66e2      	str	r2, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 80052f0:	6762      	str	r2, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052f2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f6:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052fa:	2510      	movs	r5, #16
 80052fc:	6822      	ldr	r2, [r4, #0]
 80052fe:	6813      	ldr	r3, [r2, #0]
 8005300:	43ab      	bics	r3, r5
 8005302:	6013      	str	r3, [r2, #0]
 8005304:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005308:	2302      	movs	r3, #2
 800530a:	6723      	str	r3, [r4, #112]	@ 0x70
 800530c:	e7c1      	b.n	8005292 <HAL_UART_IRQHandler+0x21e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800530e:	2580      	movs	r5, #128	@ 0x80
 8005310:	036d      	lsls	r5, r5, #13
 8005312:	422b      	tst	r3, r5
 8005314:	d006      	beq.n	8005324 <HAL_UART_IRQHandler+0x2b0>
 8005316:	0246      	lsls	r6, r0, #9
 8005318:	d504      	bpl.n	8005324 <HAL_UART_IRQHandler+0x2b0>
    HAL_UARTEx_WakeupCallback(huart);
 800531a:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800531c:	620d      	str	r5, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800531e:	f000 fe1b 	bl	8005f58 <HAL_UARTEx_WakeupCallback>
    return;
 8005322:	e747      	b.n	80051b4 <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005324:	2180      	movs	r1, #128	@ 0x80
 8005326:	420b      	tst	r3, r1
 8005328:	d007      	beq.n	800533a <HAL_UART_IRQHandler+0x2c6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800532a:	2580      	movs	r5, #128	@ 0x80
 800532c:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800532e:	4011      	ands	r1, r2
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005330:	4028      	ands	r0, r5
 8005332:	4301      	orrs	r1, r0
 8005334:	d001      	beq.n	800533a <HAL_UART_IRQHandler+0x2c6>
    if (huart->TxISR != NULL)
 8005336:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8005338:	e6b1      	b.n	800509e <HAL_UART_IRQHandler+0x2a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800533a:	2140      	movs	r1, #64	@ 0x40
 800533c:	420b      	tst	r3, r1
 800533e:	d016      	beq.n	800536e <HAL_UART_IRQHandler+0x2fa>
 8005340:	420a      	tst	r2, r1
 8005342:	d014      	beq.n	800536e <HAL_UART_IRQHandler+0x2fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005344:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005348:	2301      	movs	r3, #1
 800534a:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800534e:	6822      	ldr	r2, [r4, #0]
 8005350:	6813      	ldr	r3, [r2, #0]
 8005352:	438b      	bics	r3, r1
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800535a:	0023      	movs	r3, r4
 800535c:	2220      	movs	r2, #32
 800535e:	3388      	adds	r3, #136	@ 0x88
 8005360:	601a      	str	r2, [r3, #0]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005362:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005364:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8005366:	67a3      	str	r3, [r4, #120]	@ 0x78
  HAL_UART_TxCpltCallback(huart);
 8005368:	f7ff fe76 	bl	8005058 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800536c:	e722      	b.n	80051b4 <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800536e:	0219      	lsls	r1, r3, #8
 8005370:	d514      	bpl.n	800539c <HAL_UART_IRQHandler+0x328>
 8005372:	0051      	lsls	r1, r2, #1
 8005374:	d512      	bpl.n	800539c <HAL_UART_IRQHandler+0x328>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005376:	0020      	movs	r0, r4
 8005378:	f000 fdf0 	bl	8005f5c <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800537c:	e71a      	b.n	80051b4 <HAL_UART_IRQHandler+0x140>
 800537e:	46c0      	nop			@ (mov r8, r8)
 8005380:	0000080f 	.word	0x0000080f
 8005384:	10000001 	.word	0x10000001
 8005388:	04000120 	.word	0x04000120
 800538c:	0800505d 	.word	0x0800505d
 8005390:	fffffeff 	.word	0xfffffeff
 8005394:	fffffedf 	.word	0xfffffedf
 8005398:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800539c:	01db      	lsls	r3, r3, #7
 800539e:	d400      	bmi.n	80053a2 <HAL_UART_IRQHandler+0x32e>
 80053a0:	e708      	b.n	80051b4 <HAL_UART_IRQHandler+0x140>
 80053a2:	2a00      	cmp	r2, #0
 80053a4:	db00      	blt.n	80053a8 <HAL_UART_IRQHandler+0x334>
 80053a6:	e705      	b.n	80051b4 <HAL_UART_IRQHandler+0x140>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80053a8:	0020      	movs	r0, r4
 80053aa:	f000 fdd6 	bl	8005f5a <HAL_UARTEx_RxFifoFullCallback>
    return;
 80053ae:	e701      	b.n	80051b4 <HAL_UART_IRQHandler+0x140>

080053b0 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053b0:	0001      	movs	r1, r0
{
 80053b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t uhMask = huart->Mask;
 80053b4:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053b6:	318c      	adds	r1, #140	@ 0x8c
 80053b8:	680c      	ldr	r4, [r1, #0]
  uint16_t uhMask = huart->Mask;
 80053ba:	3360      	adds	r3, #96	@ 0x60
 80053bc:	881a      	ldrh	r2, [r3, #0]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053be:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053c0:	2c22      	cmp	r4, #34	@ 0x22
 80053c2:	d157      	bne.n	8005474 <UART_RxISR_8BIT+0xc4>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80053c6:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 80053c8:	4013      	ands	r3, r2
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 80053ca:	0002      	movs	r2, r0
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80053cc:	7023      	strb	r3, [r4, #0]
    huart->pRxBuffPtr++;
 80053ce:	6d83      	ldr	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80053d0:	325e      	adds	r2, #94	@ 0x5e
    huart->pRxBuffPtr++;
 80053d2:	3301      	adds	r3, #1
 80053d4:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80053d6:	8813      	ldrh	r3, [r2, #0]
 80053d8:	3b01      	subs	r3, #1
 80053da:	b29b      	uxth	r3, r3
 80053dc:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 80053de:	8813      	ldrh	r3, [r2, #0]
 80053e0:	b29c      	uxth	r4, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d142      	bne.n	800546c <UART_RxISR_8BIT+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053e6:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ea:	3301      	adds	r3, #1
 80053ec:	f383 8810 	msr	PRIMASK, r3
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053f0:	6805      	ldr	r5, [r0, #0]
 80053f2:	4f23      	ldr	r7, [pc, #140]	@ (8005480 <UART_RxISR_8BIT+0xd0>)
 80053f4:	682a      	ldr	r2, [r5, #0]
 80053f6:	403a      	ands	r2, r7
 80053f8:	602a      	str	r2, [r5, #0]
 80053fa:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053fe:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005402:	f383 8810 	msr	PRIMASK, r3

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005406:	6805      	ldr	r5, [r0, #0]
 8005408:	68aa      	ldr	r2, [r5, #8]
 800540a:	439a      	bics	r2, r3
 800540c:	60aa      	str	r2, [r5, #8]
 800540e:	f386 8810 	msr	PRIMASK, r6

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005412:	2220      	movs	r2, #32
 8005414:	600a      	str	r2, [r1, #0]
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005416:	6802      	ldr	r2, [r0, #0]
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005418:	6704      	str	r4, [r0, #112]	@ 0x70
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800541a:	6852      	ldr	r2, [r2, #4]
      huart->RxISR = NULL;
 800541c:	6744      	str	r4, [r0, #116]	@ 0x74
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800541e:	0212      	lsls	r2, r2, #8
 8005420:	d50a      	bpl.n	8005438 <UART_RxISR_8BIT+0x88>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005422:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005426:	f383 8810 	msr	PRIMASK, r3
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800542a:	6802      	ldr	r2, [r0, #0]
 800542c:	4c15      	ldr	r4, [pc, #84]	@ (8005484 <UART_RxISR_8BIT+0xd4>)
 800542e:	6813      	ldr	r3, [r2, #0]
 8005430:	4023      	ands	r3, r4
 8005432:	6013      	str	r3, [r2, #0]
 8005434:	f381 8810 	msr	PRIMASK, r1
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005438:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800543a:	2b01      	cmp	r3, #1
 800543c:	d117      	bne.n	800546e <UART_RxISR_8BIT+0xbe>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800543e:	2200      	movs	r2, #0
 8005440:	66c2      	str	r2, [r0, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005442:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005446:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800544a:	6801      	ldr	r1, [r0, #0]
 800544c:	330f      	adds	r3, #15
 800544e:	680a      	ldr	r2, [r1, #0]
 8005450:	439a      	bics	r2, r3
 8005452:	600a      	str	r2, [r1, #0]
 8005454:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005458:	6802      	ldr	r2, [r0, #0]
 800545a:	69d1      	ldr	r1, [r2, #28]
 800545c:	4219      	tst	r1, r3
 800545e:	d000      	beq.n	8005462 <UART_RxISR_8BIT+0xb2>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005460:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005462:	0003      	movs	r3, r0
 8005464:	335c      	adds	r3, #92	@ 0x5c
 8005466:	8819      	ldrh	r1, [r3, #0]
 8005468:	f7ff fe03 	bl	8005072 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800546c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_UART_RxCpltCallback(huart);
 800546e:	f7fd faff 	bl	8002a70 <HAL_UART_RxCpltCallback>
 8005472:	e7fb      	b.n	800546c <UART_RxISR_8BIT+0xbc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005474:	2208      	movs	r2, #8
 8005476:	6999      	ldr	r1, [r3, #24]
 8005478:	430a      	orrs	r2, r1
 800547a:	619a      	str	r2, [r3, #24]
}
 800547c:	e7f6      	b.n	800546c <UART_RxISR_8BIT+0xbc>
 800547e:	46c0      	nop			@ (mov r8, r8)
 8005480:	fffffedf 	.word	0xfffffedf
 8005484:	fbffffff 	.word	0xfbffffff

08005488 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005488:	0002      	movs	r2, r0
{
 800548a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t uhMask = huart->Mask;
 800548c:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800548e:	328c      	adds	r2, #140	@ 0x8c
 8005490:	6811      	ldr	r1, [r2, #0]
  uint16_t uhMask = huart->Mask;
 8005492:	3360      	adds	r3, #96	@ 0x60
 8005494:	881c      	ldrh	r4, [r3, #0]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005496:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005498:	2922      	cmp	r1, #34	@ 0x22
 800549a:	d156      	bne.n	800554a <UART_RxISR_16BIT+0xc2>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800549c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800549e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 80054a0:	4021      	ands	r1, r4
 80054a2:	8019      	strh	r1, [r3, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 80054a4:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 80054a6:	3302      	adds	r3, #2
 80054a8:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80054aa:	315e      	adds	r1, #94	@ 0x5e
 80054ac:	880b      	ldrh	r3, [r1, #0]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	800b      	strh	r3, [r1, #0]

    if (huart->RxXferCount == 0U)
 80054b4:	880b      	ldrh	r3, [r1, #0]
 80054b6:	b29c      	uxth	r4, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d142      	bne.n	8005542 <UART_RxISR_16BIT+0xba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054bc:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c0:	3301      	adds	r3, #1
 80054c2:	f383 8810 	msr	PRIMASK, r3
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054c6:	6805      	ldr	r5, [r0, #0]
 80054c8:	4f22      	ldr	r7, [pc, #136]	@ (8005554 <UART_RxISR_16BIT+0xcc>)
 80054ca:	6829      	ldr	r1, [r5, #0]
 80054cc:	4039      	ands	r1, r7
 80054ce:	6029      	str	r1, [r5, #0]
 80054d0:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054d4:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054d8:	f383 8810 	msr	PRIMASK, r3

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054dc:	6805      	ldr	r5, [r0, #0]
 80054de:	68a9      	ldr	r1, [r5, #8]
 80054e0:	4399      	bics	r1, r3
 80054e2:	60a9      	str	r1, [r5, #8]
 80054e4:	f386 8810 	msr	PRIMASK, r6

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054e8:	2120      	movs	r1, #32
 80054ea:	6011      	str	r1, [r2, #0]
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054ec:	6802      	ldr	r2, [r0, #0]
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054ee:	6704      	str	r4, [r0, #112]	@ 0x70
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054f0:	6852      	ldr	r2, [r2, #4]
      huart->RxISR = NULL;
 80054f2:	6744      	str	r4, [r0, #116]	@ 0x74
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054f4:	0212      	lsls	r2, r2, #8
 80054f6:	d50a      	bpl.n	800550e <UART_RxISR_16BIT+0x86>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054f8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054fc:	f383 8810 	msr	PRIMASK, r3
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005500:	6802      	ldr	r2, [r0, #0]
 8005502:	4c15      	ldr	r4, [pc, #84]	@ (8005558 <UART_RxISR_16BIT+0xd0>)
 8005504:	6813      	ldr	r3, [r2, #0]
 8005506:	4023      	ands	r3, r4
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	f381 8810 	msr	PRIMASK, r1
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800550e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8005510:	2b01      	cmp	r3, #1
 8005512:	d117      	bne.n	8005544 <UART_RxISR_16BIT+0xbc>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005514:	2200      	movs	r2, #0
 8005516:	66c2      	str	r2, [r0, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005518:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800551c:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005520:	6801      	ldr	r1, [r0, #0]
 8005522:	330f      	adds	r3, #15
 8005524:	680a      	ldr	r2, [r1, #0]
 8005526:	439a      	bics	r2, r3
 8005528:	600a      	str	r2, [r1, #0]
 800552a:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800552e:	6802      	ldr	r2, [r0, #0]
 8005530:	69d1      	ldr	r1, [r2, #28]
 8005532:	4219      	tst	r1, r3
 8005534:	d000      	beq.n	8005538 <UART_RxISR_16BIT+0xb0>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005536:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005538:	0003      	movs	r3, r0
 800553a:	335c      	adds	r3, #92	@ 0x5c
 800553c:	8819      	ldrh	r1, [r3, #0]
 800553e:	f7ff fd98 	bl	8005072 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_UART_RxCpltCallback(huart);
 8005544:	f7fd fa94 	bl	8002a70 <HAL_UART_RxCpltCallback>
 8005548:	e7fb      	b.n	8005542 <UART_RxISR_16BIT+0xba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800554a:	2208      	movs	r2, #8
 800554c:	6999      	ldr	r1, [r3, #24]
 800554e:	430a      	orrs	r2, r1
 8005550:	619a      	str	r2, [r3, #24]
}
 8005552:	e7f6      	b.n	8005542 <UART_RxISR_16BIT+0xba>
 8005554:	fffffedf 	.word	0xfffffedf
 8005558:	fbffffff 	.word	0xfbffffff

0800555c <UART_RxISR_8BIT_FIFOEN>:
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  uhMask = huart->Mask;
 800555c:	0003      	movs	r3, r0
{
 800555e:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t  uhMask = huart->Mask;
 8005560:	3360      	adds	r3, #96	@ 0x60
 8005562:	881b      	ldrh	r3, [r3, #0]
{
 8005564:	b085      	sub	sp, #20
  uint16_t  uhMask = huart->Mask;
 8005566:	9302      	str	r3, [sp, #8]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005568:	6803      	ldr	r3, [r0, #0]
{
 800556a:	0004      	movs	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800556c:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	9203      	str	r2, [sp, #12]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	9201      	str	r2, [sp, #4]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005576:	0002      	movs	r2, r0
 8005578:	328c      	adds	r2, #140	@ 0x8c
 800557a:	6812      	ldr	r2, [r2, #0]
 800557c:	2a22      	cmp	r2, #34	@ 0x22
 800557e:	d000      	beq.n	8005582 <UART_RxISR_8BIT_FIFOEN+0x26>
 8005580:	e0c4      	b.n	800570c <UART_RxISR_8BIT_FIFOEN+0x1b0>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005582:	0003      	movs	r3, r0
 8005584:	3368      	adds	r3, #104	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <UART_RxISR_8BIT_FIFOEN+0x36>
 800558c:	2320      	movs	r3, #32
 800558e:	421d      	tst	r5, r3
 8005590:	d108      	bne.n	80055a4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005592:	0023      	movs	r3, r4
 8005594:	335e      	adds	r3, #94	@ 0x5e
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800559a:	2b00      	cmp	r3, #0
 800559c:	d000      	beq.n	80055a0 <UART_RxISR_8BIT_FIFOEN+0x44>
 800559e:	e095      	b.n	80056cc <UART_RxISR_8BIT_FIFOEN+0x170>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055a0:	b005      	add	sp, #20
 80055a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->RxXferCount--;
 80055a4:	0026      	movs	r6, r4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055a6:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80055a8:	9902      	ldr	r1, [sp, #8]
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80055ac:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80055ae:	400b      	ands	r3, r1
 80055b0:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 80055b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 80055b4:	365e      	adds	r6, #94	@ 0x5e
      huart->pRxBuffPtr++;
 80055b6:	3301      	adds	r3, #1
 80055b8:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 80055ba:	8833      	ldrh	r3, [r6, #0]
      isrflags = READ_REG(huart->Instance->ISR);
 80055bc:	6822      	ldr	r2, [r4, #0]
      huart->RxXferCount--;
 80055be:	3b01      	subs	r3, #1
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	8033      	strh	r3, [r6, #0]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80055c4:	2307      	movs	r3, #7
      isrflags = READ_REG(huart->Instance->ISR);
 80055c6:	69d5      	ldr	r5, [r2, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80055c8:	421d      	tst	r5, r3
 80055ca:	d02f      	beq.n	800562c <UART_RxISR_8BIT_FIFOEN+0xd0>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055cc:	3b06      	subs	r3, #6
 80055ce:	421d      	tst	r5, r3
 80055d0:	d008      	beq.n	80055e4 <UART_RxISR_8BIT_FIFOEN+0x88>
 80055d2:	9903      	ldr	r1, [sp, #12]
 80055d4:	05c9      	lsls	r1, r1, #23
 80055d6:	d505      	bpl.n	80055e4 <UART_RxISR_8BIT_FIFOEN+0x88>
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055d8:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055da:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055dc:	3190      	adds	r1, #144	@ 0x90
 80055de:	6808      	ldr	r0, [r1, #0]
 80055e0:	4303      	orrs	r3, r0
 80055e2:	600b      	str	r3, [r1, #0]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055e4:	2302      	movs	r3, #2
 80055e6:	421d      	tst	r5, r3
 80055e8:	d009      	beq.n	80055fe <UART_RxISR_8BIT_FIFOEN+0xa2>
 80055ea:	9901      	ldr	r1, [sp, #4]
 80055ec:	07c9      	lsls	r1, r1, #31
 80055ee:	d506      	bpl.n	80055fe <UART_RxISR_8BIT_FIFOEN+0xa2>
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055f0:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055f2:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055f4:	3190      	adds	r1, #144	@ 0x90
 80055f6:	6808      	ldr	r0, [r1, #0]
 80055f8:	18db      	adds	r3, r3, r3
 80055fa:	4303      	orrs	r3, r0
 80055fc:	600b      	str	r3, [r1, #0]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055fe:	2304      	movs	r3, #4
 8005600:	421d      	tst	r5, r3
 8005602:	d009      	beq.n	8005618 <UART_RxISR_8BIT_FIFOEN+0xbc>
 8005604:	9901      	ldr	r1, [sp, #4]
 8005606:	07c9      	lsls	r1, r1, #31
 8005608:	d506      	bpl.n	8005618 <UART_RxISR_8BIT_FIFOEN+0xbc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800560a:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800560c:	0022      	movs	r2, r4
 800560e:	3290      	adds	r2, #144	@ 0x90
 8005610:	6811      	ldr	r1, [r2, #0]
 8005612:	3b02      	subs	r3, #2
 8005614:	430b      	orrs	r3, r1
 8005616:	6013      	str	r3, [r2, #0]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005618:	0027      	movs	r7, r4
 800561a:	3790      	adds	r7, #144	@ 0x90
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d004      	beq.n	800562c <UART_RxISR_8BIT_FIFOEN+0xd0>
          HAL_UART_ErrorCallback(huart);
 8005622:	0020      	movs	r0, r4
 8005624:	f7ff fd19 	bl	800505a <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005628:	2300      	movs	r3, #0
 800562a:	603b      	str	r3, [r7, #0]
      if (huart->RxXferCount == 0U)
 800562c:	8833      	ldrh	r3, [r6, #0]
 800562e:	b299      	uxth	r1, r3
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1ab      	bne.n	800558c <UART_RxISR_8BIT_FIFOEN+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005634:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005638:	3301      	adds	r3, #1
 800563a:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800563e:	6820      	ldr	r0, [r4, #0]
 8005640:	4f35      	ldr	r7, [pc, #212]	@ (8005718 <UART_RxISR_8BIT_FIFOEN+0x1bc>)
 8005642:	6802      	ldr	r2, [r0, #0]
 8005644:	403a      	ands	r2, r7
 8005646:	6002      	str	r2, [r0, #0]
 8005648:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800564c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005650:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005654:	6820      	ldr	r0, [r4, #0]
 8005656:	4f31      	ldr	r7, [pc, #196]	@ (800571c <UART_RxISR_8BIT_FIFOEN+0x1c0>)
 8005658:	6882      	ldr	r2, [r0, #8]
 800565a:	403a      	ands	r2, r7
 800565c:	6082      	str	r2, [r0, #8]
 800565e:	f386 8810 	msr	PRIMASK, r6
        huart->RxState = HAL_UART_STATE_READY;
 8005662:	0022      	movs	r2, r4
 8005664:	2020      	movs	r0, #32
 8005666:	328c      	adds	r2, #140	@ 0x8c
 8005668:	6010      	str	r0, [r2, #0]
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800566a:	6822      	ldr	r2, [r4, #0]
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800566c:	6721      	str	r1, [r4, #112]	@ 0x70
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800566e:	6852      	ldr	r2, [r2, #4]
        huart->RxISR = NULL;
 8005670:	6761      	str	r1, [r4, #116]	@ 0x74
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005672:	0212      	lsls	r2, r2, #8
 8005674:	d50a      	bpl.n	800568c <UART_RxISR_8BIT_FIFOEN+0x130>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005676:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800567a:	f383 8810 	msr	PRIMASK, r3
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800567e:	6822      	ldr	r2, [r4, #0]
 8005680:	4827      	ldr	r0, [pc, #156]	@ (8005720 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 8005682:	6813      	ldr	r3, [r2, #0]
 8005684:	4003      	ands	r3, r0
 8005686:	6013      	str	r3, [r2, #0]
 8005688:	f381 8810 	msr	PRIMASK, r1
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800568c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800568e:	2b01      	cmp	r3, #1
 8005690:	d118      	bne.n	80056c4 <UART_RxISR_8BIT_FIFOEN+0x168>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005692:	2200      	movs	r2, #0
 8005694:	66e2      	str	r2, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005696:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800569a:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800569e:	6821      	ldr	r1, [r4, #0]
 80056a0:	330f      	adds	r3, #15
 80056a2:	680a      	ldr	r2, [r1, #0]
 80056a4:	439a      	bics	r2, r3
 80056a6:	600a      	str	r2, [r1, #0]
 80056a8:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056ac:	6822      	ldr	r2, [r4, #0]
 80056ae:	69d1      	ldr	r1, [r2, #28]
 80056b0:	4219      	tst	r1, r3
 80056b2:	d000      	beq.n	80056b6 <UART_RxISR_8BIT_FIFOEN+0x15a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056b4:	6213      	str	r3, [r2, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056b6:	0023      	movs	r3, r4
 80056b8:	335c      	adds	r3, #92	@ 0x5c
 80056ba:	0020      	movs	r0, r4
 80056bc:	8819      	ldrh	r1, [r3, #0]
 80056be:	f7ff fcd8 	bl	8005072 <HAL_UARTEx_RxEventCallback>
 80056c2:	e763      	b.n	800558c <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_RxCpltCallback(huart);
 80056c4:	0020      	movs	r0, r4
 80056c6:	f7fd f9d3 	bl	8002a70 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80056ca:	e75f      	b.n	800558c <UART_RxISR_8BIT_FIFOEN+0x30>
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80056cc:	0023      	movs	r3, r4
 80056ce:	3368      	adds	r3, #104	@ 0x68
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d800      	bhi.n	80056d8 <UART_RxISR_8BIT_FIFOEN+0x17c>
 80056d6:	e763      	b.n	80055a0 <UART_RxISR_8BIT_FIFOEN+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056d8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056dc:	2201      	movs	r2, #1
 80056de:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80056e2:	6821      	ldr	r1, [r4, #0]
 80056e4:	4d0f      	ldr	r5, [pc, #60]	@ (8005724 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 80056e6:	688b      	ldr	r3, [r1, #8]
 80056e8:	402b      	ands	r3, r5
 80056ea:	608b      	str	r3, [r1, #8]
 80056ec:	f380 8810 	msr	PRIMASK, r0
      huart->RxISR = UART_RxISR_8BIT;
 80056f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005728 <UART_RxISR_8BIT_FIFOEN+0x1cc>)
 80056f2:	6763      	str	r3, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056f4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f8:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80056fc:	2320      	movs	r3, #32
 80056fe:	6822      	ldr	r2, [r4, #0]
 8005700:	6810      	ldr	r0, [r2, #0]
 8005702:	4303      	orrs	r3, r0
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	f381 8810 	msr	PRIMASK, r1
}
 800570a:	e749      	b.n	80055a0 <UART_RxISR_8BIT_FIFOEN+0x44>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800570c:	2208      	movs	r2, #8
 800570e:	6999      	ldr	r1, [r3, #24]
 8005710:	430a      	orrs	r2, r1
 8005712:	619a      	str	r2, [r3, #24]
}
 8005714:	e744      	b.n	80055a0 <UART_RxISR_8BIT_FIFOEN+0x44>
 8005716:	46c0      	nop			@ (mov r8, r8)
 8005718:	fffffeff 	.word	0xfffffeff
 800571c:	effffffe 	.word	0xeffffffe
 8005720:	fbffffff 	.word	0xfbffffff
 8005724:	efffffff 	.word	0xefffffff
 8005728:	080053b1 	.word	0x080053b1

0800572c <UART_RxISR_16BIT_FIFOEN>:
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800572c:	0003      	movs	r3, r0
{
 800572e:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t  uhMask = huart->Mask;
 8005730:	3360      	adds	r3, #96	@ 0x60
 8005732:	881b      	ldrh	r3, [r3, #0]
{
 8005734:	b085      	sub	sp, #20
  uint16_t  uhMask = huart->Mask;
 8005736:	9302      	str	r3, [sp, #8]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005738:	6803      	ldr	r3, [r0, #0]
{
 800573a:	0004      	movs	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800573c:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	9203      	str	r2, [sp, #12]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	9201      	str	r2, [sp, #4]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005746:	0002      	movs	r2, r0
 8005748:	328c      	adds	r2, #140	@ 0x8c
 800574a:	6812      	ldr	r2, [r2, #0]
 800574c:	2a22      	cmp	r2, #34	@ 0x22
 800574e:	d000      	beq.n	8005752 <UART_RxISR_16BIT_FIFOEN+0x26>
 8005750:	e0c2      	b.n	80058d8 <UART_RxISR_16BIT_FIFOEN+0x1ac>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005752:	0003      	movs	r3, r0
 8005754:	3368      	adds	r3, #104	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <UART_RxISR_16BIT_FIFOEN+0x36>
 800575c:	2320      	movs	r3, #32
 800575e:	421d      	tst	r5, r3
 8005760:	d108      	bne.n	8005774 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005762:	0023      	movs	r3, r4
 8005764:	335e      	adds	r3, #94	@ 0x5e
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800576a:	2b00      	cmp	r3, #0
 800576c:	d000      	beq.n	8005770 <UART_RxISR_16BIT_FIFOEN+0x44>
 800576e:	e093      	b.n	8005898 <UART_RxISR_16BIT_FIFOEN+0x16c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005770:	b005      	add	sp, #20
 8005772:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->RxXferCount--;
 8005774:	0026      	movs	r6, r4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005776:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8005778:	9802      	ldr	r0, [sp, #8]
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800577a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800577c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 800577e:	4001      	ands	r1, r0
 8005780:	8011      	strh	r1, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8005782:	3202      	adds	r2, #2
 8005784:	65a2      	str	r2, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8005786:	365e      	adds	r6, #94	@ 0x5e
 8005788:	8832      	ldrh	r2, [r6, #0]
 800578a:	3a01      	subs	r2, #1
 800578c:	b292      	uxth	r2, r2
 800578e:	8032      	strh	r2, [r6, #0]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005790:	2207      	movs	r2, #7
      isrflags = READ_REG(huart->Instance->ISR);
 8005792:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005794:	4215      	tst	r5, r2
 8005796:	d02f      	beq.n	80057f8 <UART_RxISR_16BIT_FIFOEN+0xcc>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005798:	3a06      	subs	r2, #6
 800579a:	4215      	tst	r5, r2
 800579c:	d008      	beq.n	80057b0 <UART_RxISR_16BIT_FIFOEN+0x84>
 800579e:	9903      	ldr	r1, [sp, #12]
 80057a0:	05c9      	lsls	r1, r1, #23
 80057a2:	d505      	bpl.n	80057b0 <UART_RxISR_16BIT_FIFOEN+0x84>
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057a4:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057a6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057a8:	3190      	adds	r1, #144	@ 0x90
 80057aa:	6808      	ldr	r0, [r1, #0]
 80057ac:	4302      	orrs	r2, r0
 80057ae:	600a      	str	r2, [r1, #0]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057b0:	2202      	movs	r2, #2
 80057b2:	4215      	tst	r5, r2
 80057b4:	d009      	beq.n	80057ca <UART_RxISR_16BIT_FIFOEN+0x9e>
 80057b6:	9901      	ldr	r1, [sp, #4]
 80057b8:	07c9      	lsls	r1, r1, #31
 80057ba:	d506      	bpl.n	80057ca <UART_RxISR_16BIT_FIFOEN+0x9e>
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057bc:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057be:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057c0:	3190      	adds	r1, #144	@ 0x90
 80057c2:	6808      	ldr	r0, [r1, #0]
 80057c4:	1892      	adds	r2, r2, r2
 80057c6:	4302      	orrs	r2, r0
 80057c8:	600a      	str	r2, [r1, #0]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057ca:	2204      	movs	r2, #4
 80057cc:	4215      	tst	r5, r2
 80057ce:	d009      	beq.n	80057e4 <UART_RxISR_16BIT_FIFOEN+0xb8>
 80057d0:	9901      	ldr	r1, [sp, #4]
 80057d2:	07c9      	lsls	r1, r1, #31
 80057d4:	d506      	bpl.n	80057e4 <UART_RxISR_16BIT_FIFOEN+0xb8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80057d6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057d8:	0022      	movs	r2, r4
 80057da:	2302      	movs	r3, #2
 80057dc:	3290      	adds	r2, #144	@ 0x90
 80057de:	6811      	ldr	r1, [r2, #0]
 80057e0:	430b      	orrs	r3, r1
 80057e2:	6013      	str	r3, [r2, #0]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057e4:	0027      	movs	r7, r4
 80057e6:	3790      	adds	r7, #144	@ 0x90
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d004      	beq.n	80057f8 <UART_RxISR_16BIT_FIFOEN+0xcc>
          HAL_UART_ErrorCallback(huart);
 80057ee:	0020      	movs	r0, r4
 80057f0:	f7ff fc33 	bl	800505a <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f4:	2300      	movs	r3, #0
 80057f6:	603b      	str	r3, [r7, #0]
      if (huart->RxXferCount == 0U)
 80057f8:	8833      	ldrh	r3, [r6, #0]
 80057fa:	b299      	uxth	r1, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1ad      	bne.n	800575c <UART_RxISR_16BIT_FIFOEN+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005800:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005804:	3301      	adds	r3, #1
 8005806:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800580a:	6820      	ldr	r0, [r4, #0]
 800580c:	4f35      	ldr	r7, [pc, #212]	@ (80058e4 <UART_RxISR_16BIT_FIFOEN+0x1b8>)
 800580e:	6802      	ldr	r2, [r0, #0]
 8005810:	403a      	ands	r2, r7
 8005812:	6002      	str	r2, [r0, #0]
 8005814:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005818:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800581c:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005820:	6820      	ldr	r0, [r4, #0]
 8005822:	4f31      	ldr	r7, [pc, #196]	@ (80058e8 <UART_RxISR_16BIT_FIFOEN+0x1bc>)
 8005824:	6882      	ldr	r2, [r0, #8]
 8005826:	403a      	ands	r2, r7
 8005828:	6082      	str	r2, [r0, #8]
 800582a:	f386 8810 	msr	PRIMASK, r6
        huart->RxState = HAL_UART_STATE_READY;
 800582e:	0022      	movs	r2, r4
 8005830:	2020      	movs	r0, #32
 8005832:	328c      	adds	r2, #140	@ 0x8c
 8005834:	6010      	str	r0, [r2, #0]
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005836:	6822      	ldr	r2, [r4, #0]
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005838:	6721      	str	r1, [r4, #112]	@ 0x70
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800583a:	6852      	ldr	r2, [r2, #4]
        huart->RxISR = NULL;
 800583c:	6761      	str	r1, [r4, #116]	@ 0x74
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800583e:	0212      	lsls	r2, r2, #8
 8005840:	d50a      	bpl.n	8005858 <UART_RxISR_16BIT_FIFOEN+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005842:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005846:	f383 8810 	msr	PRIMASK, r3
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800584a:	6822      	ldr	r2, [r4, #0]
 800584c:	4827      	ldr	r0, [pc, #156]	@ (80058ec <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 800584e:	6813      	ldr	r3, [r2, #0]
 8005850:	4003      	ands	r3, r0
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	f381 8810 	msr	PRIMASK, r1
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005858:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800585a:	2b01      	cmp	r3, #1
 800585c:	d118      	bne.n	8005890 <UART_RxISR_16BIT_FIFOEN+0x164>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800585e:	2200      	movs	r2, #0
 8005860:	66e2      	str	r2, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005862:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005866:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800586a:	6821      	ldr	r1, [r4, #0]
 800586c:	330f      	adds	r3, #15
 800586e:	680a      	ldr	r2, [r1, #0]
 8005870:	439a      	bics	r2, r3
 8005872:	600a      	str	r2, [r1, #0]
 8005874:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005878:	6822      	ldr	r2, [r4, #0]
 800587a:	69d1      	ldr	r1, [r2, #28]
 800587c:	4219      	tst	r1, r3
 800587e:	d000      	beq.n	8005882 <UART_RxISR_16BIT_FIFOEN+0x156>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005880:	6213      	str	r3, [r2, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005882:	0023      	movs	r3, r4
 8005884:	335c      	adds	r3, #92	@ 0x5c
 8005886:	0020      	movs	r0, r4
 8005888:	8819      	ldrh	r1, [r3, #0]
 800588a:	f7ff fbf2 	bl	8005072 <HAL_UARTEx_RxEventCallback>
 800588e:	e765      	b.n	800575c <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_RxCpltCallback(huart);
 8005890:	0020      	movs	r0, r4
 8005892:	f7fd f8ed 	bl	8002a70 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005896:	e761      	b.n	800575c <UART_RxISR_16BIT_FIFOEN+0x30>
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005898:	0023      	movs	r3, r4
 800589a:	3368      	adds	r3, #104	@ 0x68
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	4293      	cmp	r3, r2
 80058a0:	d800      	bhi.n	80058a4 <UART_RxISR_16BIT_FIFOEN+0x178>
 80058a2:	e765      	b.n	8005770 <UART_RxISR_16BIT_FIFOEN+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058a4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058a8:	2201      	movs	r2, #1
 80058aa:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80058ae:	6821      	ldr	r1, [r4, #0]
 80058b0:	4d0f      	ldr	r5, [pc, #60]	@ (80058f0 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 80058b2:	688b      	ldr	r3, [r1, #8]
 80058b4:	402b      	ands	r3, r5
 80058b6:	608b      	str	r3, [r1, #8]
 80058b8:	f380 8810 	msr	PRIMASK, r0
      huart->RxISR = UART_RxISR_16BIT;
 80058bc:	4b0d      	ldr	r3, [pc, #52]	@ (80058f4 <UART_RxISR_16BIT_FIFOEN+0x1c8>)
 80058be:	6763      	str	r3, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058c0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058c4:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80058c8:	2320      	movs	r3, #32
 80058ca:	6822      	ldr	r2, [r4, #0]
 80058cc:	6810      	ldr	r0, [r2, #0]
 80058ce:	4303      	orrs	r3, r0
 80058d0:	6013      	str	r3, [r2, #0]
 80058d2:	f381 8810 	msr	PRIMASK, r1
}
 80058d6:	e74b      	b.n	8005770 <UART_RxISR_16BIT_FIFOEN+0x44>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058d8:	2208      	movs	r2, #8
 80058da:	6999      	ldr	r1, [r3, #24]
 80058dc:	430a      	orrs	r2, r1
 80058de:	619a      	str	r2, [r3, #24]
}
 80058e0:	e746      	b.n	8005770 <UART_RxISR_16BIT_FIFOEN+0x44>
 80058e2:	46c0      	nop			@ (mov r8, r8)
 80058e4:	fffffeff 	.word	0xfffffeff
 80058e8:	effffffe 	.word	0xeffffffe
 80058ec:	fbffffff 	.word	0xfbffffff
 80058f0:	efffffff 	.word	0xefffffff
 80058f4:	08005489 	.word	0x08005489

080058f8 <UART_SetConfig>:
{
 80058f8:	b570      	push	{r4, r5, r6, lr}
 80058fa:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058fc:	6925      	ldr	r5, [r4, #16]
 80058fe:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005900:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005902:	4329      	orrs	r1, r5
 8005904:	6965      	ldr	r5, [r4, #20]
 8005906:	69c2      	ldr	r2, [r0, #28]
 8005908:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800590a:	6818      	ldr	r0, [r3, #0]
 800590c:	4d49      	ldr	r5, [pc, #292]	@ (8005a34 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800590e:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005910:	4028      	ands	r0, r5
 8005912:	4301      	orrs	r1, r0
 8005914:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005916:	6859      	ldr	r1, [r3, #4]
 8005918:	4847      	ldr	r0, [pc, #284]	@ (8005a38 <UART_SetConfig+0x140>)
    tmpreg |= huart->Init.OneBitSampling;
 800591a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800591c:	4001      	ands	r1, r0
 800591e:	68e0      	ldr	r0, [r4, #12]
 8005920:	4301      	orrs	r1, r0
 8005922:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005924:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005926:	6898      	ldr	r0, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8005928:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800592a:	4d44      	ldr	r5, [pc, #272]	@ (8005a3c <UART_SetConfig+0x144>)
 800592c:	4028      	ands	r0, r5
 800592e:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005930:	200f      	movs	r0, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005932:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005934:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005936:	4381      	bics	r1, r0
 8005938:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800593a:	4301      	orrs	r1, r0
 800593c:	62d9      	str	r1, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800593e:	4940      	ldr	r1, [pc, #256]	@ (8005a40 <UART_SetConfig+0x148>)
 8005940:	428b      	cmp	r3, r1
 8005942:	d115      	bne.n	8005970 <UART_SetConfig+0x78>
 8005944:	2103      	movs	r1, #3
 8005946:	4b3f      	ldr	r3, [pc, #252]	@ (8005a44 <UART_SetConfig+0x14c>)
 8005948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800594a:	400b      	ands	r3, r1
 800594c:	3b01      	subs	r3, #1
 800594e:	2b02      	cmp	r3, #2
 8005950:	d860      	bhi.n	8005a14 <UART_SetConfig+0x11c>
 8005952:	493d      	ldr	r1, [pc, #244]	@ (8005a48 <UART_SetConfig+0x150>)
 8005954:	5cc8      	ldrb	r0, [r1, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005956:	2380      	movs	r3, #128	@ 0x80
 8005958:	021b      	lsls	r3, r3, #8
 800595a:	429a      	cmp	r2, r3
 800595c:	d12f      	bne.n	80059be <UART_SetConfig+0xc6>
    switch (clocksource)
 800595e:	2808      	cmp	r0, #8
 8005960:	d856      	bhi.n	8005a10 <UART_SetConfig+0x118>
 8005962:	f7fa fbdf 	bl	8000124 <__gnu_thumb1_case_uqi>
 8005966:	555b      	.short	0x555b
 8005968:	550b550e 	.word	0x550b550e
 800596c:	5555      	.short	0x5555
 800596e:	0f          	.byte	0x0f
 800596f:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005970:	4936      	ldr	r1, [pc, #216]	@ (8005a4c <UART_SetConfig+0x154>)
 8005972:	185b      	adds	r3, r3, r1
 8005974:	1e59      	subs	r1, r3, #1
 8005976:	418b      	sbcs	r3, r1
 8005978:	0118      	lsls	r0, r3, #4
 800597a:	e7ec      	b.n	8005956 <UART_SetConfig+0x5e>
        pclk = HAL_RCC_GetSysClockFreq();
 800597c:	f7fe fc0c 	bl	8004198 <HAL_RCC_GetSysClockFreq>
 8005980:	e04e      	b.n	8005a20 <UART_SetConfig+0x128>
    switch (clocksource)
 8005982:	4a33      	ldr	r2, [pc, #204]	@ (8005a50 <UART_SetConfig+0x158>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005984:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005986:	4b33      	ldr	r3, [pc, #204]	@ (8005a54 <UART_SetConfig+0x15c>)
 8005988:	0049      	lsls	r1, r1, #1
 800598a:	0010      	movs	r0, r2
 800598c:	5ac9      	ldrh	r1, [r1, r3]
 800598e:	f7fa fbdd 	bl	800014c <__udivsi3>
 8005992:	6865      	ldr	r5, [r4, #4]
 8005994:	0040      	lsls	r0, r0, #1
 8005996:	086b      	lsrs	r3, r5, #1
 8005998:	18c0      	adds	r0, r0, r3
 800599a:	0029      	movs	r1, r5
 800599c:	f7fa fbd6 	bl	800014c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059a0:	0002      	movs	r2, r0
 80059a2:	4b2d      	ldr	r3, [pc, #180]	@ (8005a58 <UART_SetConfig+0x160>)
 80059a4:	3a10      	subs	r2, #16
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d832      	bhi.n	8005a10 <UART_SetConfig+0x118>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059aa:	230f      	movs	r3, #15
 80059ac:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059ae:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059b0:	439a      	bics	r2, r3
 80059b2:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059b4:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80059b6:	6822      	ldr	r2, [r4, #0]
 80059b8:	4303      	orrs	r3, r0
 80059ba:	60d3      	str	r3, [r2, #12]
 80059bc:	e032      	b.n	8005a24 <UART_SetConfig+0x12c>
    switch (clocksource)
 80059be:	2808      	cmp	r0, #8
 80059c0:	d826      	bhi.n	8005a10 <UART_SetConfig+0x118>
 80059c2:	f7fa fbaf 	bl	8000124 <__gnu_thumb1_case_uqi>
 80059c6:	251a      	.short	0x251a
 80059c8:	251f2505 	.word	0x251f2505
 80059cc:	2525      	.short	0x2525
 80059ce:	22          	.byte	0x22
 80059cf:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 80059d0:	481f      	ldr	r0, [pc, #124]	@ (8005a50 <UART_SetConfig+0x158>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059d2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80059d4:	4b1f      	ldr	r3, [pc, #124]	@ (8005a54 <UART_SetConfig+0x15c>)
 80059d6:	0052      	lsls	r2, r2, #1
 80059d8:	5ad1      	ldrh	r1, [r2, r3]
 80059da:	f7fa fbb7 	bl	800014c <__udivsi3>
 80059de:	6865      	ldr	r5, [r4, #4]
 80059e0:	086b      	lsrs	r3, r5, #1
 80059e2:	18c0      	adds	r0, r0, r3
 80059e4:	0029      	movs	r1, r5
 80059e6:	f7fa fbb1 	bl	800014c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059ea:	0002      	movs	r2, r0
 80059ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005a58 <UART_SetConfig+0x160>)
 80059ee:	3a10      	subs	r2, #16
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d80d      	bhi.n	8005a10 <UART_SetConfig+0x118>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	60d8      	str	r0, [r3, #12]
 80059f8:	e014      	b.n	8005a24 <UART_SetConfig+0x12c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80059fa:	f7fe fcbb 	bl	8004374 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d010      	beq.n	8005a24 <UART_SetConfig+0x12c>
 8005a02:	e7e6      	b.n	80059d2 <UART_SetConfig+0xda>
        pclk = HAL_RCC_GetSysClockFreq();
 8005a04:	f7fe fbc8 	bl	8004198 <HAL_RCC_GetSysClockFreq>
        break;
 8005a08:	e7f9      	b.n	80059fe <UART_SetConfig+0x106>
    switch (clocksource)
 8005a0a:	2080      	movs	r0, #128	@ 0x80
 8005a0c:	0200      	lsls	r0, r0, #8
 8005a0e:	e7e0      	b.n	80059d2 <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 8005a10:	2001      	movs	r0, #1
 8005a12:	e008      	b.n	8005a26 <UART_SetConfig+0x12e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a14:	2380      	movs	r3, #128	@ 0x80
 8005a16:	021b      	lsls	r3, r3, #8
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d1ee      	bne.n	80059fa <UART_SetConfig+0x102>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a1c:	f7fe fcaa 	bl	8004374 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8005a20:	1e02      	subs	r2, r0, #0
    if (pclk != 0U)
 8005a22:	d1af      	bne.n	8005984 <UART_SetConfig+0x8c>
        ret = HAL_ERROR;
 8005a24:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8005a26:	4b0d      	ldr	r3, [pc, #52]	@ (8005a5c <UART_SetConfig+0x164>)
 8005a28:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8005a2e:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8005a30:	bd70      	pop	{r4, r5, r6, pc}
 8005a32:	46c0      	nop			@ (mov r8, r8)
 8005a34:	cfff69f3 	.word	0xcfff69f3
 8005a38:	ffffcfff 	.word	0xffffcfff
 8005a3c:	11fff4ff 	.word	0x11fff4ff
 8005a40:	40013800 	.word	0x40013800
 8005a44:	40021000 	.word	0x40021000
 8005a48:	08007010 	.word	0x08007010
 8005a4c:	bfffbc00 	.word	0xbfffbc00
 8005a50:	00f42400 	.word	0x00f42400
 8005a54:	08007014 	.word	0x08007014
 8005a58:	0000ffef 	.word	0x0000ffef
 8005a5c:	00010001 	.word	0x00010001

08005a60 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a60:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8005a62:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a64:	071a      	lsls	r2, r3, #28
 8005a66:	d506      	bpl.n	8005a76 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a68:	6801      	ldr	r1, [r0, #0]
 8005a6a:	4c28      	ldr	r4, [pc, #160]	@ (8005b0c <UART_AdvFeatureConfig+0xac>)
 8005a6c:	684a      	ldr	r2, [r1, #4]
 8005a6e:	4022      	ands	r2, r4
 8005a70:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8005a72:	4322      	orrs	r2, r4
 8005a74:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a76:	07da      	lsls	r2, r3, #31
 8005a78:	d506      	bpl.n	8005a88 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a7a:	6801      	ldr	r1, [r0, #0]
 8005a7c:	4c24      	ldr	r4, [pc, #144]	@ (8005b10 <UART_AdvFeatureConfig+0xb0>)
 8005a7e:	684a      	ldr	r2, [r1, #4]
 8005a80:	4022      	ands	r2, r4
 8005a82:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8005a84:	4322      	orrs	r2, r4
 8005a86:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a88:	079a      	lsls	r2, r3, #30
 8005a8a:	d506      	bpl.n	8005a9a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a8c:	6801      	ldr	r1, [r0, #0]
 8005a8e:	4c21      	ldr	r4, [pc, #132]	@ (8005b14 <UART_AdvFeatureConfig+0xb4>)
 8005a90:	684a      	ldr	r2, [r1, #4]
 8005a92:	4022      	ands	r2, r4
 8005a94:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8005a96:	4322      	orrs	r2, r4
 8005a98:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a9a:	075a      	lsls	r2, r3, #29
 8005a9c:	d506      	bpl.n	8005aac <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a9e:	6801      	ldr	r1, [r0, #0]
 8005aa0:	4c1d      	ldr	r4, [pc, #116]	@ (8005b18 <UART_AdvFeatureConfig+0xb8>)
 8005aa2:	684a      	ldr	r2, [r1, #4]
 8005aa4:	4022      	ands	r2, r4
 8005aa6:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8005aa8:	4322      	orrs	r2, r4
 8005aaa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005aac:	06da      	lsls	r2, r3, #27
 8005aae:	d506      	bpl.n	8005abe <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ab0:	6801      	ldr	r1, [r0, #0]
 8005ab2:	4c1a      	ldr	r4, [pc, #104]	@ (8005b1c <UART_AdvFeatureConfig+0xbc>)
 8005ab4:	688a      	ldr	r2, [r1, #8]
 8005ab6:	4022      	ands	r2, r4
 8005ab8:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8005aba:	4322      	orrs	r2, r4
 8005abc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005abe:	069a      	lsls	r2, r3, #26
 8005ac0:	d506      	bpl.n	8005ad0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ac2:	6801      	ldr	r1, [r0, #0]
 8005ac4:	4c16      	ldr	r4, [pc, #88]	@ (8005b20 <UART_AdvFeatureConfig+0xc0>)
 8005ac6:	688a      	ldr	r2, [r1, #8]
 8005ac8:	4022      	ands	r2, r4
 8005aca:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8005acc:	4322      	orrs	r2, r4
 8005ace:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ad0:	065a      	lsls	r2, r3, #25
 8005ad2:	d510      	bpl.n	8005af6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ad4:	6801      	ldr	r1, [r0, #0]
 8005ad6:	4d13      	ldr	r5, [pc, #76]	@ (8005b24 <UART_AdvFeatureConfig+0xc4>)
 8005ad8:	684a      	ldr	r2, [r1, #4]
 8005ada:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005adc:	402a      	ands	r2, r5
 8005ade:	4322      	orrs	r2, r4
 8005ae0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ae2:	2280      	movs	r2, #128	@ 0x80
 8005ae4:	0352      	lsls	r2, r2, #13
 8005ae6:	4294      	cmp	r4, r2
 8005ae8:	d105      	bne.n	8005af6 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005aea:	684a      	ldr	r2, [r1, #4]
 8005aec:	4c0e      	ldr	r4, [pc, #56]	@ (8005b28 <UART_AdvFeatureConfig+0xc8>)
 8005aee:	4022      	ands	r2, r4
 8005af0:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8005af2:	4322      	orrs	r2, r4
 8005af4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005af6:	061b      	lsls	r3, r3, #24
 8005af8:	d506      	bpl.n	8005b08 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005afa:	6802      	ldr	r2, [r0, #0]
 8005afc:	490b      	ldr	r1, [pc, #44]	@ (8005b2c <UART_AdvFeatureConfig+0xcc>)
 8005afe:	6853      	ldr	r3, [r2, #4]
 8005b00:	400b      	ands	r3, r1
 8005b02:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8005b04:	430b      	orrs	r3, r1
 8005b06:	6053      	str	r3, [r2, #4]
}
 8005b08:	bd30      	pop	{r4, r5, pc}
 8005b0a:	46c0      	nop			@ (mov r8, r8)
 8005b0c:	ffff7fff 	.word	0xffff7fff
 8005b10:	fffdffff 	.word	0xfffdffff
 8005b14:	fffeffff 	.word	0xfffeffff
 8005b18:	fffbffff 	.word	0xfffbffff
 8005b1c:	ffffefff 	.word	0xffffefff
 8005b20:	ffffdfff 	.word	0xffffdfff
 8005b24:	ffefffff 	.word	0xffefffff
 8005b28:	ff9fffff 	.word	0xff9fffff
 8005b2c:	fff7ffff 	.word	0xfff7ffff

08005b30 <UART_WaitOnFlagUntilTimeout>:
{
 8005b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b32:	0004      	movs	r4, r0
 8005b34:	000d      	movs	r5, r1
 8005b36:	0017      	movs	r7, r2
 8005b38:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b3a:	6822      	ldr	r2, [r4, #0]
 8005b3c:	69d3      	ldr	r3, [r2, #28]
 8005b3e:	402b      	ands	r3, r5
 8005b40:	1b5b      	subs	r3, r3, r5
 8005b42:	4259      	negs	r1, r3
 8005b44:	414b      	adcs	r3, r1
 8005b46:	42bb      	cmp	r3, r7
 8005b48:	d001      	beq.n	8005b4e <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	e026      	b.n	8005b9c <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8005b4e:	9b08      	ldr	r3, [sp, #32]
 8005b50:	3301      	adds	r3, #1
 8005b52:	d0f3      	beq.n	8005b3c <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b54:	f7fd fd66 	bl	8003624 <HAL_GetTick>
 8005b58:	9b00      	ldr	r3, [sp, #0]
 8005b5a:	1ac0      	subs	r0, r0, r3
 8005b5c:	9b08      	ldr	r3, [sp, #32]
 8005b5e:	4298      	cmp	r0, r3
 8005b60:	d82d      	bhi.n	8005bbe <UART_WaitOnFlagUntilTimeout+0x8e>
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d02b      	beq.n	8005bbe <UART_WaitOnFlagUntilTimeout+0x8e>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	0752      	lsls	r2, r2, #29
 8005b6c:	d5e5      	bpl.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xa>
 8005b6e:	002a      	movs	r2, r5
 8005b70:	2140      	movs	r1, #64	@ 0x40
 8005b72:	3a40      	subs	r2, #64	@ 0x40
 8005b74:	438a      	bics	r2, r1
 8005b76:	d0e0      	beq.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b78:	69da      	ldr	r2, [r3, #28]
 8005b7a:	2608      	movs	r6, #8
 8005b7c:	0011      	movs	r1, r2
 8005b7e:	4031      	ands	r1, r6
 8005b80:	9101      	str	r1, [sp, #4]
 8005b82:	4232      	tst	r2, r6
 8005b84:	d00b      	beq.n	8005b9e <UART_WaitOnFlagUntilTimeout+0x6e>
          UART_EndRxTransfer(huart);
 8005b86:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b88:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 8005b8a:	f7ff fa33 	bl	8004ff4 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b8e:	0023      	movs	r3, r4
 8005b90:	3390      	adds	r3, #144	@ 0x90
 8005b92:	601e      	str	r6, [r3, #0]
          __HAL_UNLOCK(huart);
 8005b94:	2300      	movs	r3, #0
          return HAL_ERROR;
 8005b96:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 8005b98:	3484      	adds	r4, #132	@ 0x84
 8005b9a:	7023      	strb	r3, [r4, #0]
}
 8005b9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b9e:	2280      	movs	r2, #128	@ 0x80
 8005ba0:	69d9      	ldr	r1, [r3, #28]
 8005ba2:	0112      	lsls	r2, r2, #4
 8005ba4:	4211      	tst	r1, r2
 8005ba6:	d0c8      	beq.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ba8:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8005baa:	0020      	movs	r0, r4
 8005bac:	f7ff fa22 	bl	8004ff4 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bb0:	0023      	movs	r3, r4
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	3390      	adds	r3, #144	@ 0x90
 8005bb6:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(huart);
 8005bb8:	9b01      	ldr	r3, [sp, #4]
 8005bba:	3484      	adds	r4, #132	@ 0x84
 8005bbc:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8005bbe:	2003      	movs	r0, #3
 8005bc0:	e7ec      	b.n	8005b9c <UART_WaitOnFlagUntilTimeout+0x6c>

08005bc2 <HAL_UART_Transmit>:
{
 8005bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bc4:	0017      	movs	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005bc6:	0002      	movs	r2, r0
{
 8005bc8:	b087      	sub	sp, #28
  if (huart->gState == HAL_UART_STATE_READY)
 8005bca:	3288      	adds	r2, #136	@ 0x88
{
 8005bcc:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8005bce:	6813      	ldr	r3, [r2, #0]
{
 8005bd0:	0004      	movs	r4, r0
 8005bd2:	000d      	movs	r5, r1
    return HAL_BUSY;
 8005bd4:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	d139      	bne.n	8005c4e <HAL_UART_Transmit+0x8c>
      return  HAL_ERROR;
 8005bda:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8005bdc:	2900      	cmp	r1, #0
 8005bde:	d036      	beq.n	8005c4e <HAL_UART_Transmit+0x8c>
 8005be0:	2f00      	cmp	r7, #0
 8005be2:	d034      	beq.n	8005c4e <HAL_UART_Transmit+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005be4:	2380      	movs	r3, #128	@ 0x80
 8005be6:	68a1      	ldr	r1, [r4, #8]
 8005be8:	015b      	lsls	r3, r3, #5
 8005bea:	4299      	cmp	r1, r3
 8005bec:	d104      	bne.n	8005bf8 <HAL_UART_Transmit+0x36>
 8005bee:	6923      	ldr	r3, [r4, #16]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_UART_Transmit+0x36>
      if ((((uint32_t)pData) & 1U) != 0U)
 8005bf4:	4205      	tst	r5, r0
 8005bf6:	d12a      	bne.n	8005c4e <HAL_UART_Transmit+0x8c>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf8:	0023      	movs	r3, r4
 8005bfa:	2600      	movs	r6, #0
 8005bfc:	3390      	adds	r3, #144	@ 0x90
 8005bfe:	601e      	str	r6, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c00:	2321      	movs	r3, #33	@ 0x21
 8005c02:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005c04:	f7fd fd0e 	bl	8003624 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8005c08:	0023      	movs	r3, r4
 8005c0a:	3354      	adds	r3, #84	@ 0x54
 8005c0c:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8005c0e:	3302      	adds	r3, #2
 8005c10:	9303      	str	r3, [sp, #12]
 8005c12:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c14:	2380      	movs	r3, #128	@ 0x80
 8005c16:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8005c18:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c1a:	015b      	lsls	r3, r3, #5
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d104      	bne.n	8005c2a <HAL_UART_Transmit+0x68>
 8005c20:	6923      	ldr	r3, [r4, #16]
 8005c22:	42b3      	cmp	r3, r6
 8005c24:	d101      	bne.n	8005c2a <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8005c26:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8005c28:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8005c2a:	0023      	movs	r3, r4
 8005c2c:	3356      	adds	r3, #86	@ 0x56
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10d      	bne.n	8005c52 <HAL_UART_Transmit+0x90>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c36:	9b05      	ldr	r3, [sp, #20]
 8005c38:	0020      	movs	r0, r4
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	2140      	movs	r1, #64	@ 0x40
 8005c3e:	9b04      	ldr	r3, [sp, #16]
 8005c40:	f7ff ff76 	bl	8005b30 <UART_WaitOnFlagUntilTimeout>
 8005c44:	2320      	movs	r3, #32
 8005c46:	3488      	adds	r4, #136	@ 0x88
      huart->gState = HAL_UART_STATE_READY;
 8005c48:	6023      	str	r3, [r4, #0]
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	d10e      	bne.n	8005c6c <HAL_UART_Transmit+0xaa>
}
 8005c4e:	b007      	add	sp, #28
 8005c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c52:	9b05      	ldr	r3, [sp, #20]
 8005c54:	2200      	movs	r2, #0
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	2180      	movs	r1, #128	@ 0x80
 8005c5a:	0020      	movs	r0, r4
 8005c5c:	9b04      	ldr	r3, [sp, #16]
 8005c5e:	f7ff ff67 	bl	8005b30 <UART_WaitOnFlagUntilTimeout>
 8005c62:	2800      	cmp	r0, #0
 8005c64:	d004      	beq.n	8005c70 <HAL_UART_Transmit+0xae>
        huart->gState = HAL_UART_STATE_READY;
 8005c66:	2320      	movs	r3, #32
 8005c68:	3488      	adds	r4, #136	@ 0x88
 8005c6a:	6023      	str	r3, [r4, #0]
        return HAL_TIMEOUT;
 8005c6c:	2003      	movs	r0, #3
 8005c6e:	e7ee      	b.n	8005c4e <HAL_UART_Transmit+0x8c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c70:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8005c72:	2d00      	cmp	r5, #0
 8005c74:	d10b      	bne.n	8005c8e <HAL_UART_Transmit+0xcc>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c76:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8005c78:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c7a:	05db      	lsls	r3, r3, #23
 8005c7c:	0ddb      	lsrs	r3, r3, #23
 8005c7e:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8005c80:	9b03      	ldr	r3, [sp, #12]
 8005c82:	9a03      	ldr	r2, [sp, #12]
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	8013      	strh	r3, [r2, #0]
 8005c8c:	e7cd      	b.n	8005c2a <HAL_UART_Transmit+0x68>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c8e:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8005c90:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c92:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata8bits++;
 8005c94:	e7f4      	b.n	8005c80 <HAL_UART_Transmit+0xbe>
	...

08005c98 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c98:	0003      	movs	r3, r0
{
 8005c9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c9c:	2600      	movs	r6, #0
{
 8005c9e:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca0:	3390      	adds	r3, #144	@ 0x90
 8005ca2:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8005ca4:	f7fd fcbe 	bl	8003624 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ca8:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005caa:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	071b      	lsls	r3, r3, #28
 8005cb0:	d51f      	bpl.n	8005cf2 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cb2:	2180      	movs	r1, #128	@ 0x80
 8005cb4:	4b28      	ldr	r3, [pc, #160]	@ (8005d58 <UART_CheckIdleState+0xc0>)
 8005cb6:	0032      	movs	r2, r6
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	0389      	lsls	r1, r1, #14
 8005cbc:	0003      	movs	r3, r0
 8005cbe:	0020      	movs	r0, r4
 8005cc0:	f7ff ff36 	bl	8005b30 <UART_WaitOnFlagUntilTimeout>
 8005cc4:	42b0      	cmp	r0, r6
 8005cc6:	d014      	beq.n	8005cf2 <UART_CheckIdleState+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cc8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ccc:	2301      	movs	r3, #1
 8005cce:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005cd2:	2080      	movs	r0, #128	@ 0x80
 8005cd4:	6822      	ldr	r2, [r4, #0]
 8005cd6:	6813      	ldr	r3, [r2, #0]
 8005cd8:	4383      	bics	r3, r0
 8005cda:	6013      	str	r3, [r2, #0]
 8005cdc:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8005ce0:	0023      	movs	r3, r4
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	3388      	adds	r3, #136	@ 0x88
 8005ce6:	601a      	str	r2, [r3, #0]
      return HAL_TIMEOUT;
 8005ce8:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8005cea:	2300      	movs	r3, #0
 8005cec:	3484      	adds	r4, #132	@ 0x84
 8005cee:	7023      	strb	r3, [r4, #0]
}
 8005cf0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cf2:	0026      	movs	r6, r4
 8005cf4:	6823      	ldr	r3, [r4, #0]
 8005cf6:	368c      	adds	r6, #140	@ 0x8c
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	075b      	lsls	r3, r3, #29
 8005cfc:	d523      	bpl.n	8005d46 <UART_CheckIdleState+0xae>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cfe:	2180      	movs	r1, #128	@ 0x80
 8005d00:	4b15      	ldr	r3, [pc, #84]	@ (8005d58 <UART_CheckIdleState+0xc0>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	0020      	movs	r0, r4
 8005d08:	002b      	movs	r3, r5
 8005d0a:	03c9      	lsls	r1, r1, #15
 8005d0c:	f7ff ff10 	bl	8005b30 <UART_WaitOnFlagUntilTimeout>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	d018      	beq.n	8005d46 <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d14:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d1e:	6821      	ldr	r1, [r4, #0]
 8005d20:	4d0e      	ldr	r5, [pc, #56]	@ (8005d5c <UART_CheckIdleState+0xc4>)
 8005d22:	680b      	ldr	r3, [r1, #0]
 8005d24:	402b      	ands	r3, r5
 8005d26:	600b      	str	r3, [r1, #0]
 8005d28:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d2c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d30:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d34:	6821      	ldr	r1, [r4, #0]
 8005d36:	688b      	ldr	r3, [r1, #8]
 8005d38:	4393      	bics	r3, r2
 8005d3a:	608b      	str	r3, [r1, #8]
 8005d3c:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8005d40:	2320      	movs	r3, #32
 8005d42:	6033      	str	r3, [r6, #0]
      return HAL_TIMEOUT;
 8005d44:	e7d0      	b.n	8005ce8 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8005d46:	0023      	movs	r3, r4
 8005d48:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d4a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005d4c:	3388      	adds	r3, #136	@ 0x88
 8005d4e:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8005d50:	6032      	str	r2, [r6, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d52:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d54:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 8005d56:	e7c8      	b.n	8005cea <UART_CheckIdleState+0x52>
 8005d58:	01ffffff 	.word	0x01ffffff
 8005d5c:	fffffedf 	.word	0xfffffedf

08005d60 <HAL_UART_Init>:
{
 8005d60:	b570      	push	{r4, r5, r6, lr}
 8005d62:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005d64:	d101      	bne.n	8005d6a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8005d66:	2001      	movs	r0, #1
}
 8005d68:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8005d6a:	0005      	movs	r5, r0
 8005d6c:	3588      	adds	r5, #136	@ 0x88
 8005d6e:	682b      	ldr	r3, [r5, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d104      	bne.n	8005d7e <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 8005d74:	0002      	movs	r2, r0
 8005d76:	3284      	adds	r2, #132	@ 0x84
 8005d78:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8005d7a:	f7fd fb69 	bl	8003450 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8005d7e:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8005d80:	2101      	movs	r1, #1
 8005d82:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005d84:	602b      	str	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8005d86:	6813      	ldr	r3, [r2, #0]
 8005d88:	438b      	bics	r3, r1
 8005d8a:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d8c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d002      	beq.n	8005d98 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8005d92:	0020      	movs	r0, r4
 8005d94:	f7ff fe64 	bl	8005a60 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d98:	0020      	movs	r0, r4
 8005d9a:	f7ff fdad 	bl	80058f8 <UART_SetConfig>
 8005d9e:	2801      	cmp	r0, #1
 8005da0:	d0e1      	beq.n	8005d66 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	4907      	ldr	r1, [pc, #28]	@ (8005dc4 <HAL_UART_Init+0x64>)
 8005da6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8005da8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005daa:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dac:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	438a      	bics	r2, r1
 8005db4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005db6:	2201      	movs	r2, #1
 8005db8:	6819      	ldr	r1, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005dbe:	f7ff ff6b 	bl	8005c98 <UART_CheckIdleState>
 8005dc2:	e7d1      	b.n	8005d68 <HAL_UART_Init+0x8>
 8005dc4:	ffffb7ff 	.word	0xffffb7ff

08005dc8 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 8005dc8:	0003      	movs	r3, r0
 8005dca:	335c      	adds	r3, #92	@ 0x5c
{
 8005dcc:	b570      	push	{r4, r5, r6, lr}
  huart->pRxBuffPtr  = pData;
 8005dce:	6581      	str	r1, [r0, #88]	@ 0x58
  UART_MASK_COMPUTATION(huart);
 8005dd0:	2480      	movs	r4, #128	@ 0x80
  huart->RxXferSize  = Size;
 8005dd2:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 8005dd4:	805a      	strh	r2, [r3, #2]
  huart->RxISR       = NULL;
 8005dd6:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 8005dd8:	6881      	ldr	r1, [r0, #8]
  huart->RxISR       = NULL;
 8005dda:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8005ddc:	0164      	lsls	r4, r4, #5
 8005dde:	42a1      	cmp	r1, r4
 8005de0:	d13c      	bne.n	8005e5c <UART_Start_Receive_IT+0x94>
 8005de2:	6903      	ldr	r3, [r0, #16]
 8005de4:	4259      	negs	r1, r3
 8005de6:	414b      	adcs	r3, r1
 8005de8:	021b      	lsls	r3, r3, #8
 8005dea:	33ff      	adds	r3, #255	@ 0xff
 8005dec:	0001      	movs	r1, r0
 8005dee:	3160      	adds	r1, #96	@ 0x60
 8005df0:	800b      	strh	r3, [r1, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df2:	0003      	movs	r3, r0
 8005df4:	2100      	movs	r1, #0
 8005df6:	3390      	adds	r3, #144	@ 0x90
 8005df8:	6019      	str	r1, [r3, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dfa:	3122      	adds	r1, #34	@ 0x22
 8005dfc:	3b04      	subs	r3, #4
 8005dfe:	6019      	str	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e00:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e04:	2301      	movs	r3, #1
 8005e06:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e0a:	6801      	ldr	r1, [r0, #0]
 8005e0c:	688d      	ldr	r5, [r1, #8]
 8005e0e:	432b      	orrs	r3, r5
 8005e10:	608b      	str	r3, [r1, #8]
 8005e12:	f384 8810 	msr	PRIMASK, r4
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005e16:	2580      	movs	r5, #128	@ 0x80
 8005e18:	2180      	movs	r1, #128	@ 0x80
 8005e1a:	6e46      	ldr	r6, [r0, #100]	@ 0x64
 8005e1c:	6884      	ldr	r4, [r0, #8]
 8005e1e:	6903      	ldr	r3, [r0, #16]
 8005e20:	05ad      	lsls	r5, r5, #22
 8005e22:	0149      	lsls	r1, r1, #5
 8005e24:	42ae      	cmp	r6, r5
 8005e26:	d13f      	bne.n	8005ea8 <UART_Start_Receive_IT+0xe0>
 8005e28:	0005      	movs	r5, r0
 8005e2a:	3568      	adds	r5, #104	@ 0x68
 8005e2c:	882d      	ldrh	r5, [r5, #0]
 8005e2e:	4295      	cmp	r5, r2
 8005e30:	d83a      	bhi.n	8005ea8 <UART_Start_Receive_IT+0xe0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e32:	428c      	cmp	r4, r1
 8005e34:	d133      	bne.n	8005e9e <UART_Start_Receive_IT+0xd6>
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d122      	bne.n	8005e80 <UART_Start_Receive_IT+0xb8>
 8005e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8005eec <UART_Start_Receive_IT+0x124>)
 8005e3c:	6743      	str	r3, [r0, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e3e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e42:	2301      	movs	r3, #1
 8005e44:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005e48:	2380      	movs	r3, #128	@ 0x80
 8005e4a:	6802      	ldr	r2, [r0, #0]
 8005e4c:	055b      	lsls	r3, r3, #21
 8005e4e:	6890      	ldr	r0, [r2, #8]
 8005e50:	4303      	orrs	r3, r0
 8005e52:	6093      	str	r3, [r2, #8]
 8005e54:	f381 8810 	msr	PRIMASK, r1
}
 8005e58:	2000      	movs	r0, #0
 8005e5a:	bd70      	pop	{r4, r5, r6, pc}
  UART_MASK_COMPUTATION(huart);
 8005e5c:	2900      	cmp	r1, #0
 8005e5e:	d105      	bne.n	8005e6c <UART_Start_Receive_IT+0xa4>
 8005e60:	6901      	ldr	r1, [r0, #16]
 8005e62:	23ff      	movs	r3, #255	@ 0xff
 8005e64:	2900      	cmp	r1, #0
 8005e66:	d0c1      	beq.n	8005dec <UART_Start_Receive_IT+0x24>
 8005e68:	3b80      	subs	r3, #128	@ 0x80
 8005e6a:	e7bf      	b.n	8005dec <UART_Start_Receive_IT+0x24>
 8005e6c:	2480      	movs	r4, #128	@ 0x80
 8005e6e:	0564      	lsls	r4, r4, #21
 8005e70:	42a1      	cmp	r1, r4
 8005e72:	d1bb      	bne.n	8005dec <UART_Start_Receive_IT+0x24>
 8005e74:	6901      	ldr	r1, [r0, #16]
 8005e76:	237f      	movs	r3, #127	@ 0x7f
 8005e78:	2900      	cmp	r1, #0
 8005e7a:	d0b7      	beq.n	8005dec <UART_Start_Receive_IT+0x24>
 8005e7c:	3b40      	subs	r3, #64	@ 0x40
 8005e7e:	e7b5      	b.n	8005dec <UART_Start_Receive_IT+0x24>
 8005e80:	4b1b      	ldr	r3, [pc, #108]	@ (8005ef0 <UART_Start_Receive_IT+0x128>)
 8005e82:	6743      	str	r3, [r0, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e84:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e88:	2301      	movs	r3, #1
 8005e8a:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e8e:	6802      	ldr	r2, [r0, #0]
 8005e90:	33ff      	adds	r3, #255	@ 0xff
 8005e92:	6814      	ldr	r4, [r2, #0]
 8005e94:	4323      	orrs	r3, r4
 8005e96:	6013      	str	r3, [r2, #0]
 8005e98:	f381 8810 	msr	PRIMASK, r1
}
 8005e9c:	e7cf      	b.n	8005e3e <UART_Start_Receive_IT+0x76>
 8005e9e:	4a14      	ldr	r2, [pc, #80]	@ (8005ef0 <UART_Start_Receive_IT+0x128>)
 8005ea0:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0cb      	beq.n	8005e3e <UART_Start_Receive_IT+0x76>
 8005ea6:	e7ed      	b.n	8005e84 <UART_Start_Receive_IT+0xbc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ea8:	428c      	cmp	r4, r1
 8005eaa:	d11a      	bne.n	8005ee2 <UART_Start_Receive_IT+0x11a>
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10a      	bne.n	8005ec6 <UART_Start_Receive_IT+0xfe>
 8005eb0:	4b10      	ldr	r3, [pc, #64]	@ (8005ef4 <UART_Start_Receive_IT+0x12c>)
 8005eb2:	6743      	str	r3, [r0, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eb4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb8:	2301      	movs	r3, #1
 8005eba:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005ebe:	6802      	ldr	r2, [r0, #0]
 8005ec0:	331f      	adds	r3, #31
 8005ec2:	6810      	ldr	r0, [r2, #0]
 8005ec4:	e00a      	b.n	8005edc <UART_Start_Receive_IT+0x114>
 8005ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ef8 <UART_Start_Receive_IT+0x130>)
 8005ec8:	6743      	str	r3, [r0, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eca:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ece:	2301      	movs	r3, #1
 8005ed0:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005ed4:	6802      	ldr	r2, [r0, #0]
 8005ed6:	3320      	adds	r3, #32
 8005ed8:	6810      	ldr	r0, [r2, #0]
 8005eda:	33ff      	adds	r3, #255	@ 0xff
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005edc:	4303      	orrs	r3, r0
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	e7b8      	b.n	8005e54 <UART_Start_Receive_IT+0x8c>
 8005ee2:	4a05      	ldr	r2, [pc, #20]	@ (8005ef8 <UART_Start_Receive_IT+0x130>)
 8005ee4:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1ef      	bne.n	8005eca <UART_Start_Receive_IT+0x102>
 8005eea:	e7e3      	b.n	8005eb4 <UART_Start_Receive_IT+0xec>
 8005eec:	0800572d 	.word	0x0800572d
 8005ef0:	0800555d 	.word	0x0800555d
 8005ef4:	08005489 	.word	0x08005489
 8005ef8:	080053b1 	.word	0x080053b1

08005efc <HAL_UART_Receive_IT>:
{
 8005efc:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8005efe:	308c      	adds	r0, #140	@ 0x8c
{
 8005f00:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f02:	6804      	ldr	r4, [r0, #0]
    return HAL_BUSY;
 8005f04:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f06:	2c20      	cmp	r4, #32
 8005f08:	d125      	bne.n	8005f56 <HAL_UART_Receive_IT+0x5a>
      return HAL_ERROR;
 8005f0a:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8005f0c:	2900      	cmp	r1, #0
 8005f0e:	d022      	beq.n	8005f56 <HAL_UART_Receive_IT+0x5a>
 8005f10:	2a00      	cmp	r2, #0
 8005f12:	d020      	beq.n	8005f56 <HAL_UART_Receive_IT+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f14:	2080      	movs	r0, #128	@ 0x80
 8005f16:	689c      	ldr	r4, [r3, #8]
 8005f18:	0140      	lsls	r0, r0, #5
 8005f1a:	4284      	cmp	r4, r0
 8005f1c:	d105      	bne.n	8005f2a <HAL_UART_Receive_IT+0x2e>
 8005f1e:	6918      	ldr	r0, [r3, #16]
 8005f20:	2800      	cmp	r0, #0
 8005f22:	d102      	bne.n	8005f2a <HAL_UART_Receive_IT+0x2e>
      return HAL_ERROR;
 8005f24:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f26:	4201      	tst	r1, r0
 8005f28:	d115      	bne.n	8005f56 <HAL_UART_Receive_IT+0x5a>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	66d8      	str	r0, [r3, #108]	@ 0x6c
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f2e:	6818      	ldr	r0, [r3, #0]
 8005f30:	6840      	ldr	r0, [r0, #4]
 8005f32:	0200      	lsls	r0, r0, #8
 8005f34:	d50c      	bpl.n	8005f50 <HAL_UART_Receive_IT+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f36:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f3a:	2001      	movs	r0, #1
 8005f3c:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f40:	2080      	movs	r0, #128	@ 0x80
 8005f42:	681c      	ldr	r4, [r3, #0]
 8005f44:	04c0      	lsls	r0, r0, #19
 8005f46:	6826      	ldr	r6, [r4, #0]
 8005f48:	4330      	orrs	r0, r6
 8005f4a:	6020      	str	r0, [r4, #0]
 8005f4c:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f50:	0018      	movs	r0, r3
 8005f52:	f7ff ff39 	bl	8005dc8 <UART_Start_Receive_IT>
}
 8005f56:	bd70      	pop	{r4, r5, r6, pc}

08005f58 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f58:	4770      	bx	lr

08005f5a <HAL_UARTEx_RxFifoFullCallback>:
/**
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 8005f5a:	4770      	bx	lr

08005f5c <HAL_UARTEx_TxFifoEmptyCallback>:
/**
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 8005f5c:	4770      	bx	lr
	...

08005f60 <_strtol_l.isra.0>:
 8005f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f62:	b085      	sub	sp, #20
 8005f64:	0017      	movs	r7, r2
 8005f66:	001e      	movs	r6, r3
 8005f68:	9003      	str	r0, [sp, #12]
 8005f6a:	9101      	str	r1, [sp, #4]
 8005f6c:	2b24      	cmp	r3, #36	@ 0x24
 8005f6e:	d823      	bhi.n	8005fb8 <_strtol_l.isra.0+0x58>
 8005f70:	000c      	movs	r4, r1
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d020      	beq.n	8005fb8 <_strtol_l.isra.0+0x58>
 8005f76:	4b3d      	ldr	r3, [pc, #244]	@ (800606c <_strtol_l.isra.0+0x10c>)
 8005f78:	2208      	movs	r2, #8
 8005f7a:	469c      	mov	ip, r3
 8005f7c:	0023      	movs	r3, r4
 8005f7e:	4661      	mov	r1, ip
 8005f80:	781d      	ldrb	r5, [r3, #0]
 8005f82:	3401      	adds	r4, #1
 8005f84:	5d48      	ldrb	r0, [r1, r5]
 8005f86:	0001      	movs	r1, r0
 8005f88:	4011      	ands	r1, r2
 8005f8a:	4210      	tst	r0, r2
 8005f8c:	d1f6      	bne.n	8005f7c <_strtol_l.isra.0+0x1c>
 8005f8e:	2d2d      	cmp	r5, #45	@ 0x2d
 8005f90:	d119      	bne.n	8005fc6 <_strtol_l.isra.0+0x66>
 8005f92:	7825      	ldrb	r5, [r4, #0]
 8005f94:	1c9c      	adds	r4, r3, #2
 8005f96:	2301      	movs	r3, #1
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	2210      	movs	r2, #16
 8005f9c:	0033      	movs	r3, r6
 8005f9e:	4393      	bics	r3, r2
 8005fa0:	d11d      	bne.n	8005fde <_strtol_l.isra.0+0x7e>
 8005fa2:	2d30      	cmp	r5, #48	@ 0x30
 8005fa4:	d115      	bne.n	8005fd2 <_strtol_l.isra.0+0x72>
 8005fa6:	2120      	movs	r1, #32
 8005fa8:	7823      	ldrb	r3, [r4, #0]
 8005faa:	438b      	bics	r3, r1
 8005fac:	2b58      	cmp	r3, #88	@ 0x58
 8005fae:	d110      	bne.n	8005fd2 <_strtol_l.isra.0+0x72>
 8005fb0:	7865      	ldrb	r5, [r4, #1]
 8005fb2:	3402      	adds	r4, #2
 8005fb4:	2610      	movs	r6, #16
 8005fb6:	e012      	b.n	8005fde <_strtol_l.isra.0+0x7e>
 8005fb8:	f000 fa5a 	bl	8006470 <__errno>
 8005fbc:	2316      	movs	r3, #22
 8005fbe:	6003      	str	r3, [r0, #0]
 8005fc0:	2000      	movs	r0, #0
 8005fc2:	b005      	add	sp, #20
 8005fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fc6:	9100      	str	r1, [sp, #0]
 8005fc8:	2d2b      	cmp	r5, #43	@ 0x2b
 8005fca:	d1e6      	bne.n	8005f9a <_strtol_l.isra.0+0x3a>
 8005fcc:	7825      	ldrb	r5, [r4, #0]
 8005fce:	1c9c      	adds	r4, r3, #2
 8005fd0:	e7e3      	b.n	8005f9a <_strtol_l.isra.0+0x3a>
 8005fd2:	2e00      	cmp	r6, #0
 8005fd4:	d1ee      	bne.n	8005fb4 <_strtol_l.isra.0+0x54>
 8005fd6:	360a      	adds	r6, #10
 8005fd8:	2d30      	cmp	r5, #48	@ 0x30
 8005fda:	d100      	bne.n	8005fde <_strtol_l.isra.0+0x7e>
 8005fdc:	3e02      	subs	r6, #2
 8005fde:	4a24      	ldr	r2, [pc, #144]	@ (8006070 <_strtol_l.isra.0+0x110>)
 8005fe0:	9b00      	ldr	r3, [sp, #0]
 8005fe2:	4694      	mov	ip, r2
 8005fe4:	4463      	add	r3, ip
 8005fe6:	0031      	movs	r1, r6
 8005fe8:	0018      	movs	r0, r3
 8005fea:	9302      	str	r3, [sp, #8]
 8005fec:	f7fa f934 	bl	8000258 <__aeabi_uidivmod>
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	4684      	mov	ip, r0
 8005ff4:	0010      	movs	r0, r2
 8005ff6:	002b      	movs	r3, r5
 8005ff8:	3b30      	subs	r3, #48	@ 0x30
 8005ffa:	2b09      	cmp	r3, #9
 8005ffc:	d811      	bhi.n	8006022 <_strtol_l.isra.0+0xc2>
 8005ffe:	001d      	movs	r5, r3
 8006000:	42ae      	cmp	r6, r5
 8006002:	dd1d      	ble.n	8006040 <_strtol_l.isra.0+0xe0>
 8006004:	1c53      	adds	r3, r2, #1
 8006006:	d009      	beq.n	800601c <_strtol_l.isra.0+0xbc>
 8006008:	2201      	movs	r2, #1
 800600a:	4252      	negs	r2, r2
 800600c:	4584      	cmp	ip, r0
 800600e:	d305      	bcc.n	800601c <_strtol_l.isra.0+0xbc>
 8006010:	d101      	bne.n	8006016 <_strtol_l.isra.0+0xb6>
 8006012:	42a9      	cmp	r1, r5
 8006014:	db11      	blt.n	800603a <_strtol_l.isra.0+0xda>
 8006016:	2201      	movs	r2, #1
 8006018:	4370      	muls	r0, r6
 800601a:	1828      	adds	r0, r5, r0
 800601c:	7825      	ldrb	r5, [r4, #0]
 800601e:	3401      	adds	r4, #1
 8006020:	e7e9      	b.n	8005ff6 <_strtol_l.isra.0+0x96>
 8006022:	002b      	movs	r3, r5
 8006024:	3b41      	subs	r3, #65	@ 0x41
 8006026:	2b19      	cmp	r3, #25
 8006028:	d801      	bhi.n	800602e <_strtol_l.isra.0+0xce>
 800602a:	3d37      	subs	r5, #55	@ 0x37
 800602c:	e7e8      	b.n	8006000 <_strtol_l.isra.0+0xa0>
 800602e:	002b      	movs	r3, r5
 8006030:	3b61      	subs	r3, #97	@ 0x61
 8006032:	2b19      	cmp	r3, #25
 8006034:	d804      	bhi.n	8006040 <_strtol_l.isra.0+0xe0>
 8006036:	3d57      	subs	r5, #87	@ 0x57
 8006038:	e7e2      	b.n	8006000 <_strtol_l.isra.0+0xa0>
 800603a:	2201      	movs	r2, #1
 800603c:	4252      	negs	r2, r2
 800603e:	e7ed      	b.n	800601c <_strtol_l.isra.0+0xbc>
 8006040:	1c53      	adds	r3, r2, #1
 8006042:	d108      	bne.n	8006056 <_strtol_l.isra.0+0xf6>
 8006044:	2322      	movs	r3, #34	@ 0x22
 8006046:	9a03      	ldr	r2, [sp, #12]
 8006048:	9802      	ldr	r0, [sp, #8]
 800604a:	6013      	str	r3, [r2, #0]
 800604c:	2f00      	cmp	r7, #0
 800604e:	d0b8      	beq.n	8005fc2 <_strtol_l.isra.0+0x62>
 8006050:	1e63      	subs	r3, r4, #1
 8006052:	9301      	str	r3, [sp, #4]
 8006054:	e007      	b.n	8006066 <_strtol_l.isra.0+0x106>
 8006056:	9b00      	ldr	r3, [sp, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d000      	beq.n	800605e <_strtol_l.isra.0+0xfe>
 800605c:	4240      	negs	r0, r0
 800605e:	2f00      	cmp	r7, #0
 8006060:	d0af      	beq.n	8005fc2 <_strtol_l.isra.0+0x62>
 8006062:	2a00      	cmp	r2, #0
 8006064:	d1f4      	bne.n	8006050 <_strtol_l.isra.0+0xf0>
 8006066:	9b01      	ldr	r3, [sp, #4]
 8006068:	603b      	str	r3, [r7, #0]
 800606a:	e7aa      	b.n	8005fc2 <_strtol_l.isra.0+0x62>
 800606c:	0800702d 	.word	0x0800702d
 8006070:	7fffffff 	.word	0x7fffffff

08006074 <strtol>:
 8006074:	b510      	push	{r4, lr}
 8006076:	4c04      	ldr	r4, [pc, #16]	@ (8006088 <strtol+0x14>)
 8006078:	0013      	movs	r3, r2
 800607a:	000a      	movs	r2, r1
 800607c:	0001      	movs	r1, r0
 800607e:	6820      	ldr	r0, [r4, #0]
 8006080:	f7ff ff6e 	bl	8005f60 <_strtol_l.isra.0>
 8006084:	bd10      	pop	{r4, pc}
 8006086:	46c0      	nop			@ (mov r8, r8)
 8006088:	2000000c 	.word	0x2000000c

0800608c <_strtoul_l.isra.0>:
 800608c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800608e:	001e      	movs	r6, r3
 8006090:	4b3e      	ldr	r3, [pc, #248]	@ (800618c <_strtoul_l.isra.0+0x100>)
 8006092:	0017      	movs	r7, r2
 8006094:	000c      	movs	r4, r1
 8006096:	469c      	mov	ip, r3
 8006098:	2208      	movs	r2, #8
 800609a:	b085      	sub	sp, #20
 800609c:	9003      	str	r0, [sp, #12]
 800609e:	9100      	str	r1, [sp, #0]
 80060a0:	0023      	movs	r3, r4
 80060a2:	4661      	mov	r1, ip
 80060a4:	781d      	ldrb	r5, [r3, #0]
 80060a6:	3401      	adds	r4, #1
 80060a8:	5d48      	ldrb	r0, [r1, r5]
 80060aa:	0001      	movs	r1, r0
 80060ac:	4011      	ands	r1, r2
 80060ae:	4210      	tst	r0, r2
 80060b0:	d1f6      	bne.n	80060a0 <_strtoul_l.isra.0+0x14>
 80060b2:	2d2d      	cmp	r5, #45	@ 0x2d
 80060b4:	d112      	bne.n	80060dc <_strtoul_l.isra.0+0x50>
 80060b6:	7825      	ldrb	r5, [r4, #0]
 80060b8:	1c9c      	adds	r4, r3, #2
 80060ba:	2301      	movs	r3, #1
 80060bc:	9302      	str	r3, [sp, #8]
 80060be:	2210      	movs	r2, #16
 80060c0:	0033      	movs	r3, r6
 80060c2:	4393      	bics	r3, r2
 80060c4:	d116      	bne.n	80060f4 <_strtoul_l.isra.0+0x68>
 80060c6:	2d30      	cmp	r5, #48	@ 0x30
 80060c8:	d10e      	bne.n	80060e8 <_strtoul_l.isra.0+0x5c>
 80060ca:	2120      	movs	r1, #32
 80060cc:	7823      	ldrb	r3, [r4, #0]
 80060ce:	438b      	bics	r3, r1
 80060d0:	2b58      	cmp	r3, #88	@ 0x58
 80060d2:	d109      	bne.n	80060e8 <_strtoul_l.isra.0+0x5c>
 80060d4:	7865      	ldrb	r5, [r4, #1]
 80060d6:	3402      	adds	r4, #2
 80060d8:	2610      	movs	r6, #16
 80060da:	e00b      	b.n	80060f4 <_strtoul_l.isra.0+0x68>
 80060dc:	9102      	str	r1, [sp, #8]
 80060de:	2d2b      	cmp	r5, #43	@ 0x2b
 80060e0:	d1ed      	bne.n	80060be <_strtoul_l.isra.0+0x32>
 80060e2:	7825      	ldrb	r5, [r4, #0]
 80060e4:	1c9c      	adds	r4, r3, #2
 80060e6:	e7ea      	b.n	80060be <_strtoul_l.isra.0+0x32>
 80060e8:	2e00      	cmp	r6, #0
 80060ea:	d1f5      	bne.n	80060d8 <_strtoul_l.isra.0+0x4c>
 80060ec:	360a      	adds	r6, #10
 80060ee:	2d30      	cmp	r5, #48	@ 0x30
 80060f0:	d100      	bne.n	80060f4 <_strtoul_l.isra.0+0x68>
 80060f2:	3e02      	subs	r6, #2
 80060f4:	2001      	movs	r0, #1
 80060f6:	0031      	movs	r1, r6
 80060f8:	4240      	negs	r0, r0
 80060fa:	f7fa f827 	bl	800014c <__udivsi3>
 80060fe:	9001      	str	r0, [sp, #4]
 8006100:	2001      	movs	r0, #1
 8006102:	0031      	movs	r1, r6
 8006104:	4240      	negs	r0, r0
 8006106:	f7fa f8a7 	bl	8000258 <__aeabi_uidivmod>
 800610a:	2300      	movs	r3, #0
 800610c:	2201      	movs	r2, #1
 800610e:	0018      	movs	r0, r3
 8006110:	4694      	mov	ip, r2
 8006112:	002a      	movs	r2, r5
 8006114:	3a30      	subs	r2, #48	@ 0x30
 8006116:	2a09      	cmp	r2, #9
 8006118:	d812      	bhi.n	8006140 <_strtoul_l.isra.0+0xb4>
 800611a:	0015      	movs	r5, r2
 800611c:	42ae      	cmp	r6, r5
 800611e:	dd1e      	ble.n	800615e <_strtoul_l.isra.0+0xd2>
 8006120:	1c5a      	adds	r2, r3, #1
 8006122:	d00a      	beq.n	800613a <_strtoul_l.isra.0+0xae>
 8006124:	2301      	movs	r3, #1
 8006126:	9a01      	ldr	r2, [sp, #4]
 8006128:	425b      	negs	r3, r3
 800612a:	4282      	cmp	r2, r0
 800612c:	d305      	bcc.n	800613a <_strtoul_l.isra.0+0xae>
 800612e:	d101      	bne.n	8006134 <_strtoul_l.isra.0+0xa8>
 8006130:	42a9      	cmp	r1, r5
 8006132:	db11      	blt.n	8006158 <_strtoul_l.isra.0+0xcc>
 8006134:	4663      	mov	r3, ip
 8006136:	4370      	muls	r0, r6
 8006138:	1828      	adds	r0, r5, r0
 800613a:	7825      	ldrb	r5, [r4, #0]
 800613c:	3401      	adds	r4, #1
 800613e:	e7e8      	b.n	8006112 <_strtoul_l.isra.0+0x86>
 8006140:	002a      	movs	r2, r5
 8006142:	3a41      	subs	r2, #65	@ 0x41
 8006144:	2a19      	cmp	r2, #25
 8006146:	d801      	bhi.n	800614c <_strtoul_l.isra.0+0xc0>
 8006148:	3d37      	subs	r5, #55	@ 0x37
 800614a:	e7e7      	b.n	800611c <_strtoul_l.isra.0+0x90>
 800614c:	002a      	movs	r2, r5
 800614e:	3a61      	subs	r2, #97	@ 0x61
 8006150:	2a19      	cmp	r2, #25
 8006152:	d804      	bhi.n	800615e <_strtoul_l.isra.0+0xd2>
 8006154:	3d57      	subs	r5, #87	@ 0x57
 8006156:	e7e1      	b.n	800611c <_strtoul_l.isra.0+0x90>
 8006158:	2301      	movs	r3, #1
 800615a:	425b      	negs	r3, r3
 800615c:	e7ed      	b.n	800613a <_strtoul_l.isra.0+0xae>
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	d107      	bne.n	8006172 <_strtoul_l.isra.0+0xe6>
 8006162:	2222      	movs	r2, #34	@ 0x22
 8006164:	9903      	ldr	r1, [sp, #12]
 8006166:	0018      	movs	r0, r3
 8006168:	600a      	str	r2, [r1, #0]
 800616a:	2f00      	cmp	r7, #0
 800616c:	d109      	bne.n	8006182 <_strtoul_l.isra.0+0xf6>
 800616e:	b005      	add	sp, #20
 8006170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006172:	9a02      	ldr	r2, [sp, #8]
 8006174:	2a00      	cmp	r2, #0
 8006176:	d000      	beq.n	800617a <_strtoul_l.isra.0+0xee>
 8006178:	4240      	negs	r0, r0
 800617a:	2f00      	cmp	r7, #0
 800617c:	d0f7      	beq.n	800616e <_strtoul_l.isra.0+0xe2>
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <_strtoul_l.isra.0+0xfa>
 8006182:	1e63      	subs	r3, r4, #1
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	9b00      	ldr	r3, [sp, #0]
 8006188:	603b      	str	r3, [r7, #0]
 800618a:	e7f0      	b.n	800616e <_strtoul_l.isra.0+0xe2>
 800618c:	0800702d 	.word	0x0800702d

08006190 <strtoul>:
 8006190:	b510      	push	{r4, lr}
 8006192:	4c04      	ldr	r4, [pc, #16]	@ (80061a4 <strtoul+0x14>)
 8006194:	0013      	movs	r3, r2
 8006196:	000a      	movs	r2, r1
 8006198:	0001      	movs	r1, r0
 800619a:	6820      	ldr	r0, [r4, #0]
 800619c:	f7ff ff76 	bl	800608c <_strtoul_l.isra.0>
 80061a0:	bd10      	pop	{r4, pc}
 80061a2:	46c0      	nop			@ (mov r8, r8)
 80061a4:	2000000c 	.word	0x2000000c

080061a8 <_strtoull_l.isra.0>:
 80061a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061aa:	b08b      	sub	sp, #44	@ 0x2c
 80061ac:	9202      	str	r2, [sp, #8]
 80061ae:	001e      	movs	r6, r3
 80061b0:	000c      	movs	r4, r1
 80061b2:	2208      	movs	r2, #8
 80061b4:	4f4b      	ldr	r7, [pc, #300]	@ (80062e4 <_strtoull_l.isra.0+0x13c>)
 80061b6:	9008      	str	r0, [sp, #32]
 80061b8:	9101      	str	r1, [sp, #4]
 80061ba:	0023      	movs	r3, r4
 80061bc:	781d      	ldrb	r5, [r3, #0]
 80061be:	3401      	adds	r4, #1
 80061c0:	5d78      	ldrb	r0, [r7, r5]
 80061c2:	0001      	movs	r1, r0
 80061c4:	4011      	ands	r1, r2
 80061c6:	4210      	tst	r0, r2
 80061c8:	d1f7      	bne.n	80061ba <_strtoull_l.isra.0+0x12>
 80061ca:	2d2d      	cmp	r5, #45	@ 0x2d
 80061cc:	d112      	bne.n	80061f4 <_strtoull_l.isra.0+0x4c>
 80061ce:	7825      	ldrb	r5, [r4, #0]
 80061d0:	1c9c      	adds	r4, r3, #2
 80061d2:	2301      	movs	r3, #1
 80061d4:	9303      	str	r3, [sp, #12]
 80061d6:	2210      	movs	r2, #16
 80061d8:	0033      	movs	r3, r6
 80061da:	4393      	bics	r3, r2
 80061dc:	d116      	bne.n	800620c <_strtoull_l.isra.0+0x64>
 80061de:	2d30      	cmp	r5, #48	@ 0x30
 80061e0:	d10e      	bne.n	8006200 <_strtoull_l.isra.0+0x58>
 80061e2:	2120      	movs	r1, #32
 80061e4:	7823      	ldrb	r3, [r4, #0]
 80061e6:	438b      	bics	r3, r1
 80061e8:	2b58      	cmp	r3, #88	@ 0x58
 80061ea:	d109      	bne.n	8006200 <_strtoull_l.isra.0+0x58>
 80061ec:	7865      	ldrb	r5, [r4, #1]
 80061ee:	3402      	adds	r4, #2
 80061f0:	2610      	movs	r6, #16
 80061f2:	e00b      	b.n	800620c <_strtoull_l.isra.0+0x64>
 80061f4:	9103      	str	r1, [sp, #12]
 80061f6:	2d2b      	cmp	r5, #43	@ 0x2b
 80061f8:	d1ed      	bne.n	80061d6 <_strtoull_l.isra.0+0x2e>
 80061fa:	7825      	ldrb	r5, [r4, #0]
 80061fc:	1c9c      	adds	r4, r3, #2
 80061fe:	e7ea      	b.n	80061d6 <_strtoull_l.isra.0+0x2e>
 8006200:	2e00      	cmp	r6, #0
 8006202:	d1f5      	bne.n	80061f0 <_strtoull_l.isra.0+0x48>
 8006204:	360a      	adds	r6, #10
 8006206:	2d30      	cmp	r5, #48	@ 0x30
 8006208:	d100      	bne.n	800620c <_strtoull_l.isra.0+0x64>
 800620a:	3e02      	subs	r6, #2
 800620c:	17f3      	asrs	r3, r6, #31
 800620e:	0032      	movs	r2, r6
 8006210:	2001      	movs	r0, #1
 8006212:	4240      	negs	r0, r0
 8006214:	17c1      	asrs	r1, r0, #31
 8006216:	9309      	str	r3, [sp, #36]	@ 0x24
 8006218:	f7fa f926 	bl	8000468 <__aeabi_uldivmod>
 800621c:	0032      	movs	r2, r6
 800621e:	9006      	str	r0, [sp, #24]
 8006220:	000f      	movs	r7, r1
 8006222:	17f3      	asrs	r3, r6, #31
 8006224:	2001      	movs	r0, #1
 8006226:	4240      	negs	r0, r0
 8006228:	17c1      	asrs	r1, r0, #31
 800622a:	f7fa f91d 	bl	8000468 <__aeabi_uldivmod>
 800622e:	2300      	movs	r3, #0
 8006230:	2000      	movs	r0, #0
 8006232:	2100      	movs	r1, #0
 8006234:	9207      	str	r2, [sp, #28]
 8006236:	002a      	movs	r2, r5
 8006238:	3a30      	subs	r2, #48	@ 0x30
 800623a:	2a09      	cmp	r2, #9
 800623c:	d823      	bhi.n	8006286 <_strtoull_l.isra.0+0xde>
 800623e:	0015      	movs	r5, r2
 8006240:	42ae      	cmp	r6, r5
 8006242:	dd2f      	ble.n	80062a4 <_strtoull_l.isra.0+0xfc>
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	d01b      	beq.n	8006280 <_strtoull_l.isra.0+0xd8>
 8006248:	42b9      	cmp	r1, r7
 800624a:	d828      	bhi.n	800629e <_strtoull_l.isra.0+0xf6>
 800624c:	d102      	bne.n	8006254 <_strtoull_l.isra.0+0xac>
 800624e:	9b06      	ldr	r3, [sp, #24]
 8006250:	4298      	cmp	r0, r3
 8006252:	d824      	bhi.n	800629e <_strtoull_l.isra.0+0xf6>
 8006254:	9b06      	ldr	r3, [sp, #24]
 8006256:	4283      	cmp	r3, r0
 8006258:	d104      	bne.n	8006264 <_strtoull_l.isra.0+0xbc>
 800625a:	428f      	cmp	r7, r1
 800625c:	d102      	bne.n	8006264 <_strtoull_l.isra.0+0xbc>
 800625e:	9b07      	ldr	r3, [sp, #28]
 8006260:	42ab      	cmp	r3, r5
 8006262:	db1c      	blt.n	800629e <_strtoull_l.isra.0+0xf6>
 8006264:	0002      	movs	r2, r0
 8006266:	000b      	movs	r3, r1
 8006268:	0030      	movs	r0, r6
 800626a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800626c:	f7fa f91c 	bl	80004a8 <__aeabi_lmul>
 8006270:	17eb      	asrs	r3, r5, #31
 8006272:	9504      	str	r5, [sp, #16]
 8006274:	9305      	str	r3, [sp, #20]
 8006276:	9a04      	ldr	r2, [sp, #16]
 8006278:	9b05      	ldr	r3, [sp, #20]
 800627a:	1880      	adds	r0, r0, r2
 800627c:	4159      	adcs	r1, r3
 800627e:	2301      	movs	r3, #1
 8006280:	7825      	ldrb	r5, [r4, #0]
 8006282:	3401      	adds	r4, #1
 8006284:	e7d7      	b.n	8006236 <_strtoull_l.isra.0+0x8e>
 8006286:	002a      	movs	r2, r5
 8006288:	3a41      	subs	r2, #65	@ 0x41
 800628a:	2a19      	cmp	r2, #25
 800628c:	d801      	bhi.n	8006292 <_strtoull_l.isra.0+0xea>
 800628e:	3d37      	subs	r5, #55	@ 0x37
 8006290:	e7d6      	b.n	8006240 <_strtoull_l.isra.0+0x98>
 8006292:	002a      	movs	r2, r5
 8006294:	3a61      	subs	r2, #97	@ 0x61
 8006296:	2a19      	cmp	r2, #25
 8006298:	d804      	bhi.n	80062a4 <_strtoull_l.isra.0+0xfc>
 800629a:	3d57      	subs	r5, #87	@ 0x57
 800629c:	e7d0      	b.n	8006240 <_strtoull_l.isra.0+0x98>
 800629e:	2301      	movs	r3, #1
 80062a0:	425b      	negs	r3, r3
 80062a2:	e7ed      	b.n	8006280 <_strtoull_l.isra.0+0xd8>
 80062a4:	1c5a      	adds	r2, r3, #1
 80062a6:	d10a      	bne.n	80062be <_strtoull_l.isra.0+0x116>
 80062a8:	9a08      	ldr	r2, [sp, #32]
 80062aa:	3323      	adds	r3, #35	@ 0x23
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	9b02      	ldr	r3, [sp, #8]
 80062b0:	2001      	movs	r0, #1
 80062b2:	4240      	negs	r0, r0
 80062b4:	17c1      	asrs	r1, r0, #31
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10e      	bne.n	80062d8 <_strtoull_l.isra.0+0x130>
 80062ba:	b00b      	add	sp, #44	@ 0x2c
 80062bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062be:	9a03      	ldr	r2, [sp, #12]
 80062c0:	2a00      	cmp	r2, #0
 80062c2:	d004      	beq.n	80062ce <_strtoull_l.isra.0+0x126>
 80062c4:	0005      	movs	r5, r0
 80062c6:	000e      	movs	r6, r1
 80062c8:	2100      	movs	r1, #0
 80062ca:	4268      	negs	r0, r5
 80062cc:	41b1      	sbcs	r1, r6
 80062ce:	9a02      	ldr	r2, [sp, #8]
 80062d0:	2a00      	cmp	r2, #0
 80062d2:	d0f2      	beq.n	80062ba <_strtoull_l.isra.0+0x112>
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <_strtoull_l.isra.0+0x134>
 80062d8:	1e63      	subs	r3, r4, #1
 80062da:	9301      	str	r3, [sp, #4]
 80062dc:	9b02      	ldr	r3, [sp, #8]
 80062de:	9a01      	ldr	r2, [sp, #4]
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	e7ea      	b.n	80062ba <_strtoull_l.isra.0+0x112>
 80062e4:	0800702d 	.word	0x0800702d

080062e8 <strtoull>:
 80062e8:	b510      	push	{r4, lr}
 80062ea:	4c04      	ldr	r4, [pc, #16]	@ (80062fc <strtoull+0x14>)
 80062ec:	0013      	movs	r3, r2
 80062ee:	000a      	movs	r2, r1
 80062f0:	0001      	movs	r1, r0
 80062f2:	6820      	ldr	r0, [r4, #0]
 80062f4:	f7ff ff58 	bl	80061a8 <_strtoull_l.isra.0>
 80062f8:	bd10      	pop	{r4, pc}
 80062fa:	46c0      	nop			@ (mov r8, r8)
 80062fc:	2000000c 	.word	0x2000000c

08006300 <sniprintf>:
 8006300:	b40c      	push	{r2, r3}
 8006302:	b530      	push	{r4, r5, lr}
 8006304:	4b18      	ldr	r3, [pc, #96]	@ (8006368 <sniprintf+0x68>)
 8006306:	000c      	movs	r4, r1
 8006308:	681d      	ldr	r5, [r3, #0]
 800630a:	b09d      	sub	sp, #116	@ 0x74
 800630c:	2900      	cmp	r1, #0
 800630e:	da08      	bge.n	8006322 <sniprintf+0x22>
 8006310:	238b      	movs	r3, #139	@ 0x8b
 8006312:	2001      	movs	r0, #1
 8006314:	602b      	str	r3, [r5, #0]
 8006316:	4240      	negs	r0, r0
 8006318:	b01d      	add	sp, #116	@ 0x74
 800631a:	bc30      	pop	{r4, r5}
 800631c:	bc08      	pop	{r3}
 800631e:	b002      	add	sp, #8
 8006320:	4718      	bx	r3
 8006322:	2382      	movs	r3, #130	@ 0x82
 8006324:	466a      	mov	r2, sp
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	8293      	strh	r3, [r2, #20]
 800632a:	2300      	movs	r3, #0
 800632c:	9002      	str	r0, [sp, #8]
 800632e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006330:	9006      	str	r0, [sp, #24]
 8006332:	4299      	cmp	r1, r3
 8006334:	d000      	beq.n	8006338 <sniprintf+0x38>
 8006336:	1e4b      	subs	r3, r1, #1
 8006338:	9304      	str	r3, [sp, #16]
 800633a:	9307      	str	r3, [sp, #28]
 800633c:	2301      	movs	r3, #1
 800633e:	466a      	mov	r2, sp
 8006340:	425b      	negs	r3, r3
 8006342:	82d3      	strh	r3, [r2, #22]
 8006344:	0028      	movs	r0, r5
 8006346:	ab21      	add	r3, sp, #132	@ 0x84
 8006348:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800634a:	a902      	add	r1, sp, #8
 800634c:	9301      	str	r3, [sp, #4]
 800634e:	f000 fa21 	bl	8006794 <_svfiprintf_r>
 8006352:	1c43      	adds	r3, r0, #1
 8006354:	da01      	bge.n	800635a <sniprintf+0x5a>
 8006356:	238b      	movs	r3, #139	@ 0x8b
 8006358:	602b      	str	r3, [r5, #0]
 800635a:	2c00      	cmp	r4, #0
 800635c:	d0dc      	beq.n	8006318 <sniprintf+0x18>
 800635e:	2200      	movs	r2, #0
 8006360:	9b02      	ldr	r3, [sp, #8]
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	e7d8      	b.n	8006318 <sniprintf+0x18>
 8006366:	46c0      	nop			@ (mov r8, r8)
 8006368:	2000000c 	.word	0x2000000c

0800636c <_vsniprintf_r>:
 800636c:	b530      	push	{r4, r5, lr}
 800636e:	0005      	movs	r5, r0
 8006370:	0014      	movs	r4, r2
 8006372:	0008      	movs	r0, r1
 8006374:	001a      	movs	r2, r3
 8006376:	b09b      	sub	sp, #108	@ 0x6c
 8006378:	2c00      	cmp	r4, #0
 800637a:	da05      	bge.n	8006388 <_vsniprintf_r+0x1c>
 800637c:	238b      	movs	r3, #139	@ 0x8b
 800637e:	2001      	movs	r0, #1
 8006380:	602b      	str	r3, [r5, #0]
 8006382:	4240      	negs	r0, r0
 8006384:	b01b      	add	sp, #108	@ 0x6c
 8006386:	bd30      	pop	{r4, r5, pc}
 8006388:	2382      	movs	r3, #130	@ 0x82
 800638a:	4669      	mov	r1, sp
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	818b      	strh	r3, [r1, #12]
 8006390:	2100      	movs	r1, #0
 8006392:	9000      	str	r0, [sp, #0]
 8006394:	9119      	str	r1, [sp, #100]	@ 0x64
 8006396:	9004      	str	r0, [sp, #16]
 8006398:	428c      	cmp	r4, r1
 800639a:	d000      	beq.n	800639e <_vsniprintf_r+0x32>
 800639c:	1e61      	subs	r1, r4, #1
 800639e:	2301      	movs	r3, #1
 80063a0:	9102      	str	r1, [sp, #8]
 80063a2:	9105      	str	r1, [sp, #20]
 80063a4:	4669      	mov	r1, sp
 80063a6:	425b      	negs	r3, r3
 80063a8:	81cb      	strh	r3, [r1, #14]
 80063aa:	0028      	movs	r0, r5
 80063ac:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80063ae:	f000 f9f1 	bl	8006794 <_svfiprintf_r>
 80063b2:	1c43      	adds	r3, r0, #1
 80063b4:	da01      	bge.n	80063ba <_vsniprintf_r+0x4e>
 80063b6:	238b      	movs	r3, #139	@ 0x8b
 80063b8:	602b      	str	r3, [r5, #0]
 80063ba:	2c00      	cmp	r4, #0
 80063bc:	d0e2      	beq.n	8006384 <_vsniprintf_r+0x18>
 80063be:	2200      	movs	r2, #0
 80063c0:	9b00      	ldr	r3, [sp, #0]
 80063c2:	701a      	strb	r2, [r3, #0]
 80063c4:	e7de      	b.n	8006384 <_vsniprintf_r+0x18>
	...

080063c8 <vsniprintf>:
 80063c8:	b513      	push	{r0, r1, r4, lr}
 80063ca:	4c04      	ldr	r4, [pc, #16]	@ (80063dc <vsniprintf+0x14>)
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	0013      	movs	r3, r2
 80063d0:	000a      	movs	r2, r1
 80063d2:	0001      	movs	r1, r0
 80063d4:	6820      	ldr	r0, [r4, #0]
 80063d6:	f7ff ffc9 	bl	800636c <_vsniprintf_r>
 80063da:	bd16      	pop	{r1, r2, r4, pc}
 80063dc:	2000000c 	.word	0x2000000c

080063e0 <memmove>:
 80063e0:	b510      	push	{r4, lr}
 80063e2:	4288      	cmp	r0, r1
 80063e4:	d902      	bls.n	80063ec <memmove+0xc>
 80063e6:	188b      	adds	r3, r1, r2
 80063e8:	4298      	cmp	r0, r3
 80063ea:	d308      	bcc.n	80063fe <memmove+0x1e>
 80063ec:	2300      	movs	r3, #0
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d007      	beq.n	8006402 <memmove+0x22>
 80063f2:	5ccc      	ldrb	r4, [r1, r3]
 80063f4:	54c4      	strb	r4, [r0, r3]
 80063f6:	3301      	adds	r3, #1
 80063f8:	e7f9      	b.n	80063ee <memmove+0xe>
 80063fa:	5c8b      	ldrb	r3, [r1, r2]
 80063fc:	5483      	strb	r3, [r0, r2]
 80063fe:	3a01      	subs	r2, #1
 8006400:	d2fb      	bcs.n	80063fa <memmove+0x1a>
 8006402:	bd10      	pop	{r4, pc}

08006404 <memset>:
 8006404:	0003      	movs	r3, r0
 8006406:	1882      	adds	r2, r0, r2
 8006408:	4293      	cmp	r3, r2
 800640a:	d100      	bne.n	800640e <memset+0xa>
 800640c:	4770      	bx	lr
 800640e:	7019      	strb	r1, [r3, #0]
 8006410:	3301      	adds	r3, #1
 8006412:	e7f9      	b.n	8006408 <memset+0x4>

08006414 <strchr>:
 8006414:	b2c9      	uxtb	r1, r1
 8006416:	7803      	ldrb	r3, [r0, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d004      	beq.n	8006426 <strchr+0x12>
 800641c:	428b      	cmp	r3, r1
 800641e:	d100      	bne.n	8006422 <strchr+0xe>
 8006420:	4770      	bx	lr
 8006422:	3001      	adds	r0, #1
 8006424:	e7f7      	b.n	8006416 <strchr+0x2>
 8006426:	424b      	negs	r3, r1
 8006428:	4159      	adcs	r1, r3
 800642a:	4249      	negs	r1, r1
 800642c:	4008      	ands	r0, r1
 800642e:	e7f7      	b.n	8006420 <strchr+0xc>

08006430 <strncpy>:
 8006430:	0003      	movs	r3, r0
 8006432:	b530      	push	{r4, r5, lr}
 8006434:	001d      	movs	r5, r3
 8006436:	2a00      	cmp	r2, #0
 8006438:	d006      	beq.n	8006448 <strncpy+0x18>
 800643a:	780c      	ldrb	r4, [r1, #0]
 800643c:	3a01      	subs	r2, #1
 800643e:	3301      	adds	r3, #1
 8006440:	702c      	strb	r4, [r5, #0]
 8006442:	3101      	adds	r1, #1
 8006444:	2c00      	cmp	r4, #0
 8006446:	d1f5      	bne.n	8006434 <strncpy+0x4>
 8006448:	2100      	movs	r1, #0
 800644a:	189a      	adds	r2, r3, r2
 800644c:	4293      	cmp	r3, r2
 800644e:	d100      	bne.n	8006452 <strncpy+0x22>
 8006450:	bd30      	pop	{r4, r5, pc}
 8006452:	7019      	strb	r1, [r3, #0]
 8006454:	3301      	adds	r3, #1
 8006456:	e7f9      	b.n	800644c <strncpy+0x1c>

08006458 <strnlen>:
 8006458:	0003      	movs	r3, r0
 800645a:	1841      	adds	r1, r0, r1
 800645c:	428b      	cmp	r3, r1
 800645e:	d002      	beq.n	8006466 <strnlen+0xe>
 8006460:	781a      	ldrb	r2, [r3, #0]
 8006462:	2a00      	cmp	r2, #0
 8006464:	d101      	bne.n	800646a <strnlen+0x12>
 8006466:	1a18      	subs	r0, r3, r0
 8006468:	4770      	bx	lr
 800646a:	3301      	adds	r3, #1
 800646c:	e7f6      	b.n	800645c <strnlen+0x4>
	...

08006470 <__errno>:
 8006470:	4b01      	ldr	r3, [pc, #4]	@ (8006478 <__errno+0x8>)
 8006472:	6818      	ldr	r0, [r3, #0]
 8006474:	4770      	bx	lr
 8006476:	46c0      	nop			@ (mov r8, r8)
 8006478:	2000000c 	.word	0x2000000c

0800647c <__libc_init_array>:
 800647c:	b570      	push	{r4, r5, r6, lr}
 800647e:	2600      	movs	r6, #0
 8006480:	4c0c      	ldr	r4, [pc, #48]	@ (80064b4 <__libc_init_array+0x38>)
 8006482:	4d0d      	ldr	r5, [pc, #52]	@ (80064b8 <__libc_init_array+0x3c>)
 8006484:	1b64      	subs	r4, r4, r5
 8006486:	10a4      	asrs	r4, r4, #2
 8006488:	42a6      	cmp	r6, r4
 800648a:	d109      	bne.n	80064a0 <__libc_init_array+0x24>
 800648c:	2600      	movs	r6, #0
 800648e:	f000 fc51 	bl	8006d34 <_init>
 8006492:	4c0a      	ldr	r4, [pc, #40]	@ (80064bc <__libc_init_array+0x40>)
 8006494:	4d0a      	ldr	r5, [pc, #40]	@ (80064c0 <__libc_init_array+0x44>)
 8006496:	1b64      	subs	r4, r4, r5
 8006498:	10a4      	asrs	r4, r4, #2
 800649a:	42a6      	cmp	r6, r4
 800649c:	d105      	bne.n	80064aa <__libc_init_array+0x2e>
 800649e:	bd70      	pop	{r4, r5, r6, pc}
 80064a0:	00b3      	lsls	r3, r6, #2
 80064a2:	58eb      	ldr	r3, [r5, r3]
 80064a4:	4798      	blx	r3
 80064a6:	3601      	adds	r6, #1
 80064a8:	e7ee      	b.n	8006488 <__libc_init_array+0xc>
 80064aa:	00b3      	lsls	r3, r6, #2
 80064ac:	58eb      	ldr	r3, [r5, r3]
 80064ae:	4798      	blx	r3
 80064b0:	3601      	adds	r6, #1
 80064b2:	e7f2      	b.n	800649a <__libc_init_array+0x1e>
 80064b4:	08007138 	.word	0x08007138
 80064b8:	08007138 	.word	0x08007138
 80064bc:	0800713c 	.word	0x0800713c
 80064c0:	08007138 	.word	0x08007138

080064c4 <__retarget_lock_acquire_recursive>:
 80064c4:	4770      	bx	lr

080064c6 <__retarget_lock_release_recursive>:
 80064c6:	4770      	bx	lr

080064c8 <memcpy>:
 80064c8:	2300      	movs	r3, #0
 80064ca:	b510      	push	{r4, lr}
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d100      	bne.n	80064d2 <memcpy+0xa>
 80064d0:	bd10      	pop	{r4, pc}
 80064d2:	5ccc      	ldrb	r4, [r1, r3]
 80064d4:	54c4      	strb	r4, [r0, r3]
 80064d6:	3301      	adds	r3, #1
 80064d8:	e7f8      	b.n	80064cc <memcpy+0x4>
	...

080064dc <_free_r>:
 80064dc:	b570      	push	{r4, r5, r6, lr}
 80064de:	0005      	movs	r5, r0
 80064e0:	1e0c      	subs	r4, r1, #0
 80064e2:	d010      	beq.n	8006506 <_free_r+0x2a>
 80064e4:	3c04      	subs	r4, #4
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	da00      	bge.n	80064ee <_free_r+0x12>
 80064ec:	18e4      	adds	r4, r4, r3
 80064ee:	0028      	movs	r0, r5
 80064f0:	f000 f8e0 	bl	80066b4 <__malloc_lock>
 80064f4:	4a1d      	ldr	r2, [pc, #116]	@ (800656c <_free_r+0x90>)
 80064f6:	6813      	ldr	r3, [r2, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d105      	bne.n	8006508 <_free_r+0x2c>
 80064fc:	6063      	str	r3, [r4, #4]
 80064fe:	6014      	str	r4, [r2, #0]
 8006500:	0028      	movs	r0, r5
 8006502:	f000 f8df 	bl	80066c4 <__malloc_unlock>
 8006506:	bd70      	pop	{r4, r5, r6, pc}
 8006508:	42a3      	cmp	r3, r4
 800650a:	d908      	bls.n	800651e <_free_r+0x42>
 800650c:	6820      	ldr	r0, [r4, #0]
 800650e:	1821      	adds	r1, r4, r0
 8006510:	428b      	cmp	r3, r1
 8006512:	d1f3      	bne.n	80064fc <_free_r+0x20>
 8006514:	6819      	ldr	r1, [r3, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	1809      	adds	r1, r1, r0
 800651a:	6021      	str	r1, [r4, #0]
 800651c:	e7ee      	b.n	80064fc <_free_r+0x20>
 800651e:	001a      	movs	r2, r3
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <_free_r+0x4e>
 8006526:	42a3      	cmp	r3, r4
 8006528:	d9f9      	bls.n	800651e <_free_r+0x42>
 800652a:	6811      	ldr	r1, [r2, #0]
 800652c:	1850      	adds	r0, r2, r1
 800652e:	42a0      	cmp	r0, r4
 8006530:	d10b      	bne.n	800654a <_free_r+0x6e>
 8006532:	6820      	ldr	r0, [r4, #0]
 8006534:	1809      	adds	r1, r1, r0
 8006536:	1850      	adds	r0, r2, r1
 8006538:	6011      	str	r1, [r2, #0]
 800653a:	4283      	cmp	r3, r0
 800653c:	d1e0      	bne.n	8006500 <_free_r+0x24>
 800653e:	6818      	ldr	r0, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	1841      	adds	r1, r0, r1
 8006544:	6011      	str	r1, [r2, #0]
 8006546:	6053      	str	r3, [r2, #4]
 8006548:	e7da      	b.n	8006500 <_free_r+0x24>
 800654a:	42a0      	cmp	r0, r4
 800654c:	d902      	bls.n	8006554 <_free_r+0x78>
 800654e:	230c      	movs	r3, #12
 8006550:	602b      	str	r3, [r5, #0]
 8006552:	e7d5      	b.n	8006500 <_free_r+0x24>
 8006554:	6820      	ldr	r0, [r4, #0]
 8006556:	1821      	adds	r1, r4, r0
 8006558:	428b      	cmp	r3, r1
 800655a:	d103      	bne.n	8006564 <_free_r+0x88>
 800655c:	6819      	ldr	r1, [r3, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	1809      	adds	r1, r1, r0
 8006562:	6021      	str	r1, [r4, #0]
 8006564:	6063      	str	r3, [r4, #4]
 8006566:	6054      	str	r4, [r2, #4]
 8006568:	e7ca      	b.n	8006500 <_free_r+0x24>
 800656a:	46c0      	nop			@ (mov r8, r8)
 800656c:	20000568 	.word	0x20000568

08006570 <sbrk_aligned>:
 8006570:	b570      	push	{r4, r5, r6, lr}
 8006572:	4e0f      	ldr	r6, [pc, #60]	@ (80065b0 <sbrk_aligned+0x40>)
 8006574:	000d      	movs	r5, r1
 8006576:	6831      	ldr	r1, [r6, #0]
 8006578:	0004      	movs	r4, r0
 800657a:	2900      	cmp	r1, #0
 800657c:	d102      	bne.n	8006584 <sbrk_aligned+0x14>
 800657e:	f000 fb83 	bl	8006c88 <_sbrk_r>
 8006582:	6030      	str	r0, [r6, #0]
 8006584:	0029      	movs	r1, r5
 8006586:	0020      	movs	r0, r4
 8006588:	f000 fb7e 	bl	8006c88 <_sbrk_r>
 800658c:	1c43      	adds	r3, r0, #1
 800658e:	d103      	bne.n	8006598 <sbrk_aligned+0x28>
 8006590:	2501      	movs	r5, #1
 8006592:	426d      	negs	r5, r5
 8006594:	0028      	movs	r0, r5
 8006596:	bd70      	pop	{r4, r5, r6, pc}
 8006598:	2303      	movs	r3, #3
 800659a:	1cc5      	adds	r5, r0, #3
 800659c:	439d      	bics	r5, r3
 800659e:	42a8      	cmp	r0, r5
 80065a0:	d0f8      	beq.n	8006594 <sbrk_aligned+0x24>
 80065a2:	1a29      	subs	r1, r5, r0
 80065a4:	0020      	movs	r0, r4
 80065a6:	f000 fb6f 	bl	8006c88 <_sbrk_r>
 80065aa:	3001      	adds	r0, #1
 80065ac:	d1f2      	bne.n	8006594 <sbrk_aligned+0x24>
 80065ae:	e7ef      	b.n	8006590 <sbrk_aligned+0x20>
 80065b0:	20000564 	.word	0x20000564

080065b4 <_malloc_r>:
 80065b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065b6:	2203      	movs	r2, #3
 80065b8:	1ccb      	adds	r3, r1, #3
 80065ba:	4393      	bics	r3, r2
 80065bc:	3308      	adds	r3, #8
 80065be:	0005      	movs	r5, r0
 80065c0:	001f      	movs	r7, r3
 80065c2:	2b0c      	cmp	r3, #12
 80065c4:	d234      	bcs.n	8006630 <_malloc_r+0x7c>
 80065c6:	270c      	movs	r7, #12
 80065c8:	42b9      	cmp	r1, r7
 80065ca:	d833      	bhi.n	8006634 <_malloc_r+0x80>
 80065cc:	0028      	movs	r0, r5
 80065ce:	f000 f871 	bl	80066b4 <__malloc_lock>
 80065d2:	4e37      	ldr	r6, [pc, #220]	@ (80066b0 <_malloc_r+0xfc>)
 80065d4:	6833      	ldr	r3, [r6, #0]
 80065d6:	001c      	movs	r4, r3
 80065d8:	2c00      	cmp	r4, #0
 80065da:	d12f      	bne.n	800663c <_malloc_r+0x88>
 80065dc:	0039      	movs	r1, r7
 80065de:	0028      	movs	r0, r5
 80065e0:	f7ff ffc6 	bl	8006570 <sbrk_aligned>
 80065e4:	0004      	movs	r4, r0
 80065e6:	1c43      	adds	r3, r0, #1
 80065e8:	d15f      	bne.n	80066aa <_malloc_r+0xf6>
 80065ea:	6834      	ldr	r4, [r6, #0]
 80065ec:	9400      	str	r4, [sp, #0]
 80065ee:	9b00      	ldr	r3, [sp, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d14a      	bne.n	800668a <_malloc_r+0xd6>
 80065f4:	2c00      	cmp	r4, #0
 80065f6:	d052      	beq.n	800669e <_malloc_r+0xea>
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	0028      	movs	r0, r5
 80065fc:	18e3      	adds	r3, r4, r3
 80065fe:	9900      	ldr	r1, [sp, #0]
 8006600:	9301      	str	r3, [sp, #4]
 8006602:	f000 fb41 	bl	8006c88 <_sbrk_r>
 8006606:	9b01      	ldr	r3, [sp, #4]
 8006608:	4283      	cmp	r3, r0
 800660a:	d148      	bne.n	800669e <_malloc_r+0xea>
 800660c:	6823      	ldr	r3, [r4, #0]
 800660e:	0028      	movs	r0, r5
 8006610:	1aff      	subs	r7, r7, r3
 8006612:	0039      	movs	r1, r7
 8006614:	f7ff ffac 	bl	8006570 <sbrk_aligned>
 8006618:	3001      	adds	r0, #1
 800661a:	d040      	beq.n	800669e <_malloc_r+0xea>
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	19db      	adds	r3, r3, r7
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	6833      	ldr	r3, [r6, #0]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	2a00      	cmp	r2, #0
 8006628:	d133      	bne.n	8006692 <_malloc_r+0xde>
 800662a:	9b00      	ldr	r3, [sp, #0]
 800662c:	6033      	str	r3, [r6, #0]
 800662e:	e019      	b.n	8006664 <_malloc_r+0xb0>
 8006630:	2b00      	cmp	r3, #0
 8006632:	dac9      	bge.n	80065c8 <_malloc_r+0x14>
 8006634:	230c      	movs	r3, #12
 8006636:	602b      	str	r3, [r5, #0]
 8006638:	2000      	movs	r0, #0
 800663a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800663c:	6821      	ldr	r1, [r4, #0]
 800663e:	1bc9      	subs	r1, r1, r7
 8006640:	d420      	bmi.n	8006684 <_malloc_r+0xd0>
 8006642:	290b      	cmp	r1, #11
 8006644:	d90a      	bls.n	800665c <_malloc_r+0xa8>
 8006646:	19e2      	adds	r2, r4, r7
 8006648:	6027      	str	r7, [r4, #0]
 800664a:	42a3      	cmp	r3, r4
 800664c:	d104      	bne.n	8006658 <_malloc_r+0xa4>
 800664e:	6032      	str	r2, [r6, #0]
 8006650:	6863      	ldr	r3, [r4, #4]
 8006652:	6011      	str	r1, [r2, #0]
 8006654:	6053      	str	r3, [r2, #4]
 8006656:	e005      	b.n	8006664 <_malloc_r+0xb0>
 8006658:	605a      	str	r2, [r3, #4]
 800665a:	e7f9      	b.n	8006650 <_malloc_r+0x9c>
 800665c:	6862      	ldr	r2, [r4, #4]
 800665e:	42a3      	cmp	r3, r4
 8006660:	d10e      	bne.n	8006680 <_malloc_r+0xcc>
 8006662:	6032      	str	r2, [r6, #0]
 8006664:	0028      	movs	r0, r5
 8006666:	f000 f82d 	bl	80066c4 <__malloc_unlock>
 800666a:	0020      	movs	r0, r4
 800666c:	2207      	movs	r2, #7
 800666e:	300b      	adds	r0, #11
 8006670:	1d23      	adds	r3, r4, #4
 8006672:	4390      	bics	r0, r2
 8006674:	1ac2      	subs	r2, r0, r3
 8006676:	4298      	cmp	r0, r3
 8006678:	d0df      	beq.n	800663a <_malloc_r+0x86>
 800667a:	1a1b      	subs	r3, r3, r0
 800667c:	50a3      	str	r3, [r4, r2]
 800667e:	e7dc      	b.n	800663a <_malloc_r+0x86>
 8006680:	605a      	str	r2, [r3, #4]
 8006682:	e7ef      	b.n	8006664 <_malloc_r+0xb0>
 8006684:	0023      	movs	r3, r4
 8006686:	6864      	ldr	r4, [r4, #4]
 8006688:	e7a6      	b.n	80065d8 <_malloc_r+0x24>
 800668a:	9c00      	ldr	r4, [sp, #0]
 800668c:	6863      	ldr	r3, [r4, #4]
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	e7ad      	b.n	80065ee <_malloc_r+0x3a>
 8006692:	001a      	movs	r2, r3
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	42a3      	cmp	r3, r4
 8006698:	d1fb      	bne.n	8006692 <_malloc_r+0xde>
 800669a:	2300      	movs	r3, #0
 800669c:	e7da      	b.n	8006654 <_malloc_r+0xa0>
 800669e:	230c      	movs	r3, #12
 80066a0:	0028      	movs	r0, r5
 80066a2:	602b      	str	r3, [r5, #0]
 80066a4:	f000 f80e 	bl	80066c4 <__malloc_unlock>
 80066a8:	e7c6      	b.n	8006638 <_malloc_r+0x84>
 80066aa:	6007      	str	r7, [r0, #0]
 80066ac:	e7da      	b.n	8006664 <_malloc_r+0xb0>
 80066ae:	46c0      	nop			@ (mov r8, r8)
 80066b0:	20000568 	.word	0x20000568

080066b4 <__malloc_lock>:
 80066b4:	b510      	push	{r4, lr}
 80066b6:	4802      	ldr	r0, [pc, #8]	@ (80066c0 <__malloc_lock+0xc>)
 80066b8:	f7ff ff04 	bl	80064c4 <__retarget_lock_acquire_recursive>
 80066bc:	bd10      	pop	{r4, pc}
 80066be:	46c0      	nop			@ (mov r8, r8)
 80066c0:	20000560 	.word	0x20000560

080066c4 <__malloc_unlock>:
 80066c4:	b510      	push	{r4, lr}
 80066c6:	4802      	ldr	r0, [pc, #8]	@ (80066d0 <__malloc_unlock+0xc>)
 80066c8:	f7ff fefd 	bl	80064c6 <__retarget_lock_release_recursive>
 80066cc:	bd10      	pop	{r4, pc}
 80066ce:	46c0      	nop			@ (mov r8, r8)
 80066d0:	20000560 	.word	0x20000560

080066d4 <__ssputs_r>:
 80066d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066d6:	688e      	ldr	r6, [r1, #8]
 80066d8:	b085      	sub	sp, #20
 80066da:	001f      	movs	r7, r3
 80066dc:	000c      	movs	r4, r1
 80066de:	680b      	ldr	r3, [r1, #0]
 80066e0:	9002      	str	r0, [sp, #8]
 80066e2:	9203      	str	r2, [sp, #12]
 80066e4:	42be      	cmp	r6, r7
 80066e6:	d830      	bhi.n	800674a <__ssputs_r+0x76>
 80066e8:	210c      	movs	r1, #12
 80066ea:	5e62      	ldrsh	r2, [r4, r1]
 80066ec:	2190      	movs	r1, #144	@ 0x90
 80066ee:	00c9      	lsls	r1, r1, #3
 80066f0:	420a      	tst	r2, r1
 80066f2:	d028      	beq.n	8006746 <__ssputs_r+0x72>
 80066f4:	2003      	movs	r0, #3
 80066f6:	6921      	ldr	r1, [r4, #16]
 80066f8:	1a5b      	subs	r3, r3, r1
 80066fa:	9301      	str	r3, [sp, #4]
 80066fc:	6963      	ldr	r3, [r4, #20]
 80066fe:	4343      	muls	r3, r0
 8006700:	9801      	ldr	r0, [sp, #4]
 8006702:	0fdd      	lsrs	r5, r3, #31
 8006704:	18ed      	adds	r5, r5, r3
 8006706:	1c7b      	adds	r3, r7, #1
 8006708:	181b      	adds	r3, r3, r0
 800670a:	106d      	asrs	r5, r5, #1
 800670c:	42ab      	cmp	r3, r5
 800670e:	d900      	bls.n	8006712 <__ssputs_r+0x3e>
 8006710:	001d      	movs	r5, r3
 8006712:	0552      	lsls	r2, r2, #21
 8006714:	d528      	bpl.n	8006768 <__ssputs_r+0x94>
 8006716:	0029      	movs	r1, r5
 8006718:	9802      	ldr	r0, [sp, #8]
 800671a:	f7ff ff4b 	bl	80065b4 <_malloc_r>
 800671e:	1e06      	subs	r6, r0, #0
 8006720:	d02c      	beq.n	800677c <__ssputs_r+0xa8>
 8006722:	9a01      	ldr	r2, [sp, #4]
 8006724:	6921      	ldr	r1, [r4, #16]
 8006726:	f7ff fecf 	bl	80064c8 <memcpy>
 800672a:	89a2      	ldrh	r2, [r4, #12]
 800672c:	4b18      	ldr	r3, [pc, #96]	@ (8006790 <__ssputs_r+0xbc>)
 800672e:	401a      	ands	r2, r3
 8006730:	2380      	movs	r3, #128	@ 0x80
 8006732:	4313      	orrs	r3, r2
 8006734:	81a3      	strh	r3, [r4, #12]
 8006736:	9b01      	ldr	r3, [sp, #4]
 8006738:	6126      	str	r6, [r4, #16]
 800673a:	18f6      	adds	r6, r6, r3
 800673c:	6026      	str	r6, [r4, #0]
 800673e:	003e      	movs	r6, r7
 8006740:	6165      	str	r5, [r4, #20]
 8006742:	1aed      	subs	r5, r5, r3
 8006744:	60a5      	str	r5, [r4, #8]
 8006746:	42be      	cmp	r6, r7
 8006748:	d900      	bls.n	800674c <__ssputs_r+0x78>
 800674a:	003e      	movs	r6, r7
 800674c:	0032      	movs	r2, r6
 800674e:	9903      	ldr	r1, [sp, #12]
 8006750:	6820      	ldr	r0, [r4, #0]
 8006752:	f7ff fe45 	bl	80063e0 <memmove>
 8006756:	2000      	movs	r0, #0
 8006758:	68a3      	ldr	r3, [r4, #8]
 800675a:	1b9b      	subs	r3, r3, r6
 800675c:	60a3      	str	r3, [r4, #8]
 800675e:	6823      	ldr	r3, [r4, #0]
 8006760:	199b      	adds	r3, r3, r6
 8006762:	6023      	str	r3, [r4, #0]
 8006764:	b005      	add	sp, #20
 8006766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006768:	002a      	movs	r2, r5
 800676a:	9802      	ldr	r0, [sp, #8]
 800676c:	f000 faa9 	bl	8006cc2 <_realloc_r>
 8006770:	1e06      	subs	r6, r0, #0
 8006772:	d1e0      	bne.n	8006736 <__ssputs_r+0x62>
 8006774:	6921      	ldr	r1, [r4, #16]
 8006776:	9802      	ldr	r0, [sp, #8]
 8006778:	f7ff feb0 	bl	80064dc <_free_r>
 800677c:	230c      	movs	r3, #12
 800677e:	2001      	movs	r0, #1
 8006780:	9a02      	ldr	r2, [sp, #8]
 8006782:	4240      	negs	r0, r0
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	89a2      	ldrh	r2, [r4, #12]
 8006788:	3334      	adds	r3, #52	@ 0x34
 800678a:	4313      	orrs	r3, r2
 800678c:	81a3      	strh	r3, [r4, #12]
 800678e:	e7e9      	b.n	8006764 <__ssputs_r+0x90>
 8006790:	fffffb7f 	.word	0xfffffb7f

08006794 <_svfiprintf_r>:
 8006794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006796:	b0a1      	sub	sp, #132	@ 0x84
 8006798:	9003      	str	r0, [sp, #12]
 800679a:	001d      	movs	r5, r3
 800679c:	898b      	ldrh	r3, [r1, #12]
 800679e:	000f      	movs	r7, r1
 80067a0:	0016      	movs	r6, r2
 80067a2:	061b      	lsls	r3, r3, #24
 80067a4:	d511      	bpl.n	80067ca <_svfiprintf_r+0x36>
 80067a6:	690b      	ldr	r3, [r1, #16]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10e      	bne.n	80067ca <_svfiprintf_r+0x36>
 80067ac:	2140      	movs	r1, #64	@ 0x40
 80067ae:	f7ff ff01 	bl	80065b4 <_malloc_r>
 80067b2:	6038      	str	r0, [r7, #0]
 80067b4:	6138      	str	r0, [r7, #16]
 80067b6:	2800      	cmp	r0, #0
 80067b8:	d105      	bne.n	80067c6 <_svfiprintf_r+0x32>
 80067ba:	230c      	movs	r3, #12
 80067bc:	9a03      	ldr	r2, [sp, #12]
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	2001      	movs	r0, #1
 80067c2:	4240      	negs	r0, r0
 80067c4:	e0cf      	b.n	8006966 <_svfiprintf_r+0x1d2>
 80067c6:	2340      	movs	r3, #64	@ 0x40
 80067c8:	617b      	str	r3, [r7, #20]
 80067ca:	2300      	movs	r3, #0
 80067cc:	ac08      	add	r4, sp, #32
 80067ce:	6163      	str	r3, [r4, #20]
 80067d0:	3320      	adds	r3, #32
 80067d2:	7663      	strb	r3, [r4, #25]
 80067d4:	3310      	adds	r3, #16
 80067d6:	76a3      	strb	r3, [r4, #26]
 80067d8:	9507      	str	r5, [sp, #28]
 80067da:	0035      	movs	r5, r6
 80067dc:	782b      	ldrb	r3, [r5, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <_svfiprintf_r+0x52>
 80067e2:	2b25      	cmp	r3, #37	@ 0x25
 80067e4:	d148      	bne.n	8006878 <_svfiprintf_r+0xe4>
 80067e6:	1bab      	subs	r3, r5, r6
 80067e8:	9305      	str	r3, [sp, #20]
 80067ea:	42b5      	cmp	r5, r6
 80067ec:	d00b      	beq.n	8006806 <_svfiprintf_r+0x72>
 80067ee:	0032      	movs	r2, r6
 80067f0:	0039      	movs	r1, r7
 80067f2:	9803      	ldr	r0, [sp, #12]
 80067f4:	f7ff ff6e 	bl	80066d4 <__ssputs_r>
 80067f8:	3001      	adds	r0, #1
 80067fa:	d100      	bne.n	80067fe <_svfiprintf_r+0x6a>
 80067fc:	e0ae      	b.n	800695c <_svfiprintf_r+0x1c8>
 80067fe:	6963      	ldr	r3, [r4, #20]
 8006800:	9a05      	ldr	r2, [sp, #20]
 8006802:	189b      	adds	r3, r3, r2
 8006804:	6163      	str	r3, [r4, #20]
 8006806:	782b      	ldrb	r3, [r5, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d100      	bne.n	800680e <_svfiprintf_r+0x7a>
 800680c:	e0a6      	b.n	800695c <_svfiprintf_r+0x1c8>
 800680e:	2201      	movs	r2, #1
 8006810:	2300      	movs	r3, #0
 8006812:	4252      	negs	r2, r2
 8006814:	6062      	str	r2, [r4, #4]
 8006816:	a904      	add	r1, sp, #16
 8006818:	3254      	adds	r2, #84	@ 0x54
 800681a:	1852      	adds	r2, r2, r1
 800681c:	1c6e      	adds	r6, r5, #1
 800681e:	6023      	str	r3, [r4, #0]
 8006820:	60e3      	str	r3, [r4, #12]
 8006822:	60a3      	str	r3, [r4, #8]
 8006824:	7013      	strb	r3, [r2, #0]
 8006826:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006828:	4b54      	ldr	r3, [pc, #336]	@ (800697c <_svfiprintf_r+0x1e8>)
 800682a:	2205      	movs	r2, #5
 800682c:	0018      	movs	r0, r3
 800682e:	7831      	ldrb	r1, [r6, #0]
 8006830:	9305      	str	r3, [sp, #20]
 8006832:	f000 fa3b 	bl	8006cac <memchr>
 8006836:	1c75      	adds	r5, r6, #1
 8006838:	2800      	cmp	r0, #0
 800683a:	d11f      	bne.n	800687c <_svfiprintf_r+0xe8>
 800683c:	6822      	ldr	r2, [r4, #0]
 800683e:	06d3      	lsls	r3, r2, #27
 8006840:	d504      	bpl.n	800684c <_svfiprintf_r+0xb8>
 8006842:	2353      	movs	r3, #83	@ 0x53
 8006844:	a904      	add	r1, sp, #16
 8006846:	185b      	adds	r3, r3, r1
 8006848:	2120      	movs	r1, #32
 800684a:	7019      	strb	r1, [r3, #0]
 800684c:	0713      	lsls	r3, r2, #28
 800684e:	d504      	bpl.n	800685a <_svfiprintf_r+0xc6>
 8006850:	2353      	movs	r3, #83	@ 0x53
 8006852:	a904      	add	r1, sp, #16
 8006854:	185b      	adds	r3, r3, r1
 8006856:	212b      	movs	r1, #43	@ 0x2b
 8006858:	7019      	strb	r1, [r3, #0]
 800685a:	7833      	ldrb	r3, [r6, #0]
 800685c:	2b2a      	cmp	r3, #42	@ 0x2a
 800685e:	d016      	beq.n	800688e <_svfiprintf_r+0xfa>
 8006860:	0035      	movs	r5, r6
 8006862:	2100      	movs	r1, #0
 8006864:	200a      	movs	r0, #10
 8006866:	68e3      	ldr	r3, [r4, #12]
 8006868:	782a      	ldrb	r2, [r5, #0]
 800686a:	1c6e      	adds	r6, r5, #1
 800686c:	3a30      	subs	r2, #48	@ 0x30
 800686e:	2a09      	cmp	r2, #9
 8006870:	d950      	bls.n	8006914 <_svfiprintf_r+0x180>
 8006872:	2900      	cmp	r1, #0
 8006874:	d111      	bne.n	800689a <_svfiprintf_r+0x106>
 8006876:	e017      	b.n	80068a8 <_svfiprintf_r+0x114>
 8006878:	3501      	adds	r5, #1
 800687a:	e7af      	b.n	80067dc <_svfiprintf_r+0x48>
 800687c:	9b05      	ldr	r3, [sp, #20]
 800687e:	6822      	ldr	r2, [r4, #0]
 8006880:	1ac0      	subs	r0, r0, r3
 8006882:	2301      	movs	r3, #1
 8006884:	4083      	lsls	r3, r0
 8006886:	4313      	orrs	r3, r2
 8006888:	002e      	movs	r6, r5
 800688a:	6023      	str	r3, [r4, #0]
 800688c:	e7cc      	b.n	8006828 <_svfiprintf_r+0x94>
 800688e:	9b07      	ldr	r3, [sp, #28]
 8006890:	1d19      	adds	r1, r3, #4
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	9107      	str	r1, [sp, #28]
 8006896:	2b00      	cmp	r3, #0
 8006898:	db01      	blt.n	800689e <_svfiprintf_r+0x10a>
 800689a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800689c:	e004      	b.n	80068a8 <_svfiprintf_r+0x114>
 800689e:	425b      	negs	r3, r3
 80068a0:	60e3      	str	r3, [r4, #12]
 80068a2:	2302      	movs	r3, #2
 80068a4:	4313      	orrs	r3, r2
 80068a6:	6023      	str	r3, [r4, #0]
 80068a8:	782b      	ldrb	r3, [r5, #0]
 80068aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80068ac:	d10c      	bne.n	80068c8 <_svfiprintf_r+0x134>
 80068ae:	786b      	ldrb	r3, [r5, #1]
 80068b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80068b2:	d134      	bne.n	800691e <_svfiprintf_r+0x18a>
 80068b4:	9b07      	ldr	r3, [sp, #28]
 80068b6:	3502      	adds	r5, #2
 80068b8:	1d1a      	adds	r2, r3, #4
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	9207      	str	r2, [sp, #28]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	da01      	bge.n	80068c6 <_svfiprintf_r+0x132>
 80068c2:	2301      	movs	r3, #1
 80068c4:	425b      	negs	r3, r3
 80068c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80068c8:	4e2d      	ldr	r6, [pc, #180]	@ (8006980 <_svfiprintf_r+0x1ec>)
 80068ca:	2203      	movs	r2, #3
 80068cc:	0030      	movs	r0, r6
 80068ce:	7829      	ldrb	r1, [r5, #0]
 80068d0:	f000 f9ec 	bl	8006cac <memchr>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d006      	beq.n	80068e6 <_svfiprintf_r+0x152>
 80068d8:	2340      	movs	r3, #64	@ 0x40
 80068da:	1b80      	subs	r0, r0, r6
 80068dc:	4083      	lsls	r3, r0
 80068de:	6822      	ldr	r2, [r4, #0]
 80068e0:	3501      	adds	r5, #1
 80068e2:	4313      	orrs	r3, r2
 80068e4:	6023      	str	r3, [r4, #0]
 80068e6:	7829      	ldrb	r1, [r5, #0]
 80068e8:	2206      	movs	r2, #6
 80068ea:	4826      	ldr	r0, [pc, #152]	@ (8006984 <_svfiprintf_r+0x1f0>)
 80068ec:	1c6e      	adds	r6, r5, #1
 80068ee:	7621      	strb	r1, [r4, #24]
 80068f0:	f000 f9dc 	bl	8006cac <memchr>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d038      	beq.n	800696a <_svfiprintf_r+0x1d6>
 80068f8:	4b23      	ldr	r3, [pc, #140]	@ (8006988 <_svfiprintf_r+0x1f4>)
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d122      	bne.n	8006944 <_svfiprintf_r+0x1b0>
 80068fe:	2207      	movs	r2, #7
 8006900:	9b07      	ldr	r3, [sp, #28]
 8006902:	3307      	adds	r3, #7
 8006904:	4393      	bics	r3, r2
 8006906:	3308      	adds	r3, #8
 8006908:	9307      	str	r3, [sp, #28]
 800690a:	6963      	ldr	r3, [r4, #20]
 800690c:	9a04      	ldr	r2, [sp, #16]
 800690e:	189b      	adds	r3, r3, r2
 8006910:	6163      	str	r3, [r4, #20]
 8006912:	e762      	b.n	80067da <_svfiprintf_r+0x46>
 8006914:	4343      	muls	r3, r0
 8006916:	0035      	movs	r5, r6
 8006918:	2101      	movs	r1, #1
 800691a:	189b      	adds	r3, r3, r2
 800691c:	e7a4      	b.n	8006868 <_svfiprintf_r+0xd4>
 800691e:	2300      	movs	r3, #0
 8006920:	200a      	movs	r0, #10
 8006922:	0019      	movs	r1, r3
 8006924:	3501      	adds	r5, #1
 8006926:	6063      	str	r3, [r4, #4]
 8006928:	782a      	ldrb	r2, [r5, #0]
 800692a:	1c6e      	adds	r6, r5, #1
 800692c:	3a30      	subs	r2, #48	@ 0x30
 800692e:	2a09      	cmp	r2, #9
 8006930:	d903      	bls.n	800693a <_svfiprintf_r+0x1a6>
 8006932:	2b00      	cmp	r3, #0
 8006934:	d0c8      	beq.n	80068c8 <_svfiprintf_r+0x134>
 8006936:	9109      	str	r1, [sp, #36]	@ 0x24
 8006938:	e7c6      	b.n	80068c8 <_svfiprintf_r+0x134>
 800693a:	4341      	muls	r1, r0
 800693c:	0035      	movs	r5, r6
 800693e:	2301      	movs	r3, #1
 8006940:	1889      	adds	r1, r1, r2
 8006942:	e7f1      	b.n	8006928 <_svfiprintf_r+0x194>
 8006944:	aa07      	add	r2, sp, #28
 8006946:	9200      	str	r2, [sp, #0]
 8006948:	0021      	movs	r1, r4
 800694a:	003a      	movs	r2, r7
 800694c:	4b0f      	ldr	r3, [pc, #60]	@ (800698c <_svfiprintf_r+0x1f8>)
 800694e:	9803      	ldr	r0, [sp, #12]
 8006950:	e000      	b.n	8006954 <_svfiprintf_r+0x1c0>
 8006952:	bf00      	nop
 8006954:	9004      	str	r0, [sp, #16]
 8006956:	9b04      	ldr	r3, [sp, #16]
 8006958:	3301      	adds	r3, #1
 800695a:	d1d6      	bne.n	800690a <_svfiprintf_r+0x176>
 800695c:	89bb      	ldrh	r3, [r7, #12]
 800695e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006960:	065b      	lsls	r3, r3, #25
 8006962:	d500      	bpl.n	8006966 <_svfiprintf_r+0x1d2>
 8006964:	e72c      	b.n	80067c0 <_svfiprintf_r+0x2c>
 8006966:	b021      	add	sp, #132	@ 0x84
 8006968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800696a:	aa07      	add	r2, sp, #28
 800696c:	9200      	str	r2, [sp, #0]
 800696e:	0021      	movs	r1, r4
 8006970:	003a      	movs	r2, r7
 8006972:	4b06      	ldr	r3, [pc, #24]	@ (800698c <_svfiprintf_r+0x1f8>)
 8006974:	9803      	ldr	r0, [sp, #12]
 8006976:	f000 f87b 	bl	8006a70 <_printf_i>
 800697a:	e7eb      	b.n	8006954 <_svfiprintf_r+0x1c0>
 800697c:	08006f3d 	.word	0x08006f3d
 8006980:	08006f43 	.word	0x08006f43
 8006984:	08006f47 	.word	0x08006f47
 8006988:	00000000 	.word	0x00000000
 800698c:	080066d5 	.word	0x080066d5

08006990 <_printf_common>:
 8006990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006992:	0016      	movs	r6, r2
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	688a      	ldr	r2, [r1, #8]
 8006998:	690b      	ldr	r3, [r1, #16]
 800699a:	000c      	movs	r4, r1
 800699c:	9000      	str	r0, [sp, #0]
 800699e:	4293      	cmp	r3, r2
 80069a0:	da00      	bge.n	80069a4 <_printf_common+0x14>
 80069a2:	0013      	movs	r3, r2
 80069a4:	0022      	movs	r2, r4
 80069a6:	6033      	str	r3, [r6, #0]
 80069a8:	3243      	adds	r2, #67	@ 0x43
 80069aa:	7812      	ldrb	r2, [r2, #0]
 80069ac:	2a00      	cmp	r2, #0
 80069ae:	d001      	beq.n	80069b4 <_printf_common+0x24>
 80069b0:	3301      	adds	r3, #1
 80069b2:	6033      	str	r3, [r6, #0]
 80069b4:	6823      	ldr	r3, [r4, #0]
 80069b6:	069b      	lsls	r3, r3, #26
 80069b8:	d502      	bpl.n	80069c0 <_printf_common+0x30>
 80069ba:	6833      	ldr	r3, [r6, #0]
 80069bc:	3302      	adds	r3, #2
 80069be:	6033      	str	r3, [r6, #0]
 80069c0:	6822      	ldr	r2, [r4, #0]
 80069c2:	2306      	movs	r3, #6
 80069c4:	0015      	movs	r5, r2
 80069c6:	401d      	ands	r5, r3
 80069c8:	421a      	tst	r2, r3
 80069ca:	d027      	beq.n	8006a1c <_printf_common+0x8c>
 80069cc:	0023      	movs	r3, r4
 80069ce:	3343      	adds	r3, #67	@ 0x43
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	1e5a      	subs	r2, r3, #1
 80069d4:	4193      	sbcs	r3, r2
 80069d6:	6822      	ldr	r2, [r4, #0]
 80069d8:	0692      	lsls	r2, r2, #26
 80069da:	d430      	bmi.n	8006a3e <_printf_common+0xae>
 80069dc:	0022      	movs	r2, r4
 80069de:	9901      	ldr	r1, [sp, #4]
 80069e0:	9800      	ldr	r0, [sp, #0]
 80069e2:	9d08      	ldr	r5, [sp, #32]
 80069e4:	3243      	adds	r2, #67	@ 0x43
 80069e6:	47a8      	blx	r5
 80069e8:	3001      	adds	r0, #1
 80069ea:	d025      	beq.n	8006a38 <_printf_common+0xa8>
 80069ec:	2206      	movs	r2, #6
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	2500      	movs	r5, #0
 80069f2:	4013      	ands	r3, r2
 80069f4:	2b04      	cmp	r3, #4
 80069f6:	d105      	bne.n	8006a04 <_printf_common+0x74>
 80069f8:	6833      	ldr	r3, [r6, #0]
 80069fa:	68e5      	ldr	r5, [r4, #12]
 80069fc:	1aed      	subs	r5, r5, r3
 80069fe:	43eb      	mvns	r3, r5
 8006a00:	17db      	asrs	r3, r3, #31
 8006a02:	401d      	ands	r5, r3
 8006a04:	68a3      	ldr	r3, [r4, #8]
 8006a06:	6922      	ldr	r2, [r4, #16]
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	dd01      	ble.n	8006a10 <_printf_common+0x80>
 8006a0c:	1a9b      	subs	r3, r3, r2
 8006a0e:	18ed      	adds	r5, r5, r3
 8006a10:	2600      	movs	r6, #0
 8006a12:	42b5      	cmp	r5, r6
 8006a14:	d120      	bne.n	8006a58 <_printf_common+0xc8>
 8006a16:	2000      	movs	r0, #0
 8006a18:	e010      	b.n	8006a3c <_printf_common+0xac>
 8006a1a:	3501      	adds	r5, #1
 8006a1c:	68e3      	ldr	r3, [r4, #12]
 8006a1e:	6832      	ldr	r2, [r6, #0]
 8006a20:	1a9b      	subs	r3, r3, r2
 8006a22:	42ab      	cmp	r3, r5
 8006a24:	ddd2      	ble.n	80069cc <_printf_common+0x3c>
 8006a26:	0022      	movs	r2, r4
 8006a28:	2301      	movs	r3, #1
 8006a2a:	9901      	ldr	r1, [sp, #4]
 8006a2c:	9800      	ldr	r0, [sp, #0]
 8006a2e:	9f08      	ldr	r7, [sp, #32]
 8006a30:	3219      	adds	r2, #25
 8006a32:	47b8      	blx	r7
 8006a34:	3001      	adds	r0, #1
 8006a36:	d1f0      	bne.n	8006a1a <_printf_common+0x8a>
 8006a38:	2001      	movs	r0, #1
 8006a3a:	4240      	negs	r0, r0
 8006a3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a3e:	2030      	movs	r0, #48	@ 0x30
 8006a40:	18e1      	adds	r1, r4, r3
 8006a42:	3143      	adds	r1, #67	@ 0x43
 8006a44:	7008      	strb	r0, [r1, #0]
 8006a46:	0021      	movs	r1, r4
 8006a48:	1c5a      	adds	r2, r3, #1
 8006a4a:	3145      	adds	r1, #69	@ 0x45
 8006a4c:	7809      	ldrb	r1, [r1, #0]
 8006a4e:	18a2      	adds	r2, r4, r2
 8006a50:	3243      	adds	r2, #67	@ 0x43
 8006a52:	3302      	adds	r3, #2
 8006a54:	7011      	strb	r1, [r2, #0]
 8006a56:	e7c1      	b.n	80069dc <_printf_common+0x4c>
 8006a58:	0022      	movs	r2, r4
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	9901      	ldr	r1, [sp, #4]
 8006a5e:	9800      	ldr	r0, [sp, #0]
 8006a60:	9f08      	ldr	r7, [sp, #32]
 8006a62:	321a      	adds	r2, #26
 8006a64:	47b8      	blx	r7
 8006a66:	3001      	adds	r0, #1
 8006a68:	d0e6      	beq.n	8006a38 <_printf_common+0xa8>
 8006a6a:	3601      	adds	r6, #1
 8006a6c:	e7d1      	b.n	8006a12 <_printf_common+0x82>
	...

08006a70 <_printf_i>:
 8006a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a72:	b08b      	sub	sp, #44	@ 0x2c
 8006a74:	9206      	str	r2, [sp, #24]
 8006a76:	000a      	movs	r2, r1
 8006a78:	3243      	adds	r2, #67	@ 0x43
 8006a7a:	9307      	str	r3, [sp, #28]
 8006a7c:	9005      	str	r0, [sp, #20]
 8006a7e:	9203      	str	r2, [sp, #12]
 8006a80:	7e0a      	ldrb	r2, [r1, #24]
 8006a82:	000c      	movs	r4, r1
 8006a84:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006a86:	2a78      	cmp	r2, #120	@ 0x78
 8006a88:	d809      	bhi.n	8006a9e <_printf_i+0x2e>
 8006a8a:	2a62      	cmp	r2, #98	@ 0x62
 8006a8c:	d80b      	bhi.n	8006aa6 <_printf_i+0x36>
 8006a8e:	2a00      	cmp	r2, #0
 8006a90:	d100      	bne.n	8006a94 <_printf_i+0x24>
 8006a92:	e0ba      	b.n	8006c0a <_printf_i+0x19a>
 8006a94:	497a      	ldr	r1, [pc, #488]	@ (8006c80 <_printf_i+0x210>)
 8006a96:	9104      	str	r1, [sp, #16]
 8006a98:	2a58      	cmp	r2, #88	@ 0x58
 8006a9a:	d100      	bne.n	8006a9e <_printf_i+0x2e>
 8006a9c:	e08e      	b.n	8006bbc <_printf_i+0x14c>
 8006a9e:	0025      	movs	r5, r4
 8006aa0:	3542      	adds	r5, #66	@ 0x42
 8006aa2:	702a      	strb	r2, [r5, #0]
 8006aa4:	e022      	b.n	8006aec <_printf_i+0x7c>
 8006aa6:	0010      	movs	r0, r2
 8006aa8:	3863      	subs	r0, #99	@ 0x63
 8006aaa:	2815      	cmp	r0, #21
 8006aac:	d8f7      	bhi.n	8006a9e <_printf_i+0x2e>
 8006aae:	f7f9 fb43 	bl	8000138 <__gnu_thumb1_case_shi>
 8006ab2:	0016      	.short	0x0016
 8006ab4:	fff6001f 	.word	0xfff6001f
 8006ab8:	fff6fff6 	.word	0xfff6fff6
 8006abc:	001ffff6 	.word	0x001ffff6
 8006ac0:	fff6fff6 	.word	0xfff6fff6
 8006ac4:	fff6fff6 	.word	0xfff6fff6
 8006ac8:	0036009f 	.word	0x0036009f
 8006acc:	fff6007e 	.word	0xfff6007e
 8006ad0:	00b0fff6 	.word	0x00b0fff6
 8006ad4:	0036fff6 	.word	0x0036fff6
 8006ad8:	fff6fff6 	.word	0xfff6fff6
 8006adc:	0082      	.short	0x0082
 8006ade:	0025      	movs	r5, r4
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	3542      	adds	r5, #66	@ 0x42
 8006ae4:	1d11      	adds	r1, r2, #4
 8006ae6:	6019      	str	r1, [r3, #0]
 8006ae8:	6813      	ldr	r3, [r2, #0]
 8006aea:	702b      	strb	r3, [r5, #0]
 8006aec:	2301      	movs	r3, #1
 8006aee:	e09e      	b.n	8006c2e <_printf_i+0x1be>
 8006af0:	6818      	ldr	r0, [r3, #0]
 8006af2:	6809      	ldr	r1, [r1, #0]
 8006af4:	1d02      	adds	r2, r0, #4
 8006af6:	060d      	lsls	r5, r1, #24
 8006af8:	d50b      	bpl.n	8006b12 <_printf_i+0xa2>
 8006afa:	6806      	ldr	r6, [r0, #0]
 8006afc:	601a      	str	r2, [r3, #0]
 8006afe:	2e00      	cmp	r6, #0
 8006b00:	da03      	bge.n	8006b0a <_printf_i+0x9a>
 8006b02:	232d      	movs	r3, #45	@ 0x2d
 8006b04:	9a03      	ldr	r2, [sp, #12]
 8006b06:	4276      	negs	r6, r6
 8006b08:	7013      	strb	r3, [r2, #0]
 8006b0a:	4b5d      	ldr	r3, [pc, #372]	@ (8006c80 <_printf_i+0x210>)
 8006b0c:	270a      	movs	r7, #10
 8006b0e:	9304      	str	r3, [sp, #16]
 8006b10:	e018      	b.n	8006b44 <_printf_i+0xd4>
 8006b12:	6806      	ldr	r6, [r0, #0]
 8006b14:	601a      	str	r2, [r3, #0]
 8006b16:	0649      	lsls	r1, r1, #25
 8006b18:	d5f1      	bpl.n	8006afe <_printf_i+0x8e>
 8006b1a:	b236      	sxth	r6, r6
 8006b1c:	e7ef      	b.n	8006afe <_printf_i+0x8e>
 8006b1e:	6808      	ldr	r0, [r1, #0]
 8006b20:	6819      	ldr	r1, [r3, #0]
 8006b22:	c940      	ldmia	r1!, {r6}
 8006b24:	0605      	lsls	r5, r0, #24
 8006b26:	d402      	bmi.n	8006b2e <_printf_i+0xbe>
 8006b28:	0640      	lsls	r0, r0, #25
 8006b2a:	d500      	bpl.n	8006b2e <_printf_i+0xbe>
 8006b2c:	b2b6      	uxth	r6, r6
 8006b2e:	6019      	str	r1, [r3, #0]
 8006b30:	4b53      	ldr	r3, [pc, #332]	@ (8006c80 <_printf_i+0x210>)
 8006b32:	270a      	movs	r7, #10
 8006b34:	9304      	str	r3, [sp, #16]
 8006b36:	2a6f      	cmp	r2, #111	@ 0x6f
 8006b38:	d100      	bne.n	8006b3c <_printf_i+0xcc>
 8006b3a:	3f02      	subs	r7, #2
 8006b3c:	0023      	movs	r3, r4
 8006b3e:	2200      	movs	r2, #0
 8006b40:	3343      	adds	r3, #67	@ 0x43
 8006b42:	701a      	strb	r2, [r3, #0]
 8006b44:	6863      	ldr	r3, [r4, #4]
 8006b46:	60a3      	str	r3, [r4, #8]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	db06      	blt.n	8006b5a <_printf_i+0xea>
 8006b4c:	2104      	movs	r1, #4
 8006b4e:	6822      	ldr	r2, [r4, #0]
 8006b50:	9d03      	ldr	r5, [sp, #12]
 8006b52:	438a      	bics	r2, r1
 8006b54:	6022      	str	r2, [r4, #0]
 8006b56:	4333      	orrs	r3, r6
 8006b58:	d00c      	beq.n	8006b74 <_printf_i+0x104>
 8006b5a:	9d03      	ldr	r5, [sp, #12]
 8006b5c:	0030      	movs	r0, r6
 8006b5e:	0039      	movs	r1, r7
 8006b60:	f7f9 fb7a 	bl	8000258 <__aeabi_uidivmod>
 8006b64:	9b04      	ldr	r3, [sp, #16]
 8006b66:	3d01      	subs	r5, #1
 8006b68:	5c5b      	ldrb	r3, [r3, r1]
 8006b6a:	702b      	strb	r3, [r5, #0]
 8006b6c:	0033      	movs	r3, r6
 8006b6e:	0006      	movs	r6, r0
 8006b70:	429f      	cmp	r7, r3
 8006b72:	d9f3      	bls.n	8006b5c <_printf_i+0xec>
 8006b74:	2f08      	cmp	r7, #8
 8006b76:	d109      	bne.n	8006b8c <_printf_i+0x11c>
 8006b78:	6823      	ldr	r3, [r4, #0]
 8006b7a:	07db      	lsls	r3, r3, #31
 8006b7c:	d506      	bpl.n	8006b8c <_printf_i+0x11c>
 8006b7e:	6862      	ldr	r2, [r4, #4]
 8006b80:	6923      	ldr	r3, [r4, #16]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	dc02      	bgt.n	8006b8c <_printf_i+0x11c>
 8006b86:	2330      	movs	r3, #48	@ 0x30
 8006b88:	3d01      	subs	r5, #1
 8006b8a:	702b      	strb	r3, [r5, #0]
 8006b8c:	9b03      	ldr	r3, [sp, #12]
 8006b8e:	1b5b      	subs	r3, r3, r5
 8006b90:	6123      	str	r3, [r4, #16]
 8006b92:	9b07      	ldr	r3, [sp, #28]
 8006b94:	0021      	movs	r1, r4
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	9805      	ldr	r0, [sp, #20]
 8006b9a:	9b06      	ldr	r3, [sp, #24]
 8006b9c:	aa09      	add	r2, sp, #36	@ 0x24
 8006b9e:	f7ff fef7 	bl	8006990 <_printf_common>
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	d148      	bne.n	8006c38 <_printf_i+0x1c8>
 8006ba6:	2001      	movs	r0, #1
 8006ba8:	4240      	negs	r0, r0
 8006baa:	b00b      	add	sp, #44	@ 0x2c
 8006bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bae:	2220      	movs	r2, #32
 8006bb0:	6809      	ldr	r1, [r1, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	6022      	str	r2, [r4, #0]
 8006bb6:	2278      	movs	r2, #120	@ 0x78
 8006bb8:	4932      	ldr	r1, [pc, #200]	@ (8006c84 <_printf_i+0x214>)
 8006bba:	9104      	str	r1, [sp, #16]
 8006bbc:	0021      	movs	r1, r4
 8006bbe:	3145      	adds	r1, #69	@ 0x45
 8006bc0:	700a      	strb	r2, [r1, #0]
 8006bc2:	6819      	ldr	r1, [r3, #0]
 8006bc4:	6822      	ldr	r2, [r4, #0]
 8006bc6:	c940      	ldmia	r1!, {r6}
 8006bc8:	0610      	lsls	r0, r2, #24
 8006bca:	d402      	bmi.n	8006bd2 <_printf_i+0x162>
 8006bcc:	0650      	lsls	r0, r2, #25
 8006bce:	d500      	bpl.n	8006bd2 <_printf_i+0x162>
 8006bd0:	b2b6      	uxth	r6, r6
 8006bd2:	6019      	str	r1, [r3, #0]
 8006bd4:	07d3      	lsls	r3, r2, #31
 8006bd6:	d502      	bpl.n	8006bde <_printf_i+0x16e>
 8006bd8:	2320      	movs	r3, #32
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	6023      	str	r3, [r4, #0]
 8006bde:	2e00      	cmp	r6, #0
 8006be0:	d001      	beq.n	8006be6 <_printf_i+0x176>
 8006be2:	2710      	movs	r7, #16
 8006be4:	e7aa      	b.n	8006b3c <_printf_i+0xcc>
 8006be6:	2220      	movs	r2, #32
 8006be8:	6823      	ldr	r3, [r4, #0]
 8006bea:	4393      	bics	r3, r2
 8006bec:	6023      	str	r3, [r4, #0]
 8006bee:	e7f8      	b.n	8006be2 <_printf_i+0x172>
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	680d      	ldr	r5, [r1, #0]
 8006bf4:	1d10      	adds	r0, r2, #4
 8006bf6:	6949      	ldr	r1, [r1, #20]
 8006bf8:	6018      	str	r0, [r3, #0]
 8006bfa:	6813      	ldr	r3, [r2, #0]
 8006bfc:	062e      	lsls	r6, r5, #24
 8006bfe:	d501      	bpl.n	8006c04 <_printf_i+0x194>
 8006c00:	6019      	str	r1, [r3, #0]
 8006c02:	e002      	b.n	8006c0a <_printf_i+0x19a>
 8006c04:	066d      	lsls	r5, r5, #25
 8006c06:	d5fb      	bpl.n	8006c00 <_printf_i+0x190>
 8006c08:	8019      	strh	r1, [r3, #0]
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	9d03      	ldr	r5, [sp, #12]
 8006c0e:	6123      	str	r3, [r4, #16]
 8006c10:	e7bf      	b.n	8006b92 <_printf_i+0x122>
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	1d11      	adds	r1, r2, #4
 8006c16:	6019      	str	r1, [r3, #0]
 8006c18:	6815      	ldr	r5, [r2, #0]
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	0028      	movs	r0, r5
 8006c1e:	6862      	ldr	r2, [r4, #4]
 8006c20:	f000 f844 	bl	8006cac <memchr>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d001      	beq.n	8006c2c <_printf_i+0x1bc>
 8006c28:	1b40      	subs	r0, r0, r5
 8006c2a:	6060      	str	r0, [r4, #4]
 8006c2c:	6863      	ldr	r3, [r4, #4]
 8006c2e:	6123      	str	r3, [r4, #16]
 8006c30:	2300      	movs	r3, #0
 8006c32:	9a03      	ldr	r2, [sp, #12]
 8006c34:	7013      	strb	r3, [r2, #0]
 8006c36:	e7ac      	b.n	8006b92 <_printf_i+0x122>
 8006c38:	002a      	movs	r2, r5
 8006c3a:	6923      	ldr	r3, [r4, #16]
 8006c3c:	9906      	ldr	r1, [sp, #24]
 8006c3e:	9805      	ldr	r0, [sp, #20]
 8006c40:	9d07      	ldr	r5, [sp, #28]
 8006c42:	47a8      	blx	r5
 8006c44:	3001      	adds	r0, #1
 8006c46:	d0ae      	beq.n	8006ba6 <_printf_i+0x136>
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	079b      	lsls	r3, r3, #30
 8006c4c:	d415      	bmi.n	8006c7a <_printf_i+0x20a>
 8006c4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c50:	68e0      	ldr	r0, [r4, #12]
 8006c52:	4298      	cmp	r0, r3
 8006c54:	daa9      	bge.n	8006baa <_printf_i+0x13a>
 8006c56:	0018      	movs	r0, r3
 8006c58:	e7a7      	b.n	8006baa <_printf_i+0x13a>
 8006c5a:	0022      	movs	r2, r4
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	9906      	ldr	r1, [sp, #24]
 8006c60:	9805      	ldr	r0, [sp, #20]
 8006c62:	9e07      	ldr	r6, [sp, #28]
 8006c64:	3219      	adds	r2, #25
 8006c66:	47b0      	blx	r6
 8006c68:	3001      	adds	r0, #1
 8006c6a:	d09c      	beq.n	8006ba6 <_printf_i+0x136>
 8006c6c:	3501      	adds	r5, #1
 8006c6e:	68e3      	ldr	r3, [r4, #12]
 8006c70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c72:	1a9b      	subs	r3, r3, r2
 8006c74:	42ab      	cmp	r3, r5
 8006c76:	dcf0      	bgt.n	8006c5a <_printf_i+0x1ea>
 8006c78:	e7e9      	b.n	8006c4e <_printf_i+0x1de>
 8006c7a:	2500      	movs	r5, #0
 8006c7c:	e7f7      	b.n	8006c6e <_printf_i+0x1fe>
 8006c7e:	46c0      	nop			@ (mov r8, r8)
 8006c80:	08006f4e 	.word	0x08006f4e
 8006c84:	08006f5f 	.word	0x08006f5f

08006c88 <_sbrk_r>:
 8006c88:	2300      	movs	r3, #0
 8006c8a:	b570      	push	{r4, r5, r6, lr}
 8006c8c:	4d06      	ldr	r5, [pc, #24]	@ (8006ca8 <_sbrk_r+0x20>)
 8006c8e:	0004      	movs	r4, r0
 8006c90:	0008      	movs	r0, r1
 8006c92:	602b      	str	r3, [r5, #0]
 8006c94:	f7fc fc32 	bl	80034fc <_sbrk>
 8006c98:	1c43      	adds	r3, r0, #1
 8006c9a:	d103      	bne.n	8006ca4 <_sbrk_r+0x1c>
 8006c9c:	682b      	ldr	r3, [r5, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d000      	beq.n	8006ca4 <_sbrk_r+0x1c>
 8006ca2:	6023      	str	r3, [r4, #0]
 8006ca4:	bd70      	pop	{r4, r5, r6, pc}
 8006ca6:	46c0      	nop			@ (mov r8, r8)
 8006ca8:	2000055c 	.word	0x2000055c

08006cac <memchr>:
 8006cac:	b2c9      	uxtb	r1, r1
 8006cae:	1882      	adds	r2, r0, r2
 8006cb0:	4290      	cmp	r0, r2
 8006cb2:	d101      	bne.n	8006cb8 <memchr+0xc>
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	4770      	bx	lr
 8006cb8:	7803      	ldrb	r3, [r0, #0]
 8006cba:	428b      	cmp	r3, r1
 8006cbc:	d0fb      	beq.n	8006cb6 <memchr+0xa>
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	e7f6      	b.n	8006cb0 <memchr+0x4>

08006cc2 <_realloc_r>:
 8006cc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cc4:	0006      	movs	r6, r0
 8006cc6:	000c      	movs	r4, r1
 8006cc8:	0015      	movs	r5, r2
 8006cca:	2900      	cmp	r1, #0
 8006ccc:	d105      	bne.n	8006cda <_realloc_r+0x18>
 8006cce:	0011      	movs	r1, r2
 8006cd0:	f7ff fc70 	bl	80065b4 <_malloc_r>
 8006cd4:	0004      	movs	r4, r0
 8006cd6:	0020      	movs	r0, r4
 8006cd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006cda:	2a00      	cmp	r2, #0
 8006cdc:	d103      	bne.n	8006ce6 <_realloc_r+0x24>
 8006cde:	f7ff fbfd 	bl	80064dc <_free_r>
 8006ce2:	002c      	movs	r4, r5
 8006ce4:	e7f7      	b.n	8006cd6 <_realloc_r+0x14>
 8006ce6:	f000 f81c 	bl	8006d22 <_malloc_usable_size_r>
 8006cea:	0007      	movs	r7, r0
 8006cec:	4285      	cmp	r5, r0
 8006cee:	d802      	bhi.n	8006cf6 <_realloc_r+0x34>
 8006cf0:	0843      	lsrs	r3, r0, #1
 8006cf2:	42ab      	cmp	r3, r5
 8006cf4:	d3ef      	bcc.n	8006cd6 <_realloc_r+0x14>
 8006cf6:	0029      	movs	r1, r5
 8006cf8:	0030      	movs	r0, r6
 8006cfa:	f7ff fc5b 	bl	80065b4 <_malloc_r>
 8006cfe:	9001      	str	r0, [sp, #4]
 8006d00:	2800      	cmp	r0, #0
 8006d02:	d101      	bne.n	8006d08 <_realloc_r+0x46>
 8006d04:	9c01      	ldr	r4, [sp, #4]
 8006d06:	e7e6      	b.n	8006cd6 <_realloc_r+0x14>
 8006d08:	002a      	movs	r2, r5
 8006d0a:	42bd      	cmp	r5, r7
 8006d0c:	d900      	bls.n	8006d10 <_realloc_r+0x4e>
 8006d0e:	003a      	movs	r2, r7
 8006d10:	0021      	movs	r1, r4
 8006d12:	9801      	ldr	r0, [sp, #4]
 8006d14:	f7ff fbd8 	bl	80064c8 <memcpy>
 8006d18:	0021      	movs	r1, r4
 8006d1a:	0030      	movs	r0, r6
 8006d1c:	f7ff fbde 	bl	80064dc <_free_r>
 8006d20:	e7f0      	b.n	8006d04 <_realloc_r+0x42>

08006d22 <_malloc_usable_size_r>:
 8006d22:	1f0b      	subs	r3, r1, #4
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	1f18      	subs	r0, r3, #4
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	da01      	bge.n	8006d30 <_malloc_usable_size_r+0xe>
 8006d2c:	580b      	ldr	r3, [r1, r0]
 8006d2e:	18c0      	adds	r0, r0, r3
 8006d30:	4770      	bx	lr
	...

08006d34 <_init>:
 8006d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d36:	46c0      	nop			@ (mov r8, r8)
 8006d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d3a:	bc08      	pop	{r3}
 8006d3c:	469e      	mov	lr, r3
 8006d3e:	4770      	bx	lr

08006d40 <_fini>:
 8006d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d42:	46c0      	nop			@ (mov r8, r8)
 8006d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d46:	bc08      	pop	{r3}
 8006d48:	469e      	mov	lr, r3
 8006d4a:	4770      	bx	lr
