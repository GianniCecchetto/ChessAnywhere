
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003848  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003900  08003900  00004900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039cc  080039cc  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080039cc  080039cc  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080039cc  080039cc  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039cc  080039cc  000049cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039d0  080039d0  000049d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080039d4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000000c  080039e0  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  080039e0  000051bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001248e  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ef  00000000  00000000  000174c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  000199b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d0e  00000000  00000000  0001aa20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014ee5  00000000  00000000  0001b72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b2d  00000000  00000000  00030613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c77d  00000000  00000000  00045140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d18bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c08  00000000  00000000  000d1900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000d5508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080038e8 	.word	0x080038e8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080038e8 	.word	0x080038e8

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint64_t board_bitmap = 0;
 800021e:	2200      	movs	r2, #0
 8000220:	2300      	movs	r3, #0
 8000222:	603a      	str	r2, [r7, #0]
 8000224:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fc25 	bl	8000a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f813 	bl	8000254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f9b5 	bl	800059c <MX_GPIO_Init>
  MX_DMA_Init();
 8000232:	f000 f995 	bl	8000560 <MX_DMA_Init>
  MX_I2C1_Init();
 8000236:	f000 f855 	bl	80002e4 <MX_I2C1_Init>
  MX_TIM1_Init();
 800023a:	f000 f893 	bl	8000364 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800023e:	f000 f95b 	bl	80004f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  UART_Flush(&huart2);
 8000242:	4b03      	ldr	r3, [pc, #12]	@ (8000250 <main+0x38>)
 8000244:	0018      	movs	r0, r3
 8000246:	f000 fa2b 	bl	80006a0 <UART_Flush>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800024a:	46c0      	nop			@ (mov r8, r8)
 800024c:	e7fd      	b.n	800024a <main+0x32>
 800024e:	46c0      	nop			@ (mov r8, r8)
 8000250:	20000124 	.word	0x20000124

08000254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000254:	b590      	push	{r4, r7, lr}
 8000256:	b093      	sub	sp, #76	@ 0x4c
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	2414      	movs	r4, #20
 800025c:	193b      	adds	r3, r7, r4
 800025e:	0018      	movs	r0, r3
 8000260:	2334      	movs	r3, #52	@ 0x34
 8000262:	001a      	movs	r2, r3
 8000264:	2100      	movs	r1, #0
 8000266:	f003 fb13 	bl	8003890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	0018      	movs	r0, r3
 800026e:	2310      	movs	r3, #16
 8000270:	001a      	movs	r2, r3
 8000272:	2100      	movs	r1, #0
 8000274:	f003 fb0c 	bl	8003890 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000278:	2380      	movs	r3, #128	@ 0x80
 800027a:	009b      	lsls	r3, r3, #2
 800027c:	0018      	movs	r0, r3
 800027e:	f001 f9a9 	bl	80015d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000282:	193b      	adds	r3, r7, r4
 8000284:	2202      	movs	r2, #2
 8000286:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000288:	193b      	adds	r3, r7, r4
 800028a:	2280      	movs	r2, #128	@ 0x80
 800028c:	0052      	lsls	r2, r2, #1
 800028e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000290:	193b      	adds	r3, r7, r4
 8000292:	2200      	movs	r2, #0
 8000294:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000296:	193b      	adds	r3, r7, r4
 8000298:	2240      	movs	r2, #64	@ 0x40
 800029a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800029c:	193b      	adds	r3, r7, r4
 800029e:	2200      	movs	r2, #0
 80002a0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a2:	193b      	adds	r3, r7, r4
 80002a4:	0018      	movs	r0, r3
 80002a6:	f001 f9e1 	bl	800166c <HAL_RCC_OscConfig>
 80002aa:	1e03      	subs	r3, r0, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002ae:	f000 fa28 	bl	8000702 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2207      	movs	r2, #7
 80002b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2200      	movs	r2, #0
 80002bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2200      	movs	r2, #0
 80002c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2200      	movs	r2, #0
 80002c8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2100      	movs	r1, #0
 80002ce:	0018      	movs	r0, r3
 80002d0:	f001 fcdc 	bl	8001c8c <HAL_RCC_ClockConfig>
 80002d4:	1e03      	subs	r3, r0, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002d8:	f000 fa13 	bl	8000702 <Error_Handler>
  }
}
 80002dc:	46c0      	nop			@ (mov r8, r8)
 80002de:	46bd      	mov	sp, r7
 80002e0:	b013      	add	sp, #76	@ 0x4c
 80002e2:	bd90      	pop	{r4, r7, pc}

080002e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000358 <MX_I2C1_Init+0x74>)
 80002ea:	4a1c      	ldr	r2, [pc, #112]	@ (800035c <MX_I2C1_Init+0x78>)
 80002ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80002ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000358 <MX_I2C1_Init+0x74>)
 80002f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000360 <MX_I2C1_Init+0x7c>)
 80002f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002f4:	4b18      	ldr	r3, [pc, #96]	@ (8000358 <MX_I2C1_Init+0x74>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002fa:	4b17      	ldr	r3, [pc, #92]	@ (8000358 <MX_I2C1_Init+0x74>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000300:	4b15      	ldr	r3, [pc, #84]	@ (8000358 <MX_I2C1_Init+0x74>)
 8000302:	2200      	movs	r2, #0
 8000304:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000306:	4b14      	ldr	r3, [pc, #80]	@ (8000358 <MX_I2C1_Init+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800030c:	4b12      	ldr	r3, [pc, #72]	@ (8000358 <MX_I2C1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000312:	4b11      	ldr	r3, [pc, #68]	@ (8000358 <MX_I2C1_Init+0x74>)
 8000314:	2200      	movs	r2, #0
 8000316:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000318:	4b0f      	ldr	r3, [pc, #60]	@ (8000358 <MX_I2C1_Init+0x74>)
 800031a:	2200      	movs	r2, #0
 800031c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800031e:	4b0e      	ldr	r3, [pc, #56]	@ (8000358 <MX_I2C1_Init+0x74>)
 8000320:	0018      	movs	r0, r3
 8000322:	f001 f819 	bl	8001358 <HAL_I2C_Init>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d001      	beq.n	800032e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800032a:	f000 f9ea 	bl	8000702 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800032e:	4b0a      	ldr	r3, [pc, #40]	@ (8000358 <MX_I2C1_Init+0x74>)
 8000330:	2100      	movs	r1, #0
 8000332:	0018      	movs	r0, r3
 8000334:	f001 f8b6 	bl	80014a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000338:	1e03      	subs	r3, r0, #0
 800033a:	d001      	beq.n	8000340 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800033c:	f000 f9e1 	bl	8000702 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000340:	4b05      	ldr	r3, [pc, #20]	@ (8000358 <MX_I2C1_Init+0x74>)
 8000342:	2100      	movs	r1, #0
 8000344:	0018      	movs	r0, r3
 8000346:	f001 f8f9 	bl	800153c <HAL_I2CEx_ConfigDigitalFilter>
 800034a:	1e03      	subs	r3, r0, #0
 800034c:	d001      	beq.n	8000352 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800034e:	f000 f9d8 	bl	8000702 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000352:	46c0      	nop			@ (mov r8, r8)
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000028 	.word	0x20000028
 800035c:	40005400 	.word	0x40005400
 8000360:	00503d58 	.word	0x00503d58

08000364 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b09c      	sub	sp, #112	@ 0x70
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800036a:	2360      	movs	r3, #96	@ 0x60
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	0018      	movs	r0, r3
 8000370:	2310      	movs	r3, #16
 8000372:	001a      	movs	r2, r3
 8000374:	2100      	movs	r1, #0
 8000376:	f003 fa8b 	bl	8003890 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800037a:	2354      	movs	r3, #84	@ 0x54
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	0018      	movs	r0, r3
 8000380:	230c      	movs	r3, #12
 8000382:	001a      	movs	r2, r3
 8000384:	2100      	movs	r1, #0
 8000386:	f003 fa83 	bl	8003890 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800038a:	2338      	movs	r3, #56	@ 0x38
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	0018      	movs	r0, r3
 8000390:	231c      	movs	r3, #28
 8000392:	001a      	movs	r2, r3
 8000394:	2100      	movs	r1, #0
 8000396:	f003 fa7b 	bl	8003890 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	0018      	movs	r0, r3
 800039e:	2334      	movs	r3, #52	@ 0x34
 80003a0:	001a      	movs	r2, r3
 80003a2:	2100      	movs	r1, #0
 80003a4:	f003 fa74 	bl	8003890 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003a8:	4b51      	ldr	r3, [pc, #324]	@ (80004f0 <MX_TIM1_Init+0x18c>)
 80003aa:	4a52      	ldr	r2, [pc, #328]	@ (80004f4 <MX_TIM1_Init+0x190>)
 80003ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003ae:	4b50      	ldr	r3, [pc, #320]	@ (80004f0 <MX_TIM1_Init+0x18c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b4:	4b4e      	ldr	r3, [pc, #312]	@ (80004f0 <MX_TIM1_Init+0x18c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19;
 80003ba:	4b4d      	ldr	r3, [pc, #308]	@ (80004f0 <MX_TIM1_Init+0x18c>)
 80003bc:	2213      	movs	r2, #19
 80003be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c0:	4b4b      	ldr	r3, [pc, #300]	@ (80004f0 <MX_TIM1_Init+0x18c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003c6:	4b4a      	ldr	r3, [pc, #296]	@ (80004f0 <MX_TIM1_Init+0x18c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003cc:	4b48      	ldr	r3, [pc, #288]	@ (80004f0 <MX_TIM1_Init+0x18c>)
 80003ce:	2280      	movs	r2, #128	@ 0x80
 80003d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003d2:	4b47      	ldr	r3, [pc, #284]	@ (80004f0 <MX_TIM1_Init+0x18c>)
 80003d4:	0018      	movs	r0, r3
 80003d6:	f001 ff29 	bl	800222c <HAL_TIM_Base_Init>
 80003da:	1e03      	subs	r3, r0, #0
 80003dc:	d001      	beq.n	80003e2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80003de:	f000 f990 	bl	8000702 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e2:	2160      	movs	r1, #96	@ 0x60
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	2280      	movs	r2, #128	@ 0x80
 80003e8:	0152      	lsls	r2, r2, #5
 80003ea:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003ec:	187a      	adds	r2, r7, r1
 80003ee:	4b40      	ldr	r3, [pc, #256]	@ (80004f0 <MX_TIM1_Init+0x18c>)
 80003f0:	0011      	movs	r1, r2
 80003f2:	0018      	movs	r0, r3
 80003f4:	f002 f8d2 	bl	800259c <HAL_TIM_ConfigClockSource>
 80003f8:	1e03      	subs	r3, r0, #0
 80003fa:	d001      	beq.n	8000400 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80003fc:	f000 f981 	bl	8000702 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000400:	4b3b      	ldr	r3, [pc, #236]	@ (80004f0 <MX_TIM1_Init+0x18c>)
 8000402:	0018      	movs	r0, r3
 8000404:	f001 ff6a 	bl	80022dc <HAL_TIM_PWM_Init>
 8000408:	1e03      	subs	r3, r0, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800040c:	f000 f979 	bl	8000702 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000410:	2154      	movs	r1, #84	@ 0x54
 8000412:	187b      	adds	r3, r7, r1
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000418:	187b      	adds	r3, r7, r1
 800041a:	2200      	movs	r2, #0
 800041c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800041e:	187b      	adds	r3, r7, r1
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000424:	187a      	adds	r2, r7, r1
 8000426:	4b32      	ldr	r3, [pc, #200]	@ (80004f0 <MX_TIM1_Init+0x18c>)
 8000428:	0011      	movs	r1, r2
 800042a:	0018      	movs	r0, r3
 800042c:	f002 fd3e 	bl	8002eac <HAL_TIMEx_MasterConfigSynchronization>
 8000430:	1e03      	subs	r3, r0, #0
 8000432:	d001      	beq.n	8000438 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000434:	f000 f965 	bl	8000702 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000438:	2138      	movs	r1, #56	@ 0x38
 800043a:	187b      	adds	r3, r7, r1
 800043c:	2260      	movs	r2, #96	@ 0x60
 800043e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000440:	187b      	adds	r3, r7, r1
 8000442:	2200      	movs	r2, #0
 8000444:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000446:	187b      	adds	r3, r7, r1
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800044c:	187b      	adds	r3, r7, r1
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000452:	187b      	adds	r3, r7, r1
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000458:	187b      	adds	r3, r7, r1
 800045a:	2200      	movs	r2, #0
 800045c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800045e:	187b      	adds	r3, r7, r1
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000464:	1879      	adds	r1, r7, r1
 8000466:	4b22      	ldr	r3, [pc, #136]	@ (80004f0 <MX_TIM1_Init+0x18c>)
 8000468:	2200      	movs	r2, #0
 800046a:	0018      	movs	r0, r3
 800046c:	f001 ff96 	bl	800239c <HAL_TIM_PWM_ConfigChannel>
 8000470:	1e03      	subs	r3, r0, #0
 8000472:	d001      	beq.n	8000478 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000474:	f000 f945 	bl	8000702 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	2200      	movs	r2, #0
 8000482:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2200      	movs	r2, #0
 800048e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2200      	movs	r2, #0
 8000494:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2280      	movs	r2, #128	@ 0x80
 800049a:	0192      	lsls	r2, r2, #6
 800049c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2200      	movs	r2, #0
 80004a2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	2200      	movs	r2, #0
 80004a8:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2200      	movs	r2, #0
 80004ae:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	2280      	movs	r2, #128	@ 0x80
 80004b4:	0492      	lsls	r2, r2, #18
 80004b6:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	2200      	movs	r2, #0
 80004bc:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2200      	movs	r2, #0
 80004c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	2200      	movs	r2, #0
 80004c8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004ca:	1d3a      	adds	r2, r7, #4
 80004cc:	4b08      	ldr	r3, [pc, #32]	@ (80004f0 <MX_TIM1_Init+0x18c>)
 80004ce:	0011      	movs	r1, r2
 80004d0:	0018      	movs	r0, r3
 80004d2:	f002 fd4d 	bl	8002f70 <HAL_TIMEx_ConfigBreakDeadTime>
 80004d6:	1e03      	subs	r3, r0, #0
 80004d8:	d001      	beq.n	80004de <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80004da:	f000 f912 	bl	8000702 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004de:	4b04      	ldr	r3, [pc, #16]	@ (80004f0 <MX_TIM1_Init+0x18c>)
 80004e0:	0018      	movs	r0, r3
 80004e2:	f000 f9eb 	bl	80008bc <HAL_TIM_MspPostInit>

}
 80004e6:	46c0      	nop			@ (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	b01c      	add	sp, #112	@ 0x70
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)
 80004f0:	2000007c 	.word	0x2000007c
 80004f4:	40012c00 	.word	0x40012c00

080004f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004fc:	4b16      	ldr	r3, [pc, #88]	@ (8000558 <MX_USART2_UART_Init+0x60>)
 80004fe:	4a17      	ldr	r2, [pc, #92]	@ (800055c <MX_USART2_UART_Init+0x64>)
 8000500:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000502:	4b15      	ldr	r3, [pc, #84]	@ (8000558 <MX_USART2_UART_Init+0x60>)
 8000504:	22e1      	movs	r2, #225	@ 0xe1
 8000506:	0252      	lsls	r2, r2, #9
 8000508:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800050a:	4b13      	ldr	r3, [pc, #76]	@ (8000558 <MX_USART2_UART_Init+0x60>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000510:	4b11      	ldr	r3, [pc, #68]	@ (8000558 <MX_USART2_UART_Init+0x60>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000516:	4b10      	ldr	r3, [pc, #64]	@ (8000558 <MX_USART2_UART_Init+0x60>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800051c:	4b0e      	ldr	r3, [pc, #56]	@ (8000558 <MX_USART2_UART_Init+0x60>)
 800051e:	220c      	movs	r2, #12
 8000520:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000522:	4b0d      	ldr	r3, [pc, #52]	@ (8000558 <MX_USART2_UART_Init+0x60>)
 8000524:	22c0      	movs	r2, #192	@ 0xc0
 8000526:	0092      	lsls	r2, r2, #2
 8000528:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800052a:	4b0b      	ldr	r3, [pc, #44]	@ (8000558 <MX_USART2_UART_Init+0x60>)
 800052c:	2200      	movs	r2, #0
 800052e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000530:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <MX_USART2_UART_Init+0x60>)
 8000532:	2200      	movs	r2, #0
 8000534:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000536:	4b08      	ldr	r3, [pc, #32]	@ (8000558 <MX_USART2_UART_Init+0x60>)
 8000538:	2200      	movs	r2, #0
 800053a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800053c:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <MX_USART2_UART_Init+0x60>)
 800053e:	2200      	movs	r2, #0
 8000540:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000542:	4b05      	ldr	r3, [pc, #20]	@ (8000558 <MX_USART2_UART_Init+0x60>)
 8000544:	0018      	movs	r0, r3
 8000546:	f002 fdaf 	bl	80030a8 <HAL_UART_Init>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d001      	beq.n	8000552 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800054e:	f000 f8d8 	bl	8000702 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000124 	.word	0x20000124
 800055c:	40004400 	.word	0x40004400

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000566:	4b0c      	ldr	r3, [pc, #48]	@ (8000598 <MX_DMA_Init+0x38>)
 8000568:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800056a:	4b0b      	ldr	r3, [pc, #44]	@ (8000598 <MX_DMA_Init+0x38>)
 800056c:	2101      	movs	r1, #1
 800056e:	430a      	orrs	r2, r1
 8000570:	639a      	str	r2, [r3, #56]	@ 0x38
 8000572:	4b09      	ldr	r3, [pc, #36]	@ (8000598 <MX_DMA_Init+0x38>)
 8000574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000576:	2201      	movs	r2, #1
 8000578:	4013      	ands	r3, r2
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2100      	movs	r1, #0
 8000582:	2009      	movs	r0, #9
 8000584:	f000 fba8 	bl	8000cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000588:	2009      	movs	r0, #9
 800058a:	f000 fbba 	bl	8000d02 <HAL_NVIC_EnableIRQ>

}
 800058e:	46c0      	nop			@ (mov r8, r8)
 8000590:	46bd      	mov	sp, r7
 8000592:	b002      	add	sp, #8
 8000594:	bd80      	pop	{r7, pc}
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	40021000 	.word	0x40021000

0800059c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b089      	sub	sp, #36	@ 0x24
 80005a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	240c      	movs	r4, #12
 80005a4:	193b      	adds	r3, r7, r4
 80005a6:	0018      	movs	r0, r3
 80005a8:	2314      	movs	r3, #20
 80005aa:	001a      	movs	r2, r3
 80005ac:	2100      	movs	r1, #0
 80005ae:	f003 f96f 	bl	8003890 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	4b37      	ldr	r3, [pc, #220]	@ (8000690 <MX_GPIO_Init+0xf4>)
 80005b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005b6:	4b36      	ldr	r3, [pc, #216]	@ (8000690 <MX_GPIO_Init+0xf4>)
 80005b8:	2102      	movs	r1, #2
 80005ba:	430a      	orrs	r2, r1
 80005bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80005be:	4b34      	ldr	r3, [pc, #208]	@ (8000690 <MX_GPIO_Init+0xf4>)
 80005c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005c2:	2202      	movs	r2, #2
 80005c4:	4013      	ands	r3, r2
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	4b31      	ldr	r3, [pc, #196]	@ (8000690 <MX_GPIO_Init+0xf4>)
 80005cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005ce:	4b30      	ldr	r3, [pc, #192]	@ (8000690 <MX_GPIO_Init+0xf4>)
 80005d0:	2104      	movs	r1, #4
 80005d2:	430a      	orrs	r2, r1
 80005d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80005d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000690 <MX_GPIO_Init+0xf4>)
 80005d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005da:	2204      	movs	r2, #4
 80005dc:	4013      	ands	r3, r2
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000690 <MX_GPIO_Init+0xf4>)
 80005e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000690 <MX_GPIO_Init+0xf4>)
 80005e8:	2101      	movs	r1, #1
 80005ea:	430a      	orrs	r2, r1
 80005ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80005ee:	4b28      	ldr	r3, [pc, #160]	@ (8000690 <MX_GPIO_Init+0xf4>)
 80005f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005f2:	2201      	movs	r2, #1
 80005f4:	4013      	ands	r3, r2
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80005fa:	2380      	movs	r3, #128	@ 0x80
 80005fc:	021b      	lsls	r3, r3, #8
 80005fe:	4825      	ldr	r0, [pc, #148]	@ (8000694 <MX_GPIO_Init+0xf8>)
 8000600:	2200      	movs	r2, #0
 8000602:	0019      	movs	r1, r3
 8000604:	f000 fe8a 	bl	800131c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 8000608:	4923      	ldr	r1, [pc, #140]	@ (8000698 <MX_GPIO_Init+0xfc>)
 800060a:	23a0      	movs	r3, #160	@ 0xa0
 800060c:	05db      	lsls	r3, r3, #23
 800060e:	2200      	movs	r2, #0
 8000610:	0018      	movs	r0, r3
 8000612:	f000 fe83 	bl	800131c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB7 PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0;
 8000616:	193b      	adds	r3, r7, r4
 8000618:	2281      	movs	r2, #129	@ 0x81
 800061a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061c:	193b      	adds	r3, r7, r4
 800061e:	2200      	movs	r2, #0
 8000620:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	193b      	adds	r3, r7, r4
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000628:	193b      	adds	r3, r7, r4
 800062a:	4a1c      	ldr	r2, [pc, #112]	@ (800069c <MX_GPIO_Init+0x100>)
 800062c:	0019      	movs	r1, r3
 800062e:	0010      	movs	r0, r2
 8000630:	f000 fd10 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000634:	0021      	movs	r1, r4
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2280      	movs	r2, #128	@ 0x80
 800063a:	0212      	lsls	r2, r2, #8
 800063c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063e:	000c      	movs	r4, r1
 8000640:	193b      	adds	r3, r7, r4
 8000642:	2201      	movs	r2, #1
 8000644:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	193b      	adds	r3, r7, r4
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	193b      	adds	r3, r7, r4
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000652:	193b      	adds	r3, r7, r4
 8000654:	4a0f      	ldr	r2, [pc, #60]	@ (8000694 <MX_GPIO_Init+0xf8>)
 8000656:	0019      	movs	r1, r3
 8000658:	0010      	movs	r0, r2
 800065a:	f000 fcfb 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 800065e:	0021      	movs	r1, r4
 8000660:	187b      	adds	r3, r7, r1
 8000662:	4a0d      	ldr	r2, [pc, #52]	@ (8000698 <MX_GPIO_Init+0xfc>)
 8000664:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2201      	movs	r2, #1
 800066a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000678:	187a      	adds	r2, r7, r1
 800067a:	23a0      	movs	r3, #160	@ 0xa0
 800067c:	05db      	lsls	r3, r3, #23
 800067e:	0011      	movs	r1, r2
 8000680:	0018      	movs	r0, r3
 8000682:	f000 fce7 	bl	8001054 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000686:	46c0      	nop			@ (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	b009      	add	sp, #36	@ 0x24
 800068c:	bd90      	pop	{r4, r7, pc}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	40021000 	.word	0x40021000
 8000694:	50000800 	.word	0x50000800
 8000698:	00001870 	.word	0x00001870
 800069c:	50000400 	.word	0x50000400

080006a0 <UART_Flush>:

/* USER CODE BEGIN 4 */
void UART_Flush(UART_HandleTypeDef *huart)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
    // Vider le registre RX tant qu’il reste des données
    __HAL_UART_FLUSH_DRREGISTER(huart);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	699a      	ldr	r2, [r3, #24]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2108      	movs	r1, #8
 80006b4:	430a      	orrs	r2, r1
 80006b6:	619a      	str	r2, [r3, #24]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	699a      	ldr	r2, [r3, #24]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2110      	movs	r1, #16
 80006c4:	430a      	orrs	r2, r1
 80006c6:	619a      	str	r2, [r3, #24]

    // Effacer les flags d’erreur éventuels (Overrun, Framing, Noise, Parity)
    __HAL_UART_CLEAR_OREFLAG(huart);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2208      	movs	r2, #8
 80006ce:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(huart);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2202      	movs	r2, #2
 80006d6:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_NEFLAG(huart);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2204      	movs	r2, #4
 80006de:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_PEFLAG(huart);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2201      	movs	r2, #1
 80006e6:	621a      	str	r2, [r3, #32]

    // Attendre que la transmission en cours (TX) soit terminée
    while(__HAL_UART_GET_FLAG(huart, UART_FLAG_TC) == RESET);
 80006e8:	46c0      	nop			@ (mov r8, r8)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	69db      	ldr	r3, [r3, #28]
 80006f0:	2240      	movs	r2, #64	@ 0x40
 80006f2:	4013      	ands	r3, r2
 80006f4:	2b40      	cmp	r3, #64	@ 0x40
 80006f6:	d1f8      	bne.n	80006ea <UART_Flush+0x4a>

}
 80006f8:	46c0      	nop			@ (mov r8, r8)
 80006fa:	46c0      	nop			@ (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b002      	add	sp, #8
 8000700:	bd80      	pop	{r7, pc}

08000702 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000706:	b672      	cpsid	i
}
 8000708:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070a:	46c0      	nop			@ (mov r8, r8)
 800070c:	e7fd      	b.n	800070a <Error_Handler+0x8>
	...

08000710 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <HAL_MspInit+0x44>)
 8000718:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <HAL_MspInit+0x44>)
 800071c:	2101      	movs	r1, #1
 800071e:	430a      	orrs	r2, r1
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40
 8000722:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <HAL_MspInit+0x44>)
 8000724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000726:	2201      	movs	r2, #1
 8000728:	4013      	ands	r3, r2
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <HAL_MspInit+0x44>)
 8000730:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000732:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <HAL_MspInit+0x44>)
 8000734:	2180      	movs	r1, #128	@ 0x80
 8000736:	0549      	lsls	r1, r1, #21
 8000738:	430a      	orrs	r2, r1
 800073a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800073c:	4b05      	ldr	r3, [pc, #20]	@ (8000754 <HAL_MspInit+0x44>)
 800073e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000740:	2380      	movs	r3, #128	@ 0x80
 8000742:	055b      	lsls	r3, r3, #21
 8000744:	4013      	ands	r3, r2
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	b002      	add	sp, #8
 8000750:	bd80      	pop	{r7, pc}
 8000752:	46c0      	nop			@ (mov r8, r8)
 8000754:	40021000 	.word	0x40021000

08000758 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b091      	sub	sp, #68	@ 0x44
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	232c      	movs	r3, #44	@ 0x2c
 8000762:	18fb      	adds	r3, r7, r3
 8000764:	0018      	movs	r0, r3
 8000766:	2314      	movs	r3, #20
 8000768:	001a      	movs	r2, r3
 800076a:	2100      	movs	r1, #0
 800076c:	f003 f890 	bl	8003890 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000770:	2414      	movs	r4, #20
 8000772:	193b      	adds	r3, r7, r4
 8000774:	0018      	movs	r0, r3
 8000776:	2318      	movs	r3, #24
 8000778:	001a      	movs	r2, r3
 800077a:	2100      	movs	r1, #0
 800077c:	f003 f888 	bl	8003890 <memset>
  if(hi2c->Instance==I2C1)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a22      	ldr	r2, [pc, #136]	@ (8000810 <HAL_I2C_MspInit+0xb8>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d13e      	bne.n	8000808 <HAL_I2C_MspInit+0xb0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800078a:	193b      	adds	r3, r7, r4
 800078c:	2220      	movs	r2, #32
 800078e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000790:	193b      	adds	r3, r7, r4
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000796:	193b      	adds	r3, r7, r4
 8000798:	0018      	movs	r0, r3
 800079a:	f001 fc21 	bl	8001fe0 <HAL_RCCEx_PeriphCLKConfig>
 800079e:	1e03      	subs	r3, r0, #0
 80007a0:	d001      	beq.n	80007a6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80007a2:	f7ff ffae 	bl	8000702 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000814 <HAL_I2C_MspInit+0xbc>)
 80007a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <HAL_I2C_MspInit+0xbc>)
 80007ac:	2102      	movs	r1, #2
 80007ae:	430a      	orrs	r2, r1
 80007b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80007b2:	4b18      	ldr	r3, [pc, #96]	@ (8000814 <HAL_I2C_MspInit+0xbc>)
 80007b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007b6:	2202      	movs	r2, #2
 80007b8:	4013      	ands	r3, r2
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 80007be:	212c      	movs	r1, #44	@ 0x2c
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2290      	movs	r2, #144	@ 0x90
 80007c4:	0092      	lsls	r2, r2, #2
 80007c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2212      	movs	r2, #18
 80007cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2206      	movs	r2, #6
 80007de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	4a0d      	ldr	r2, [pc, #52]	@ (8000818 <HAL_I2C_MspInit+0xc0>)
 80007e4:	0019      	movs	r1, r3
 80007e6:	0010      	movs	r0, r2
 80007e8:	f000 fc34 	bl	8001054 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ec:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <HAL_I2C_MspInit+0xbc>)
 80007ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007f0:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <HAL_I2C_MspInit+0xbc>)
 80007f2:	2180      	movs	r1, #128	@ 0x80
 80007f4:	0389      	lsls	r1, r1, #14
 80007f6:	430a      	orrs	r2, r1
 80007f8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <HAL_I2C_MspInit+0xbc>)
 80007fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007fe:	2380      	movs	r3, #128	@ 0x80
 8000800:	039b      	lsls	r3, r3, #14
 8000802:	4013      	ands	r3, r2
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000808:	46c0      	nop			@ (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	b011      	add	sp, #68	@ 0x44
 800080e:	bd90      	pop	{r4, r7, pc}
 8000810:	40005400 	.word	0x40005400
 8000814:	40021000 	.word	0x40021000
 8000818:	50000400 	.word	0x50000400

0800081c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a20      	ldr	r2, [pc, #128]	@ (80008ac <HAL_TIM_Base_MspInit+0x90>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d139      	bne.n	80008a2 <HAL_TIM_Base_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800082e:	4b20      	ldr	r3, [pc, #128]	@ (80008b0 <HAL_TIM_Base_MspInit+0x94>)
 8000830:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000832:	4b1f      	ldr	r3, [pc, #124]	@ (80008b0 <HAL_TIM_Base_MspInit+0x94>)
 8000834:	2180      	movs	r1, #128	@ 0x80
 8000836:	0109      	lsls	r1, r1, #4
 8000838:	430a      	orrs	r2, r1
 800083a:	641a      	str	r2, [r3, #64]	@ 0x40
 800083c:	4b1c      	ldr	r3, [pc, #112]	@ (80008b0 <HAL_TIM_Base_MspInit+0x94>)
 800083e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000840:	2380      	movs	r3, #128	@ 0x80
 8000842:	011b      	lsls	r3, r3, #4
 8000844:	4013      	ands	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 800084a:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <HAL_TIM_Base_MspInit+0x98>)
 800084c:	4a1a      	ldr	r2, [pc, #104]	@ (80008b8 <HAL_TIM_Base_MspInit+0x9c>)
 800084e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8000850:	4b18      	ldr	r3, [pc, #96]	@ (80008b4 <HAL_TIM_Base_MspInit+0x98>)
 8000852:	2214      	movs	r2, #20
 8000854:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000856:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <HAL_TIM_Base_MspInit+0x98>)
 8000858:	2210      	movs	r2, #16
 800085a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800085c:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <HAL_TIM_Base_MspInit+0x98>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000862:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <HAL_TIM_Base_MspInit+0x98>)
 8000864:	2280      	movs	r2, #128	@ 0x80
 8000866:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <HAL_TIM_Base_MspInit+0x98>)
 800086a:	2280      	movs	r2, #128	@ 0x80
 800086c:	0052      	lsls	r2, r2, #1
 800086e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000870:	4b10      	ldr	r3, [pc, #64]	@ (80008b4 <HAL_TIM_Base_MspInit+0x98>)
 8000872:	2280      	movs	r2, #128	@ 0x80
 8000874:	00d2      	lsls	r2, r2, #3
 8000876:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000878:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <HAL_TIM_Base_MspInit+0x98>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800087e:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <HAL_TIM_Base_MspInit+0x98>)
 8000880:	2280      	movs	r2, #128	@ 0x80
 8000882:	0152      	lsls	r2, r2, #5
 8000884:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <HAL_TIM_Base_MspInit+0x98>)
 8000888:	0018      	movs	r0, r3
 800088a:	f000 fa57 	bl	8000d3c <HAL_DMA_Init>
 800088e:	1e03      	subs	r3, r0, #0
 8000890:	d001      	beq.n	8000896 <HAL_TIM_Base_MspInit+0x7a>
    {
      Error_Handler();
 8000892:	f7ff ff36 	bl	8000702 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4a06      	ldr	r2, [pc, #24]	@ (80008b4 <HAL_TIM_Base_MspInit+0x98>)
 800089a:	625a      	str	r2, [r3, #36]	@ 0x24
 800089c:	4b05      	ldr	r3, [pc, #20]	@ (80008b4 <HAL_TIM_Base_MspInit+0x98>)
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b004      	add	sp, #16
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	40012c00 	.word	0x40012c00
 80008b0:	40021000 	.word	0x40021000
 80008b4:	200000c8 	.word	0x200000c8
 80008b8:	40020008 	.word	0x40020008

080008bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b089      	sub	sp, #36	@ 0x24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	240c      	movs	r4, #12
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	0018      	movs	r0, r3
 80008ca:	2314      	movs	r3, #20
 80008cc:	001a      	movs	r2, r3
 80008ce:	2100      	movs	r1, #0
 80008d0:	f002 ffde 	bl	8003890 <memset>
  if(htim->Instance==TIM1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a14      	ldr	r2, [pc, #80]	@ (800092c <HAL_TIM_MspPostInit+0x70>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d122      	bne.n	8000924 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <HAL_TIM_MspPostInit+0x74>)
 80008e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008e2:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <HAL_TIM_MspPostInit+0x74>)
 80008e4:	2101      	movs	r1, #1
 80008e6:	430a      	orrs	r2, r1
 80008e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80008ea:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <HAL_TIM_MspPostInit+0x74>)
 80008ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008ee:	2201      	movs	r2, #1
 80008f0:	4013      	ands	r3, r2
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008f6:	0021      	movs	r1, r4
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2280      	movs	r2, #128	@ 0x80
 80008fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2202      	movs	r2, #2
 8000902:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	187b      	adds	r3, r7, r1
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000910:	187b      	adds	r3, r7, r1
 8000912:	2202      	movs	r2, #2
 8000914:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	187a      	adds	r2, r7, r1
 8000918:	23a0      	movs	r3, #160	@ 0xa0
 800091a:	05db      	lsls	r3, r3, #23
 800091c:	0011      	movs	r1, r2
 800091e:	0018      	movs	r0, r3
 8000920:	f000 fb98 	bl	8001054 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000924:	46c0      	nop			@ (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b009      	add	sp, #36	@ 0x24
 800092a:	bd90      	pop	{r4, r7, pc}
 800092c:	40012c00 	.word	0x40012c00
 8000930:	40021000 	.word	0x40021000

08000934 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b08b      	sub	sp, #44	@ 0x2c
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	2414      	movs	r4, #20
 800093e:	193b      	adds	r3, r7, r4
 8000940:	0018      	movs	r0, r3
 8000942:	2314      	movs	r3, #20
 8000944:	001a      	movs	r2, r3
 8000946:	2100      	movs	r1, #0
 8000948:	f002 ffa2 	bl	8003890 <memset>
  if(huart->Instance==USART2)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a1b      	ldr	r2, [pc, #108]	@ (80009c0 <HAL_UART_MspInit+0x8c>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d130      	bne.n	80009b8 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000956:	4b1b      	ldr	r3, [pc, #108]	@ (80009c4 <HAL_UART_MspInit+0x90>)
 8000958:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800095a:	4b1a      	ldr	r3, [pc, #104]	@ (80009c4 <HAL_UART_MspInit+0x90>)
 800095c:	2180      	movs	r1, #128	@ 0x80
 800095e:	0289      	lsls	r1, r1, #10
 8000960:	430a      	orrs	r2, r1
 8000962:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000964:	4b17      	ldr	r3, [pc, #92]	@ (80009c4 <HAL_UART_MspInit+0x90>)
 8000966:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000968:	2380      	movs	r3, #128	@ 0x80
 800096a:	029b      	lsls	r3, r3, #10
 800096c:	4013      	ands	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <HAL_UART_MspInit+0x90>)
 8000974:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000976:	4b13      	ldr	r3, [pc, #76]	@ (80009c4 <HAL_UART_MspInit+0x90>)
 8000978:	2101      	movs	r1, #1
 800097a:	430a      	orrs	r2, r1
 800097c:	635a      	str	r2, [r3, #52]	@ 0x34
 800097e:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <HAL_UART_MspInit+0x90>)
 8000980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000982:	2201      	movs	r2, #1
 8000984:	4013      	ands	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800098a:	0021      	movs	r1, r4
 800098c:	187b      	adds	r3, r7, r1
 800098e:	220f      	movs	r2, #15
 8000990:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2202      	movs	r2, #2
 8000996:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2201      	movs	r2, #1
 80009a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	187a      	adds	r2, r7, r1
 80009ac:	23a0      	movs	r3, #160	@ 0xa0
 80009ae:	05db      	lsls	r3, r3, #23
 80009b0:	0011      	movs	r1, r2
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 fb4e 	bl	8001054 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009b8:	46c0      	nop			@ (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b00b      	add	sp, #44	@ 0x2c
 80009be:	bd90      	pop	{r4, r7, pc}
 80009c0:	40004400 	.word	0x40004400
 80009c4:	40021000 	.word	0x40021000

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	e7fd      	b.n	80009cc <NMI_Handler+0x4>

080009d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d4:	46c0      	nop			@ (mov r8, r8)
 80009d6:	e7fd      	b.n	80009d4 <HardFault_Handler+0x4>

080009d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009dc:	46c0      	nop			@ (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e6:	46c0      	nop			@ (mov r8, r8)
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f0:	f000 f8aa 	bl	8000b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000a00:	4b03      	ldr	r3, [pc, #12]	@ (8000a10 <DMA1_Channel1_IRQHandler+0x14>)
 8000a02:	0018      	movs	r0, r3
 8000a04:	f000 fa24 	bl	8000e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a08:	46c0      	nop			@ (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	200000c8 	.word	0x200000c8

08000a14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a18:	46c0      	nop			@ (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a20:	480d      	ldr	r0, [pc, #52]	@ (8000a58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a22:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a24:	f7ff fff6 	bl	8000a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a28:	480c      	ldr	r0, [pc, #48]	@ (8000a5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a2a:	490d      	ldr	r1, [pc, #52]	@ (8000a60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a64 <LoopForever+0xe>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a40:	4c0a      	ldr	r4, [pc, #40]	@ (8000a6c <LoopForever+0x16>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a4e:	f002 ff27 	bl	80038a0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a52:	f7ff fbe1 	bl	8000218 <main>

08000a56 <LoopForever>:

LoopForever:
  b LoopForever
 8000a56:	e7fe      	b.n	8000a56 <LoopForever>
  ldr   r0, =_estack
 8000a58:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a64:	080039d4 	.word	0x080039d4
  ldr r2, =_sbss
 8000a68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a6c:	200001bc 	.word	0x200001bc

08000a70 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC1_IRQHandler>
	...

08000a74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a80:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab0 <HAL_Init+0x3c>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab0 <HAL_Init+0x3c>)
 8000a86:	2180      	movs	r1, #128	@ 0x80
 8000a88:	0049      	lsls	r1, r1, #1
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a8e:	2003      	movs	r0, #3
 8000a90:	f000 f810 	bl	8000ab4 <HAL_InitTick>
 8000a94:	1e03      	subs	r3, r0, #0
 8000a96:	d003      	beq.n	8000aa0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a98:	1dfb      	adds	r3, r7, #7
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	701a      	strb	r2, [r3, #0]
 8000a9e:	e001      	b.n	8000aa4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000aa0:	f7ff fe36 	bl	8000710 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aa4:	1dfb      	adds	r3, r7, #7
 8000aa6:	781b      	ldrb	r3, [r3, #0]
}
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b002      	add	sp, #8
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40022000 	.word	0x40022000

08000ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000abc:	230f      	movs	r3, #15
 8000abe:	18fb      	adds	r3, r7, r3
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b3c <HAL_InitTick+0x88>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d02b      	beq.n	8000b24 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000acc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b40 <HAL_InitTick+0x8c>)
 8000ace:	681c      	ldr	r4, [r3, #0]
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b3c <HAL_InitTick+0x88>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	23fa      	movs	r3, #250	@ 0xfa
 8000ad8:	0098      	lsls	r0, r3, #2
 8000ada:	f7ff fb11 	bl	8000100 <__udivsi3>
 8000ade:	0003      	movs	r3, r0
 8000ae0:	0019      	movs	r1, r3
 8000ae2:	0020      	movs	r0, r4
 8000ae4:	f7ff fb0c 	bl	8000100 <__udivsi3>
 8000ae8:	0003      	movs	r3, r0
 8000aea:	0018      	movs	r0, r3
 8000aec:	f000 f919 	bl	8000d22 <HAL_SYSTICK_Config>
 8000af0:	1e03      	subs	r3, r0, #0
 8000af2:	d112      	bne.n	8000b1a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	d80a      	bhi.n	8000b10 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	2301      	movs	r3, #1
 8000afe:	425b      	negs	r3, r3
 8000b00:	2200      	movs	r2, #0
 8000b02:	0018      	movs	r0, r3
 8000b04:	f000 f8e8 	bl	8000cd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b08:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <HAL_InitTick+0x90>)
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	e00d      	b.n	8000b2c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b10:	230f      	movs	r3, #15
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	2201      	movs	r2, #1
 8000b16:	701a      	strb	r2, [r3, #0]
 8000b18:	e008      	b.n	8000b2c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	18fb      	adds	r3, r7, r3
 8000b1e:	2201      	movs	r2, #1
 8000b20:	701a      	strb	r2, [r3, #0]
 8000b22:	e003      	b.n	8000b2c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b24:	230f      	movs	r3, #15
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	2201      	movs	r2, #1
 8000b2a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	18fb      	adds	r3, r7, r3
 8000b30:	781b      	ldrb	r3, [r3, #0]
}
 8000b32:	0018      	movs	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b005      	add	sp, #20
 8000b38:	bd90      	pop	{r4, r7, pc}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000004 	.word	0x20000004

08000b48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b4c:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <HAL_IncTick+0x1c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	001a      	movs	r2, r3
 8000b52:	4b05      	ldr	r3, [pc, #20]	@ (8000b68 <HAL_IncTick+0x20>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	18d2      	adds	r2, r2, r3
 8000b58:	4b03      	ldr	r3, [pc, #12]	@ (8000b68 <HAL_IncTick+0x20>)
 8000b5a:	601a      	str	r2, [r3, #0]
}
 8000b5c:	46c0      	nop			@ (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	20000008 	.word	0x20000008
 8000b68:	200001b8 	.word	0x200001b8

08000b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b70:	4b02      	ldr	r3, [pc, #8]	@ (8000b7c <HAL_GetTick+0x10>)
 8000b72:	681b      	ldr	r3, [r3, #0]
}
 8000b74:	0018      	movs	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			@ (mov r8, r8)
 8000b7c:	200001b8 	.word	0x200001b8

08000b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	0002      	movs	r2, r0
 8000b88:	1dfb      	adds	r3, r7, #7
 8000b8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	1dfb      	adds	r3, r7, #7
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b92:	d809      	bhi.n	8000ba8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b94:	1dfb      	adds	r3, r7, #7
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	001a      	movs	r2, r3
 8000b9a:	231f      	movs	r3, #31
 8000b9c:	401a      	ands	r2, r3
 8000b9e:	4b04      	ldr	r3, [pc, #16]	@ (8000bb0 <__NVIC_EnableIRQ+0x30>)
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4091      	lsls	r1, r2
 8000ba4:	000a      	movs	r2, r1
 8000ba6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000ba8:	46c0      	nop			@ (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b002      	add	sp, #8
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	e000e100 	.word	0xe000e100

08000bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	0002      	movs	r2, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bc8:	d828      	bhi.n	8000c1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bca:	4a2f      	ldr	r2, [pc, #188]	@ (8000c88 <__NVIC_SetPriority+0xd4>)
 8000bcc:	1dfb      	adds	r3, r7, #7
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b25b      	sxtb	r3, r3
 8000bd2:	089b      	lsrs	r3, r3, #2
 8000bd4:	33c0      	adds	r3, #192	@ 0xc0
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	589b      	ldr	r3, [r3, r2]
 8000bda:	1dfa      	adds	r2, r7, #7
 8000bdc:	7812      	ldrb	r2, [r2, #0]
 8000bde:	0011      	movs	r1, r2
 8000be0:	2203      	movs	r2, #3
 8000be2:	400a      	ands	r2, r1
 8000be4:	00d2      	lsls	r2, r2, #3
 8000be6:	21ff      	movs	r1, #255	@ 0xff
 8000be8:	4091      	lsls	r1, r2
 8000bea:	000a      	movs	r2, r1
 8000bec:	43d2      	mvns	r2, r2
 8000bee:	401a      	ands	r2, r3
 8000bf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	019b      	lsls	r3, r3, #6
 8000bf6:	22ff      	movs	r2, #255	@ 0xff
 8000bf8:	401a      	ands	r2, r3
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	0018      	movs	r0, r3
 8000c00:	2303      	movs	r3, #3
 8000c02:	4003      	ands	r3, r0
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c08:	481f      	ldr	r0, [pc, #124]	@ (8000c88 <__NVIC_SetPriority+0xd4>)
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b25b      	sxtb	r3, r3
 8000c10:	089b      	lsrs	r3, r3, #2
 8000c12:	430a      	orrs	r2, r1
 8000c14:	33c0      	adds	r3, #192	@ 0xc0
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c1a:	e031      	b.n	8000c80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c8c <__NVIC_SetPriority+0xd8>)
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	0019      	movs	r1, r3
 8000c24:	230f      	movs	r3, #15
 8000c26:	400b      	ands	r3, r1
 8000c28:	3b08      	subs	r3, #8
 8000c2a:	089b      	lsrs	r3, r3, #2
 8000c2c:	3306      	adds	r3, #6
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	18d3      	adds	r3, r2, r3
 8000c32:	3304      	adds	r3, #4
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	1dfa      	adds	r2, r7, #7
 8000c38:	7812      	ldrb	r2, [r2, #0]
 8000c3a:	0011      	movs	r1, r2
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	400a      	ands	r2, r1
 8000c40:	00d2      	lsls	r2, r2, #3
 8000c42:	21ff      	movs	r1, #255	@ 0xff
 8000c44:	4091      	lsls	r1, r2
 8000c46:	000a      	movs	r2, r1
 8000c48:	43d2      	mvns	r2, r2
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	019b      	lsls	r3, r3, #6
 8000c52:	22ff      	movs	r2, #255	@ 0xff
 8000c54:	401a      	ands	r2, r3
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	4003      	ands	r3, r0
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c64:	4809      	ldr	r0, [pc, #36]	@ (8000c8c <__NVIC_SetPriority+0xd8>)
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	001c      	movs	r4, r3
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	4023      	ands	r3, r4
 8000c70:	3b08      	subs	r3, #8
 8000c72:	089b      	lsrs	r3, r3, #2
 8000c74:	430a      	orrs	r2, r1
 8000c76:	3306      	adds	r3, #6
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	18c3      	adds	r3, r0, r3
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	601a      	str	r2, [r3, #0]
}
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b003      	add	sp, #12
 8000c86:	bd90      	pop	{r4, r7, pc}
 8000c88:	e000e100 	.word	0xe000e100
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	1e5a      	subs	r2, r3, #1
 8000c9c:	2380      	movs	r3, #128	@ 0x80
 8000c9e:	045b      	lsls	r3, r3, #17
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d301      	bcc.n	8000ca8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e010      	b.n	8000cca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd4 <SysTick_Config+0x44>)
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	3a01      	subs	r2, #1
 8000cae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	425b      	negs	r3, r3
 8000cb4:	2103      	movs	r1, #3
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f7ff ff7c 	bl	8000bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cbc:	4b05      	ldr	r3, [pc, #20]	@ (8000cd4 <SysTick_Config+0x44>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc2:	4b04      	ldr	r3, [pc, #16]	@ (8000cd4 <SysTick_Config+0x44>)
 8000cc4:	2207      	movs	r2, #7
 8000cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	0018      	movs	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b002      	add	sp, #8
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	e000e010 	.word	0xe000e010

08000cd8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	210f      	movs	r1, #15
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	1c02      	adds	r2, r0, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b25b      	sxtb	r3, r3
 8000cf2:	0011      	movs	r1, r2
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f7ff ff5d 	bl	8000bb4 <__NVIC_SetPriority>
}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b004      	add	sp, #16
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	0002      	movs	r2, r0
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	b25b      	sxtb	r3, r3
 8000d14:	0018      	movs	r0, r3
 8000d16:	f7ff ff33 	bl	8000b80 <__NVIC_EnableIRQ>
}
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b002      	add	sp, #8
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f7ff ffaf 	bl	8000c90 <SysTick_Config>
 8000d32:	0003      	movs	r3, r0
}
 8000d34:	0018      	movs	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b002      	add	sp, #8
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e077      	b.n	8000e3e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a3d      	ldr	r2, [pc, #244]	@ (8000e48 <HAL_DMA_Init+0x10c>)
 8000d54:	4694      	mov	ip, r2
 8000d56:	4463      	add	r3, ip
 8000d58:	2114      	movs	r1, #20
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f7ff f9d0 	bl	8000100 <__udivsi3>
 8000d60:	0003      	movs	r3, r0
 8000d62:	009a      	lsls	r2, r3, #2
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2225      	movs	r2, #37	@ 0x25
 8000d6c:	2102      	movs	r1, #2
 8000d6e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4934      	ldr	r1, [pc, #208]	@ (8000e4c <HAL_DMA_Init+0x110>)
 8000d7c:	400a      	ands	r2, r1
 8000d7e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6819      	ldr	r1, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	691b      	ldr	r3, [r3, #16]
 8000d94:	431a      	orrs	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	431a      	orrs	r2, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	431a      	orrs	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	431a      	orrs	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a1b      	ldr	r3, [r3, #32]
 8000dac:	431a      	orrs	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	430a      	orrs	r2, r1
 8000db4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	0018      	movs	r0, r3
 8000dba:	f000 f8fb 	bl	8000fb4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	2380      	movs	r3, #128	@ 0x80
 8000dc4:	01db      	lsls	r3, r3, #7
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d102      	bne.n	8000dd0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd8:	213f      	movs	r1, #63	@ 0x3f
 8000dda:	400a      	ands	r2, r1
 8000ddc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000de6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d011      	beq.n	8000e14 <HAL_DMA_Init+0xd8>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	d80d      	bhi.n	8000e14 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f000 f906 	bl	800100c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	e008      	b.n	8000e26 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2225      	movs	r2, #37	@ 0x25
 8000e30:	2101      	movs	r1, #1
 8000e32:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2224      	movs	r2, #36	@ 0x24
 8000e38:	2100      	movs	r1, #0
 8000e3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	0018      	movs	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b002      	add	sp, #8
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	bffdfff8 	.word	0xbffdfff8
 8000e4c:	ffff800f 	.word	0xffff800f

08000e50 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8000e58:	4b55      	ldr	r3, [pc, #340]	@ (8000fb0 <HAL_DMA_IRQHandler+0x160>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6a:	221c      	movs	r2, #28
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	2204      	movs	r2, #4
 8000e70:	409a      	lsls	r2, r3
 8000e72:	0013      	movs	r3, r2
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	4013      	ands	r3, r2
 8000e78:	d027      	beq.n	8000eca <HAL_DMA_IRQHandler+0x7a>
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	4013      	ands	r3, r2
 8000e80:	d023      	beq.n	8000eca <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2220      	movs	r2, #32
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	d107      	bne.n	8000e9e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2104      	movs	r1, #4
 8000e9a:	438a      	bics	r2, r1
 8000e9c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8000e9e:	4b44      	ldr	r3, [pc, #272]	@ (8000fb0 <HAL_DMA_IRQHandler+0x160>)
 8000ea0:	6859      	ldr	r1, [r3, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea6:	221c      	movs	r2, #28
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	2204      	movs	r2, #4
 8000eac:	409a      	lsls	r2, r3
 8000eae:	4b40      	ldr	r3, [pc, #256]	@ (8000fb0 <HAL_DMA_IRQHandler+0x160>)
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d100      	bne.n	8000ebe <HAL_DMA_IRQHandler+0x6e>
 8000ebc:	e073      	b.n	8000fa6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	0010      	movs	r0, r2
 8000ec6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8000ec8:	e06d      	b.n	8000fa6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	221c      	movs	r2, #28
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	409a      	lsls	r2, r3
 8000ed6:	0013      	movs	r3, r2
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	4013      	ands	r3, r2
 8000edc:	d02e      	beq.n	8000f3c <HAL_DMA_IRQHandler+0xec>
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d02a      	beq.n	8000f3c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2220      	movs	r2, #32
 8000eee:	4013      	ands	r3, r2
 8000ef0:	d10b      	bne.n	8000f0a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	210a      	movs	r1, #10
 8000efe:	438a      	bics	r2, r1
 8000f00:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2225      	movs	r2, #37	@ 0x25
 8000f06:	2101      	movs	r1, #1
 8000f08:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8000f0a:	4b29      	ldr	r3, [pc, #164]	@ (8000fb0 <HAL_DMA_IRQHandler+0x160>)
 8000f0c:	6859      	ldr	r1, [r3, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	221c      	movs	r2, #28
 8000f14:	4013      	ands	r3, r2
 8000f16:	2202      	movs	r2, #2
 8000f18:	409a      	lsls	r2, r3
 8000f1a:	4b25      	ldr	r3, [pc, #148]	@ (8000fb0 <HAL_DMA_IRQHandler+0x160>)
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2224      	movs	r2, #36	@ 0x24
 8000f24:	2100      	movs	r1, #0
 8000f26:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d03a      	beq.n	8000fa6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	0010      	movs	r0, r2
 8000f38:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8000f3a:	e034      	b.n	8000fa6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f40:	221c      	movs	r2, #28
 8000f42:	4013      	ands	r3, r2
 8000f44:	2208      	movs	r2, #8
 8000f46:	409a      	lsls	r2, r3
 8000f48:	0013      	movs	r3, r2
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	d02b      	beq.n	8000fa8 <HAL_DMA_IRQHandler+0x158>
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	2208      	movs	r2, #8
 8000f54:	4013      	ands	r3, r2
 8000f56:	d027      	beq.n	8000fa8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	210e      	movs	r1, #14
 8000f64:	438a      	bics	r2, r1
 8000f66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8000f68:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <HAL_DMA_IRQHandler+0x160>)
 8000f6a:	6859      	ldr	r1, [r3, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f70:	221c      	movs	r2, #28
 8000f72:	4013      	ands	r3, r2
 8000f74:	2201      	movs	r2, #1
 8000f76:	409a      	lsls	r2, r3
 8000f78:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb0 <HAL_DMA_IRQHandler+0x160>)
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2201      	movs	r2, #1
 8000f82:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2225      	movs	r2, #37	@ 0x25
 8000f88:	2101      	movs	r1, #1
 8000f8a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2224      	movs	r2, #36	@ 0x24
 8000f90:	2100      	movs	r1, #0
 8000f92:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d005      	beq.n	8000fa8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	0010      	movs	r0, r2
 8000fa4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000fa6:	46c0      	nop			@ (mov r8, r8)
 8000fa8:	46c0      	nop			@ (mov r8, r8)
}
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b004      	add	sp, #16
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40020000 	.word	0x40020000

08000fb4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc0:	089b      	lsrs	r3, r3, #2
 8000fc2:	4a10      	ldr	r2, [pc, #64]	@ (8001004 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8000fc4:	4694      	mov	ip, r2
 8000fc6:	4463      	add	r3, ip
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	001a      	movs	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	001a      	movs	r2, r3
 8000fd6:	23ff      	movs	r3, #255	@ 0xff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	3b08      	subs	r3, #8
 8000fdc:	2114      	movs	r1, #20
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f7ff f88e 	bl	8000100 <__udivsi3>
 8000fe4:	0003      	movs	r3, r0
 8000fe6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a07      	ldr	r2, [pc, #28]	@ (8001008 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8000fec:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	221f      	movs	r2, #31
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	409a      	lsls	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8000ffc:	46c0      	nop			@ (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b004      	add	sp, #16
 8001002:	bd80      	pop	{r7, pc}
 8001004:	10008200 	.word	0x10008200
 8001008:	40020880 	.word	0x40020880

0800100c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	223f      	movs	r2, #63	@ 0x3f
 800101a:	4013      	ands	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4a0a      	ldr	r2, [pc, #40]	@ (800104c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001022:	4694      	mov	ip, r2
 8001024:	4463      	add	r3, ip
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	001a      	movs	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a07      	ldr	r2, [pc, #28]	@ (8001050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001032:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3b01      	subs	r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	4013      	ands	r3, r2
 800103c:	2201      	movs	r2, #1
 800103e:	409a      	lsls	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001044:	46c0      	nop			@ (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	b004      	add	sp, #16
 800104a:	bd80      	pop	{r7, pc}
 800104c:	1000823f 	.word	0x1000823f
 8001050:	40020940 	.word	0x40020940

08001054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001062:	e147      	b.n	80012f4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2101      	movs	r1, #1
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	4091      	lsls	r1, r2
 800106e:	000a      	movs	r2, r1
 8001070:	4013      	ands	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d100      	bne.n	800107c <HAL_GPIO_Init+0x28>
 800107a:	e138      	b.n	80012ee <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2203      	movs	r2, #3
 8001082:	4013      	ands	r3, r2
 8001084:	2b01      	cmp	r3, #1
 8001086:	d005      	beq.n	8001094 <HAL_GPIO_Init+0x40>
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2203      	movs	r2, #3
 800108e:	4013      	ands	r3, r2
 8001090:	2b02      	cmp	r3, #2
 8001092:	d130      	bne.n	80010f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	409a      	lsls	r2, r3
 80010a2:	0013      	movs	r3, r2
 80010a4:	43da      	mvns	r2, r3
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	409a      	lsls	r2, r3
 80010b6:	0013      	movs	r3, r2
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010ca:	2201      	movs	r2, #1
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	409a      	lsls	r2, r3
 80010d0:	0013      	movs	r3, r2
 80010d2:	43da      	mvns	r2, r3
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	091b      	lsrs	r3, r3, #4
 80010e0:	2201      	movs	r2, #1
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
 80010e8:	0013      	movs	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2203      	movs	r2, #3
 80010fc:	4013      	ands	r3, r2
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d017      	beq.n	8001132 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	2203      	movs	r2, #3
 800110e:	409a      	lsls	r2, r3
 8001110:	0013      	movs	r3, r2
 8001112:	43da      	mvns	r2, r3
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	409a      	lsls	r2, r3
 8001124:	0013      	movs	r3, r2
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2203      	movs	r2, #3
 8001138:	4013      	ands	r3, r2
 800113a:	2b02      	cmp	r3, #2
 800113c:	d123      	bne.n	8001186 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	08da      	lsrs	r2, r3, #3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3208      	adds	r2, #8
 8001146:	0092      	lsls	r2, r2, #2
 8001148:	58d3      	ldr	r3, [r2, r3]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	2207      	movs	r2, #7
 8001150:	4013      	ands	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	220f      	movs	r2, #15
 8001156:	409a      	lsls	r2, r3
 8001158:	0013      	movs	r3, r2
 800115a:	43da      	mvns	r2, r3
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	691a      	ldr	r2, [r3, #16]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	2107      	movs	r1, #7
 800116a:	400b      	ands	r3, r1
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	409a      	lsls	r2, r3
 8001170:	0013      	movs	r3, r2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	08da      	lsrs	r2, r3, #3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3208      	adds	r2, #8
 8001180:	0092      	lsls	r2, r2, #2
 8001182:	6939      	ldr	r1, [r7, #16]
 8001184:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	2203      	movs	r2, #3
 8001192:	409a      	lsls	r2, r3
 8001194:	0013      	movs	r3, r2
 8001196:	43da      	mvns	r2, r3
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2203      	movs	r2, #3
 80011a4:	401a      	ands	r2, r3
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	409a      	lsls	r2, r3
 80011ac:	0013      	movs	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	23c0      	movs	r3, #192	@ 0xc0
 80011c0:	029b      	lsls	r3, r3, #10
 80011c2:	4013      	ands	r3, r2
 80011c4:	d100      	bne.n	80011c8 <HAL_GPIO_Init+0x174>
 80011c6:	e092      	b.n	80012ee <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80011c8:	4a50      	ldr	r2, [pc, #320]	@ (800130c <HAL_GPIO_Init+0x2b8>)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	3318      	adds	r3, #24
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	589b      	ldr	r3, [r3, r2]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	2203      	movs	r2, #3
 80011da:	4013      	ands	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	220f      	movs	r2, #15
 80011e0:	409a      	lsls	r2, r3
 80011e2:	0013      	movs	r3, r2
 80011e4:	43da      	mvns	r2, r3
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	23a0      	movs	r3, #160	@ 0xa0
 80011f0:	05db      	lsls	r3, r3, #23
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d013      	beq.n	800121e <HAL_GPIO_Init+0x1ca>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a45      	ldr	r2, [pc, #276]	@ (8001310 <HAL_GPIO_Init+0x2bc>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d00d      	beq.n	800121a <HAL_GPIO_Init+0x1c6>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a44      	ldr	r2, [pc, #272]	@ (8001314 <HAL_GPIO_Init+0x2c0>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d007      	beq.n	8001216 <HAL_GPIO_Init+0x1c2>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a43      	ldr	r2, [pc, #268]	@ (8001318 <HAL_GPIO_Init+0x2c4>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d101      	bne.n	8001212 <HAL_GPIO_Init+0x1be>
 800120e:	2303      	movs	r3, #3
 8001210:	e006      	b.n	8001220 <HAL_GPIO_Init+0x1cc>
 8001212:	2305      	movs	r3, #5
 8001214:	e004      	b.n	8001220 <HAL_GPIO_Init+0x1cc>
 8001216:	2302      	movs	r3, #2
 8001218:	e002      	b.n	8001220 <HAL_GPIO_Init+0x1cc>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <HAL_GPIO_Init+0x1cc>
 800121e:	2300      	movs	r3, #0
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	2103      	movs	r1, #3
 8001224:	400a      	ands	r2, r1
 8001226:	00d2      	lsls	r2, r2, #3
 8001228:	4093      	lsls	r3, r2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001230:	4936      	ldr	r1, [pc, #216]	@ (800130c <HAL_GPIO_Init+0x2b8>)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3318      	adds	r3, #24
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800123e:	4b33      	ldr	r3, [pc, #204]	@ (800130c <HAL_GPIO_Init+0x2b8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	43da      	mvns	r2, r3
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	2380      	movs	r3, #128	@ 0x80
 8001254:	035b      	lsls	r3, r3, #13
 8001256:	4013      	ands	r3, r2
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001262:	4b2a      	ldr	r3, [pc, #168]	@ (800130c <HAL_GPIO_Init+0x2b8>)
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001268:	4b28      	ldr	r3, [pc, #160]	@ (800130c <HAL_GPIO_Init+0x2b8>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	43da      	mvns	r2, r3
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	2380      	movs	r3, #128	@ 0x80
 800127e:	039b      	lsls	r3, r3, #14
 8001280:	4013      	ands	r3, r2
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800128c:	4b1f      	ldr	r3, [pc, #124]	@ (800130c <HAL_GPIO_Init+0x2b8>)
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001292:	4a1e      	ldr	r2, [pc, #120]	@ (800130c <HAL_GPIO_Init+0x2b8>)
 8001294:	2384      	movs	r3, #132	@ 0x84
 8001296:	58d3      	ldr	r3, [r2, r3]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	43da      	mvns	r2, r3
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	2380      	movs	r3, #128	@ 0x80
 80012aa:	029b      	lsls	r3, r3, #10
 80012ac:	4013      	ands	r3, r2
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012b8:	4914      	ldr	r1, [pc, #80]	@ (800130c <HAL_GPIO_Init+0x2b8>)
 80012ba:	2284      	movs	r2, #132	@ 0x84
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80012c0:	4a12      	ldr	r2, [pc, #72]	@ (800130c <HAL_GPIO_Init+0x2b8>)
 80012c2:	2380      	movs	r3, #128	@ 0x80
 80012c4:	58d3      	ldr	r3, [r2, r3]
 80012c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	43da      	mvns	r2, r3
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	2380      	movs	r3, #128	@ 0x80
 80012d8:	025b      	lsls	r3, r3, #9
 80012da:	4013      	ands	r3, r2
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012e6:	4909      	ldr	r1, [pc, #36]	@ (800130c <HAL_GPIO_Init+0x2b8>)
 80012e8:	2280      	movs	r2, #128	@ 0x80
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	3301      	adds	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	40da      	lsrs	r2, r3
 80012fc:	1e13      	subs	r3, r2, #0
 80012fe:	d000      	beq.n	8001302 <HAL_GPIO_Init+0x2ae>
 8001300:	e6b0      	b.n	8001064 <HAL_GPIO_Init+0x10>
  }
}
 8001302:	46c0      	nop			@ (mov r8, r8)
 8001304:	46c0      	nop			@ (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	b006      	add	sp, #24
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40021800 	.word	0x40021800
 8001310:	50000400 	.word	0x50000400
 8001314:	50000800 	.word	0x50000800
 8001318:	50000c00 	.word	0x50000c00

0800131c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	0008      	movs	r0, r1
 8001326:	0011      	movs	r1, r2
 8001328:	1cbb      	adds	r3, r7, #2
 800132a:	1c02      	adds	r2, r0, #0
 800132c:	801a      	strh	r2, [r3, #0]
 800132e:	1c7b      	adds	r3, r7, #1
 8001330:	1c0a      	adds	r2, r1, #0
 8001332:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001334:	1c7b      	adds	r3, r7, #1
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d004      	beq.n	8001346 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800133c:	1cbb      	adds	r3, r7, #2
 800133e:	881a      	ldrh	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001344:	e003      	b.n	800134e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001346:	1cbb      	adds	r3, r7, #2
 8001348:	881a      	ldrh	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800134e:	46c0      	nop			@ (mov r8, r8)
 8001350:	46bd      	mov	sp, r7
 8001352:	b002      	add	sp, #8
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e08f      	b.n	800148a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2241      	movs	r2, #65	@ 0x41
 800136e:	5c9b      	ldrb	r3, [r3, r2]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d107      	bne.n	8001386 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2240      	movs	r2, #64	@ 0x40
 800137a:	2100      	movs	r1, #0
 800137c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	0018      	movs	r0, r3
 8001382:	f7ff f9e9 	bl	8000758 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2241      	movs	r2, #65	@ 0x41
 800138a:	2124      	movs	r1, #36	@ 0x24
 800138c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2101      	movs	r1, #1
 800139a:	438a      	bics	r2, r1
 800139c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	493b      	ldr	r1, [pc, #236]	@ (8001494 <HAL_I2C_Init+0x13c>)
 80013a8:	400a      	ands	r2, r1
 80013aa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4938      	ldr	r1, [pc, #224]	@ (8001498 <HAL_I2C_Init+0x140>)
 80013b8:	400a      	ands	r2, r1
 80013ba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d108      	bne.n	80013d6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2180      	movs	r1, #128	@ 0x80
 80013ce:	0209      	lsls	r1, r1, #8
 80013d0:	430a      	orrs	r2, r1
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	e007      	b.n	80013e6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2184      	movs	r1, #132	@ 0x84
 80013e0:	0209      	lsls	r1, r1, #8
 80013e2:	430a      	orrs	r2, r1
 80013e4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d109      	bne.n	8001402 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2180      	movs	r1, #128	@ 0x80
 80013fa:	0109      	lsls	r1, r1, #4
 80013fc:	430a      	orrs	r2, r1
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	e007      	b.n	8001412 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4923      	ldr	r1, [pc, #140]	@ (800149c <HAL_I2C_Init+0x144>)
 800140e:	400a      	ands	r2, r1
 8001410:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4920      	ldr	r1, [pc, #128]	@ (80014a0 <HAL_I2C_Init+0x148>)
 800141e:	430a      	orrs	r2, r1
 8001420:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	491a      	ldr	r1, [pc, #104]	@ (8001498 <HAL_I2C_Init+0x140>)
 800142e:	400a      	ands	r2, r1
 8001430:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691a      	ldr	r2, [r3, #16]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	431a      	orrs	r2, r3
 800143c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	430a      	orrs	r2, r1
 800144a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69d9      	ldr	r1, [r3, #28]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a1a      	ldr	r2, [r3, #32]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2101      	movs	r1, #1
 8001468:	430a      	orrs	r2, r1
 800146a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2241      	movs	r2, #65	@ 0x41
 8001476:	2120      	movs	r1, #32
 8001478:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2242      	movs	r2, #66	@ 0x42
 8001484:	2100      	movs	r1, #0
 8001486:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	0018      	movs	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	b002      	add	sp, #8
 8001490:	bd80      	pop	{r7, pc}
 8001492:	46c0      	nop			@ (mov r8, r8)
 8001494:	f0ffffff 	.word	0xf0ffffff
 8001498:	ffff7fff 	.word	0xffff7fff
 800149c:	fffff7ff 	.word	0xfffff7ff
 80014a0:	02008000 	.word	0x02008000

080014a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2241      	movs	r2, #65	@ 0x41
 80014b2:	5c9b      	ldrb	r3, [r3, r2]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b20      	cmp	r3, #32
 80014b8:	d138      	bne.n	800152c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2240      	movs	r2, #64	@ 0x40
 80014be:	5c9b      	ldrb	r3, [r3, r2]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e032      	b.n	800152e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2240      	movs	r2, #64	@ 0x40
 80014cc:	2101      	movs	r1, #1
 80014ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2241      	movs	r2, #65	@ 0x41
 80014d4:	2124      	movs	r1, #36	@ 0x24
 80014d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2101      	movs	r1, #1
 80014e4:	438a      	bics	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4911      	ldr	r1, [pc, #68]	@ (8001538 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80014f4:	400a      	ands	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6819      	ldr	r1, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2101      	movs	r1, #1
 8001514:	430a      	orrs	r2, r1
 8001516:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2241      	movs	r2, #65	@ 0x41
 800151c:	2120      	movs	r1, #32
 800151e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2240      	movs	r2, #64	@ 0x40
 8001524:	2100      	movs	r1, #0
 8001526:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	e000      	b.n	800152e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800152c:	2302      	movs	r3, #2
  }
}
 800152e:	0018      	movs	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	b002      	add	sp, #8
 8001534:	bd80      	pop	{r7, pc}
 8001536:	46c0      	nop			@ (mov r8, r8)
 8001538:	ffffefff 	.word	0xffffefff

0800153c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2241      	movs	r2, #65	@ 0x41
 800154a:	5c9b      	ldrb	r3, [r3, r2]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b20      	cmp	r3, #32
 8001550:	d139      	bne.n	80015c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2240      	movs	r2, #64	@ 0x40
 8001556:	5c9b      	ldrb	r3, [r3, r2]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d101      	bne.n	8001560 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800155c:	2302      	movs	r3, #2
 800155e:	e033      	b.n	80015c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2240      	movs	r2, #64	@ 0x40
 8001564:	2101      	movs	r1, #1
 8001566:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2241      	movs	r2, #65	@ 0x41
 800156c:	2124      	movs	r1, #36	@ 0x24
 800156e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2101      	movs	r1, #1
 800157c:	438a      	bics	r2, r1
 800157e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4a11      	ldr	r2, [pc, #68]	@ (80015d0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800158c:	4013      	ands	r3, r2
 800158e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	4313      	orrs	r3, r2
 8001598:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2101      	movs	r1, #1
 80015ae:	430a      	orrs	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2241      	movs	r2, #65	@ 0x41
 80015b6:	2120      	movs	r1, #32
 80015b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2240      	movs	r2, #64	@ 0x40
 80015be:	2100      	movs	r1, #0
 80015c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e000      	b.n	80015c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80015c6:	2302      	movs	r3, #2
  }
}
 80015c8:	0018      	movs	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	b004      	add	sp, #16
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	fffff0ff 	.word	0xfffff0ff

080015d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80015dc:	4b19      	ldr	r3, [pc, #100]	@ (8001644 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a19      	ldr	r2, [pc, #100]	@ (8001648 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80015e2:	4013      	ands	r3, r2
 80015e4:	0019      	movs	r1, r3
 80015e6:	4b17      	ldr	r3, [pc, #92]	@ (8001644 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	2380      	movs	r3, #128	@ 0x80
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d11f      	bne.n	8001638 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80015f8:	4b14      	ldr	r3, [pc, #80]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	0013      	movs	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	189b      	adds	r3, r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4912      	ldr	r1, [pc, #72]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001606:	0018      	movs	r0, r3
 8001608:	f7fe fd7a 	bl	8000100 <__udivsi3>
 800160c:	0003      	movs	r3, r0
 800160e:	3301      	adds	r3, #1
 8001610:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001612:	e008      	b.n	8001626 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	3b01      	subs	r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	e001      	b.n	8001626 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e009      	b.n	800163a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001626:	4b07      	ldr	r3, [pc, #28]	@ (8001644 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001628:	695a      	ldr	r2, [r3, #20]
 800162a:	2380      	movs	r3, #128	@ 0x80
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	401a      	ands	r2, r3
 8001630:	2380      	movs	r3, #128	@ 0x80
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	429a      	cmp	r2, r3
 8001636:	d0ed      	beq.n	8001614 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	0018      	movs	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	b004      	add	sp, #16
 8001640:	bd80      	pop	{r7, pc}
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	40007000 	.word	0x40007000
 8001648:	fffff9ff 	.word	0xfffff9ff
 800164c:	20000000 	.word	0x20000000
 8001650:	000f4240 	.word	0x000f4240

08001654 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001658:	4b03      	ldr	r3, [pc, #12]	@ (8001668 <LL_RCC_GetAPB1Prescaler+0x14>)
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	23e0      	movs	r3, #224	@ 0xe0
 800165e:	01db      	lsls	r3, r3, #7
 8001660:	4013      	ands	r3, r2
}
 8001662:	0018      	movs	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40021000 	.word	0x40021000

0800166c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e2f3      	b.n	8001c66 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2201      	movs	r2, #1
 8001684:	4013      	ands	r3, r2
 8001686:	d100      	bne.n	800168a <HAL_RCC_OscConfig+0x1e>
 8001688:	e07c      	b.n	8001784 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800168a:	4bc3      	ldr	r3, [pc, #780]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	2238      	movs	r2, #56	@ 0x38
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001694:	4bc0      	ldr	r3, [pc, #768]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	2203      	movs	r2, #3
 800169a:	4013      	ands	r3, r2
 800169c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	2b10      	cmp	r3, #16
 80016a2:	d102      	bne.n	80016aa <HAL_RCC_OscConfig+0x3e>
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d002      	beq.n	80016b0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d10b      	bne.n	80016c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b0:	4bb9      	ldr	r3, [pc, #740]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	2380      	movs	r3, #128	@ 0x80
 80016b6:	029b      	lsls	r3, r3, #10
 80016b8:	4013      	ands	r3, r2
 80016ba:	d062      	beq.n	8001782 <HAL_RCC_OscConfig+0x116>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d15e      	bne.n	8001782 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e2ce      	b.n	8001c66 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	2380      	movs	r3, #128	@ 0x80
 80016ce:	025b      	lsls	r3, r3, #9
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d107      	bne.n	80016e4 <HAL_RCC_OscConfig+0x78>
 80016d4:	4bb0      	ldr	r3, [pc, #704]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4baf      	ldr	r3, [pc, #700]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 80016da:	2180      	movs	r1, #128	@ 0x80
 80016dc:	0249      	lsls	r1, r1, #9
 80016de:	430a      	orrs	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	e020      	b.n	8001726 <HAL_RCC_OscConfig+0xba>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	23a0      	movs	r3, #160	@ 0xa0
 80016ea:	02db      	lsls	r3, r3, #11
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d10e      	bne.n	800170e <HAL_RCC_OscConfig+0xa2>
 80016f0:	4ba9      	ldr	r3, [pc, #676]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4ba8      	ldr	r3, [pc, #672]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 80016f6:	2180      	movs	r1, #128	@ 0x80
 80016f8:	02c9      	lsls	r1, r1, #11
 80016fa:	430a      	orrs	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	4ba6      	ldr	r3, [pc, #664]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4ba5      	ldr	r3, [pc, #660]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 8001704:	2180      	movs	r1, #128	@ 0x80
 8001706:	0249      	lsls	r1, r1, #9
 8001708:	430a      	orrs	r2, r1
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	e00b      	b.n	8001726 <HAL_RCC_OscConfig+0xba>
 800170e:	4ba2      	ldr	r3, [pc, #648]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4ba1      	ldr	r3, [pc, #644]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 8001714:	49a1      	ldr	r1, [pc, #644]	@ (800199c <HAL_RCC_OscConfig+0x330>)
 8001716:	400a      	ands	r2, r1
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	4b9f      	ldr	r3, [pc, #636]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4b9e      	ldr	r3, [pc, #632]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 8001720:	499f      	ldr	r1, [pc, #636]	@ (80019a0 <HAL_RCC_OscConfig+0x334>)
 8001722:	400a      	ands	r2, r1
 8001724:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d014      	beq.n	8001758 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172e:	f7ff fa1d 	bl	8000b6c <HAL_GetTick>
 8001732:	0003      	movs	r3, r0
 8001734:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001738:	f7ff fa18 	bl	8000b6c <HAL_GetTick>
 800173c:	0002      	movs	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b64      	cmp	r3, #100	@ 0x64
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e28d      	b.n	8001c66 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800174a:	4b93      	ldr	r3, [pc, #588]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	2380      	movs	r3, #128	@ 0x80
 8001750:	029b      	lsls	r3, r3, #10
 8001752:	4013      	ands	r3, r2
 8001754:	d0f0      	beq.n	8001738 <HAL_RCC_OscConfig+0xcc>
 8001756:	e015      	b.n	8001784 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001758:	f7ff fa08 	bl	8000b6c <HAL_GetTick>
 800175c:	0003      	movs	r3, r0
 800175e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001762:	f7ff fa03 	bl	8000b6c <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b64      	cmp	r3, #100	@ 0x64
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e278      	b.n	8001c66 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001774:	4b88      	ldr	r3, [pc, #544]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	2380      	movs	r3, #128	@ 0x80
 800177a:	029b      	lsls	r3, r3, #10
 800177c:	4013      	ands	r3, r2
 800177e:	d1f0      	bne.n	8001762 <HAL_RCC_OscConfig+0xf6>
 8001780:	e000      	b.n	8001784 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001782:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2202      	movs	r2, #2
 800178a:	4013      	ands	r3, r2
 800178c:	d100      	bne.n	8001790 <HAL_RCC_OscConfig+0x124>
 800178e:	e099      	b.n	80018c4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001790:	4b81      	ldr	r3, [pc, #516]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2238      	movs	r2, #56	@ 0x38
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800179a:	4b7f      	ldr	r3, [pc, #508]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	2203      	movs	r2, #3
 80017a0:	4013      	ands	r3, r2
 80017a2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	2b10      	cmp	r3, #16
 80017a8:	d102      	bne.n	80017b0 <HAL_RCC_OscConfig+0x144>
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d002      	beq.n	80017b6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d135      	bne.n	8001822 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017b6:	4b78      	ldr	r3, [pc, #480]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	2380      	movs	r3, #128	@ 0x80
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4013      	ands	r3, r2
 80017c0:	d005      	beq.n	80017ce <HAL_RCC_OscConfig+0x162>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e24b      	b.n	8001c66 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ce:	4b72      	ldr	r3, [pc, #456]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4a74      	ldr	r2, [pc, #464]	@ (80019a4 <HAL_RCC_OscConfig+0x338>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	0019      	movs	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	021a      	lsls	r2, r3, #8
 80017de:	4b6e      	ldr	r3, [pc, #440]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 80017e0:	430a      	orrs	r2, r1
 80017e2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d112      	bne.n	8001810 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017ea:	4b6b      	ldr	r3, [pc, #428]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a6e      	ldr	r2, [pc, #440]	@ (80019a8 <HAL_RCC_OscConfig+0x33c>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	0019      	movs	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691a      	ldr	r2, [r3, #16]
 80017f8:	4b67      	ldr	r3, [pc, #412]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 80017fa:	430a      	orrs	r2, r1
 80017fc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80017fe:	4b66      	ldr	r3, [pc, #408]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	0adb      	lsrs	r3, r3, #11
 8001804:	2207      	movs	r2, #7
 8001806:	4013      	ands	r3, r2
 8001808:	4a68      	ldr	r2, [pc, #416]	@ (80019ac <HAL_RCC_OscConfig+0x340>)
 800180a:	40da      	lsrs	r2, r3
 800180c:	4b68      	ldr	r3, [pc, #416]	@ (80019b0 <HAL_RCC_OscConfig+0x344>)
 800180e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001810:	4b68      	ldr	r3, [pc, #416]	@ (80019b4 <HAL_RCC_OscConfig+0x348>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	0018      	movs	r0, r3
 8001816:	f7ff f94d 	bl	8000ab4 <HAL_InitTick>
 800181a:	1e03      	subs	r3, r0, #0
 800181c:	d051      	beq.n	80018c2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e221      	b.n	8001c66 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d030      	beq.n	800188c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800182a:	4b5b      	ldr	r3, [pc, #364]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a5e      	ldr	r2, [pc, #376]	@ (80019a8 <HAL_RCC_OscConfig+0x33c>)
 8001830:	4013      	ands	r3, r2
 8001832:	0019      	movs	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691a      	ldr	r2, [r3, #16]
 8001838:	4b57      	ldr	r3, [pc, #348]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 800183a:	430a      	orrs	r2, r1
 800183c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800183e:	4b56      	ldr	r3, [pc, #344]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	4b55      	ldr	r3, [pc, #340]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 8001844:	2180      	movs	r1, #128	@ 0x80
 8001846:	0049      	lsls	r1, r1, #1
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184c:	f7ff f98e 	bl	8000b6c <HAL_GetTick>
 8001850:	0003      	movs	r3, r0
 8001852:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001856:	f7ff f989 	bl	8000b6c <HAL_GetTick>
 800185a:	0002      	movs	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e1fe      	b.n	8001c66 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001868:	4b4b      	ldr	r3, [pc, #300]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	2380      	movs	r3, #128	@ 0x80
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4013      	ands	r3, r2
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001874:	4b48      	ldr	r3, [pc, #288]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4a4a      	ldr	r2, [pc, #296]	@ (80019a4 <HAL_RCC_OscConfig+0x338>)
 800187a:	4013      	ands	r3, r2
 800187c:	0019      	movs	r1, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	021a      	lsls	r2, r3, #8
 8001884:	4b44      	ldr	r3, [pc, #272]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 8001886:	430a      	orrs	r2, r1
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	e01b      	b.n	80018c4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800188c:	4b42      	ldr	r3, [pc, #264]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b41      	ldr	r3, [pc, #260]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 8001892:	4949      	ldr	r1, [pc, #292]	@ (80019b8 <HAL_RCC_OscConfig+0x34c>)
 8001894:	400a      	ands	r2, r1
 8001896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff f968 	bl	8000b6c <HAL_GetTick>
 800189c:	0003      	movs	r3, r0
 800189e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a2:	f7ff f963 	bl	8000b6c <HAL_GetTick>
 80018a6:	0002      	movs	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e1d8      	b.n	8001c66 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018b4:	4b38      	ldr	r3, [pc, #224]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	2380      	movs	r3, #128	@ 0x80
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4013      	ands	r3, r2
 80018be:	d1f0      	bne.n	80018a2 <HAL_RCC_OscConfig+0x236>
 80018c0:	e000      	b.n	80018c4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018c2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2208      	movs	r2, #8
 80018ca:	4013      	ands	r3, r2
 80018cc:	d047      	beq.n	800195e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80018ce:	4b32      	ldr	r3, [pc, #200]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2238      	movs	r2, #56	@ 0x38
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b18      	cmp	r3, #24
 80018d8:	d10a      	bne.n	80018f0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80018da:	4b2f      	ldr	r3, [pc, #188]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 80018dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018de:	2202      	movs	r2, #2
 80018e0:	4013      	ands	r3, r2
 80018e2:	d03c      	beq.n	800195e <HAL_RCC_OscConfig+0x2f2>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d138      	bne.n	800195e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e1ba      	b.n	8001c66 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d019      	beq.n	800192c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80018f8:	4b27      	ldr	r3, [pc, #156]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 80018fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80018fc:	4b26      	ldr	r3, [pc, #152]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 80018fe:	2101      	movs	r1, #1
 8001900:	430a      	orrs	r2, r1
 8001902:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff f932 	bl	8000b6c <HAL_GetTick>
 8001908:	0003      	movs	r3, r0
 800190a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800190e:	f7ff f92d 	bl	8000b6c <HAL_GetTick>
 8001912:	0002      	movs	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e1a2      	b.n	8001c66 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001920:	4b1d      	ldr	r3, [pc, #116]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 8001922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001924:	2202      	movs	r2, #2
 8001926:	4013      	ands	r3, r2
 8001928:	d0f1      	beq.n	800190e <HAL_RCC_OscConfig+0x2a2>
 800192a:	e018      	b.n	800195e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800192c:	4b1a      	ldr	r3, [pc, #104]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 800192e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001930:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 8001932:	2101      	movs	r1, #1
 8001934:	438a      	bics	r2, r1
 8001936:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff f918 	bl	8000b6c <HAL_GetTick>
 800193c:	0003      	movs	r3, r0
 800193e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001942:	f7ff f913 	bl	8000b6c <HAL_GetTick>
 8001946:	0002      	movs	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e188      	b.n	8001c66 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001954:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 8001956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001958:	2202      	movs	r2, #2
 800195a:	4013      	ands	r3, r2
 800195c:	d1f1      	bne.n	8001942 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2204      	movs	r2, #4
 8001964:	4013      	ands	r3, r2
 8001966:	d100      	bne.n	800196a <HAL_RCC_OscConfig+0x2fe>
 8001968:	e0c6      	b.n	8001af8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800196a:	231f      	movs	r3, #31
 800196c:	18fb      	adds	r3, r7, r3
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001972:	4b09      	ldr	r3, [pc, #36]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2238      	movs	r2, #56	@ 0x38
 8001978:	4013      	ands	r3, r2
 800197a:	2b20      	cmp	r3, #32
 800197c:	d11e      	bne.n	80019bc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800197e:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <HAL_RCC_OscConfig+0x32c>)
 8001980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001982:	2202      	movs	r2, #2
 8001984:	4013      	ands	r3, r2
 8001986:	d100      	bne.n	800198a <HAL_RCC_OscConfig+0x31e>
 8001988:	e0b6      	b.n	8001af8 <HAL_RCC_OscConfig+0x48c>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d000      	beq.n	8001994 <HAL_RCC_OscConfig+0x328>
 8001992:	e0b1      	b.n	8001af8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e166      	b.n	8001c66 <HAL_RCC_OscConfig+0x5fa>
 8001998:	40021000 	.word	0x40021000
 800199c:	fffeffff 	.word	0xfffeffff
 80019a0:	fffbffff 	.word	0xfffbffff
 80019a4:	ffff80ff 	.word	0xffff80ff
 80019a8:	ffffc7ff 	.word	0xffffc7ff
 80019ac:	00f42400 	.word	0x00f42400
 80019b0:	20000000 	.word	0x20000000
 80019b4:	20000004 	.word	0x20000004
 80019b8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019bc:	4bac      	ldr	r3, [pc, #688]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 80019be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019c0:	2380      	movs	r3, #128	@ 0x80
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	4013      	ands	r3, r2
 80019c6:	d101      	bne.n	80019cc <HAL_RCC_OscConfig+0x360>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <HAL_RCC_OscConfig+0x362>
 80019cc:	2300      	movs	r3, #0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d011      	beq.n	80019f6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80019d2:	4ba7      	ldr	r3, [pc, #668]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 80019d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019d6:	4ba6      	ldr	r3, [pc, #664]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 80019d8:	2180      	movs	r1, #128	@ 0x80
 80019da:	0549      	lsls	r1, r1, #21
 80019dc:	430a      	orrs	r2, r1
 80019de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019e0:	4ba3      	ldr	r3, [pc, #652]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 80019e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019e4:	2380      	movs	r3, #128	@ 0x80
 80019e6:	055b      	lsls	r3, r3, #21
 80019e8:	4013      	ands	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80019ee:	231f      	movs	r3, #31
 80019f0:	18fb      	adds	r3, r7, r3
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f6:	4b9f      	ldr	r3, [pc, #636]	@ (8001c74 <HAL_RCC_OscConfig+0x608>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	2380      	movs	r3, #128	@ 0x80
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4013      	ands	r3, r2
 8001a00:	d11a      	bne.n	8001a38 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a02:	4b9c      	ldr	r3, [pc, #624]	@ (8001c74 <HAL_RCC_OscConfig+0x608>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	4b9b      	ldr	r3, [pc, #620]	@ (8001c74 <HAL_RCC_OscConfig+0x608>)
 8001a08:	2180      	movs	r1, #128	@ 0x80
 8001a0a:	0049      	lsls	r1, r1, #1
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001a10:	f7ff f8ac 	bl	8000b6c <HAL_GetTick>
 8001a14:	0003      	movs	r3, r0
 8001a16:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a1a:	f7ff f8a7 	bl	8000b6c <HAL_GetTick>
 8001a1e:	0002      	movs	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e11c      	b.n	8001c66 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a2c:	4b91      	ldr	r3, [pc, #580]	@ (8001c74 <HAL_RCC_OscConfig+0x608>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	2380      	movs	r3, #128	@ 0x80
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4013      	ands	r3, r2
 8001a36:	d0f0      	beq.n	8001a1a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d106      	bne.n	8001a4e <HAL_RCC_OscConfig+0x3e2>
 8001a40:	4b8b      	ldr	r3, [pc, #556]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001a42:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a44:	4b8a      	ldr	r3, [pc, #552]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001a46:	2101      	movs	r1, #1
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a4c:	e01c      	b.n	8001a88 <HAL_RCC_OscConfig+0x41c>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	2b05      	cmp	r3, #5
 8001a54:	d10c      	bne.n	8001a70 <HAL_RCC_OscConfig+0x404>
 8001a56:	4b86      	ldr	r3, [pc, #536]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001a58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a5a:	4b85      	ldr	r3, [pc, #532]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001a5c:	2104      	movs	r1, #4
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a62:	4b83      	ldr	r3, [pc, #524]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001a64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a66:	4b82      	ldr	r3, [pc, #520]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001a68:	2101      	movs	r1, #1
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a6e:	e00b      	b.n	8001a88 <HAL_RCC_OscConfig+0x41c>
 8001a70:	4b7f      	ldr	r3, [pc, #508]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001a72:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a74:	4b7e      	ldr	r3, [pc, #504]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001a76:	2101      	movs	r1, #1
 8001a78:	438a      	bics	r2, r1
 8001a7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a7c:	4b7c      	ldr	r3, [pc, #496]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001a7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a80:	4b7b      	ldr	r3, [pc, #492]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001a82:	2104      	movs	r1, #4
 8001a84:	438a      	bics	r2, r1
 8001a86:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d014      	beq.n	8001aba <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a90:	f7ff f86c 	bl	8000b6c <HAL_GetTick>
 8001a94:	0003      	movs	r3, r0
 8001a96:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a98:	e009      	b.n	8001aae <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9a:	f7ff f867 	bl	8000b6c <HAL_GetTick>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	4a74      	ldr	r2, [pc, #464]	@ (8001c78 <HAL_RCC_OscConfig+0x60c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e0db      	b.n	8001c66 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aae:	4b70      	ldr	r3, [pc, #448]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x42e>
 8001ab8:	e013      	b.n	8001ae2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aba:	f7ff f857 	bl	8000b6c <HAL_GetTick>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ac2:	e009      	b.n	8001ad8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac4:	f7ff f852 	bl	8000b6c <HAL_GetTick>
 8001ac8:	0002      	movs	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	4a6a      	ldr	r2, [pc, #424]	@ (8001c78 <HAL_RCC_OscConfig+0x60c>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e0c6      	b.n	8001c66 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ad8:	4b65      	ldr	r3, [pc, #404]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001adc:	2202      	movs	r2, #2
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001ae2:	231f      	movs	r3, #31
 8001ae4:	18fb      	adds	r3, r7, r3
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d105      	bne.n	8001af8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001aec:	4b60      	ldr	r3, [pc, #384]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001aee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001af0:	4b5f      	ldr	r3, [pc, #380]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001af2:	4962      	ldr	r1, [pc, #392]	@ (8001c7c <HAL_RCC_OscConfig+0x610>)
 8001af4:	400a      	ands	r2, r1
 8001af6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d100      	bne.n	8001b02 <HAL_RCC_OscConfig+0x496>
 8001b00:	e0b0      	b.n	8001c64 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b02:	4b5b      	ldr	r3, [pc, #364]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	2238      	movs	r2, #56	@ 0x38
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2b10      	cmp	r3, #16
 8001b0c:	d100      	bne.n	8001b10 <HAL_RCC_OscConfig+0x4a4>
 8001b0e:	e078      	b.n	8001c02 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d153      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b18:	4b55      	ldr	r3, [pc, #340]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b54      	ldr	r3, [pc, #336]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001b1e:	4958      	ldr	r1, [pc, #352]	@ (8001c80 <HAL_RCC_OscConfig+0x614>)
 8001b20:	400a      	ands	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff f822 	bl	8000b6c <HAL_GetTick>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2e:	f7ff f81d 	bl	8000b6c <HAL_GetTick>
 8001b32:	0002      	movs	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e092      	b.n	8001c66 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b40:	4b4b      	ldr	r3, [pc, #300]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2380      	movs	r3, #128	@ 0x80
 8001b46:	049b      	lsls	r3, r3, #18
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d1f0      	bne.n	8001b2e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b4c:	4b48      	ldr	r3, [pc, #288]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	4a4c      	ldr	r2, [pc, #304]	@ (8001c84 <HAL_RCC_OscConfig+0x618>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	0019      	movs	r1, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a1a      	ldr	r2, [r3, #32]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	431a      	orrs	r2, r3
 8001b74:	4b3e      	ldr	r3, [pc, #248]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001b76:	430a      	orrs	r2, r1
 8001b78:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b7a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001b80:	2180      	movs	r1, #128	@ 0x80
 8001b82:	0449      	lsls	r1, r1, #17
 8001b84:	430a      	orrs	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001b88:	4b39      	ldr	r3, [pc, #228]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	4b38      	ldr	r3, [pc, #224]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001b8e:	2180      	movs	r1, #128	@ 0x80
 8001b90:	0549      	lsls	r1, r1, #21
 8001b92:	430a      	orrs	r2, r1
 8001b94:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b96:	f7fe ffe9 	bl	8000b6c <HAL_GetTick>
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7fe ffe4 	bl	8000b6c <HAL_GetTick>
 8001ba4:	0002      	movs	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e059      	b.n	8001c66 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	2380      	movs	r3, #128	@ 0x80
 8001bb8:	049b      	lsls	r3, r3, #18
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x534>
 8001bbe:	e051      	b.n	8001c64 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001bc6:	492e      	ldr	r1, [pc, #184]	@ (8001c80 <HAL_RCC_OscConfig+0x614>)
 8001bc8:	400a      	ands	r2, r1
 8001bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bcc:	f7fe ffce 	bl	8000b6c <HAL_GetTick>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd6:	f7fe ffc9 	bl	8000b6c <HAL_GetTick>
 8001bda:	0002      	movs	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e03e      	b.n	8001c66 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be8:	4b21      	ldr	r3, [pc, #132]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	2380      	movs	r3, #128	@ 0x80
 8001bee:	049b      	lsls	r3, r3, #18
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d1f0      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001bfa:	4923      	ldr	r1, [pc, #140]	@ (8001c88 <HAL_RCC_OscConfig+0x61c>)
 8001bfc:	400a      	ands	r2, r1
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	e030      	b.n	8001c64 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d101      	bne.n	8001c0e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e02b      	b.n	8001c66 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001c0e:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <HAL_RCC_OscConfig+0x604>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2203      	movs	r2, #3
 8001c18:	401a      	ands	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d11e      	bne.n	8001c60 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	2270      	movs	r2, #112	@ 0x70
 8001c26:	401a      	ands	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d117      	bne.n	8001c60 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	23fe      	movs	r3, #254	@ 0xfe
 8001c34:	01db      	lsls	r3, r3, #7
 8001c36:	401a      	ands	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c3c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d10e      	bne.n	8001c60 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	23f8      	movs	r3, #248	@ 0xf8
 8001c46:	039b      	lsls	r3, r3, #14
 8001c48:	401a      	ands	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d106      	bne.n	8001c60 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	0f5b      	lsrs	r3, r3, #29
 8001c56:	075a      	lsls	r2, r3, #29
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d001      	beq.n	8001c64 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	0018      	movs	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	b008      	add	sp, #32
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	46c0      	nop			@ (mov r8, r8)
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40007000 	.word	0x40007000
 8001c78:	00001388 	.word	0x00001388
 8001c7c:	efffffff 	.word	0xefffffff
 8001c80:	feffffff 	.word	0xfeffffff
 8001c84:	1fc1808c 	.word	0x1fc1808c
 8001c88:	effefffc 	.word	0xeffefffc

08001c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e0e9      	b.n	8001e74 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca0:	4b76      	ldr	r3, [pc, #472]	@ (8001e7c <HAL_RCC_ClockConfig+0x1f0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d91e      	bls.n	8001cec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cae:	4b73      	ldr	r3, [pc, #460]	@ (8001e7c <HAL_RCC_ClockConfig+0x1f0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	4393      	bics	r3, r2
 8001cb6:	0019      	movs	r1, r3
 8001cb8:	4b70      	ldr	r3, [pc, #448]	@ (8001e7c <HAL_RCC_ClockConfig+0x1f0>)
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cc0:	f7fe ff54 	bl	8000b6c <HAL_GetTick>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cc8:	e009      	b.n	8001cde <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cca:	f7fe ff4f 	bl	8000b6c <HAL_GetTick>
 8001cce:	0002      	movs	r2, r0
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	4a6a      	ldr	r2, [pc, #424]	@ (8001e80 <HAL_RCC_ClockConfig+0x1f4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e0ca      	b.n	8001e74 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cde:	4b67      	ldr	r3, [pc, #412]	@ (8001e7c <HAL_RCC_ClockConfig+0x1f0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2207      	movs	r2, #7
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d1ee      	bne.n	8001cca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d015      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2204      	movs	r2, #4
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d006      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d00:	4b60      	ldr	r3, [pc, #384]	@ (8001e84 <HAL_RCC_ClockConfig+0x1f8>)
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	4b5f      	ldr	r3, [pc, #380]	@ (8001e84 <HAL_RCC_ClockConfig+0x1f8>)
 8001d06:	21e0      	movs	r1, #224	@ 0xe0
 8001d08:	01c9      	lsls	r1, r1, #7
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001e84 <HAL_RCC_ClockConfig+0x1f8>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	4a5d      	ldr	r2, [pc, #372]	@ (8001e88 <HAL_RCC_ClockConfig+0x1fc>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	0019      	movs	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	4b59      	ldr	r3, [pc, #356]	@ (8001e84 <HAL_RCC_ClockConfig+0x1f8>)
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2201      	movs	r2, #1
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d057      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d107      	bne.n	8001d44 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d34:	4b53      	ldr	r3, [pc, #332]	@ (8001e84 <HAL_RCC_ClockConfig+0x1f8>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	2380      	movs	r3, #128	@ 0x80
 8001d3a:	029b      	lsls	r3, r3, #10
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d12b      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e097      	b.n	8001e74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d107      	bne.n	8001d5c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d4c:	4b4d      	ldr	r3, [pc, #308]	@ (8001e84 <HAL_RCC_ClockConfig+0x1f8>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	2380      	movs	r3, #128	@ 0x80
 8001d52:	049b      	lsls	r3, r3, #18
 8001d54:	4013      	ands	r3, r2
 8001d56:	d11f      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e08b      	b.n	8001e74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d107      	bne.n	8001d74 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d64:	4b47      	ldr	r3, [pc, #284]	@ (8001e84 <HAL_RCC_ClockConfig+0x1f8>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	2380      	movs	r3, #128	@ 0x80
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d113      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e07f      	b.n	8001e74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b03      	cmp	r3, #3
 8001d7a:	d106      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d7c:	4b41      	ldr	r3, [pc, #260]	@ (8001e84 <HAL_RCC_ClockConfig+0x1f8>)
 8001d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d80:	2202      	movs	r2, #2
 8001d82:	4013      	ands	r3, r2
 8001d84:	d108      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e074      	b.n	8001e74 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d8a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e84 <HAL_RCC_ClockConfig+0x1f8>)
 8001d8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d8e:	2202      	movs	r2, #2
 8001d90:	4013      	ands	r3, r2
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e06d      	b.n	8001e74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d98:	4b3a      	ldr	r3, [pc, #232]	@ (8001e84 <HAL_RCC_ClockConfig+0x1f8>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	4393      	bics	r3, r2
 8001da0:	0019      	movs	r1, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	4b37      	ldr	r3, [pc, #220]	@ (8001e84 <HAL_RCC_ClockConfig+0x1f8>)
 8001da8:	430a      	orrs	r2, r1
 8001daa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dac:	f7fe fede 	bl	8000b6c <HAL_GetTick>
 8001db0:	0003      	movs	r3, r0
 8001db2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db4:	e009      	b.n	8001dca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db6:	f7fe fed9 	bl	8000b6c <HAL_GetTick>
 8001dba:	0002      	movs	r2, r0
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	4a2f      	ldr	r2, [pc, #188]	@ (8001e80 <HAL_RCC_ClockConfig+0x1f4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e054      	b.n	8001e74 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dca:	4b2e      	ldr	r3, [pc, #184]	@ (8001e84 <HAL_RCC_ClockConfig+0x1f8>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2238      	movs	r2, #56	@ 0x38
 8001dd0:	401a      	ands	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d1ec      	bne.n	8001db6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ddc:	4b27      	ldr	r3, [pc, #156]	@ (8001e7c <HAL_RCC_ClockConfig+0x1f0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2207      	movs	r2, #7
 8001de2:	4013      	ands	r3, r2
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d21e      	bcs.n	8001e28 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dea:	4b24      	ldr	r3, [pc, #144]	@ (8001e7c <HAL_RCC_ClockConfig+0x1f0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2207      	movs	r2, #7
 8001df0:	4393      	bics	r3, r2
 8001df2:	0019      	movs	r1, r3
 8001df4:	4b21      	ldr	r3, [pc, #132]	@ (8001e7c <HAL_RCC_ClockConfig+0x1f0>)
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001dfc:	f7fe feb6 	bl	8000b6c <HAL_GetTick>
 8001e00:	0003      	movs	r3, r0
 8001e02:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e04:	e009      	b.n	8001e1a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e06:	f7fe feb1 	bl	8000b6c <HAL_GetTick>
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	4a1b      	ldr	r2, [pc, #108]	@ (8001e80 <HAL_RCC_ClockConfig+0x1f4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e02c      	b.n	8001e74 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e1a:	4b18      	ldr	r3, [pc, #96]	@ (8001e7c <HAL_RCC_ClockConfig+0x1f0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2207      	movs	r2, #7
 8001e20:	4013      	ands	r3, r2
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d1ee      	bne.n	8001e06 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d009      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e32:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <HAL_RCC_ClockConfig+0x1f8>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	4a15      	ldr	r2, [pc, #84]	@ (8001e8c <HAL_RCC_ClockConfig+0x200>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	0019      	movs	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	4b10      	ldr	r3, [pc, #64]	@ (8001e84 <HAL_RCC_ClockConfig+0x1f8>)
 8001e42:	430a      	orrs	r2, r1
 8001e44:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e46:	f000 f829 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8001e4a:	0001      	movs	r1, r0
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e84 <HAL_RCC_ClockConfig+0x1f8>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	0a1b      	lsrs	r3, r3, #8
 8001e52:	220f      	movs	r2, #15
 8001e54:	401a      	ands	r2, r3
 8001e56:	4b0e      	ldr	r3, [pc, #56]	@ (8001e90 <HAL_RCC_ClockConfig+0x204>)
 8001e58:	0092      	lsls	r2, r2, #2
 8001e5a:	58d3      	ldr	r3, [r2, r3]
 8001e5c:	221f      	movs	r2, #31
 8001e5e:	4013      	ands	r3, r2
 8001e60:	000a      	movs	r2, r1
 8001e62:	40da      	lsrs	r2, r3
 8001e64:	4b0b      	ldr	r3, [pc, #44]	@ (8001e94 <HAL_RCC_ClockConfig+0x208>)
 8001e66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e68:	4b0b      	ldr	r3, [pc, #44]	@ (8001e98 <HAL_RCC_ClockConfig+0x20c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f7fe fe21 	bl	8000ab4 <HAL_InitTick>
 8001e72:	0003      	movs	r3, r0
}
 8001e74:	0018      	movs	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b004      	add	sp, #16
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40022000 	.word	0x40022000
 8001e80:	00001388 	.word	0x00001388
 8001e84:	40021000 	.word	0x40021000
 8001e88:	fffff0ff 	.word	0xfffff0ff
 8001e8c:	ffff8fff 	.word	0xffff8fff
 8001e90:	08003900 	.word	0x08003900
 8001e94:	20000000 	.word	0x20000000
 8001e98:	20000004 	.word	0x20000004

08001e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ea2:	4b3c      	ldr	r3, [pc, #240]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2238      	movs	r2, #56	@ 0x38
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d10f      	bne.n	8001ecc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001eac:	4b39      	ldr	r3, [pc, #228]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	0adb      	lsrs	r3, r3, #11
 8001eb2:	2207      	movs	r2, #7
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	409a      	lsls	r2, r3
 8001eba:	0013      	movs	r3, r2
 8001ebc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001ebe:	6839      	ldr	r1, [r7, #0]
 8001ec0:	4835      	ldr	r0, [pc, #212]	@ (8001f98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ec2:	f7fe f91d 	bl	8000100 <__udivsi3>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	e05d      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ecc:	4b31      	ldr	r3, [pc, #196]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2238      	movs	r2, #56	@ 0x38
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d102      	bne.n	8001ede <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ed8:	4b30      	ldr	r3, [pc, #192]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x100>)
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	e054      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ede:	4b2d      	ldr	r3, [pc, #180]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2238      	movs	r2, #56	@ 0x38
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b10      	cmp	r3, #16
 8001ee8:	d138      	bne.n	8001f5c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001eea:	4b2a      	ldr	r3, [pc, #168]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	2203      	movs	r2, #3
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ef4:	4b27      	ldr	r3, [pc, #156]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	2207      	movs	r2, #7
 8001efc:	4013      	ands	r3, r2
 8001efe:	3301      	adds	r3, #1
 8001f00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d10d      	bne.n	8001f24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f08:	68b9      	ldr	r1, [r7, #8]
 8001f0a:	4824      	ldr	r0, [pc, #144]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x100>)
 8001f0c:	f7fe f8f8 	bl	8000100 <__udivsi3>
 8001f10:	0003      	movs	r3, r0
 8001f12:	0019      	movs	r1, r3
 8001f14:	4b1f      	ldr	r3, [pc, #124]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	227f      	movs	r2, #127	@ 0x7f
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	434b      	muls	r3, r1
 8001f20:	617b      	str	r3, [r7, #20]
        break;
 8001f22:	e00d      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f24:	68b9      	ldr	r1, [r7, #8]
 8001f26:	481c      	ldr	r0, [pc, #112]	@ (8001f98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f28:	f7fe f8ea 	bl	8000100 <__udivsi3>
 8001f2c:	0003      	movs	r3, r0
 8001f2e:	0019      	movs	r1, r3
 8001f30:	4b18      	ldr	r3, [pc, #96]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	227f      	movs	r2, #127	@ 0x7f
 8001f38:	4013      	ands	r3, r2
 8001f3a:	434b      	muls	r3, r1
 8001f3c:	617b      	str	r3, [r7, #20]
        break;
 8001f3e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f40:	4b14      	ldr	r3, [pc, #80]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	0f5b      	lsrs	r3, r3, #29
 8001f46:	2207      	movs	r2, #7
 8001f48:	4013      	ands	r3, r2
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	6978      	ldr	r0, [r7, #20]
 8001f52:	f7fe f8d5 	bl	8000100 <__udivsi3>
 8001f56:	0003      	movs	r3, r0
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	e015      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	2238      	movs	r2, #56	@ 0x38
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b20      	cmp	r3, #32
 8001f66:	d103      	bne.n	8001f70 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f68:	2380      	movs	r3, #128	@ 0x80
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	e00b      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f70:	4b08      	ldr	r3, [pc, #32]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2238      	movs	r2, #56	@ 0x38
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b18      	cmp	r3, #24
 8001f7a:	d103      	bne.n	8001f84 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f7c:	23fa      	movs	r3, #250	@ 0xfa
 8001f7e:	01db      	lsls	r3, r3, #7
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	e001      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f88:	693b      	ldr	r3, [r7, #16]
}
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	b006      	add	sp, #24
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	46c0      	nop			@ (mov r8, r8)
 8001f94:	40021000 	.word	0x40021000
 8001f98:	00f42400 	.word	0x00f42400
 8001f9c:	007a1200 	.word	0x007a1200

08001fa0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa4:	4b02      	ldr	r3, [pc, #8]	@ (8001fb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
}
 8001fa8:	0018      	movs	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	46c0      	nop			@ (mov r8, r8)
 8001fb0:	20000000 	.word	0x20000000

08001fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb4:	b5b0      	push	{r4, r5, r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001fb8:	f7ff fff2 	bl	8001fa0 <HAL_RCC_GetHCLKFreq>
 8001fbc:	0004      	movs	r4, r0
 8001fbe:	f7ff fb49 	bl	8001654 <LL_RCC_GetAPB1Prescaler>
 8001fc2:	0003      	movs	r3, r0
 8001fc4:	0b1a      	lsrs	r2, r3, #12
 8001fc6:	4b05      	ldr	r3, [pc, #20]	@ (8001fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fc8:	0092      	lsls	r2, r2, #2
 8001fca:	58d3      	ldr	r3, [r2, r3]
 8001fcc:	221f      	movs	r2, #31
 8001fce:	4013      	ands	r3, r2
 8001fd0:	40dc      	lsrs	r4, r3
 8001fd2:	0023      	movs	r3, r4
}
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fda:	46c0      	nop			@ (mov r8, r8)
 8001fdc:	08003940 	.word	0x08003940

08001fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001fe8:	2313      	movs	r3, #19
 8001fea:	18fb      	adds	r3, r7, r3
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ff0:	2312      	movs	r3, #18
 8001ff2:	18fb      	adds	r3, r7, r3
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	2380      	movs	r3, #128	@ 0x80
 8001ffe:	029b      	lsls	r3, r3, #10
 8002000:	4013      	ands	r3, r2
 8002002:	d100      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002004:	e0a3      	b.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002006:	2011      	movs	r0, #17
 8002008:	183b      	adds	r3, r7, r0
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800200e:	4b7f      	ldr	r3, [pc, #508]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002010:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002012:	2380      	movs	r3, #128	@ 0x80
 8002014:	055b      	lsls	r3, r3, #21
 8002016:	4013      	ands	r3, r2
 8002018:	d110      	bne.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800201a:	4b7c      	ldr	r3, [pc, #496]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800201c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800201e:	4b7b      	ldr	r3, [pc, #492]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002020:	2180      	movs	r1, #128	@ 0x80
 8002022:	0549      	lsls	r1, r1, #21
 8002024:	430a      	orrs	r2, r1
 8002026:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002028:	4b78      	ldr	r3, [pc, #480]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800202a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800202c:	2380      	movs	r3, #128	@ 0x80
 800202e:	055b      	lsls	r3, r3, #21
 8002030:	4013      	ands	r3, r2
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002036:	183b      	adds	r3, r7, r0
 8002038:	2201      	movs	r2, #1
 800203a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800203c:	4b74      	ldr	r3, [pc, #464]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b73      	ldr	r3, [pc, #460]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002042:	2180      	movs	r1, #128	@ 0x80
 8002044:	0049      	lsls	r1, r1, #1
 8002046:	430a      	orrs	r2, r1
 8002048:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800204a:	f7fe fd8f 	bl	8000b6c <HAL_GetTick>
 800204e:	0003      	movs	r3, r0
 8002050:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002052:	e00b      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002054:	f7fe fd8a 	bl	8000b6c <HAL_GetTick>
 8002058:	0002      	movs	r2, r0
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d904      	bls.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002062:	2313      	movs	r3, #19
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	2203      	movs	r2, #3
 8002068:	701a      	strb	r2, [r3, #0]
        break;
 800206a:	e005      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800206c:	4b68      	ldr	r3, [pc, #416]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	2380      	movs	r3, #128	@ 0x80
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	4013      	ands	r3, r2
 8002076:	d0ed      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002078:	2313      	movs	r3, #19
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d154      	bne.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002082:	4b62      	ldr	r3, [pc, #392]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002084:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002086:	23c0      	movs	r3, #192	@ 0xc0
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4013      	ands	r3, r2
 800208c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d019      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	429a      	cmp	r2, r3
 800209c:	d014      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800209e:	4b5b      	ldr	r3, [pc, #364]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a2:	4a5c      	ldr	r2, [pc, #368]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020a8:	4b58      	ldr	r3, [pc, #352]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020ac:	4b57      	ldr	r3, [pc, #348]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020ae:	2180      	movs	r1, #128	@ 0x80
 80020b0:	0249      	lsls	r1, r1, #9
 80020b2:	430a      	orrs	r2, r1
 80020b4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020b6:	4b55      	ldr	r3, [pc, #340]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020ba:	4b54      	ldr	r3, [pc, #336]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020bc:	4956      	ldr	r1, [pc, #344]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80020be:	400a      	ands	r2, r1
 80020c0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020c2:	4b52      	ldr	r3, [pc, #328]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	2201      	movs	r2, #1
 80020cc:	4013      	ands	r3, r2
 80020ce:	d016      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d0:	f7fe fd4c 	bl	8000b6c <HAL_GetTick>
 80020d4:	0003      	movs	r3, r0
 80020d6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d8:	e00c      	b.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020da:	f7fe fd47 	bl	8000b6c <HAL_GetTick>
 80020de:	0002      	movs	r2, r0
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	4a4d      	ldr	r2, [pc, #308]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d904      	bls.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80020ea:	2313      	movs	r3, #19
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	2203      	movs	r2, #3
 80020f0:	701a      	strb	r2, [r3, #0]
            break;
 80020f2:	e004      	b.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020f4:	4b45      	ldr	r3, [pc, #276]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f8:	2202      	movs	r2, #2
 80020fa:	4013      	ands	r3, r2
 80020fc:	d0ed      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80020fe:	2313      	movs	r3, #19
 8002100:	18fb      	adds	r3, r7, r3
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10a      	bne.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002108:	4b40      	ldr	r3, [pc, #256]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800210a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210c:	4a41      	ldr	r2, [pc, #260]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800210e:	4013      	ands	r3, r2
 8002110:	0019      	movs	r1, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695a      	ldr	r2, [r3, #20]
 8002116:	4b3d      	ldr	r3, [pc, #244]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002118:	430a      	orrs	r2, r1
 800211a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800211c:	e00c      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800211e:	2312      	movs	r3, #18
 8002120:	18fb      	adds	r3, r7, r3
 8002122:	2213      	movs	r2, #19
 8002124:	18ba      	adds	r2, r7, r2
 8002126:	7812      	ldrb	r2, [r2, #0]
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	e005      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800212c:	2312      	movs	r3, #18
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	2213      	movs	r2, #19
 8002132:	18ba      	adds	r2, r7, r2
 8002134:	7812      	ldrb	r2, [r2, #0]
 8002136:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002138:	2311      	movs	r3, #17
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d105      	bne.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002142:	4b32      	ldr	r3, [pc, #200]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002144:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002146:	4b31      	ldr	r3, [pc, #196]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002148:	4935      	ldr	r1, [pc, #212]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800214a:	400a      	ands	r2, r1
 800214c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2201      	movs	r2, #1
 8002154:	4013      	ands	r3, r2
 8002156:	d009      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002158:	4b2c      	ldr	r3, [pc, #176]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800215a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800215c:	2203      	movs	r2, #3
 800215e:	4393      	bics	r3, r2
 8002160:	0019      	movs	r1, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	4b29      	ldr	r3, [pc, #164]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002168:	430a      	orrs	r2, r1
 800216a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2220      	movs	r2, #32
 8002172:	4013      	ands	r3, r2
 8002174:	d009      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002176:	4b25      	ldr	r3, [pc, #148]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800217a:	4a2a      	ldr	r2, [pc, #168]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800217c:	4013      	ands	r3, r2
 800217e:	0019      	movs	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	4b21      	ldr	r3, [pc, #132]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002186:	430a      	orrs	r2, r1
 8002188:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	2380      	movs	r3, #128	@ 0x80
 8002190:	01db      	lsls	r3, r3, #7
 8002192:	4013      	ands	r3, r2
 8002194:	d015      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002196:	4b1d      	ldr	r3, [pc, #116]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	0899      	lsrs	r1, r3, #2
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691a      	ldr	r2, [r3, #16]
 80021a2:	4b1a      	ldr	r3, [pc, #104]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80021a4:	430a      	orrs	r2, r1
 80021a6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	2380      	movs	r3, #128	@ 0x80
 80021ae:	05db      	lsls	r3, r3, #23
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d106      	bne.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80021b4:	4b15      	ldr	r3, [pc, #84]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	4b14      	ldr	r3, [pc, #80]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80021ba:	2180      	movs	r1, #128	@ 0x80
 80021bc:	0249      	lsls	r1, r1, #9
 80021be:	430a      	orrs	r2, r1
 80021c0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	2380      	movs	r3, #128	@ 0x80
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	4013      	ands	r3, r2
 80021cc:	d016      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80021ce:	4b0f      	ldr	r3, [pc, #60]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80021d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d2:	4a15      	ldr	r2, [pc, #84]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	0019      	movs	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	4b0b      	ldr	r3, [pc, #44]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80021de:	430a      	orrs	r2, r1
 80021e0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	2380      	movs	r3, #128	@ 0x80
 80021e8:	01db      	lsls	r3, r3, #7
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d106      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80021ee:	4b07      	ldr	r3, [pc, #28]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80021f4:	2180      	movs	r1, #128	@ 0x80
 80021f6:	0249      	lsls	r1, r1, #9
 80021f8:	430a      	orrs	r2, r1
 80021fa:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80021fc:	2312      	movs	r3, #18
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	781b      	ldrb	r3, [r3, #0]
}
 8002202:	0018      	movs	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	b006      	add	sp, #24
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			@ (mov r8, r8)
 800220c:	40021000 	.word	0x40021000
 8002210:	40007000 	.word	0x40007000
 8002214:	fffffcff 	.word	0xfffffcff
 8002218:	fffeffff 	.word	0xfffeffff
 800221c:	00001388 	.word	0x00001388
 8002220:	efffffff 	.word	0xefffffff
 8002224:	ffffcfff 	.word	0xffffcfff
 8002228:	ffff3fff 	.word	0xffff3fff

0800222c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e04a      	b.n	80022d4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	223d      	movs	r2, #61	@ 0x3d
 8002242:	5c9b      	ldrb	r3, [r3, r2]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d107      	bne.n	800225a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	223c      	movs	r2, #60	@ 0x3c
 800224e:	2100      	movs	r1, #0
 8002250:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	0018      	movs	r0, r3
 8002256:	f7fe fae1 	bl	800081c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	223d      	movs	r2, #61	@ 0x3d
 800225e:	2102      	movs	r1, #2
 8002260:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3304      	adds	r3, #4
 800226a:	0019      	movs	r1, r3
 800226c:	0010      	movs	r0, r2
 800226e:	f000 fa6b 	bl	8002748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2248      	movs	r2, #72	@ 0x48
 8002276:	2101      	movs	r1, #1
 8002278:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	223e      	movs	r2, #62	@ 0x3e
 800227e:	2101      	movs	r1, #1
 8002280:	5499      	strb	r1, [r3, r2]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	223f      	movs	r2, #63	@ 0x3f
 8002286:	2101      	movs	r1, #1
 8002288:	5499      	strb	r1, [r3, r2]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2240      	movs	r2, #64	@ 0x40
 800228e:	2101      	movs	r1, #1
 8002290:	5499      	strb	r1, [r3, r2]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2241      	movs	r2, #65	@ 0x41
 8002296:	2101      	movs	r1, #1
 8002298:	5499      	strb	r1, [r3, r2]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2242      	movs	r2, #66	@ 0x42
 800229e:	2101      	movs	r1, #1
 80022a0:	5499      	strb	r1, [r3, r2]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2243      	movs	r2, #67	@ 0x43
 80022a6:	2101      	movs	r1, #1
 80022a8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2244      	movs	r2, #68	@ 0x44
 80022ae:	2101      	movs	r1, #1
 80022b0:	5499      	strb	r1, [r3, r2]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2245      	movs	r2, #69	@ 0x45
 80022b6:	2101      	movs	r1, #1
 80022b8:	5499      	strb	r1, [r3, r2]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2246      	movs	r2, #70	@ 0x46
 80022be:	2101      	movs	r1, #1
 80022c0:	5499      	strb	r1, [r3, r2]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2247      	movs	r2, #71	@ 0x47
 80022c6:	2101      	movs	r1, #1
 80022c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	223d      	movs	r2, #61	@ 0x3d
 80022ce:	2101      	movs	r1, #1
 80022d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	0018      	movs	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b002      	add	sp, #8
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e04a      	b.n	8002384 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	223d      	movs	r2, #61	@ 0x3d
 80022f2:	5c9b      	ldrb	r3, [r3, r2]
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d107      	bne.n	800230a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	223c      	movs	r2, #60	@ 0x3c
 80022fe:	2100      	movs	r1, #0
 8002300:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	0018      	movs	r0, r3
 8002306:	f000 f841 	bl	800238c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	223d      	movs	r2, #61	@ 0x3d
 800230e:	2102      	movs	r1, #2
 8002310:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3304      	adds	r3, #4
 800231a:	0019      	movs	r1, r3
 800231c:	0010      	movs	r0, r2
 800231e:	f000 fa13 	bl	8002748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2248      	movs	r2, #72	@ 0x48
 8002326:	2101      	movs	r1, #1
 8002328:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	223e      	movs	r2, #62	@ 0x3e
 800232e:	2101      	movs	r1, #1
 8002330:	5499      	strb	r1, [r3, r2]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	223f      	movs	r2, #63	@ 0x3f
 8002336:	2101      	movs	r1, #1
 8002338:	5499      	strb	r1, [r3, r2]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2240      	movs	r2, #64	@ 0x40
 800233e:	2101      	movs	r1, #1
 8002340:	5499      	strb	r1, [r3, r2]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2241      	movs	r2, #65	@ 0x41
 8002346:	2101      	movs	r1, #1
 8002348:	5499      	strb	r1, [r3, r2]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2242      	movs	r2, #66	@ 0x42
 800234e:	2101      	movs	r1, #1
 8002350:	5499      	strb	r1, [r3, r2]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2243      	movs	r2, #67	@ 0x43
 8002356:	2101      	movs	r1, #1
 8002358:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2244      	movs	r2, #68	@ 0x44
 800235e:	2101      	movs	r1, #1
 8002360:	5499      	strb	r1, [r3, r2]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2245      	movs	r2, #69	@ 0x45
 8002366:	2101      	movs	r1, #1
 8002368:	5499      	strb	r1, [r3, r2]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2246      	movs	r2, #70	@ 0x46
 800236e:	2101      	movs	r1, #1
 8002370:	5499      	strb	r1, [r3, r2]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2247      	movs	r2, #71	@ 0x47
 8002376:	2101      	movs	r1, #1
 8002378:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	223d      	movs	r2, #61	@ 0x3d
 800237e:	2101      	movs	r1, #1
 8002380:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	0018      	movs	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	b002      	add	sp, #8
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002394:	46c0      	nop			@ (mov r8, r8)
 8002396:	46bd      	mov	sp, r7
 8002398:	b002      	add	sp, #8
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023a8:	2317      	movs	r3, #23
 80023aa:	18fb      	adds	r3, r7, r3
 80023ac:	2200      	movs	r2, #0
 80023ae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	223c      	movs	r2, #60	@ 0x3c
 80023b4:	5c9b      	ldrb	r3, [r3, r2]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d101      	bne.n	80023be <HAL_TIM_PWM_ConfigChannel+0x22>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e0e5      	b.n	800258a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	223c      	movs	r2, #60	@ 0x3c
 80023c2:	2101      	movs	r1, #1
 80023c4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b14      	cmp	r3, #20
 80023ca:	d900      	bls.n	80023ce <HAL_TIM_PWM_ConfigChannel+0x32>
 80023cc:	e0d1      	b.n	8002572 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	009a      	lsls	r2, r3, #2
 80023d2:	4b70      	ldr	r3, [pc, #448]	@ (8002594 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80023d4:	18d3      	adds	r3, r2, r3
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	0011      	movs	r1, r2
 80023e2:	0018      	movs	r0, r3
 80023e4:	f000 fa2a 	bl	800283c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2108      	movs	r1, #8
 80023f4:	430a      	orrs	r2, r1
 80023f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2104      	movs	r1, #4
 8002404:	438a      	bics	r2, r1
 8002406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6999      	ldr	r1, [r3, #24]
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	691a      	ldr	r2, [r3, #16]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	619a      	str	r2, [r3, #24]
      break;
 800241a:	e0af      	b.n	800257c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	0011      	movs	r1, r2
 8002424:	0018      	movs	r0, r3
 8002426:	f000 fa89 	bl	800293c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699a      	ldr	r2, [r3, #24]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2180      	movs	r1, #128	@ 0x80
 8002436:	0109      	lsls	r1, r1, #4
 8002438:	430a      	orrs	r2, r1
 800243a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4954      	ldr	r1, [pc, #336]	@ (8002598 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002448:	400a      	ands	r2, r1
 800244a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6999      	ldr	r1, [r3, #24]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	021a      	lsls	r2, r3, #8
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	619a      	str	r2, [r3, #24]
      break;
 8002460:	e08c      	b.n	800257c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	0011      	movs	r1, r2
 800246a:	0018      	movs	r0, r3
 800246c:	f000 fae4 	bl	8002a38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	69da      	ldr	r2, [r3, #28]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2108      	movs	r1, #8
 800247c:	430a      	orrs	r2, r1
 800247e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	69da      	ldr	r2, [r3, #28]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2104      	movs	r1, #4
 800248c:	438a      	bics	r2, r1
 800248e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	69d9      	ldr	r1, [r3, #28]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	61da      	str	r2, [r3, #28]
      break;
 80024a2:	e06b      	b.n	800257c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	0011      	movs	r1, r2
 80024ac:	0018      	movs	r0, r3
 80024ae:	f000 fb45 	bl	8002b3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	69da      	ldr	r2, [r3, #28]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2180      	movs	r1, #128	@ 0x80
 80024be:	0109      	lsls	r1, r1, #4
 80024c0:	430a      	orrs	r2, r1
 80024c2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	69da      	ldr	r2, [r3, #28]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4932      	ldr	r1, [pc, #200]	@ (8002598 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80024d0:	400a      	ands	r2, r1
 80024d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	69d9      	ldr	r1, [r3, #28]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	021a      	lsls	r2, r3, #8
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	61da      	str	r2, [r3, #28]
      break;
 80024e8:	e048      	b.n	800257c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	0011      	movs	r1, r2
 80024f2:	0018      	movs	r0, r3
 80024f4:	f000 fb86 	bl	8002c04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2108      	movs	r1, #8
 8002504:	430a      	orrs	r2, r1
 8002506:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2104      	movs	r1, #4
 8002514:	438a      	bics	r2, r1
 8002516:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	691a      	ldr	r2, [r3, #16]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800252a:	e027      	b.n	800257c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	0011      	movs	r1, r2
 8002534:	0018      	movs	r0, r3
 8002536:	f000 fbbf 	bl	8002cb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2180      	movs	r1, #128	@ 0x80
 8002546:	0109      	lsls	r1, r1, #4
 8002548:	430a      	orrs	r2, r1
 800254a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4910      	ldr	r1, [pc, #64]	@ (8002598 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002558:	400a      	ands	r2, r1
 800255a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	021a      	lsls	r2, r3, #8
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002570:	e004      	b.n	800257c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002572:	2317      	movs	r3, #23
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
      break;
 800257a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	223c      	movs	r2, #60	@ 0x3c
 8002580:	2100      	movs	r1, #0
 8002582:	5499      	strb	r1, [r3, r2]

  return status;
 8002584:	2317      	movs	r3, #23
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	781b      	ldrb	r3, [r3, #0]
}
 800258a:	0018      	movs	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	b006      	add	sp, #24
 8002590:	bd80      	pop	{r7, pc}
 8002592:	46c0      	nop			@ (mov r8, r8)
 8002594:	08003960 	.word	0x08003960
 8002598:	fffffbff 	.word	0xfffffbff

0800259c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025a6:	230f      	movs	r3, #15
 80025a8:	18fb      	adds	r3, r7, r3
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	223c      	movs	r2, #60	@ 0x3c
 80025b2:	5c9b      	ldrb	r3, [r3, r2]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d101      	bne.n	80025bc <HAL_TIM_ConfigClockSource+0x20>
 80025b8:	2302      	movs	r3, #2
 80025ba:	e0bc      	b.n	8002736 <HAL_TIM_ConfigClockSource+0x19a>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	223c      	movs	r2, #60	@ 0x3c
 80025c0:	2101      	movs	r1, #1
 80025c2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	223d      	movs	r2, #61	@ 0x3d
 80025c8:	2102      	movs	r1, #2
 80025ca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	4a5a      	ldr	r2, [pc, #360]	@ (8002740 <HAL_TIM_ConfigClockSource+0x1a4>)
 80025d8:	4013      	ands	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4a59      	ldr	r2, [pc, #356]	@ (8002744 <HAL_TIM_ConfigClockSource+0x1a8>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2280      	movs	r2, #128	@ 0x80
 80025f2:	0192      	lsls	r2, r2, #6
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d040      	beq.n	800267a <HAL_TIM_ConfigClockSource+0xde>
 80025f8:	2280      	movs	r2, #128	@ 0x80
 80025fa:	0192      	lsls	r2, r2, #6
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d900      	bls.n	8002602 <HAL_TIM_ConfigClockSource+0x66>
 8002600:	e088      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 8002602:	2280      	movs	r2, #128	@ 0x80
 8002604:	0152      	lsls	r2, r2, #5
 8002606:	4293      	cmp	r3, r2
 8002608:	d100      	bne.n	800260c <HAL_TIM_ConfigClockSource+0x70>
 800260a:	e088      	b.n	800271e <HAL_TIM_ConfigClockSource+0x182>
 800260c:	2280      	movs	r2, #128	@ 0x80
 800260e:	0152      	lsls	r2, r2, #5
 8002610:	4293      	cmp	r3, r2
 8002612:	d900      	bls.n	8002616 <HAL_TIM_ConfigClockSource+0x7a>
 8002614:	e07e      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 8002616:	2b70      	cmp	r3, #112	@ 0x70
 8002618:	d018      	beq.n	800264c <HAL_TIM_ConfigClockSource+0xb0>
 800261a:	d900      	bls.n	800261e <HAL_TIM_ConfigClockSource+0x82>
 800261c:	e07a      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 800261e:	2b60      	cmp	r3, #96	@ 0x60
 8002620:	d04f      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x126>
 8002622:	d900      	bls.n	8002626 <HAL_TIM_ConfigClockSource+0x8a>
 8002624:	e076      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 8002626:	2b50      	cmp	r3, #80	@ 0x50
 8002628:	d03b      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0x106>
 800262a:	d900      	bls.n	800262e <HAL_TIM_ConfigClockSource+0x92>
 800262c:	e072      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 800262e:	2b40      	cmp	r3, #64	@ 0x40
 8002630:	d057      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0x146>
 8002632:	d900      	bls.n	8002636 <HAL_TIM_ConfigClockSource+0x9a>
 8002634:	e06e      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 8002636:	2b30      	cmp	r3, #48	@ 0x30
 8002638:	d063      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x166>
 800263a:	d86b      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 800263c:	2b20      	cmp	r3, #32
 800263e:	d060      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x166>
 8002640:	d868      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 8002642:	2b00      	cmp	r3, #0
 8002644:	d05d      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x166>
 8002646:	2b10      	cmp	r3, #16
 8002648:	d05b      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x166>
 800264a:	e063      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800265c:	f000 fc06 	bl	8002e6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2277      	movs	r2, #119	@ 0x77
 800266c:	4313      	orrs	r3, r2
 800266e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	609a      	str	r2, [r3, #8]
      break;
 8002678:	e052      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800268a:	f000 fbef 	bl	8002e6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2180      	movs	r1, #128	@ 0x80
 800269a:	01c9      	lsls	r1, r1, #7
 800269c:	430a      	orrs	r2, r1
 800269e:	609a      	str	r2, [r3, #8]
      break;
 80026a0:	e03e      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ae:	001a      	movs	r2, r3
 80026b0:	f000 fb60 	bl	8002d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2150      	movs	r1, #80	@ 0x50
 80026ba:	0018      	movs	r0, r3
 80026bc:	f000 fbba 	bl	8002e34 <TIM_ITRx_SetConfig>
      break;
 80026c0:	e02e      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026ce:	001a      	movs	r2, r3
 80026d0:	f000 fb7e 	bl	8002dd0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2160      	movs	r1, #96	@ 0x60
 80026da:	0018      	movs	r0, r3
 80026dc:	f000 fbaa 	bl	8002e34 <TIM_ITRx_SetConfig>
      break;
 80026e0:	e01e      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ee:	001a      	movs	r2, r3
 80026f0:	f000 fb40 	bl	8002d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2140      	movs	r1, #64	@ 0x40
 80026fa:	0018      	movs	r0, r3
 80026fc:	f000 fb9a 	bl	8002e34 <TIM_ITRx_SetConfig>
      break;
 8002700:	e00e      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	0019      	movs	r1, r3
 800270c:	0010      	movs	r0, r2
 800270e:	f000 fb91 	bl	8002e34 <TIM_ITRx_SetConfig>
      break;
 8002712:	e005      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002714:	230f      	movs	r3, #15
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	2201      	movs	r2, #1
 800271a:	701a      	strb	r2, [r3, #0]
      break;
 800271c:	e000      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800271e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	223d      	movs	r2, #61	@ 0x3d
 8002724:	2101      	movs	r1, #1
 8002726:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	223c      	movs	r2, #60	@ 0x3c
 800272c:	2100      	movs	r1, #0
 800272e:	5499      	strb	r1, [r3, r2]

  return status;
 8002730:	230f      	movs	r3, #15
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	781b      	ldrb	r3, [r3, #0]
}
 8002736:	0018      	movs	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	b004      	add	sp, #16
 800273c:	bd80      	pop	{r7, pc}
 800273e:	46c0      	nop			@ (mov r8, r8)
 8002740:	ffceff88 	.word	0xffceff88
 8002744:	ffff00ff 	.word	0xffff00ff

08002748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a32      	ldr	r2, [pc, #200]	@ (8002824 <TIM_Base_SetConfig+0xdc>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d003      	beq.n	8002768 <TIM_Base_SetConfig+0x20>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a31      	ldr	r2, [pc, #196]	@ (8002828 <TIM_Base_SetConfig+0xe0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d108      	bne.n	800277a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2270      	movs	r2, #112	@ 0x70
 800276c:	4393      	bics	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a29      	ldr	r2, [pc, #164]	@ (8002824 <TIM_Base_SetConfig+0xdc>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d00f      	beq.n	80027a2 <TIM_Base_SetConfig+0x5a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a28      	ldr	r2, [pc, #160]	@ (8002828 <TIM_Base_SetConfig+0xe0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d00b      	beq.n	80027a2 <TIM_Base_SetConfig+0x5a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a27      	ldr	r2, [pc, #156]	@ (800282c <TIM_Base_SetConfig+0xe4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d007      	beq.n	80027a2 <TIM_Base_SetConfig+0x5a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a26      	ldr	r2, [pc, #152]	@ (8002830 <TIM_Base_SetConfig+0xe8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d003      	beq.n	80027a2 <TIM_Base_SetConfig+0x5a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a25      	ldr	r2, [pc, #148]	@ (8002834 <TIM_Base_SetConfig+0xec>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d108      	bne.n	80027b4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4a24      	ldr	r2, [pc, #144]	@ (8002838 <TIM_Base_SetConfig+0xf0>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2280      	movs	r2, #128	@ 0x80
 80027b8:	4393      	bics	r3, r2
 80027ba:	001a      	movs	r2, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a11      	ldr	r2, [pc, #68]	@ (8002824 <TIM_Base_SetConfig+0xdc>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d007      	beq.n	80027f2 <TIM_Base_SetConfig+0xaa>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a12      	ldr	r2, [pc, #72]	@ (8002830 <TIM_Base_SetConfig+0xe8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d003      	beq.n	80027f2 <TIM_Base_SetConfig+0xaa>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a11      	ldr	r2, [pc, #68]	@ (8002834 <TIM_Base_SetConfig+0xec>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d103      	bne.n	80027fa <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	691a      	ldr	r2, [r3, #16]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	2201      	movs	r2, #1
 8002806:	4013      	ands	r3, r2
 8002808:	2b01      	cmp	r3, #1
 800280a:	d106      	bne.n	800281a <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	2201      	movs	r2, #1
 8002812:	4393      	bics	r3, r2
 8002814:	001a      	movs	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	611a      	str	r2, [r3, #16]
  }
}
 800281a:	46c0      	nop			@ (mov r8, r8)
 800281c:	46bd      	mov	sp, r7
 800281e:	b004      	add	sp, #16
 8002820:	bd80      	pop	{r7, pc}
 8002822:	46c0      	nop			@ (mov r8, r8)
 8002824:	40012c00 	.word	0x40012c00
 8002828:	40000400 	.word	0x40000400
 800282c:	40002000 	.word	0x40002000
 8002830:	40014400 	.word	0x40014400
 8002834:	40014800 	.word	0x40014800
 8002838:	fffffcff 	.word	0xfffffcff

0800283c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	2201      	movs	r2, #1
 8002852:	4393      	bics	r3, r2
 8002854:	001a      	movs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4a2e      	ldr	r2, [pc, #184]	@ (8002924 <TIM_OC1_SetConfig+0xe8>)
 800286a:	4013      	ands	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2203      	movs	r2, #3
 8002872:	4393      	bics	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4313      	orrs	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	2202      	movs	r2, #2
 8002884:	4393      	bics	r3, r2
 8002886:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a24      	ldr	r2, [pc, #144]	@ (8002928 <TIM_OC1_SetConfig+0xec>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d007      	beq.n	80028aa <TIM_OC1_SetConfig+0x6e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a23      	ldr	r2, [pc, #140]	@ (800292c <TIM_OC1_SetConfig+0xf0>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d003      	beq.n	80028aa <TIM_OC1_SetConfig+0x6e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a22      	ldr	r2, [pc, #136]	@ (8002930 <TIM_OC1_SetConfig+0xf4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d10c      	bne.n	80028c4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2208      	movs	r2, #8
 80028ae:	4393      	bics	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2204      	movs	r2, #4
 80028c0:	4393      	bics	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a18      	ldr	r2, [pc, #96]	@ (8002928 <TIM_OC1_SetConfig+0xec>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d007      	beq.n	80028dc <TIM_OC1_SetConfig+0xa0>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a17      	ldr	r2, [pc, #92]	@ (800292c <TIM_OC1_SetConfig+0xf0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d003      	beq.n	80028dc <TIM_OC1_SetConfig+0xa0>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a16      	ldr	r2, [pc, #88]	@ (8002930 <TIM_OC1_SetConfig+0xf4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d111      	bne.n	8002900 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4a15      	ldr	r2, [pc, #84]	@ (8002934 <TIM_OC1_SetConfig+0xf8>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4a14      	ldr	r2, [pc, #80]	@ (8002938 <TIM_OC1_SetConfig+0xfc>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	621a      	str	r2, [r3, #32]
}
 800291a:	46c0      	nop			@ (mov r8, r8)
 800291c:	46bd      	mov	sp, r7
 800291e:	b006      	add	sp, #24
 8002920:	bd80      	pop	{r7, pc}
 8002922:	46c0      	nop			@ (mov r8, r8)
 8002924:	fffeff8f 	.word	0xfffeff8f
 8002928:	40012c00 	.word	0x40012c00
 800292c:	40014400 	.word	0x40014400
 8002930:	40014800 	.word	0x40014800
 8002934:	fffffeff 	.word	0xfffffeff
 8002938:	fffffdff 	.word	0xfffffdff

0800293c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	2210      	movs	r2, #16
 8002952:	4393      	bics	r3, r2
 8002954:	001a      	movs	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4a2c      	ldr	r2, [pc, #176]	@ (8002a1c <TIM_OC2_SetConfig+0xe0>)
 800296a:	4013      	ands	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4a2b      	ldr	r2, [pc, #172]	@ (8002a20 <TIM_OC2_SetConfig+0xe4>)
 8002972:	4013      	ands	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2220      	movs	r2, #32
 8002986:	4393      	bics	r3, r2
 8002988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	4313      	orrs	r3, r2
 8002994:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a22      	ldr	r2, [pc, #136]	@ (8002a24 <TIM_OC2_SetConfig+0xe8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d10d      	bne.n	80029ba <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2280      	movs	r2, #128	@ 0x80
 80029a2:	4393      	bics	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2240      	movs	r2, #64	@ 0x40
 80029b6:	4393      	bics	r3, r2
 80029b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a19      	ldr	r2, [pc, #100]	@ (8002a24 <TIM_OC2_SetConfig+0xe8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d007      	beq.n	80029d2 <TIM_OC2_SetConfig+0x96>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a18      	ldr	r2, [pc, #96]	@ (8002a28 <TIM_OC2_SetConfig+0xec>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d003      	beq.n	80029d2 <TIM_OC2_SetConfig+0x96>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a17      	ldr	r2, [pc, #92]	@ (8002a2c <TIM_OC2_SetConfig+0xf0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d113      	bne.n	80029fa <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4a16      	ldr	r2, [pc, #88]	@ (8002a30 <TIM_OC2_SetConfig+0xf4>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4a15      	ldr	r2, [pc, #84]	@ (8002a34 <TIM_OC2_SetConfig+0xf8>)
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	621a      	str	r2, [r3, #32]
}
 8002a14:	46c0      	nop			@ (mov r8, r8)
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b006      	add	sp, #24
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	feff8fff 	.word	0xfeff8fff
 8002a20:	fffffcff 	.word	0xfffffcff
 8002a24:	40012c00 	.word	0x40012c00
 8002a28:	40014400 	.word	0x40014400
 8002a2c:	40014800 	.word	0x40014800
 8002a30:	fffffbff 	.word	0xfffffbff
 8002a34:	fffff7ff 	.word	0xfffff7ff

08002a38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	4a31      	ldr	r2, [pc, #196]	@ (8002b14 <TIM_OC3_SetConfig+0xdc>)
 8002a4e:	401a      	ands	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4a2d      	ldr	r2, [pc, #180]	@ (8002b18 <TIM_OC3_SetConfig+0xe0>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	4393      	bics	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	4a27      	ldr	r2, [pc, #156]	@ (8002b1c <TIM_OC3_SetConfig+0xe4>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	021b      	lsls	r3, r3, #8
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a23      	ldr	r2, [pc, #140]	@ (8002b20 <TIM_OC3_SetConfig+0xe8>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d10d      	bne.n	8002ab2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	4a22      	ldr	r2, [pc, #136]	@ (8002b24 <TIM_OC3_SetConfig+0xec>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	021b      	lsls	r3, r3, #8
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	4a1e      	ldr	r2, [pc, #120]	@ (8002b28 <TIM_OC3_SetConfig+0xf0>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a1a      	ldr	r2, [pc, #104]	@ (8002b20 <TIM_OC3_SetConfig+0xe8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d007      	beq.n	8002aca <TIM_OC3_SetConfig+0x92>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a1b      	ldr	r2, [pc, #108]	@ (8002b2c <TIM_OC3_SetConfig+0xf4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d003      	beq.n	8002aca <TIM_OC3_SetConfig+0x92>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a1a      	ldr	r2, [pc, #104]	@ (8002b30 <TIM_OC3_SetConfig+0xf8>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d113      	bne.n	8002af2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4a19      	ldr	r2, [pc, #100]	@ (8002b34 <TIM_OC3_SetConfig+0xfc>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4a18      	ldr	r2, [pc, #96]	@ (8002b38 <TIM_OC3_SetConfig+0x100>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	621a      	str	r2, [r3, #32]
}
 8002b0c:	46c0      	nop			@ (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b006      	add	sp, #24
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	fffffeff 	.word	0xfffffeff
 8002b18:	fffeff8f 	.word	0xfffeff8f
 8002b1c:	fffffdff 	.word	0xfffffdff
 8002b20:	40012c00 	.word	0x40012c00
 8002b24:	fffff7ff 	.word	0xfffff7ff
 8002b28:	fffffbff 	.word	0xfffffbff
 8002b2c:	40014400 	.word	0x40014400
 8002b30:	40014800 	.word	0x40014800
 8002b34:	ffffefff 	.word	0xffffefff
 8002b38:	ffffdfff 	.word	0xffffdfff

08002b3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	4a24      	ldr	r2, [pc, #144]	@ (8002be4 <TIM_OC4_SetConfig+0xa8>)
 8002b52:	401a      	ands	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4a20      	ldr	r2, [pc, #128]	@ (8002be8 <TIM_OC4_SetConfig+0xac>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4a1f      	ldr	r2, [pc, #124]	@ (8002bec <TIM_OC4_SetConfig+0xb0>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4a1b      	ldr	r2, [pc, #108]	@ (8002bf0 <TIM_OC4_SetConfig+0xb4>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	031b      	lsls	r3, r3, #12
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a17      	ldr	r2, [pc, #92]	@ (8002bf4 <TIM_OC4_SetConfig+0xb8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d007      	beq.n	8002bac <TIM_OC4_SetConfig+0x70>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a16      	ldr	r2, [pc, #88]	@ (8002bf8 <TIM_OC4_SetConfig+0xbc>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d003      	beq.n	8002bac <TIM_OC4_SetConfig+0x70>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a15      	ldr	r2, [pc, #84]	@ (8002bfc <TIM_OC4_SetConfig+0xc0>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d109      	bne.n	8002bc0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	4a14      	ldr	r2, [pc, #80]	@ (8002c00 <TIM_OC4_SetConfig+0xc4>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	019b      	lsls	r3, r3, #6
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	621a      	str	r2, [r3, #32]
}
 8002bda:	46c0      	nop			@ (mov r8, r8)
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	b006      	add	sp, #24
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	46c0      	nop			@ (mov r8, r8)
 8002be4:	ffffefff 	.word	0xffffefff
 8002be8:	feff8fff 	.word	0xfeff8fff
 8002bec:	fffffcff 	.word	0xfffffcff
 8002bf0:	ffffdfff 	.word	0xffffdfff
 8002bf4:	40012c00 	.word	0x40012c00
 8002bf8:	40014400 	.word	0x40014400
 8002bfc:	40014800 	.word	0x40014800
 8002c00:	ffffbfff 	.word	0xffffbfff

08002c04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	4a21      	ldr	r2, [pc, #132]	@ (8002ca0 <TIM_OC5_SetConfig+0x9c>)
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ca4 <TIM_OC5_SetConfig+0xa0>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4a19      	ldr	r2, [pc, #100]	@ (8002ca8 <TIM_OC5_SetConfig+0xa4>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	041b      	lsls	r3, r3, #16
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a15      	ldr	r2, [pc, #84]	@ (8002cac <TIM_OC5_SetConfig+0xa8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d007      	beq.n	8002c6a <TIM_OC5_SetConfig+0x66>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a14      	ldr	r2, [pc, #80]	@ (8002cb0 <TIM_OC5_SetConfig+0xac>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d003      	beq.n	8002c6a <TIM_OC5_SetConfig+0x66>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a13      	ldr	r2, [pc, #76]	@ (8002cb4 <TIM_OC5_SetConfig+0xb0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d109      	bne.n	8002c7e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	4a0c      	ldr	r2, [pc, #48]	@ (8002ca0 <TIM_OC5_SetConfig+0x9c>)
 8002c6e:	4013      	ands	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	621a      	str	r2, [r3, #32]
}
 8002c98:	46c0      	nop			@ (mov r8, r8)
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	b006      	add	sp, #24
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	fffeffff 	.word	0xfffeffff
 8002ca4:	fffeff8f 	.word	0xfffeff8f
 8002ca8:	fffdffff 	.word	0xfffdffff
 8002cac:	40012c00 	.word	0x40012c00
 8002cb0:	40014400 	.word	0x40014400
 8002cb4:	40014800 	.word	0x40014800

08002cb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	4a22      	ldr	r2, [pc, #136]	@ (8002d58 <TIM_OC6_SetConfig+0xa0>)
 8002cce:	401a      	ands	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8002d5c <TIM_OC6_SetConfig+0xa4>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	021b      	lsls	r3, r3, #8
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4a1a      	ldr	r2, [pc, #104]	@ (8002d60 <TIM_OC6_SetConfig+0xa8>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	051b      	lsls	r3, r3, #20
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a16      	ldr	r2, [pc, #88]	@ (8002d64 <TIM_OC6_SetConfig+0xac>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d007      	beq.n	8002d20 <TIM_OC6_SetConfig+0x68>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a15      	ldr	r2, [pc, #84]	@ (8002d68 <TIM_OC6_SetConfig+0xb0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d003      	beq.n	8002d20 <TIM_OC6_SetConfig+0x68>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a14      	ldr	r2, [pc, #80]	@ (8002d6c <TIM_OC6_SetConfig+0xb4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d109      	bne.n	8002d34 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	4a13      	ldr	r2, [pc, #76]	@ (8002d70 <TIM_OC6_SetConfig+0xb8>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	029b      	lsls	r3, r3, #10
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	621a      	str	r2, [r3, #32]
}
 8002d4e:	46c0      	nop			@ (mov r8, r8)
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b006      	add	sp, #24
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	46c0      	nop			@ (mov r8, r8)
 8002d58:	ffefffff 	.word	0xffefffff
 8002d5c:	feff8fff 	.word	0xfeff8fff
 8002d60:	ffdfffff 	.word	0xffdfffff
 8002d64:	40012c00 	.word	0x40012c00
 8002d68:	40014400 	.word	0x40014400
 8002d6c:	40014800 	.word	0x40014800
 8002d70:	fffbffff 	.word	0xfffbffff

08002d74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	4393      	bics	r3, r2
 8002d8e:	001a      	movs	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	22f0      	movs	r2, #240	@ 0xf0
 8002d9e:	4393      	bics	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	220a      	movs	r2, #10
 8002db0:	4393      	bics	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	621a      	str	r2, [r3, #32]
}
 8002dc8:	46c0      	nop			@ (mov r8, r8)
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b006      	add	sp, #24
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	2210      	movs	r2, #16
 8002de8:	4393      	bics	r3, r2
 8002dea:	001a      	movs	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4a0d      	ldr	r2, [pc, #52]	@ (8002e30 <TIM_TI2_ConfigInputStage+0x60>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	031b      	lsls	r3, r3, #12
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	22a0      	movs	r2, #160	@ 0xa0
 8002e0c:	4393      	bics	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	621a      	str	r2, [r3, #32]
}
 8002e26:	46c0      	nop			@ (mov r8, r8)
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b006      	add	sp, #24
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	46c0      	nop			@ (mov r8, r8)
 8002e30:	ffff0fff 	.word	0xffff0fff

08002e34 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4a08      	ldr	r2, [pc, #32]	@ (8002e68 <TIM_ITRx_SetConfig+0x34>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	2207      	movs	r2, #7
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	609a      	str	r2, [r3, #8]
}
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	46bd      	mov	sp, r7
 8002e62:	b004      	add	sp, #16
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	46c0      	nop			@ (mov r8, r8)
 8002e68:	ffcfff8f 	.word	0xffcfff8f

08002e6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	4a09      	ldr	r2, [pc, #36]	@ (8002ea8 <TIM_ETR_SetConfig+0x3c>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	021a      	lsls	r2, r3, #8
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	609a      	str	r2, [r3, #8]
}
 8002ea0:	46c0      	nop			@ (mov r8, r8)
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b006      	add	sp, #24
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	ffff00ff 	.word	0xffff00ff

08002eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	223c      	movs	r2, #60	@ 0x3c
 8002eba:	5c9b      	ldrb	r3, [r3, r2]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e04a      	b.n	8002f5a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	223c      	movs	r2, #60	@ 0x3c
 8002ec8:	2101      	movs	r1, #1
 8002eca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	223d      	movs	r2, #61	@ 0x3d
 8002ed0:	2102      	movs	r1, #2
 8002ed2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a1e      	ldr	r2, [pc, #120]	@ (8002f64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d108      	bne.n	8002f00 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2270      	movs	r2, #112	@ 0x70
 8002f04:	4393      	bics	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a11      	ldr	r2, [pc, #68]	@ (8002f64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d004      	beq.n	8002f2e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a10      	ldr	r2, [pc, #64]	@ (8002f6c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d10c      	bne.n	8002f48 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2280      	movs	r2, #128	@ 0x80
 8002f32:	4393      	bics	r3, r2
 8002f34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	223d      	movs	r2, #61	@ 0x3d
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	223c      	movs	r2, #60	@ 0x3c
 8002f54:	2100      	movs	r1, #0
 8002f56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b004      	add	sp, #16
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			@ (mov r8, r8)
 8002f64:	40012c00 	.word	0x40012c00
 8002f68:	ff0fffff 	.word	0xff0fffff
 8002f6c:	40000400 	.word	0x40000400

08002f70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	223c      	movs	r2, #60	@ 0x3c
 8002f82:	5c9b      	ldrb	r3, [r3, r2]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e06f      	b.n	800306c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	223c      	movs	r2, #60	@ 0x3c
 8002f90:	2101      	movs	r1, #1
 8002f92:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	22ff      	movs	r2, #255	@ 0xff
 8002f98:	4393      	bics	r3, r2
 8002f9a:	001a      	movs	r2, r3
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4a33      	ldr	r2, [pc, #204]	@ (8003074 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8002fa8:	401a      	ands	r2, r3
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4a30      	ldr	r2, [pc, #192]	@ (8003078 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8002fb6:	401a      	ands	r2, r3
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4a2e      	ldr	r2, [pc, #184]	@ (800307c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8002fc4:	401a      	ands	r2, r3
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4a2b      	ldr	r2, [pc, #172]	@ (8003080 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8002fd2:	401a      	ands	r2, r3
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4a29      	ldr	r2, [pc, #164]	@ (8003084 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8002fe0:	401a      	ands	r2, r3
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	4a26      	ldr	r2, [pc, #152]	@ (8003088 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002fee:	401a      	ands	r2, r3
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4a24      	ldr	r2, [pc, #144]	@ (800308c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002ffc:	401a      	ands	r2, r3
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	041b      	lsls	r3, r3, #16
 8003004:	4313      	orrs	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4a21      	ldr	r2, [pc, #132]	@ (8003090 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800300c:	401a      	ands	r2, r3
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a1e      	ldr	r2, [pc, #120]	@ (8003094 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d11c      	bne.n	800305a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4a1d      	ldr	r2, [pc, #116]	@ (8003098 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003024:	401a      	ands	r2, r3
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302a:	051b      	lsls	r3, r3, #20
 800302c:	4313      	orrs	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4a1a      	ldr	r2, [pc, #104]	@ (800309c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003034:	401a      	ands	r2, r3
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	4a17      	ldr	r2, [pc, #92]	@ (80030a0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003042:	401a      	ands	r2, r3
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003048:	4313      	orrs	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4a15      	ldr	r2, [pc, #84]	@ (80030a4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003050:	401a      	ands	r2, r3
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003056:	4313      	orrs	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	223c      	movs	r2, #60	@ 0x3c
 8003066:	2100      	movs	r1, #0
 8003068:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	0018      	movs	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	b004      	add	sp, #16
 8003072:	bd80      	pop	{r7, pc}
 8003074:	fffffcff 	.word	0xfffffcff
 8003078:	fffffbff 	.word	0xfffffbff
 800307c:	fffff7ff 	.word	0xfffff7ff
 8003080:	ffffefff 	.word	0xffffefff
 8003084:	ffffdfff 	.word	0xffffdfff
 8003088:	ffffbfff 	.word	0xffffbfff
 800308c:	fff0ffff 	.word	0xfff0ffff
 8003090:	efffffff 	.word	0xefffffff
 8003094:	40012c00 	.word	0x40012c00
 8003098:	ff0fffff 	.word	0xff0fffff
 800309c:	feffffff 	.word	0xfeffffff
 80030a0:	fdffffff 	.word	0xfdffffff
 80030a4:	dfffffff 	.word	0xdfffffff

080030a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e046      	b.n	8003148 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2288      	movs	r2, #136	@ 0x88
 80030be:	589b      	ldr	r3, [r3, r2]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d107      	bne.n	80030d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2284      	movs	r2, #132	@ 0x84
 80030c8:	2100      	movs	r1, #0
 80030ca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	0018      	movs	r0, r3
 80030d0:	f7fd fc30 	bl	8000934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2288      	movs	r2, #136	@ 0x88
 80030d8:	2124      	movs	r1, #36	@ 0x24
 80030da:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2101      	movs	r1, #1
 80030e8:	438a      	bics	r2, r1
 80030ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	0018      	movs	r0, r3
 80030f8:	f000 f996 	bl	8003428 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	0018      	movs	r0, r3
 8003100:	f000 f828 	bl	8003154 <UART_SetConfig>
 8003104:	0003      	movs	r3, r0
 8003106:	2b01      	cmp	r3, #1
 8003108:	d101      	bne.n	800310e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e01c      	b.n	8003148 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	490d      	ldr	r1, [pc, #52]	@ (8003150 <HAL_UART_Init+0xa8>)
 800311a:	400a      	ands	r2, r1
 800311c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	212a      	movs	r1, #42	@ 0x2a
 800312a:	438a      	bics	r2, r1
 800312c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2101      	movs	r1, #1
 800313a:	430a      	orrs	r2, r1
 800313c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	0018      	movs	r0, r3
 8003142:	f000 fa25 	bl	8003590 <UART_CheckIdleState>
 8003146:	0003      	movs	r3, r0
}
 8003148:	0018      	movs	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	b002      	add	sp, #8
 800314e:	bd80      	pop	{r7, pc}
 8003150:	ffffb7ff 	.word	0xffffb7ff

08003154 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800315c:	231a      	movs	r3, #26
 800315e:	18fb      	adds	r3, r7, r3
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	4313      	orrs	r3, r2
 800317a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4aa1      	ldr	r2, [pc, #644]	@ (8003408 <UART_SetConfig+0x2b4>)
 8003184:	4013      	ands	r3, r2
 8003186:	0019      	movs	r1, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	430a      	orrs	r2, r1
 8003190:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	4a9c      	ldr	r2, [pc, #624]	@ (800340c <UART_SetConfig+0x2b8>)
 800319a:	4013      	ands	r3, r2
 800319c:	0019      	movs	r1, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	69fa      	ldr	r2, [r7, #28]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	4a93      	ldr	r2, [pc, #588]	@ (8003410 <UART_SetConfig+0x2bc>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	0019      	movs	r1, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69fa      	ldr	r2, [r7, #28]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d6:	220f      	movs	r2, #15
 80031d8:	4393      	bics	r3, r2
 80031da:	0019      	movs	r1, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a89      	ldr	r2, [pc, #548]	@ (8003414 <UART_SetConfig+0x2c0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d127      	bne.n	8003242 <UART_SetConfig+0xee>
 80031f2:	4b89      	ldr	r3, [pc, #548]	@ (8003418 <UART_SetConfig+0x2c4>)
 80031f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f6:	2203      	movs	r2, #3
 80031f8:	4013      	ands	r3, r2
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d017      	beq.n	800322e <UART_SetConfig+0xda>
 80031fe:	d81b      	bhi.n	8003238 <UART_SetConfig+0xe4>
 8003200:	2b02      	cmp	r3, #2
 8003202:	d00a      	beq.n	800321a <UART_SetConfig+0xc6>
 8003204:	d818      	bhi.n	8003238 <UART_SetConfig+0xe4>
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <UART_SetConfig+0xbc>
 800320a:	2b01      	cmp	r3, #1
 800320c:	d00a      	beq.n	8003224 <UART_SetConfig+0xd0>
 800320e:	e013      	b.n	8003238 <UART_SetConfig+0xe4>
 8003210:	231b      	movs	r3, #27
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	2200      	movs	r2, #0
 8003216:	701a      	strb	r2, [r3, #0]
 8003218:	e021      	b.n	800325e <UART_SetConfig+0x10a>
 800321a:	231b      	movs	r3, #27
 800321c:	18fb      	adds	r3, r7, r3
 800321e:	2202      	movs	r2, #2
 8003220:	701a      	strb	r2, [r3, #0]
 8003222:	e01c      	b.n	800325e <UART_SetConfig+0x10a>
 8003224:	231b      	movs	r3, #27
 8003226:	18fb      	adds	r3, r7, r3
 8003228:	2204      	movs	r2, #4
 800322a:	701a      	strb	r2, [r3, #0]
 800322c:	e017      	b.n	800325e <UART_SetConfig+0x10a>
 800322e:	231b      	movs	r3, #27
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	2208      	movs	r2, #8
 8003234:	701a      	strb	r2, [r3, #0]
 8003236:	e012      	b.n	800325e <UART_SetConfig+0x10a>
 8003238:	231b      	movs	r3, #27
 800323a:	18fb      	adds	r3, r7, r3
 800323c:	2210      	movs	r2, #16
 800323e:	701a      	strb	r2, [r3, #0]
 8003240:	e00d      	b.n	800325e <UART_SetConfig+0x10a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a75      	ldr	r2, [pc, #468]	@ (800341c <UART_SetConfig+0x2c8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d104      	bne.n	8003256 <UART_SetConfig+0x102>
 800324c:	231b      	movs	r3, #27
 800324e:	18fb      	adds	r3, r7, r3
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
 8003254:	e003      	b.n	800325e <UART_SetConfig+0x10a>
 8003256:	231b      	movs	r3, #27
 8003258:	18fb      	adds	r3, r7, r3
 800325a:	2210      	movs	r2, #16
 800325c:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69da      	ldr	r2, [r3, #28]
 8003262:	2380      	movs	r3, #128	@ 0x80
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	429a      	cmp	r2, r3
 8003268:	d000      	beq.n	800326c <UART_SetConfig+0x118>
 800326a:	e065      	b.n	8003338 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 800326c:	231b      	movs	r3, #27
 800326e:	18fb      	adds	r3, r7, r3
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b08      	cmp	r3, #8
 8003274:	d015      	beq.n	80032a2 <UART_SetConfig+0x14e>
 8003276:	dc18      	bgt.n	80032aa <UART_SetConfig+0x156>
 8003278:	2b04      	cmp	r3, #4
 800327a:	d00d      	beq.n	8003298 <UART_SetConfig+0x144>
 800327c:	dc15      	bgt.n	80032aa <UART_SetConfig+0x156>
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <UART_SetConfig+0x134>
 8003282:	2b02      	cmp	r3, #2
 8003284:	d005      	beq.n	8003292 <UART_SetConfig+0x13e>
 8003286:	e010      	b.n	80032aa <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003288:	f7fe fe94 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 800328c:	0003      	movs	r3, r0
 800328e:	617b      	str	r3, [r7, #20]
        break;
 8003290:	e012      	b.n	80032b8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003292:	4b63      	ldr	r3, [pc, #396]	@ (8003420 <UART_SetConfig+0x2cc>)
 8003294:	617b      	str	r3, [r7, #20]
        break;
 8003296:	e00f      	b.n	80032b8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003298:	f7fe fe00 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 800329c:	0003      	movs	r3, r0
 800329e:	617b      	str	r3, [r7, #20]
        break;
 80032a0:	e00a      	b.n	80032b8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032a2:	2380      	movs	r3, #128	@ 0x80
 80032a4:	021b      	lsls	r3, r3, #8
 80032a6:	617b      	str	r3, [r7, #20]
        break;
 80032a8:	e006      	b.n	80032b8 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032ae:	231a      	movs	r3, #26
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	2201      	movs	r2, #1
 80032b4:	701a      	strb	r2, [r3, #0]
        break;
 80032b6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d100      	bne.n	80032c0 <UART_SetConfig+0x16c>
 80032be:	e08d      	b.n	80033dc <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032c4:	4b57      	ldr	r3, [pc, #348]	@ (8003424 <UART_SetConfig+0x2d0>)
 80032c6:	0052      	lsls	r2, r2, #1
 80032c8:	5ad3      	ldrh	r3, [r2, r3]
 80032ca:	0019      	movs	r1, r3
 80032cc:	6978      	ldr	r0, [r7, #20]
 80032ce:	f7fc ff17 	bl	8000100 <__udivsi3>
 80032d2:	0003      	movs	r3, r0
 80032d4:	005a      	lsls	r2, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	085b      	lsrs	r3, r3, #1
 80032dc:	18d2      	adds	r2, r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	0019      	movs	r1, r3
 80032e4:	0010      	movs	r0, r2
 80032e6:	f7fc ff0b 	bl	8000100 <__udivsi3>
 80032ea:	0003      	movs	r3, r0
 80032ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	2b0f      	cmp	r3, #15
 80032f2:	d91c      	bls.n	800332e <UART_SetConfig+0x1da>
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	2380      	movs	r3, #128	@ 0x80
 80032f8:	025b      	lsls	r3, r3, #9
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d217      	bcs.n	800332e <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	b29a      	uxth	r2, r3
 8003302:	200e      	movs	r0, #14
 8003304:	183b      	adds	r3, r7, r0
 8003306:	210f      	movs	r1, #15
 8003308:	438a      	bics	r2, r1
 800330a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	085b      	lsrs	r3, r3, #1
 8003310:	b29b      	uxth	r3, r3
 8003312:	2207      	movs	r2, #7
 8003314:	4013      	ands	r3, r2
 8003316:	b299      	uxth	r1, r3
 8003318:	183b      	adds	r3, r7, r0
 800331a:	183a      	adds	r2, r7, r0
 800331c:	8812      	ldrh	r2, [r2, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	183a      	adds	r2, r7, r0
 8003328:	8812      	ldrh	r2, [r2, #0]
 800332a:	60da      	str	r2, [r3, #12]
 800332c:	e056      	b.n	80033dc <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800332e:	231a      	movs	r3, #26
 8003330:	18fb      	adds	r3, r7, r3
 8003332:	2201      	movs	r2, #1
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	e051      	b.n	80033dc <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003338:	231b      	movs	r3, #27
 800333a:	18fb      	adds	r3, r7, r3
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b08      	cmp	r3, #8
 8003340:	d015      	beq.n	800336e <UART_SetConfig+0x21a>
 8003342:	dc18      	bgt.n	8003376 <UART_SetConfig+0x222>
 8003344:	2b04      	cmp	r3, #4
 8003346:	d00d      	beq.n	8003364 <UART_SetConfig+0x210>
 8003348:	dc15      	bgt.n	8003376 <UART_SetConfig+0x222>
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <UART_SetConfig+0x200>
 800334e:	2b02      	cmp	r3, #2
 8003350:	d005      	beq.n	800335e <UART_SetConfig+0x20a>
 8003352:	e010      	b.n	8003376 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003354:	f7fe fe2e 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 8003358:	0003      	movs	r3, r0
 800335a:	617b      	str	r3, [r7, #20]
        break;
 800335c:	e012      	b.n	8003384 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800335e:	4b30      	ldr	r3, [pc, #192]	@ (8003420 <UART_SetConfig+0x2cc>)
 8003360:	617b      	str	r3, [r7, #20]
        break;
 8003362:	e00f      	b.n	8003384 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003364:	f7fe fd9a 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8003368:	0003      	movs	r3, r0
 800336a:	617b      	str	r3, [r7, #20]
        break;
 800336c:	e00a      	b.n	8003384 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800336e:	2380      	movs	r3, #128	@ 0x80
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	617b      	str	r3, [r7, #20]
        break;
 8003374:	e006      	b.n	8003384 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800337a:	231a      	movs	r3, #26
 800337c:	18fb      	adds	r3, r7, r3
 800337e:	2201      	movs	r2, #1
 8003380:	701a      	strb	r2, [r3, #0]
        break;
 8003382:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d028      	beq.n	80033dc <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800338e:	4b25      	ldr	r3, [pc, #148]	@ (8003424 <UART_SetConfig+0x2d0>)
 8003390:	0052      	lsls	r2, r2, #1
 8003392:	5ad3      	ldrh	r3, [r2, r3]
 8003394:	0019      	movs	r1, r3
 8003396:	6978      	ldr	r0, [r7, #20]
 8003398:	f7fc feb2 	bl	8000100 <__udivsi3>
 800339c:	0003      	movs	r3, r0
 800339e:	001a      	movs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	085b      	lsrs	r3, r3, #1
 80033a6:	18d2      	adds	r2, r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	0019      	movs	r1, r3
 80033ae:	0010      	movs	r0, r2
 80033b0:	f7fc fea6 	bl	8000100 <__udivsi3>
 80033b4:	0003      	movs	r3, r0
 80033b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	2b0f      	cmp	r3, #15
 80033bc:	d90a      	bls.n	80033d4 <UART_SetConfig+0x280>
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	2380      	movs	r3, #128	@ 0x80
 80033c2:	025b      	lsls	r3, r3, #9
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d205      	bcs.n	80033d4 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	60da      	str	r2, [r3, #12]
 80033d2:	e003      	b.n	80033dc <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80033d4:	231a      	movs	r3, #26
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	2201      	movs	r2, #1
 80033da:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	226a      	movs	r2, #106	@ 0x6a
 80033e0:	2101      	movs	r1, #1
 80033e2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2268      	movs	r2, #104	@ 0x68
 80033e8:	2101      	movs	r1, #1
 80033ea:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80033f8:	231a      	movs	r3, #26
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	781b      	ldrb	r3, [r3, #0]
}
 80033fe:	0018      	movs	r0, r3
 8003400:	46bd      	mov	sp, r7
 8003402:	b008      	add	sp, #32
 8003404:	bd80      	pop	{r7, pc}
 8003406:	46c0      	nop			@ (mov r8, r8)
 8003408:	cfff69f3 	.word	0xcfff69f3
 800340c:	ffffcfff 	.word	0xffffcfff
 8003410:	11fff4ff 	.word	0x11fff4ff
 8003414:	40013800 	.word	0x40013800
 8003418:	40021000 	.word	0x40021000
 800341c:	40004400 	.word	0x40004400
 8003420:	00f42400 	.word	0x00f42400
 8003424:	080039b4 	.word	0x080039b4

08003428 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003434:	2208      	movs	r2, #8
 8003436:	4013      	ands	r3, r2
 8003438:	d00b      	beq.n	8003452 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	4a4a      	ldr	r2, [pc, #296]	@ (800356c <UART_AdvFeatureConfig+0x144>)
 8003442:	4013      	ands	r3, r2
 8003444:	0019      	movs	r1, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003456:	2201      	movs	r2, #1
 8003458:	4013      	ands	r3, r2
 800345a:	d00b      	beq.n	8003474 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	4a43      	ldr	r2, [pc, #268]	@ (8003570 <UART_AdvFeatureConfig+0x148>)
 8003464:	4013      	ands	r3, r2
 8003466:	0019      	movs	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003478:	2202      	movs	r2, #2
 800347a:	4013      	ands	r3, r2
 800347c:	d00b      	beq.n	8003496 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	4a3b      	ldr	r2, [pc, #236]	@ (8003574 <UART_AdvFeatureConfig+0x14c>)
 8003486:	4013      	ands	r3, r2
 8003488:	0019      	movs	r1, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349a:	2204      	movs	r2, #4
 800349c:	4013      	ands	r3, r2
 800349e:	d00b      	beq.n	80034b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4a34      	ldr	r2, [pc, #208]	@ (8003578 <UART_AdvFeatureConfig+0x150>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	0019      	movs	r1, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034bc:	2210      	movs	r2, #16
 80034be:	4013      	ands	r3, r2
 80034c0:	d00b      	beq.n	80034da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	4a2c      	ldr	r2, [pc, #176]	@ (800357c <UART_AdvFeatureConfig+0x154>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	0019      	movs	r1, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034de:	2220      	movs	r2, #32
 80034e0:	4013      	ands	r3, r2
 80034e2:	d00b      	beq.n	80034fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	4a25      	ldr	r2, [pc, #148]	@ (8003580 <UART_AdvFeatureConfig+0x158>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	0019      	movs	r1, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003500:	2240      	movs	r2, #64	@ 0x40
 8003502:	4013      	ands	r3, r2
 8003504:	d01d      	beq.n	8003542 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	4a1d      	ldr	r2, [pc, #116]	@ (8003584 <UART_AdvFeatureConfig+0x15c>)
 800350e:	4013      	ands	r3, r2
 8003510:	0019      	movs	r1, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003522:	2380      	movs	r3, #128	@ 0x80
 8003524:	035b      	lsls	r3, r3, #13
 8003526:	429a      	cmp	r2, r3
 8003528:	d10b      	bne.n	8003542 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	4a15      	ldr	r2, [pc, #84]	@ (8003588 <UART_AdvFeatureConfig+0x160>)
 8003532:	4013      	ands	r3, r2
 8003534:	0019      	movs	r1, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003546:	2280      	movs	r2, #128	@ 0x80
 8003548:	4013      	ands	r3, r2
 800354a:	d00b      	beq.n	8003564 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	4a0e      	ldr	r2, [pc, #56]	@ (800358c <UART_AdvFeatureConfig+0x164>)
 8003554:	4013      	ands	r3, r2
 8003556:	0019      	movs	r1, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	605a      	str	r2, [r3, #4]
  }
}
 8003564:	46c0      	nop			@ (mov r8, r8)
 8003566:	46bd      	mov	sp, r7
 8003568:	b002      	add	sp, #8
 800356a:	bd80      	pop	{r7, pc}
 800356c:	ffff7fff 	.word	0xffff7fff
 8003570:	fffdffff 	.word	0xfffdffff
 8003574:	fffeffff 	.word	0xfffeffff
 8003578:	fffbffff 	.word	0xfffbffff
 800357c:	ffffefff 	.word	0xffffefff
 8003580:	ffffdfff 	.word	0xffffdfff
 8003584:	ffefffff 	.word	0xffefffff
 8003588:	ff9fffff 	.word	0xff9fffff
 800358c:	fff7ffff 	.word	0xfff7ffff

08003590 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b092      	sub	sp, #72	@ 0x48
 8003594:	af02      	add	r7, sp, #8
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2290      	movs	r2, #144	@ 0x90
 800359c:	2100      	movs	r1, #0
 800359e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035a0:	f7fd fae4 	bl	8000b6c <HAL_GetTick>
 80035a4:	0003      	movs	r3, r0
 80035a6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2208      	movs	r2, #8
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d12d      	bne.n	8003612 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035b8:	2280      	movs	r2, #128	@ 0x80
 80035ba:	0391      	lsls	r1, r2, #14
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	4a47      	ldr	r2, [pc, #284]	@ (80036dc <UART_CheckIdleState+0x14c>)
 80035c0:	9200      	str	r2, [sp, #0]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f000 f88e 	bl	80036e4 <UART_WaitOnFlagUntilTimeout>
 80035c8:	1e03      	subs	r3, r0, #0
 80035ca:	d022      	beq.n	8003612 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035cc:	f3ef 8310 	mrs	r3, PRIMASK
 80035d0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80035d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80035d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035d6:	2301      	movs	r3, #1
 80035d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035dc:	f383 8810 	msr	PRIMASK, r3
}
 80035e0:	46c0      	nop			@ (mov r8, r8)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2180      	movs	r1, #128	@ 0x80
 80035ee:	438a      	bics	r2, r1
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f8:	f383 8810 	msr	PRIMASK, r3
}
 80035fc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2288      	movs	r2, #136	@ 0x88
 8003602:	2120      	movs	r1, #32
 8003604:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2284      	movs	r2, #132	@ 0x84
 800360a:	2100      	movs	r1, #0
 800360c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e060      	b.n	80036d4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2204      	movs	r2, #4
 800361a:	4013      	ands	r3, r2
 800361c:	2b04      	cmp	r3, #4
 800361e:	d146      	bne.n	80036ae <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003622:	2280      	movs	r2, #128	@ 0x80
 8003624:	03d1      	lsls	r1, r2, #15
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	4a2c      	ldr	r2, [pc, #176]	@ (80036dc <UART_CheckIdleState+0x14c>)
 800362a:	9200      	str	r2, [sp, #0]
 800362c:	2200      	movs	r2, #0
 800362e:	f000 f859 	bl	80036e4 <UART_WaitOnFlagUntilTimeout>
 8003632:	1e03      	subs	r3, r0, #0
 8003634:	d03b      	beq.n	80036ae <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003636:	f3ef 8310 	mrs	r3, PRIMASK
 800363a:	60fb      	str	r3, [r7, #12]
  return(result);
 800363c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800363e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003640:	2301      	movs	r3, #1
 8003642:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f383 8810 	msr	PRIMASK, r3
}
 800364a:	46c0      	nop			@ (mov r8, r8)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4922      	ldr	r1, [pc, #136]	@ (80036e0 <UART_CheckIdleState+0x150>)
 8003658:	400a      	ands	r2, r1
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800365e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f383 8810 	msr	PRIMASK, r3
}
 8003666:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003668:	f3ef 8310 	mrs	r3, PRIMASK
 800366c:	61bb      	str	r3, [r7, #24]
  return(result);
 800366e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003670:	633b      	str	r3, [r7, #48]	@ 0x30
 8003672:	2301      	movs	r3, #1
 8003674:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f383 8810 	msr	PRIMASK, r3
}
 800367c:	46c0      	nop			@ (mov r8, r8)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2101      	movs	r1, #1
 800368a:	438a      	bics	r2, r1
 800368c:	609a      	str	r2, [r3, #8]
 800368e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003690:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	f383 8810 	msr	PRIMASK, r3
}
 8003698:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	228c      	movs	r2, #140	@ 0x8c
 800369e:	2120      	movs	r1, #32
 80036a0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2284      	movs	r2, #132	@ 0x84
 80036a6:	2100      	movs	r1, #0
 80036a8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e012      	b.n	80036d4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2288      	movs	r2, #136	@ 0x88
 80036b2:	2120      	movs	r1, #32
 80036b4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	228c      	movs	r2, #140	@ 0x8c
 80036ba:	2120      	movs	r1, #32
 80036bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2284      	movs	r2, #132	@ 0x84
 80036ce:	2100      	movs	r1, #0
 80036d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	0018      	movs	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b010      	add	sp, #64	@ 0x40
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	01ffffff 	.word	0x01ffffff
 80036e0:	fffffedf 	.word	0xfffffedf

080036e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	1dfb      	adds	r3, r7, #7
 80036f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f4:	e051      	b.n	800379a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	3301      	adds	r3, #1
 80036fa:	d04e      	beq.n	800379a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fc:	f7fd fa36 	bl	8000b6c <HAL_GetTick>
 8003700:	0002      	movs	r2, r0
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	429a      	cmp	r2, r3
 800370a:	d302      	bcc.n	8003712 <UART_WaitOnFlagUntilTimeout+0x2e>
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e051      	b.n	80037ba <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2204      	movs	r2, #4
 800371e:	4013      	ands	r3, r2
 8003720:	d03b      	beq.n	800379a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b80      	cmp	r3, #128	@ 0x80
 8003726:	d038      	beq.n	800379a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b40      	cmp	r3, #64	@ 0x40
 800372c:	d035      	beq.n	800379a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	2208      	movs	r2, #8
 8003736:	4013      	ands	r3, r2
 8003738:	2b08      	cmp	r3, #8
 800373a:	d111      	bne.n	8003760 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2208      	movs	r2, #8
 8003742:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	0018      	movs	r0, r3
 8003748:	f000 f83c 	bl	80037c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2290      	movs	r2, #144	@ 0x90
 8003750:	2108      	movs	r1, #8
 8003752:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2284      	movs	r2, #132	@ 0x84
 8003758:	2100      	movs	r1, #0
 800375a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e02c      	b.n	80037ba <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	69da      	ldr	r2, [r3, #28]
 8003766:	2380      	movs	r3, #128	@ 0x80
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	401a      	ands	r2, r3
 800376c:	2380      	movs	r3, #128	@ 0x80
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	429a      	cmp	r2, r3
 8003772:	d112      	bne.n	800379a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2280      	movs	r2, #128	@ 0x80
 800377a:	0112      	lsls	r2, r2, #4
 800377c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	0018      	movs	r0, r3
 8003782:	f000 f81f 	bl	80037c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2290      	movs	r2, #144	@ 0x90
 800378a:	2120      	movs	r1, #32
 800378c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2284      	movs	r2, #132	@ 0x84
 8003792:	2100      	movs	r1, #0
 8003794:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e00f      	b.n	80037ba <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	4013      	ands	r3, r2
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	425a      	negs	r2, r3
 80037aa:	4153      	adcs	r3, r2
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	001a      	movs	r2, r3
 80037b0:	1dfb      	adds	r3, r7, #7
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d09e      	beq.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	0018      	movs	r0, r3
 80037bc:	46bd      	mov	sp, r7
 80037be:	b004      	add	sp, #16
 80037c0:	bd80      	pop	{r7, pc}
	...

080037c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08e      	sub	sp, #56	@ 0x38
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037cc:	f3ef 8310 	mrs	r3, PRIMASK
 80037d0:	617b      	str	r3, [r7, #20]
  return(result);
 80037d2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80037d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80037d6:	2301      	movs	r3, #1
 80037d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	f383 8810 	msr	PRIMASK, r3
}
 80037e0:	46c0      	nop			@ (mov r8, r8)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4926      	ldr	r1, [pc, #152]	@ (8003888 <UART_EndRxTransfer+0xc4>)
 80037ee:	400a      	ands	r2, r1
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	f383 8810 	msr	PRIMASK, r3
}
 80037fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003802:	623b      	str	r3, [r7, #32]
  return(result);
 8003804:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003806:	633b      	str	r3, [r7, #48]	@ 0x30
 8003808:	2301      	movs	r3, #1
 800380a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800380c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380e:	f383 8810 	msr	PRIMASK, r3
}
 8003812:	46c0      	nop			@ (mov r8, r8)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	491b      	ldr	r1, [pc, #108]	@ (800388c <UART_EndRxTransfer+0xc8>)
 8003820:	400a      	ands	r2, r1
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003826:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800382a:	f383 8810 	msr	PRIMASK, r3
}
 800382e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003834:	2b01      	cmp	r3, #1
 8003836:	d118      	bne.n	800386a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003838:	f3ef 8310 	mrs	r3, PRIMASK
 800383c:	60bb      	str	r3, [r7, #8]
  return(result);
 800383e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003840:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003842:	2301      	movs	r3, #1
 8003844:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f383 8810 	msr	PRIMASK, r3
}
 800384c:	46c0      	nop			@ (mov r8, r8)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2110      	movs	r1, #16
 800385a:	438a      	bics	r2, r1
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003860:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f383 8810 	msr	PRIMASK, r3
}
 8003868:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	228c      	movs	r2, #140	@ 0x8c
 800386e:	2120      	movs	r1, #32
 8003870:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800387e:	46c0      	nop			@ (mov r8, r8)
 8003880:	46bd      	mov	sp, r7
 8003882:	b00e      	add	sp, #56	@ 0x38
 8003884:	bd80      	pop	{r7, pc}
 8003886:	46c0      	nop			@ (mov r8, r8)
 8003888:	fffffedf 	.word	0xfffffedf
 800388c:	effffffe 	.word	0xeffffffe

08003890 <memset>:
 8003890:	0003      	movs	r3, r0
 8003892:	1882      	adds	r2, r0, r2
 8003894:	4293      	cmp	r3, r2
 8003896:	d100      	bne.n	800389a <memset+0xa>
 8003898:	4770      	bx	lr
 800389a:	7019      	strb	r1, [r3, #0]
 800389c:	3301      	adds	r3, #1
 800389e:	e7f9      	b.n	8003894 <memset+0x4>

080038a0 <__libc_init_array>:
 80038a0:	b570      	push	{r4, r5, r6, lr}
 80038a2:	2600      	movs	r6, #0
 80038a4:	4c0c      	ldr	r4, [pc, #48]	@ (80038d8 <__libc_init_array+0x38>)
 80038a6:	4d0d      	ldr	r5, [pc, #52]	@ (80038dc <__libc_init_array+0x3c>)
 80038a8:	1b64      	subs	r4, r4, r5
 80038aa:	10a4      	asrs	r4, r4, #2
 80038ac:	42a6      	cmp	r6, r4
 80038ae:	d109      	bne.n	80038c4 <__libc_init_array+0x24>
 80038b0:	2600      	movs	r6, #0
 80038b2:	f000 f819 	bl	80038e8 <_init>
 80038b6:	4c0a      	ldr	r4, [pc, #40]	@ (80038e0 <__libc_init_array+0x40>)
 80038b8:	4d0a      	ldr	r5, [pc, #40]	@ (80038e4 <__libc_init_array+0x44>)
 80038ba:	1b64      	subs	r4, r4, r5
 80038bc:	10a4      	asrs	r4, r4, #2
 80038be:	42a6      	cmp	r6, r4
 80038c0:	d105      	bne.n	80038ce <__libc_init_array+0x2e>
 80038c2:	bd70      	pop	{r4, r5, r6, pc}
 80038c4:	00b3      	lsls	r3, r6, #2
 80038c6:	58eb      	ldr	r3, [r5, r3]
 80038c8:	4798      	blx	r3
 80038ca:	3601      	adds	r6, #1
 80038cc:	e7ee      	b.n	80038ac <__libc_init_array+0xc>
 80038ce:	00b3      	lsls	r3, r6, #2
 80038d0:	58eb      	ldr	r3, [r5, r3]
 80038d2:	4798      	blx	r3
 80038d4:	3601      	adds	r6, #1
 80038d6:	e7f2      	b.n	80038be <__libc_init_array+0x1e>
 80038d8:	080039cc 	.word	0x080039cc
 80038dc:	080039cc 	.word	0x080039cc
 80038e0:	080039d0 	.word	0x080039d0
 80038e4:	080039cc 	.word	0x080039cc

080038e8 <_init>:
 80038e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ea:	46c0      	nop			@ (mov r8, r8)
 80038ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ee:	bc08      	pop	{r3}
 80038f0:	469e      	mov	lr, r3
 80038f2:	4770      	bx	lr

080038f4 <_fini>:
 80038f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f6:	46c0      	nop			@ (mov r8, r8)
 80038f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038fa:	bc08      	pop	{r3}
 80038fc:	469e      	mov	lr, r3
 80038fe:	4770      	bx	lr
