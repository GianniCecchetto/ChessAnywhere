
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eb4  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08004f6c  08004f6c  00005f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005294  08005294  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005294  08005294  00006294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800529c  0800529c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800529c  0800529c  0000629c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052a0  080052a0  000062a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080052a4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  2000005c  08005300  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  08005300  00007568  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dab8  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c58  00000000  00000000  00024b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000e3a2  00000000  00000000  00028794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e0  00000000  00000000  00036b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013a7  00000000  00000000  00037d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016d9a  00000000  00000000  000390bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f52e  00000000  00000000  0004fe59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e7a6  00000000  00000000  0006f387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fdb2d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039b8  00000000  00000000  000fdb70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00101528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000005c 	.word	0x2000005c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004f54 	.word	0x08004f54

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000060 	.word	0x20000060
 80000fc:	08004f54 	.word	0x08004f54

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_uqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5c09      	ldrb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			@ (mov r8, r8)

08000138 <__gnu_thumb1_case_shi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5e09      	ldrsh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__udivsi3>:
 800014c:	2200      	movs	r2, #0
 800014e:	0843      	lsrs	r3, r0, #1
 8000150:	428b      	cmp	r3, r1
 8000152:	d374      	bcc.n	800023e <__udivsi3+0xf2>
 8000154:	0903      	lsrs	r3, r0, #4
 8000156:	428b      	cmp	r3, r1
 8000158:	d35f      	bcc.n	800021a <__udivsi3+0xce>
 800015a:	0a03      	lsrs	r3, r0, #8
 800015c:	428b      	cmp	r3, r1
 800015e:	d344      	bcc.n	80001ea <__udivsi3+0x9e>
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d328      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d30d      	bcc.n	8000188 <__udivsi3+0x3c>
 800016c:	22ff      	movs	r2, #255	@ 0xff
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	ba12      	rev	r2, r2
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d302      	bcc.n	800017e <__udivsi3+0x32>
 8000178:	1212      	asrs	r2, r2, #8
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	d065      	beq.n	800024a <__udivsi3+0xfe>
 800017e:	0b03      	lsrs	r3, r0, #12
 8000180:	428b      	cmp	r3, r1
 8000182:	d319      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000184:	e000      	b.n	8000188 <__udivsi3+0x3c>
 8000186:	0a09      	lsrs	r1, r1, #8
 8000188:	0bc3      	lsrs	r3, r0, #15
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x46>
 800018e:	03cb      	lsls	r3, r1, #15
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b83      	lsrs	r3, r0, #14
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x52>
 800019a:	038b      	lsls	r3, r1, #14
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b43      	lsrs	r3, r0, #13
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x5e>
 80001a6:	034b      	lsls	r3, r1, #13
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b03      	lsrs	r3, r0, #12
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x6a>
 80001b2:	030b      	lsls	r3, r1, #12
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0ac3      	lsrs	r3, r0, #11
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x76>
 80001be:	02cb      	lsls	r3, r1, #11
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a83      	lsrs	r3, r0, #10
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x82>
 80001ca:	028b      	lsls	r3, r1, #10
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a43      	lsrs	r3, r0, #9
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x8e>
 80001d6:	024b      	lsls	r3, r1, #9
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a03      	lsrs	r3, r0, #8
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x9a>
 80001e2:	020b      	lsls	r3, r1, #8
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	d2cd      	bcs.n	8000186 <__udivsi3+0x3a>
 80001ea:	09c3      	lsrs	r3, r0, #7
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xa8>
 80001f0:	01cb      	lsls	r3, r1, #7
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0983      	lsrs	r3, r0, #6
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xb4>
 80001fc:	018b      	lsls	r3, r1, #6
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0943      	lsrs	r3, r0, #5
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xc0>
 8000208:	014b      	lsls	r3, r1, #5
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0903      	lsrs	r3, r0, #4
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xcc>
 8000214:	010b      	lsls	r3, r1, #4
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	08c3      	lsrs	r3, r0, #3
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xd8>
 8000220:	00cb      	lsls	r3, r1, #3
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0883      	lsrs	r3, r0, #2
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xe4>
 800022c:	008b      	lsls	r3, r1, #2
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0843      	lsrs	r3, r0, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xf0>
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	1a41      	subs	r1, r0, r1
 8000240:	d200      	bcs.n	8000244 <__udivsi3+0xf8>
 8000242:	4601      	mov	r1, r0
 8000244:	4152      	adcs	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4770      	bx	lr
 800024a:	e7ff      	b.n	800024c <__udivsi3+0x100>
 800024c:	b501      	push	{r0, lr}
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f806 	bl	8000260 <__aeabi_idiv0>
 8000254:	bd02      	pop	{r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_uidivmod>:
 8000258:	2900      	cmp	r1, #0
 800025a:	d0f7      	beq.n	800024c <__udivsi3+0x100>
 800025c:	e776      	b.n	800014c <__udivsi3>
 800025e:	4770      	bx	lr

08000260 <__aeabi_idiv0>:
 8000260:	4770      	bx	lr
 8000262:	46c0      	nop			@ (mov r8, r8)

08000264 <__aeabi_llsr>:
 8000264:	40d0      	lsrs	r0, r2
 8000266:	000b      	movs	r3, r1
 8000268:	40d1      	lsrs	r1, r2
 800026a:	469c      	mov	ip, r3
 800026c:	3a20      	subs	r2, #32
 800026e:	40d3      	lsrs	r3, r2
 8000270:	4318      	orrs	r0, r3
 8000272:	4252      	negs	r2, r2
 8000274:	4663      	mov	r3, ip
 8000276:	4093      	lsls	r3, r2
 8000278:	4318      	orrs	r0, r3
 800027a:	4770      	bx	lr

0800027c <__aeabi_llsl>:
 800027c:	4091      	lsls	r1, r2
 800027e:	0003      	movs	r3, r0
 8000280:	4090      	lsls	r0, r2
 8000282:	469c      	mov	ip, r3
 8000284:	3a20      	subs	r2, #32
 8000286:	4093      	lsls	r3, r2
 8000288:	4319      	orrs	r1, r3
 800028a:	4252      	negs	r2, r2
 800028c:	4663      	mov	r3, ip
 800028e:	40d3      	lsrs	r3, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	4770      	bx	lr

08000294 <__aeabi_uldivmod>:
 8000294:	2b00      	cmp	r3, #0
 8000296:	d111      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 8000298:	2a00      	cmp	r2, #0
 800029a:	d10f      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 800029c:	2900      	cmp	r1, #0
 800029e:	d100      	bne.n	80002a2 <__aeabi_uldivmod+0xe>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d002      	beq.n	80002aa <__aeabi_uldivmod+0x16>
 80002a4:	2100      	movs	r1, #0
 80002a6:	43c9      	mvns	r1, r1
 80002a8:	0008      	movs	r0, r1
 80002aa:	b407      	push	{r0, r1, r2}
 80002ac:	4802      	ldr	r0, [pc, #8]	@ (80002b8 <__aeabi_uldivmod+0x24>)
 80002ae:	a102      	add	r1, pc, #8	@ (adr r1, 80002b8 <__aeabi_uldivmod+0x24>)
 80002b0:	1840      	adds	r0, r0, r1
 80002b2:	9002      	str	r0, [sp, #8]
 80002b4:	bd03      	pop	{r0, r1, pc}
 80002b6:	46c0      	nop			@ (mov r8, r8)
 80002b8:	ffffffa9 	.word	0xffffffa9
 80002bc:	b403      	push	{r0, r1}
 80002be:	4668      	mov	r0, sp
 80002c0:	b501      	push	{r0, lr}
 80002c2:	9802      	ldr	r0, [sp, #8]
 80002c4:	f000 f834 	bl	8000330 <__udivmoddi4>
 80002c8:	9b01      	ldr	r3, [sp, #4]
 80002ca:	469e      	mov	lr, r3
 80002cc:	b002      	add	sp, #8
 80002ce:	bc0c      	pop	{r2, r3}
 80002d0:	4770      	bx	lr
 80002d2:	46c0      	nop			@ (mov r8, r8)

080002d4 <__aeabi_lmul>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	46ce      	mov	lr, r9
 80002d8:	4699      	mov	r9, r3
 80002da:	0c03      	lsrs	r3, r0, #16
 80002dc:	469c      	mov	ip, r3
 80002de:	0413      	lsls	r3, r2, #16
 80002e0:	4647      	mov	r7, r8
 80002e2:	0c1b      	lsrs	r3, r3, #16
 80002e4:	001d      	movs	r5, r3
 80002e6:	000e      	movs	r6, r1
 80002e8:	4661      	mov	r1, ip
 80002ea:	0404      	lsls	r4, r0, #16
 80002ec:	0c24      	lsrs	r4, r4, #16
 80002ee:	b580      	push	{r7, lr}
 80002f0:	0007      	movs	r7, r0
 80002f2:	0c10      	lsrs	r0, r2, #16
 80002f4:	434b      	muls	r3, r1
 80002f6:	4365      	muls	r5, r4
 80002f8:	4341      	muls	r1, r0
 80002fa:	4360      	muls	r0, r4
 80002fc:	0c2c      	lsrs	r4, r5, #16
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	1824      	adds	r4, r4, r0
 8000302:	468c      	mov	ip, r1
 8000304:	42a3      	cmp	r3, r4
 8000306:	d903      	bls.n	8000310 <__aeabi_lmul+0x3c>
 8000308:	2380      	movs	r3, #128	@ 0x80
 800030a:	025b      	lsls	r3, r3, #9
 800030c:	4698      	mov	r8, r3
 800030e:	44c4      	add	ip, r8
 8000310:	4649      	mov	r1, r9
 8000312:	4379      	muls	r1, r7
 8000314:	4356      	muls	r6, r2
 8000316:	0c23      	lsrs	r3, r4, #16
 8000318:	042d      	lsls	r5, r5, #16
 800031a:	0c2d      	lsrs	r5, r5, #16
 800031c:	1989      	adds	r1, r1, r6
 800031e:	4463      	add	r3, ip
 8000320:	0424      	lsls	r4, r4, #16
 8000322:	1960      	adds	r0, r4, r5
 8000324:	18c9      	adds	r1, r1, r3
 8000326:	bcc0      	pop	{r6, r7}
 8000328:	46b9      	mov	r9, r7
 800032a:	46b0      	mov	r8, r6
 800032c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800032e:	46c0      	nop			@ (mov r8, r8)

08000330 <__udivmoddi4>:
 8000330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000332:	4657      	mov	r7, sl
 8000334:	464e      	mov	r6, r9
 8000336:	4645      	mov	r5, r8
 8000338:	46de      	mov	lr, fp
 800033a:	b5e0      	push	{r5, r6, r7, lr}
 800033c:	0004      	movs	r4, r0
 800033e:	000d      	movs	r5, r1
 8000340:	4692      	mov	sl, r2
 8000342:	4699      	mov	r9, r3
 8000344:	b083      	sub	sp, #12
 8000346:	428b      	cmp	r3, r1
 8000348:	d830      	bhi.n	80003ac <__udivmoddi4+0x7c>
 800034a:	d02d      	beq.n	80003a8 <__udivmoddi4+0x78>
 800034c:	4649      	mov	r1, r9
 800034e:	4650      	mov	r0, sl
 8000350:	f000 f8ba 	bl	80004c8 <__clzdi2>
 8000354:	0029      	movs	r1, r5
 8000356:	0006      	movs	r6, r0
 8000358:	0020      	movs	r0, r4
 800035a:	f000 f8b5 	bl	80004c8 <__clzdi2>
 800035e:	1a33      	subs	r3, r6, r0
 8000360:	4698      	mov	r8, r3
 8000362:	3b20      	subs	r3, #32
 8000364:	d434      	bmi.n	80003d0 <__udivmoddi4+0xa0>
 8000366:	469b      	mov	fp, r3
 8000368:	4653      	mov	r3, sl
 800036a:	465a      	mov	r2, fp
 800036c:	4093      	lsls	r3, r2
 800036e:	4642      	mov	r2, r8
 8000370:	001f      	movs	r7, r3
 8000372:	4653      	mov	r3, sl
 8000374:	4093      	lsls	r3, r2
 8000376:	001e      	movs	r6, r3
 8000378:	42af      	cmp	r7, r5
 800037a:	d83b      	bhi.n	80003f4 <__udivmoddi4+0xc4>
 800037c:	42af      	cmp	r7, r5
 800037e:	d100      	bne.n	8000382 <__udivmoddi4+0x52>
 8000380:	e079      	b.n	8000476 <__udivmoddi4+0x146>
 8000382:	465b      	mov	r3, fp
 8000384:	1ba4      	subs	r4, r4, r6
 8000386:	41bd      	sbcs	r5, r7
 8000388:	2b00      	cmp	r3, #0
 800038a:	da00      	bge.n	800038e <__udivmoddi4+0x5e>
 800038c:	e076      	b.n	800047c <__udivmoddi4+0x14c>
 800038e:	2200      	movs	r2, #0
 8000390:	2300      	movs	r3, #0
 8000392:	9200      	str	r2, [sp, #0]
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	2301      	movs	r3, #1
 8000398:	465a      	mov	r2, fp
 800039a:	4093      	lsls	r3, r2
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	2301      	movs	r3, #1
 80003a0:	4642      	mov	r2, r8
 80003a2:	4093      	lsls	r3, r2
 80003a4:	9300      	str	r3, [sp, #0]
 80003a6:	e029      	b.n	80003fc <__udivmoddi4+0xcc>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	d9cf      	bls.n	800034c <__udivmoddi4+0x1c>
 80003ac:	2200      	movs	r2, #0
 80003ae:	2300      	movs	r3, #0
 80003b0:	9200      	str	r2, [sp, #0]
 80003b2:	9301      	str	r3, [sp, #4]
 80003b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <__udivmoddi4+0x8e>
 80003ba:	601c      	str	r4, [r3, #0]
 80003bc:	605d      	str	r5, [r3, #4]
 80003be:	9800      	ldr	r0, [sp, #0]
 80003c0:	9901      	ldr	r1, [sp, #4]
 80003c2:	b003      	add	sp, #12
 80003c4:	bcf0      	pop	{r4, r5, r6, r7}
 80003c6:	46bb      	mov	fp, r7
 80003c8:	46b2      	mov	sl, r6
 80003ca:	46a9      	mov	r9, r5
 80003cc:	46a0      	mov	r8, r4
 80003ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003d0:	4642      	mov	r2, r8
 80003d2:	469b      	mov	fp, r3
 80003d4:	2320      	movs	r3, #32
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	4652      	mov	r2, sl
 80003da:	40da      	lsrs	r2, r3
 80003dc:	4641      	mov	r1, r8
 80003de:	0013      	movs	r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	408a      	lsls	r2, r1
 80003e4:	0017      	movs	r7, r2
 80003e6:	4642      	mov	r2, r8
 80003e8:	431f      	orrs	r7, r3
 80003ea:	4653      	mov	r3, sl
 80003ec:	4093      	lsls	r3, r2
 80003ee:	001e      	movs	r6, r3
 80003f0:	42af      	cmp	r7, r5
 80003f2:	d9c3      	bls.n	800037c <__udivmoddi4+0x4c>
 80003f4:	2200      	movs	r2, #0
 80003f6:	2300      	movs	r3, #0
 80003f8:	9200      	str	r2, [sp, #0]
 80003fa:	9301      	str	r3, [sp, #4]
 80003fc:	4643      	mov	r3, r8
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d0d8      	beq.n	80003b4 <__udivmoddi4+0x84>
 8000402:	07fb      	lsls	r3, r7, #31
 8000404:	0872      	lsrs	r2, r6, #1
 8000406:	431a      	orrs	r2, r3
 8000408:	4646      	mov	r6, r8
 800040a:	087b      	lsrs	r3, r7, #1
 800040c:	e00e      	b.n	800042c <__udivmoddi4+0xfc>
 800040e:	42ab      	cmp	r3, r5
 8000410:	d101      	bne.n	8000416 <__udivmoddi4+0xe6>
 8000412:	42a2      	cmp	r2, r4
 8000414:	d80c      	bhi.n	8000430 <__udivmoddi4+0x100>
 8000416:	1aa4      	subs	r4, r4, r2
 8000418:	419d      	sbcs	r5, r3
 800041a:	2001      	movs	r0, #1
 800041c:	1924      	adds	r4, r4, r4
 800041e:	416d      	adcs	r5, r5
 8000420:	2100      	movs	r1, #0
 8000422:	3e01      	subs	r6, #1
 8000424:	1824      	adds	r4, r4, r0
 8000426:	414d      	adcs	r5, r1
 8000428:	2e00      	cmp	r6, #0
 800042a:	d006      	beq.n	800043a <__udivmoddi4+0x10a>
 800042c:	42ab      	cmp	r3, r5
 800042e:	d9ee      	bls.n	800040e <__udivmoddi4+0xde>
 8000430:	3e01      	subs	r6, #1
 8000432:	1924      	adds	r4, r4, r4
 8000434:	416d      	adcs	r5, r5
 8000436:	2e00      	cmp	r6, #0
 8000438:	d1f8      	bne.n	800042c <__udivmoddi4+0xfc>
 800043a:	9800      	ldr	r0, [sp, #0]
 800043c:	9901      	ldr	r1, [sp, #4]
 800043e:	465b      	mov	r3, fp
 8000440:	1900      	adds	r0, r0, r4
 8000442:	4169      	adcs	r1, r5
 8000444:	2b00      	cmp	r3, #0
 8000446:	db24      	blt.n	8000492 <__udivmoddi4+0x162>
 8000448:	002b      	movs	r3, r5
 800044a:	465a      	mov	r2, fp
 800044c:	4644      	mov	r4, r8
 800044e:	40d3      	lsrs	r3, r2
 8000450:	002a      	movs	r2, r5
 8000452:	40e2      	lsrs	r2, r4
 8000454:	001c      	movs	r4, r3
 8000456:	465b      	mov	r3, fp
 8000458:	0015      	movs	r5, r2
 800045a:	2b00      	cmp	r3, #0
 800045c:	db2a      	blt.n	80004b4 <__udivmoddi4+0x184>
 800045e:	0026      	movs	r6, r4
 8000460:	409e      	lsls	r6, r3
 8000462:	0033      	movs	r3, r6
 8000464:	0026      	movs	r6, r4
 8000466:	4647      	mov	r7, r8
 8000468:	40be      	lsls	r6, r7
 800046a:	0032      	movs	r2, r6
 800046c:	1a80      	subs	r0, r0, r2
 800046e:	4199      	sbcs	r1, r3
 8000470:	9000      	str	r0, [sp, #0]
 8000472:	9101      	str	r1, [sp, #4]
 8000474:	e79e      	b.n	80003b4 <__udivmoddi4+0x84>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d8bc      	bhi.n	80003f4 <__udivmoddi4+0xc4>
 800047a:	e782      	b.n	8000382 <__udivmoddi4+0x52>
 800047c:	4642      	mov	r2, r8
 800047e:	2320      	movs	r3, #32
 8000480:	2100      	movs	r1, #0
 8000482:	1a9b      	subs	r3, r3, r2
 8000484:	2200      	movs	r2, #0
 8000486:	9100      	str	r1, [sp, #0]
 8000488:	9201      	str	r2, [sp, #4]
 800048a:	2201      	movs	r2, #1
 800048c:	40da      	lsrs	r2, r3
 800048e:	9201      	str	r2, [sp, #4]
 8000490:	e785      	b.n	800039e <__udivmoddi4+0x6e>
 8000492:	4642      	mov	r2, r8
 8000494:	2320      	movs	r3, #32
 8000496:	1a9b      	subs	r3, r3, r2
 8000498:	002a      	movs	r2, r5
 800049a:	4646      	mov	r6, r8
 800049c:	409a      	lsls	r2, r3
 800049e:	0023      	movs	r3, r4
 80004a0:	40f3      	lsrs	r3, r6
 80004a2:	4644      	mov	r4, r8
 80004a4:	4313      	orrs	r3, r2
 80004a6:	002a      	movs	r2, r5
 80004a8:	40e2      	lsrs	r2, r4
 80004aa:	001c      	movs	r4, r3
 80004ac:	465b      	mov	r3, fp
 80004ae:	0015      	movs	r5, r2
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	dad4      	bge.n	800045e <__udivmoddi4+0x12e>
 80004b4:	4642      	mov	r2, r8
 80004b6:	002f      	movs	r7, r5
 80004b8:	2320      	movs	r3, #32
 80004ba:	0026      	movs	r6, r4
 80004bc:	4097      	lsls	r7, r2
 80004be:	1a9b      	subs	r3, r3, r2
 80004c0:	40de      	lsrs	r6, r3
 80004c2:	003b      	movs	r3, r7
 80004c4:	4333      	orrs	r3, r6
 80004c6:	e7cd      	b.n	8000464 <__udivmoddi4+0x134>

080004c8 <__clzdi2>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	2900      	cmp	r1, #0
 80004cc:	d103      	bne.n	80004d6 <__clzdi2+0xe>
 80004ce:	f000 f807 	bl	80004e0 <__clzsi2>
 80004d2:	3020      	adds	r0, #32
 80004d4:	e002      	b.n	80004dc <__clzdi2+0x14>
 80004d6:	0008      	movs	r0, r1
 80004d8:	f000 f802 	bl	80004e0 <__clzsi2>
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__clzsi2>:
 80004e0:	211c      	movs	r1, #28
 80004e2:	2301      	movs	r3, #1
 80004e4:	041b      	lsls	r3, r3, #16
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d301      	bcc.n	80004ee <__clzsi2+0xe>
 80004ea:	0c00      	lsrs	r0, r0, #16
 80004ec:	3910      	subs	r1, #16
 80004ee:	0a1b      	lsrs	r3, r3, #8
 80004f0:	4298      	cmp	r0, r3
 80004f2:	d301      	bcc.n	80004f8 <__clzsi2+0x18>
 80004f4:	0a00      	lsrs	r0, r0, #8
 80004f6:	3908      	subs	r1, #8
 80004f8:	091b      	lsrs	r3, r3, #4
 80004fa:	4298      	cmp	r0, r3
 80004fc:	d301      	bcc.n	8000502 <__clzsi2+0x22>
 80004fe:	0900      	lsrs	r0, r0, #4
 8000500:	3904      	subs	r1, #4
 8000502:	a202      	add	r2, pc, #8	@ (adr r2, 800050c <__clzsi2+0x2c>)
 8000504:	5c10      	ldrb	r0, [r2, r0]
 8000506:	1840      	adds	r0, r0, r1
 8000508:	4770      	bx	lr
 800050a:	46c0      	nop			@ (mov r8, r8)
 800050c:	02020304 	.word	0x02020304
 8000510:	01010101 	.word	0x01010101
	...

0800051c <bitmap_set_bit>:
}

/*
 * Bitmap set a bit value
 */
void bitmap_set_bit(uint64_t *bitmap, int index) {
 800051c:	b510      	push	{r4, lr}
 800051e:	000a      	movs	r2, r1
 8000520:	0004      	movs	r4, r0
	if(is_index_out_of_bound(index)) return;
 8000522:	293f      	cmp	r1, #63	@ 0x3f
 8000524:	d808      	bhi.n	8000538 <bitmap_set_bit+0x1c>
    *bitmap |= (1ULL << index);
 8000526:	2001      	movs	r0, #1
 8000528:	2100      	movs	r1, #0
 800052a:	f7ff fea7 	bl	800027c <__aeabi_llsl>
 800052e:	6823      	ldr	r3, [r4, #0]
 8000530:	4318      	orrs	r0, r3
 8000532:	6863      	ldr	r3, [r4, #4]
 8000534:	430b      	orrs	r3, r1
 8000536:	c409      	stmia	r4!, {r0, r3}
}
 8000538:	bd10      	pop	{r4, pc}

0800053a <bitmap_clear_bit>:

/*
 * Bitmap clear a bit value
 */
void bitmap_clear_bit(uint64_t *bitmap, int index) {
 800053a:	b510      	push	{r4, lr}
 800053c:	000a      	movs	r2, r1
 800053e:	0004      	movs	r4, r0
	if(is_index_out_of_bound(index)) return;
 8000540:	293f      	cmp	r1, #63	@ 0x3f
 8000542:	d808      	bhi.n	8000556 <bitmap_clear_bit+0x1c>
	*bitmap &= ~(1ULL << index);
 8000544:	2001      	movs	r0, #1
 8000546:	2100      	movs	r1, #0
 8000548:	f7ff fe98 	bl	800027c <__aeabi_llsl>
 800054c:	6822      	ldr	r2, [r4, #0]
 800054e:	6863      	ldr	r3, [r4, #4]
 8000550:	4382      	bics	r2, r0
 8000552:	438b      	bics	r3, r1
 8000554:	c40c      	stmia	r4!, {r2, r3}
}
 8000556:	bd10      	pop	{r4, pc}

08000558 <bitmap_get_bit>:

/*
 * Bitmap get a bit value
 */
int bitmap_get_bit(uint64_t bitmap, int index) {
 8000558:	b510      	push	{r4, lr}
	if(is_index_out_of_bound(index)) return -1;
 800055a:	2a3f      	cmp	r2, #63	@ 0x3f
 800055c:	d804      	bhi.n	8000568 <bitmap_get_bit+0x10>
	return (bitmap >> index) & 1;
 800055e:	f7ff fe81 	bl	8000264 <__aeabi_llsr>
 8000562:	2301      	movs	r3, #1
 8000564:	4018      	ands	r0, r3
}
 8000566:	bd10      	pop	{r4, pc}
	if(is_index_out_of_bound(index)) return -1;
 8000568:	2001      	movs	r0, #1
 800056a:	4240      	negs	r0, r0
 800056c:	e7fb      	b.n	8000566 <bitmap_get_bit+0xe>

0800056e <cb_sq_to_str>:
 *  @param idx  Index 0..63.
 *  @param file [out] Reçoit 0..7 (A..H).
 *  @param rank [out] Reçoit 0..7 (1..8).
 */
static inline void cb_idx_to_coords(uint8_t idx, uint8_t* file, uint8_t* rank){
    *file = (uint8_t)(idx % 8u);
 800056e:	2307      	movs	r3, #7
 8000570:	4003      	ands	r3, r0
 *  @param idx Index 0..63.
 *  @param out Buffer de 3 chars min. (ex: "E2\0").
 */
static inline void cb_sq_to_str(uint8_t idx, char out[3]){
    uint8_t f,r; cb_idx_to_coords(idx,&f,&r);
    out[0] = (char)('A'+f); out[1]=(char)('1'+r); out[2]='\0';
 8000572:	3341      	adds	r3, #65	@ 0x41
 8000574:	700b      	strb	r3, [r1, #0]
 8000576:	2300      	movs	r3, #0
    *rank = (uint8_t)(idx / 8u);
 8000578:	08c0      	lsrs	r0, r0, #3
    out[0] = (char)('A'+f); out[1]=(char)('1'+r); out[2]='\0';
 800057a:	3031      	adds	r0, #49	@ 0x31
 800057c:	7048      	strb	r0, [r1, #1]
 800057e:	708b      	strb	r3, [r1, #2]
}
 8000580:	4770      	bx	lr

08000582 <parse_u8>:
    if(n<3) return false; if(!(s[0]=='0' && (s[1]=='x'||s[1]=='X'))) return false;
    for(size_t i=2;i<n;i++){ char c=s[i];
        if(!((c>='0'&&c<='9')||(c>='a'&&c<='f')||(c>='A'&&c<='F'))) return false; }
    return true; }

static bool parse_u8(const char* t, uint8_t* v){ if(!t||!v) return false;
 8000582:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000584:	0004      	movs	r4, r0
 8000586:	000d      	movs	r5, r1
 8000588:	2800      	cmp	r0, #0
 800058a:	d101      	bne.n	8000590 <parse_u8+0xe>
 800058c:	2000      	movs	r0, #0
    char* e=NULL; unsigned long x=strtoul(t,&e,10); if(e==t||*e) return false;
    if(x>255UL) return false; *v=(uint8_t)x; return true; }
 800058e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    char* e=NULL; unsigned long x=strtoul(t,&e,10); if(e==t||*e) return false;
 8000590:	2300      	movs	r3, #0
 8000592:	220a      	movs	r2, #10
 8000594:	a901      	add	r1, sp, #4
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	f003 ff0a 	bl	80043b0 <strtoul>
 800059c:	9b01      	ldr	r3, [sp, #4]
 800059e:	42a3      	cmp	r3, r4
 80005a0:	d0f4      	beq.n	800058c <parse_u8+0xa>
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d1f1      	bne.n	800058c <parse_u8+0xa>
    if(x>255UL) return false; *v=(uint8_t)x; return true; }
 80005a8:	28ff      	cmp	r0, #255	@ 0xff
 80005aa:	d8ef      	bhi.n	800058c <parse_u8+0xa>
 80005ac:	7028      	strb	r0, [r5, #0]
 80005ae:	2001      	movs	r0, #1
 80005b0:	e7ed      	b.n	800058e <parse_u8+0xc>

080005b2 <s_write>:
static size_t s_write(char* out, size_t cap, const char* fmt, ...){
 80005b2:	b40c      	push	{r2, r3}
 80005b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80005b6:	0005      	movs	r5, r0
 80005b8:	1e0c      	subs	r4, r1, #0
    if(cap==0) return 0;
 80005ba:	d104      	bne.n	80005c6 <s_write+0x14>
 80005bc:	2000      	movs	r0, #0
}
 80005be:	bc3e      	pop	{r1, r2, r3, r4, r5}
 80005c0:	bc08      	pop	{r3}
 80005c2:	b002      	add	sp, #8
 80005c4:	4718      	bx	r3
    va_list ap; va_start(ap, fmt);
 80005c6:	ab07      	add	r3, sp, #28
    int n = vsnprintf(out, cap, fmt, ap);
 80005c8:	9a06      	ldr	r2, [sp, #24]
    va_list ap; va_start(ap, fmt);
 80005ca:	9301      	str	r3, [sp, #4]
    int n = vsnprintf(out, cap, fmt, ap);
 80005cc:	f004 f80c 	bl	80045e8 <vsniprintf>
    if(n<0) return 0; // encoding error
 80005d0:	2800      	cmp	r0, #0
 80005d2:	dbf3      	blt.n	80005bc <s_write+0xa>
    if((size_t)n >= cap){ // truncated
 80005d4:	42a0      	cmp	r0, r4
 80005d6:	d3f2      	bcc.n	80005be <s_write+0xc>
        out[cap-1] = '\0';
 80005d8:	2300      	movs	r3, #0
 80005da:	1e60      	subs	r0, r4, #1
 80005dc:	542b      	strb	r3, [r5, r0]
        return cap-1;
 80005de:	e7ee      	b.n	80005be <s_write+0xc>

080005e0 <convert_reed_index_to_led_index>:
	if((reed_index / 8) % 2 == 0) {
 80005e0:	08c3      	lsrs	r3, r0, #3
 80005e2:	0702      	lsls	r2, r0, #28
 80005e4:	d503      	bpl.n	80005ee <convert_reed_index_to_led_index+0xe>
		return (16 * (uint8_t)(reed_index / 8)) + 7 - reed_index;
 80005e6:	011b      	lsls	r3, r3, #4
 80005e8:	1a1b      	subs	r3, r3, r0
 80005ea:	3307      	adds	r3, #7
 80005ec:	b2d8      	uxtb	r0, r3
}
 80005ee:	4770      	bx	lr

080005f0 <cb_sq_from_str>:
/** @brief Parse une chaîne de 2 caractères (ex: "E2") en index 0..63.
 *  @param s Chaîne "A1".."H8" (insensible à la casse pour la lettre).
 *  @param out_idx [out] Reçoit l'index 0..63 si succès.
 *  @return true si parsing réussi, false sinon.
 */
bool cb_sq_from_str(const char* s, uint8_t* out_idx){
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	0003      	movs	r3, r0
 80005f4:	000c      	movs	r4, r1
    if(!s || !out_idx) return false;
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d021      	beq.n	800063e <cb_sq_from_str+0x4e>
 80005fa:	1e08      	subs	r0, r1, #0
 80005fc:	d01f      	beq.n	800063e <cb_sq_from_str+0x4e>
    char c0 = s[0]; char c1 = s[1];
 80005fe:	7819      	ldrb	r1, [r3, #0]
    if(!s || !out_idx) return false;
 8000600:	1e08      	subs	r0, r1, #0
    if(!c0 || !c1 || s[2]) return false; // exactly 2 chars like 'E2'
 8000602:	d01c      	beq.n	800063e <cb_sq_from_str+0x4e>
    char c0 = s[0]; char c1 = s[1];
 8000604:	785a      	ldrb	r2, [r3, #1]
    if(!s || !out_idx) return false;
 8000606:	1e10      	subs	r0, r2, #0
    if(!c0 || !c1 || s[2]) return false; // exactly 2 chars like 'E2'
 8000608:	d019      	beq.n	800063e <cb_sq_from_str+0x4e>
    if(!s || !out_idx) return false;
 800060a:	2000      	movs	r0, #0
    if(!c0 || !c1 || s[2]) return false; // exactly 2 chars like 'E2'
 800060c:	789d      	ldrb	r5, [r3, #2]
 800060e:	4285      	cmp	r5, r0
 8000610:	d115      	bne.n	800063e <cb_sq_from_str+0x4e>
    if(c0>='a'&&c0<='h') c0 = (char)(c0 - 'a' + 'A');
 8000612:	000b      	movs	r3, r1
 8000614:	3b61      	subs	r3, #97	@ 0x61
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b07      	cmp	r3, #7
 800061a:	d904      	bls.n	8000626 <cb_sq_from_str+0x36>
    if(!(c0>='A'&&c0<='H') || !(c1>='1'&&c1<='8')) return false;
 800061c:	3941      	subs	r1, #65	@ 0x41
 800061e:	b2cb      	uxtb	r3, r1
    if(!s || !out_idx) return false;
 8000620:	0028      	movs	r0, r5
    if(!(c0>='A'&&c0<='H') || !(c1>='1'&&c1<='8')) return false;
 8000622:	2b07      	cmp	r3, #7
 8000624:	d80b      	bhi.n	800063e <cb_sq_from_str+0x4e>
 8000626:	3a31      	subs	r2, #49	@ 0x31
 8000628:	b2d2      	uxtb	r2, r2
    if(!s || !out_idx) return false;
 800062a:	2000      	movs	r0, #0
    if(!(c0>='A'&&c0<='H') || !(c1>='1'&&c1<='8')) return false;
 800062c:	2a07      	cmp	r2, #7
 800062e:	d806      	bhi.n	800063e <cb_sq_from_str+0x4e>
    return (uint8_t)(rank*8u + file);
 8000630:	00d2      	lsls	r2, r2, #3
 8000632:	1898      	adds	r0, r3, r2
    uint8_t file = (uint8_t)(c0 - 'A');
    uint8_t rank = (uint8_t)(c1 - '1');
    *out_idx = cb_coords_to_idx(file, rank);
    *out_idx = convert_reed_index_to_led_index(*out_idx);
 8000634:	b2c0      	uxtb	r0, r0
 8000636:	f7ff ffd3 	bl	80005e0 <convert_reed_index_to_led_index>
 800063a:	7020      	strb	r0, [r4, #0]
    return true;
 800063c:	2001      	movs	r0, #1
}
 800063e:	bd70      	pop	{r4, r5, r6, pc}

08000640 <cb_parse_cmd>:

bool cb_parse_cmd(const char* line_in, cb_cmd_t* out){
 8000640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000642:	0007      	movs	r7, r0
 8000644:	000c      	movs	r4, r1
 8000646:	b09d      	sub	sp, #116	@ 0x74
    if(!line_in || !out) return false;
 8000648:	2800      	cmp	r0, #0
 800064a:	d05d      	beq.n	8000708 <cb_parse_cmd+0xc8>
 800064c:	2900      	cmp	r1, #0
 800064e:	d05b      	beq.n	8000708 <cb_parse_cmd+0xc8>
    memset(out, 0, sizeof(*out));
 8000650:	1c48      	adds	r0, r1, #1
 8000652:	2297      	movs	r2, #151	@ 0x97
 8000654:	2100      	movs	r1, #0
 8000656:	f003 ffe5 	bl	8004624 <memset>
    out->type = CB_CMD_UNKNOWN;
 800065a:	231f      	movs	r3, #31
 800065c:	7023      	strb	r3, [r4, #0]

    // Doit commencer par ':'
    if(line_in[0] != ':') return false;
 800065e:	783b      	ldrb	r3, [r7, #0]
 8000660:	2b3a      	cmp	r3, #58	@ 0x3a
 8000662:	d151      	bne.n	8000708 <cb_parse_cmd+0xc8>

    // Copie mutable
    size_t L = strnlen(line_in, CB_MAX_LINE);
 8000664:	2120      	movs	r1, #32
 8000666:	0038      	movs	r0, r7
 8000668:	f004 f806 	bl	8004678 <strnlen>
 800066c:	0006      	movs	r6, r0
    if(L >= sizeof(out->_scratch)) L = sizeof(out->_scratch)-1;
 800066e:	2821      	cmp	r0, #33	@ 0x21
 8000670:	d900      	bls.n	8000674 <cb_parse_cmd+0x34>
 8000672:	2621      	movs	r6, #33	@ 0x21
    memcpy(out->_scratch, line_in, L);
 8000674:	0025      	movs	r5, r4
 8000676:	3570      	adds	r5, #112	@ 0x70
 8000678:	0032      	movs	r2, r6
 800067a:	0039      	movs	r1, r7
 800067c:	0028      	movs	r0, r5
 800067e:	f004 f833 	bl	80046e8 <memcpy>
    out->_scratch[L] = '\0';
 8000682:	2300      	movs	r3, #0
    while(*p && isspace((unsigned char)*p)) p++;
 8000684:	2208      	movs	r2, #8
    out->_scratch[L] = '\0';
 8000686:	19a6      	adds	r6, r4, r6
 8000688:	3670      	adds	r6, #112	@ 0x70
    while(*p && isspace((unsigned char)*p)) p++;
 800068a:	48b9      	ldr	r0, [pc, #740]	@ (8000970 <cb_parse_cmd+0x330>)
    out->_scratch[L] = '\0';
 800068c:	7033      	strb	r3, [r6, #0]
    while(*p && isspace((unsigned char)*p)) p++;
 800068e:	782b      	ldrb	r3, [r5, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d004      	beq.n	800069e <cb_parse_cmd+0x5e>
 8000694:	5cc1      	ldrb	r1, [r0, r3]
 8000696:	000b      	movs	r3, r1
 8000698:	4013      	ands	r3, r2
 800069a:	4211      	tst	r1, r2
 800069c:	d116      	bne.n	80006cc <cb_parse_cmd+0x8c>
        while(*p && !isspace((unsigned char)*p)) p++;
 800069e:	2108      	movs	r1, #8
 80006a0:	4ab3      	ldr	r2, [pc, #716]	@ (8000970 <cb_parse_cmd+0x330>)
    while(*p && n<max_out){
 80006a2:	7828      	ldrb	r0, [r5, #0]
 80006a4:	2800      	cmp	r0, #0
 80006a6:	d02d      	beq.n	8000704 <cb_parse_cmd+0xc4>
 80006a8:	2b18      	cmp	r3, #24
 80006aa:	d111      	bne.n	80006d0 <cb_parse_cmd+0x90>
 80006ac:	001e      	movs	r6, r3
    char* tok[CB_MAX_TOKENS];
    int nt = split_tokens_ro(out->_scratch, tok, CB_MAX_TOKENS);
    if(nt <= 0) return false;

    // tok[0] commence par ':'
    const char* T0 = tok[0] + 1;
 80006ae:	9d04      	ldr	r5, [sp, #16]

    // --- Groupe simple ---
    if(strcmp(T0,"PING")==0 && nt==1){ out->type=CB_CMD_PING; return true; }
 80006b0:	49b0      	ldr	r1, [pc, #704]	@ (8000974 <cb_parse_cmd+0x334>)
    const char* T0 = tok[0] + 1;
 80006b2:	3501      	adds	r5, #1
    if(strcmp(T0,"PING")==0 && nt==1){ out->type=CB_CMD_PING; return true; }
 80006b4:	0028      	movs	r0, r5
 80006b6:	f7ff fd23 	bl	8000100 <strcmp>
 80006ba:	2800      	cmp	r0, #0
 80006bc:	d126      	bne.n	800070c <cb_parse_cmd+0xcc>
 80006be:	2e01      	cmp	r6, #1
 80006c0:	d124      	bne.n	800070c <cb_parse_cmd+0xcc>
 80006c2:	7026      	strb	r6, [r4, #0]
 80006c4:	2501      	movs	r5, #1
        out->u.cfg_set_kv.n_pairs = cnt;
        return cnt>0;
    }

    return false;
}
 80006c6:	0028      	movs	r0, r5
 80006c8:	b01d      	add	sp, #116	@ 0x74
 80006ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(*p && isspace((unsigned char)*p)) p++;
 80006cc:	3501      	adds	r5, #1
 80006ce:	e7de      	b.n	800068e <cb_parse_cmd+0x4e>
        out[n++] = p;
 80006d0:	1c5e      	adds	r6, r3, #1
 80006d2:	a804      	add	r0, sp, #16
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	501d      	str	r5, [r3, r0]
        while(*p && !isspace((unsigned char)*p)) p++;
 80006d8:	782b      	ldrb	r3, [r5, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d0e7      	beq.n	80006ae <cb_parse_cmd+0x6e>
 80006de:	5cd0      	ldrb	r0, [r2, r3]
 80006e0:	1c6b      	adds	r3, r5, #1
 80006e2:	4208      	tst	r0, r1
 80006e4:	d00a      	beq.n	80006fc <cb_parse_cmd+0xbc>
        *p++ = '\0';
 80006e6:	2000      	movs	r0, #0
 80006e8:	7028      	strb	r0, [r5, #0]
 80006ea:	001d      	movs	r5, r3
        while(*p && isspace((unsigned char)*p)) p++;
 80006ec:	782b      	ldrb	r3, [r5, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d002      	beq.n	80006f8 <cb_parse_cmd+0xb8>
 80006f2:	5cd3      	ldrb	r3, [r2, r3]
 80006f4:	420b      	tst	r3, r1
 80006f6:	d103      	bne.n	8000700 <cb_parse_cmd+0xc0>
        *p++ = '\0';
 80006f8:	0033      	movs	r3, r6
 80006fa:	e7d2      	b.n	80006a2 <cb_parse_cmd+0x62>
        while(*p && !isspace((unsigned char)*p)) p++;
 80006fc:	001d      	movs	r5, r3
 80006fe:	e7eb      	b.n	80006d8 <cb_parse_cmd+0x98>
        while(*p && isspace((unsigned char)*p)) p++;
 8000700:	3501      	adds	r5, #1
 8000702:	e7f3      	b.n	80006ec <cb_parse_cmd+0xac>
 8000704:	1e1e      	subs	r6, r3, #0
    if(nt <= 0) return false;
 8000706:	d1d2      	bne.n	80006ae <cb_parse_cmd+0x6e>
            if(!parse_u8(tok[3],&r)||!parse_u8(tok[4],&g)||!parse_u8(tok[5],&b)) return false;
 8000708:	2500      	movs	r5, #0
 800070a:	e7dc      	b.n	80006c6 <cb_parse_cmd+0x86>
    if(strcmp(T0,"VER?")==0 && nt==1){ out->type=CB_CMD_VER_Q; return true; }
 800070c:	0028      	movs	r0, r5
 800070e:	499a      	ldr	r1, [pc, #616]	@ (8000978 <cb_parse_cmd+0x338>)
 8000710:	f7ff fcf6 	bl	8000100 <strcmp>
 8000714:	2800      	cmp	r0, #0
 8000716:	d104      	bne.n	8000722 <cb_parse_cmd+0xe2>
 8000718:	2e01      	cmp	r6, #1
 800071a:	d102      	bne.n	8000722 <cb_parse_cmd+0xe2>
 800071c:	2302      	movs	r3, #2
 800071e:	7023      	strb	r3, [r4, #0]
 8000720:	e7d0      	b.n	80006c4 <cb_parse_cmd+0x84>
    if(strcmp(T0,"TIME?")==0 && nt==1){ out->type=CB_CMD_TIME_Q; return true; }
 8000722:	0028      	movs	r0, r5
 8000724:	4995      	ldr	r1, [pc, #596]	@ (800097c <cb_parse_cmd+0x33c>)
 8000726:	f7ff fceb 	bl	8000100 <strcmp>
 800072a:	2800      	cmp	r0, #0
 800072c:	d102      	bne.n	8000734 <cb_parse_cmd+0xf4>
 800072e:	2303      	movs	r3, #3
 8000730:	2e01      	cmp	r6, #1
 8000732:	d0f4      	beq.n	800071e <cb_parse_cmd+0xde>
    if(strcmp(T0,"RST")==0 && nt==1){ out->type=CB_CMD_RST; return true; }
 8000734:	0028      	movs	r0, r5
 8000736:	4992      	ldr	r1, [pc, #584]	@ (8000980 <cb_parse_cmd+0x340>)
 8000738:	f7ff fce2 	bl	8000100 <strcmp>
 800073c:	2800      	cmp	r0, #0
 800073e:	d102      	bne.n	8000746 <cb_parse_cmd+0x106>
 8000740:	2304      	movs	r3, #4
 8000742:	2e01      	cmp	r6, #1
 8000744:	d0eb      	beq.n	800071e <cb_parse_cmd+0xde>
    if(strcmp(T0,"SAVE")==0 && nt==1){ out->type=CB_CMD_SAVE; return true; }
 8000746:	0028      	movs	r0, r5
 8000748:	498e      	ldr	r1, [pc, #568]	@ (8000984 <cb_parse_cmd+0x344>)
 800074a:	f7ff fcd9 	bl	8000100 <strcmp>
 800074e:	2800      	cmp	r0, #0
 8000750:	d102      	bne.n	8000758 <cb_parse_cmd+0x118>
 8000752:	2305      	movs	r3, #5
 8000754:	2e01      	cmp	r6, #1
 8000756:	d0e2      	beq.n	800071e <cb_parse_cmd+0xde>
    if(strcmp(T0,"STREAM")==0 && nt==2){
 8000758:	0028      	movs	r0, r5
 800075a:	498b      	ldr	r1, [pc, #556]	@ (8000988 <cb_parse_cmd+0x348>)
 800075c:	f7ff fcd0 	bl	8000100 <strcmp>
 8000760:	2800      	cmp	r0, #0
 8000762:	d116      	bne.n	8000792 <cb_parse_cmd+0x152>
 8000764:	2e02      	cmp	r6, #2
 8000766:	d114      	bne.n	8000792 <cb_parse_cmd+0x152>
        bool on=false; if(!parse_bool_onoff(tok[1], &on)) return false;
 8000768:	9d05      	ldr	r5, [sp, #20]
    if(!t||!v) return false;
 800076a:	2d00      	cmp	r5, #0
 800076c:	d0cc      	beq.n	8000708 <cb_parse_cmd+0xc8>
    if(strcmp(t,"ON")==0){*v=true; return true;}
 800076e:	0028      	movs	r0, r5
 8000770:	4986      	ldr	r1, [pc, #536]	@ (800098c <cb_parse_cmd+0x34c>)
 8000772:	f7ff fcc5 	bl	8000100 <strcmp>
 8000776:	2800      	cmp	r0, #0
 8000778:	d009      	beq.n	800078e <cb_parse_cmd+0x14e>
    if(strcmp(t,"OFF")==0){*v=false; return true;}
 800077a:	0028      	movs	r0, r5
 800077c:	4984      	ldr	r1, [pc, #528]	@ (8000990 <cb_parse_cmd+0x350>)
 800077e:	f7ff fcbf 	bl	8000100 <strcmp>
 8000782:	2800      	cmp	r0, #0
 8000784:	d1c0      	bne.n	8000708 <cb_parse_cmd+0xc8>
        out->type = CB_CMD_STREAM; out->u.stream.on = on; return true;
 8000786:	2306      	movs	r3, #6
 8000788:	7220      	strb	r0, [r4, #8]
 800078a:	7023      	strb	r3, [r4, #0]
 800078c:	e79a      	b.n	80006c4 <cb_parse_cmd+0x84>
    if(strcmp(t,"ON")==0){*v=true; return true;}
 800078e:	2001      	movs	r0, #1
 8000790:	e7f9      	b.n	8000786 <cb_parse_cmd+0x146>
    if(strcmp(T0,"READ")==0 && nt>=2){
 8000792:	0028      	movs	r0, r5
 8000794:	497f      	ldr	r1, [pc, #508]	@ (8000994 <cb_parse_cmd+0x354>)
 8000796:	f7ff fcb3 	bl	8000100 <strcmp>
 800079a:	2800      	cmp	r0, #0
 800079c:	d120      	bne.n	80007e0 <cb_parse_cmd+0x1a0>
 800079e:	2e01      	cmp	r6, #1
 80007a0:	d01e      	beq.n	80007e0 <cb_parse_cmd+0x1a0>
        if(strcmp(tok[1],"ALL")==0 && nt==2){ out->type=CB_CMD_READ_ALL; return true; }
 80007a2:	9d05      	ldr	r5, [sp, #20]
 80007a4:	497c      	ldr	r1, [pc, #496]	@ (8000998 <cb_parse_cmd+0x358>)
 80007a6:	0028      	movs	r0, r5
 80007a8:	f7ff fcaa 	bl	8000100 <strcmp>
 80007ac:	2800      	cmp	r0, #0
 80007ae:	d102      	bne.n	80007b6 <cb_parse_cmd+0x176>
 80007b0:	2307      	movs	r3, #7
 80007b2:	2e02      	cmp	r6, #2
 80007b4:	d0b3      	beq.n	800071e <cb_parse_cmd+0xde>
        if(strcmp(tok[1],"SQ")==0 && nt==3){
 80007b6:	0028      	movs	r0, r5
 80007b8:	4978      	ldr	r1, [pc, #480]	@ (800099c <cb_parse_cmd+0x35c>)
 80007ba:	f7ff fca1 	bl	8000100 <strcmp>
 80007be:	2800      	cmp	r0, #0
 80007c0:	d1a2      	bne.n	8000708 <cb_parse_cmd+0xc8>
 80007c2:	2e03      	cmp	r6, #3
 80007c4:	d1a0      	bne.n	8000708 <cb_parse_cmd+0xc8>
            uint8_t idx; if(!cb_sq_from_str(tok[2], &idx)) return false;
 80007c6:	ae03      	add	r6, sp, #12
 80007c8:	0031      	movs	r1, r6
 80007ca:	9806      	ldr	r0, [sp, #24]
 80007cc:	f7ff ff10 	bl	80005f0 <cb_sq_from_str>
            out->type=CB_CMD_READ_SQ; out->u.read_sq.idx=idx; return true;
 80007d0:	2308      	movs	r3, #8
            uint8_t idx; if(!cb_sq_from_str(tok[2], &idx)) return false;
 80007d2:	1e05      	subs	r5, r0, #0
 80007d4:	d100      	bne.n	80007d8 <cb_parse_cmd+0x198>
 80007d6:	e776      	b.n	80006c6 <cb_parse_cmd+0x86>
                out->type=CB_CMD_LED_OFF_SQ; out->u.led_off_sq.idx=idx; return true;
 80007d8:	7023      	strb	r3, [r4, #0]
 80007da:	7833      	ldrb	r3, [r6, #0]
 80007dc:	7223      	strb	r3, [r4, #8]
 80007de:	e772      	b.n	80006c6 <cb_parse_cmd+0x86>
    if(strcmp(T0,"LED")==0 && nt>=2){
 80007e0:	0028      	movs	r0, r5
 80007e2:	496f      	ldr	r1, [pc, #444]	@ (80009a0 <cb_parse_cmd+0x360>)
 80007e4:	f7ff fc8c 	bl	8000100 <strcmp>
 80007e8:	2800      	cmp	r0, #0
 80007ea:	d000      	beq.n	80007ee <cb_parse_cmd+0x1ae>
 80007ec:	e19f      	b.n	8000b2e <cb_parse_cmd+0x4ee>
 80007ee:	2e01      	cmp	r6, #1
 80007f0:	d100      	bne.n	80007f4 <cb_parse_cmd+0x1b4>
 80007f2:	e19c      	b.n	8000b2e <cb_parse_cmd+0x4ee>
        if(strcmp(tok[1],"SET")==0 && nt==6){
 80007f4:	9d05      	ldr	r5, [sp, #20]
 80007f6:	496b      	ldr	r1, [pc, #428]	@ (80009a4 <cb_parse_cmd+0x364>)
 80007f8:	0028      	movs	r0, r5
 80007fa:	f7ff fc81 	bl	8000100 <strcmp>
 80007fe:	2800      	cmp	r0, #0
 8000800:	d12f      	bne.n	8000862 <cb_parse_cmd+0x222>
 8000802:	2e06      	cmp	r6, #6
 8000804:	d12d      	bne.n	8000862 <cb_parse_cmd+0x222>
            if(!cb_sq_from_str(tok[2], &idx)) return false;
 8000806:	ab02      	add	r3, sp, #8
 8000808:	1c5f      	adds	r7, r3, #1
 800080a:	0039      	movs	r1, r7
 800080c:	9806      	ldr	r0, [sp, #24]
 800080e:	f7ff feef 	bl	80005f0 <cb_sq_from_str>
 8000812:	2800      	cmp	r0, #0
 8000814:	d100      	bne.n	8000818 <cb_parse_cmd+0x1d8>
 8000816:	e777      	b.n	8000708 <cb_parse_cmd+0xc8>
            if(!parse_u8(tok[3], &r) || !parse_u8(tok[4], &g) || !parse_u8(tok[5], &b)) return false;
 8000818:	ab02      	add	r3, sp, #8
 800081a:	1c9e      	adds	r6, r3, #2
 800081c:	0031      	movs	r1, r6
 800081e:	9807      	ldr	r0, [sp, #28]
 8000820:	f7ff feaf 	bl	8000582 <parse_u8>
 8000824:	2800      	cmp	r0, #0
 8000826:	d100      	bne.n	800082a <cb_parse_cmd+0x1ea>
 8000828:	e76e      	b.n	8000708 <cb_parse_cmd+0xc8>
 800082a:	ab02      	add	r3, sp, #8
 800082c:	9808      	ldr	r0, [sp, #32]
 800082e:	1cd9      	adds	r1, r3, #3
 8000830:	f7ff fea7 	bl	8000582 <parse_u8>
 8000834:	2800      	cmp	r0, #0
 8000836:	d100      	bne.n	800083a <cb_parse_cmd+0x1fa>
 8000838:	e766      	b.n	8000708 <cb_parse_cmd+0xc8>
 800083a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800083c:	a903      	add	r1, sp, #12
 800083e:	f7ff fea0 	bl	8000582 <parse_u8>
 8000842:	1e05      	subs	r5, r0, #0
 8000844:	d100      	bne.n	8000848 <cb_parse_cmd+0x208>
 8000846:	e75f      	b.n	8000708 <cb_parse_cmd+0xc8>
            out->type=CB_CMD_LED_SET; out->u.led_set.idx=idx; out->u.led_set.r=r; out->u.led_set.g=g; out->u.led_set.b=b; return true;
 8000848:	230b      	movs	r3, #11
 800084a:	7023      	strb	r3, [r4, #0]
 800084c:	783b      	ldrb	r3, [r7, #0]
 800084e:	7223      	strb	r3, [r4, #8]
 8000850:	7833      	ldrb	r3, [r6, #0]
 8000852:	7263      	strb	r3, [r4, #9]
 8000854:	ab02      	add	r3, sp, #8
 8000856:	78db      	ldrb	r3, [r3, #3]
 8000858:	72a3      	strb	r3, [r4, #10]
 800085a:	ab02      	add	r3, sp, #8
 800085c:	791b      	ldrb	r3, [r3, #4]
 800085e:	72e3      	strb	r3, [r4, #11]
 8000860:	e731      	b.n	80006c6 <cb_parse_cmd+0x86>
        if(strcmp(tok[1],"OFF")==0){
 8000862:	0028      	movs	r0, r5
 8000864:	494a      	ldr	r1, [pc, #296]	@ (8000990 <cb_parse_cmd+0x350>)
 8000866:	f7ff fc4b 	bl	8000100 <strcmp>
 800086a:	2800      	cmp	r0, #0
 800086c:	d115      	bne.n	800089a <cb_parse_cmd+0x25a>
            if(nt==3 && strcmp(tok[2],"ALL")==0){ out->type=CB_CMD_LED_OFF_ALL; return true; }
 800086e:	2e03      	cmp	r6, #3
 8000870:	d000      	beq.n	8000874 <cb_parse_cmd+0x234>
 8000872:	e749      	b.n	8000708 <cb_parse_cmd+0xc8>
 8000874:	9d06      	ldr	r5, [sp, #24]
 8000876:	4948      	ldr	r1, [pc, #288]	@ (8000998 <cb_parse_cmd+0x358>)
 8000878:	0028      	movs	r0, r5
 800087a:	f7ff fc41 	bl	8000100 <strcmp>
 800087e:	230d      	movs	r3, #13
 8000880:	2800      	cmp	r0, #0
 8000882:	d100      	bne.n	8000886 <cb_parse_cmd+0x246>
 8000884:	e74b      	b.n	800071e <cb_parse_cmd+0xde>
                uint8_t idx; if(!cb_sq_from_str(tok[2], &idx)) return false;
 8000886:	ae03      	add	r6, sp, #12
 8000888:	0028      	movs	r0, r5
 800088a:	0031      	movs	r1, r6
 800088c:	f7ff feb0 	bl	80005f0 <cb_sq_from_str>
 8000890:	1e05      	subs	r5, r0, #0
 8000892:	d100      	bne.n	8000896 <cb_parse_cmd+0x256>
 8000894:	e717      	b.n	80006c6 <cb_parse_cmd+0x86>
                out->type=CB_CMD_LED_OFF_SQ; out->u.led_off_sq.idx=idx; return true;
 8000896:	230c      	movs	r3, #12
 8000898:	e79e      	b.n	80007d8 <cb_parse_cmd+0x198>
        if(strcmp(tok[1],"FILL")==0 && nt==5){
 800089a:	0028      	movs	r0, r5
 800089c:	4942      	ldr	r1, [pc, #264]	@ (80009a8 <cb_parse_cmd+0x368>)
 800089e:	f7ff fc2f 	bl	8000100 <strcmp>
 80008a2:	2800      	cmp	r0, #0
 80008a4:	d124      	bne.n	80008f0 <cb_parse_cmd+0x2b0>
 80008a6:	2e05      	cmp	r6, #5
 80008a8:	d122      	bne.n	80008f0 <cb_parse_cmd+0x2b0>
            uint8_t r,g,b; if(!parse_u8(tok[2],&r)||!parse_u8(tok[3],&g)||!parse_u8(tok[4],&b)) return false;
 80008aa:	ab02      	add	r3, sp, #8
 80008ac:	1c9f      	adds	r7, r3, #2
 80008ae:	0039      	movs	r1, r7
 80008b0:	9806      	ldr	r0, [sp, #24]
 80008b2:	f7ff fe66 	bl	8000582 <parse_u8>
 80008b6:	2800      	cmp	r0, #0
 80008b8:	d100      	bne.n	80008bc <cb_parse_cmd+0x27c>
 80008ba:	e725      	b.n	8000708 <cb_parse_cmd+0xc8>
 80008bc:	ab02      	add	r3, sp, #8
 80008be:	1cde      	adds	r6, r3, #3
 80008c0:	0031      	movs	r1, r6
 80008c2:	9807      	ldr	r0, [sp, #28]
 80008c4:	f7ff fe5d 	bl	8000582 <parse_u8>
 80008c8:	2800      	cmp	r0, #0
 80008ca:	d100      	bne.n	80008ce <cb_parse_cmd+0x28e>
 80008cc:	e71c      	b.n	8000708 <cb_parse_cmd+0xc8>
 80008ce:	9808      	ldr	r0, [sp, #32]
 80008d0:	a903      	add	r1, sp, #12
 80008d2:	f7ff fe56 	bl	8000582 <parse_u8>
 80008d6:	1e05      	subs	r5, r0, #0
 80008d8:	d100      	bne.n	80008dc <cb_parse_cmd+0x29c>
 80008da:	e715      	b.n	8000708 <cb_parse_cmd+0xc8>
            out->type=CB_CMD_LED_FILL; out->u.led_fill.r=r; out->u.led_fill.g=g; out->u.led_fill.b=b; return true;
 80008dc:	230e      	movs	r3, #14
 80008de:	7023      	strb	r3, [r4, #0]
 80008e0:	783b      	ldrb	r3, [r7, #0]
 80008e2:	7223      	strb	r3, [r4, #8]
 80008e4:	7833      	ldrb	r3, [r6, #0]
 80008e6:	7263      	strb	r3, [r4, #9]
 80008e8:	ab02      	add	r3, sp, #8
 80008ea:	791b      	ldrb	r3, [r3, #4]
 80008ec:	72a3      	strb	r3, [r4, #10]
 80008ee:	e6ea      	b.n	80006c6 <cb_parse_cmd+0x86>
        if(strcmp(tok[1],"RECT")==0 && nt==8){
 80008f0:	0028      	movs	r0, r5
 80008f2:	492e      	ldr	r1, [pc, #184]	@ (80009ac <cb_parse_cmd+0x36c>)
 80008f4:	f7ff fc04 	bl	8000100 <strcmp>
 80008f8:	2800      	cmp	r0, #0
 80008fa:	d159      	bne.n	80009b0 <cb_parse_cmd+0x370>
 80008fc:	2e08      	cmp	r6, #8
 80008fe:	d157      	bne.n	80009b0 <cb_parse_cmd+0x370>
            if(!cb_sq_from_str(tok[2], &a) || !cb_sq_from_str(tok[3], &bi)) return false;
 8000900:	9806      	ldr	r0, [sp, #24]
 8000902:	a902      	add	r1, sp, #8
 8000904:	f7ff fe74 	bl	80005f0 <cb_sq_from_str>
 8000908:	2800      	cmp	r0, #0
 800090a:	d100      	bne.n	800090e <cb_parse_cmd+0x2ce>
 800090c:	e6fc      	b.n	8000708 <cb_parse_cmd+0xc8>
 800090e:	ab02      	add	r3, sp, #8
 8000910:	1c5f      	adds	r7, r3, #1
 8000912:	0039      	movs	r1, r7
 8000914:	9807      	ldr	r0, [sp, #28]
 8000916:	f7ff fe6b 	bl	80005f0 <cb_sq_from_str>
 800091a:	2800      	cmp	r0, #0
 800091c:	d100      	bne.n	8000920 <cb_parse_cmd+0x2e0>
 800091e:	e6f3      	b.n	8000708 <cb_parse_cmd+0xc8>
            if(!parse_u8(tok[4],&r)||!parse_u8(tok[5],&g)||!parse_u8(tok[6],&bb)) return false;
 8000920:	ab02      	add	r3, sp, #8
 8000922:	1c9e      	adds	r6, r3, #2
 8000924:	0031      	movs	r1, r6
 8000926:	9808      	ldr	r0, [sp, #32]
 8000928:	f7ff fe2b 	bl	8000582 <parse_u8>
 800092c:	2800      	cmp	r0, #0
 800092e:	d100      	bne.n	8000932 <cb_parse_cmd+0x2f2>
 8000930:	e6ea      	b.n	8000708 <cb_parse_cmd+0xc8>
 8000932:	ab02      	add	r3, sp, #8
 8000934:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000936:	1cd9      	adds	r1, r3, #3
 8000938:	f7ff fe23 	bl	8000582 <parse_u8>
 800093c:	2800      	cmp	r0, #0
 800093e:	d100      	bne.n	8000942 <cb_parse_cmd+0x302>
 8000940:	e6e2      	b.n	8000708 <cb_parse_cmd+0xc8>
 8000942:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8000944:	a903      	add	r1, sp, #12
 8000946:	f7ff fe1c 	bl	8000582 <parse_u8>
 800094a:	1e05      	subs	r5, r0, #0
 800094c:	d100      	bne.n	8000950 <cb_parse_cmd+0x310>
 800094e:	e6db      	b.n	8000708 <cb_parse_cmd+0xc8>
            out->type=CB_CMD_LED_RECT; out->u.led_rect.from_idx=a; out->u.led_rect.to_idx=bi; out->u.led_rect.r=r; out->u.led_rect.g=g; out->u.led_rect.b=bb; return true;
 8000950:	230f      	movs	r3, #15
 8000952:	7023      	strb	r3, [r4, #0]
 8000954:	ab02      	add	r3, sp, #8
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	7223      	strb	r3, [r4, #8]
 800095a:	783b      	ldrb	r3, [r7, #0]
 800095c:	7263      	strb	r3, [r4, #9]
 800095e:	7833      	ldrb	r3, [r6, #0]
 8000960:	72a3      	strb	r3, [r4, #10]
 8000962:	ab02      	add	r3, sp, #8
 8000964:	78db      	ldrb	r3, [r3, #3]
 8000966:	72e3      	strb	r3, [r4, #11]
 8000968:	ab02      	add	r3, sp, #8
 800096a:	791b      	ldrb	r3, [r3, #4]
 800096c:	7323      	strb	r3, [r4, #12]
 800096e:	e6aa      	b.n	80006c6 <cb_parse_cmd+0x86>
 8000970:	08005191 	.word	0x08005191
 8000974:	08004f6c 	.word	0x08004f6c
 8000978:	08004f71 	.word	0x08004f71
 800097c:	08004f76 	.word	0x08004f76
 8000980:	08004f7c 	.word	0x08004f7c
 8000984:	08004f80 	.word	0x08004f80
 8000988:	08004f85 	.word	0x08004f85
 800098c:	08004f8c 	.word	0x08004f8c
 8000990:	08004f8f 	.word	0x08004f8f
 8000994:	08004f93 	.word	0x08004f93
 8000998:	08004f98 	.word	0x08004f98
 800099c:	08004f9c 	.word	0x08004f9c
 80009a0:	08004f9f 	.word	0x08004f9f
 80009a4:	08004fa3 	.word	0x08004fa3
 80009a8:	08004fa7 	.word	0x08004fa7
 80009ac:	08004fac 	.word	0x08004fac
        if(strcmp(tok[1],"BITBOARD")==0 && nt==4){
 80009b0:	0028      	movs	r0, r5
 80009b2:	49b2      	ldr	r1, [pc, #712]	@ (8000c7c <cb_parse_cmd+0x63c>)
 80009b4:	f7ff fba4 	bl	8000100 <strcmp>
 80009b8:	2800      	cmp	r0, #0
 80009ba:	d138      	bne.n	8000a2e <cb_parse_cmd+0x3ee>
 80009bc:	2e04      	cmp	r6, #4
 80009be:	d136      	bne.n	8000a2e <cb_parse_cmd+0x3ee>
            uint64_t bits; if(!parse_hex64(tok[2], &bits)) return false;
 80009c0:	9d06      	ldr	r5, [sp, #24]
    if(!t||!v||!is_hex64(t)) return false;
 80009c2:	2d00      	cmp	r5, #0
 80009c4:	d100      	bne.n	80009c8 <cb_parse_cmd+0x388>
 80009c6:	e69f      	b.n	8000708 <cb_parse_cmd+0xc8>
static bool is_hex64(const char* s){ if(!s) return false; size_t n=strlen(s);
 80009c8:	0028      	movs	r0, r5
 80009ca:	f7ff fba3 	bl	8000114 <strlen>
    if(n<3) return false; if(!(s[0]=='0' && (s[1]=='x'||s[1]=='X'))) return false;
 80009ce:	2802      	cmp	r0, #2
 80009d0:	d800      	bhi.n	80009d4 <cb_parse_cmd+0x394>
 80009d2:	e699      	b.n	8000708 <cb_parse_cmd+0xc8>
 80009d4:	782b      	ldrb	r3, [r5, #0]
 80009d6:	2b30      	cmp	r3, #48	@ 0x30
 80009d8:	d000      	beq.n	80009dc <cb_parse_cmd+0x39c>
 80009da:	e695      	b.n	8000708 <cb_parse_cmd+0xc8>
 80009dc:	2120      	movs	r1, #32
 80009de:	786b      	ldrb	r3, [r5, #1]
 80009e0:	438b      	bics	r3, r1
 80009e2:	2b58      	cmp	r3, #88	@ 0x58
 80009e4:	d000      	beq.n	80009e8 <cb_parse_cmd+0x3a8>
 80009e6:	e68f      	b.n	8000708 <cb_parse_cmd+0xc8>
 80009e8:	1caa      	adds	r2, r5, #2
 80009ea:	1828      	adds	r0, r5, r0
    for(size_t i=2;i<n;i++){ char c=s[i];
 80009ec:	7813      	ldrb	r3, [r2, #0]
        if(!((c>='0'&&c<='9')||(c>='a'&&c<='f')||(c>='A'&&c<='F'))) return false; }
 80009ee:	001e      	movs	r6, r3
 80009f0:	3e30      	subs	r6, #48	@ 0x30
 80009f2:	2e09      	cmp	r6, #9
 80009f4:	d904      	bls.n	8000a00 <cb_parse_cmd+0x3c0>
 80009f6:	438b      	bics	r3, r1
 80009f8:	3b41      	subs	r3, #65	@ 0x41
 80009fa:	2b05      	cmp	r3, #5
 80009fc:	d900      	bls.n	8000a00 <cb_parse_cmd+0x3c0>
 80009fe:	e683      	b.n	8000708 <cb_parse_cmd+0xc8>
    for(size_t i=2;i<n;i++){ char c=s[i];
 8000a00:	3201      	adds	r2, #1
 8000a02:	4290      	cmp	r0, r2
 8000a04:	d1f2      	bne.n	80009ec <cb_parse_cmd+0x3ac>
    char* e=NULL; unsigned long long x=strtoull(t,&e,16); if(e==t||*e) return false;
 8000a06:	2300      	movs	r3, #0
 8000a08:	2210      	movs	r2, #16
 8000a0a:	0028      	movs	r0, r5
 8000a0c:	a903      	add	r1, sp, #12
 8000a0e:	9303      	str	r3, [sp, #12]
 8000a10:	f003 fd7a 	bl	8004508 <strtoull>
 8000a14:	9b03      	ldr	r3, [sp, #12]
 8000a16:	429d      	cmp	r5, r3
 8000a18:	d100      	bne.n	8000a1c <cb_parse_cmd+0x3dc>
 8000a1a:	e675      	b.n	8000708 <cb_parse_cmd+0xc8>
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d000      	beq.n	8000a24 <cb_parse_cmd+0x3e4>
 8000a22:	e671      	b.n	8000708 <cb_parse_cmd+0xc8>
            out->type=CB_CMD_LED_BITBOARD; out->u.led_bitboard.bits=bits; return true;
 8000a24:	3310      	adds	r3, #16
 8000a26:	7023      	strb	r3, [r4, #0]
 8000a28:	60a0      	str	r0, [r4, #8]
 8000a2a:	60e1      	str	r1, [r4, #12]
 8000a2c:	e64a      	b.n	80006c4 <cb_parse_cmd+0x84>
        if(strcmp(tok[1],"MOVES")==0 && nt>=5){
 8000a2e:	0028      	movs	r0, r5
 8000a30:	4993      	ldr	r1, [pc, #588]	@ (8000c80 <cb_parse_cmd+0x640>)
 8000a32:	f7ff fb65 	bl	8000100 <strcmp>
 8000a36:	1e07      	subs	r7, r0, #0
 8000a38:	d13c      	bne.n	8000ab4 <cb_parse_cmd+0x474>
 8000a3a:	2e04      	cmp	r6, #4
 8000a3c:	dd3a      	ble.n	8000ab4 <cb_parse_cmd+0x474>
            uint8_t from; if(!cb_sq_from_str(tok[2], &from)) return false;
 8000a3e:	ab02      	add	r3, sp, #8
 8000a40:	9806      	ldr	r0, [sp, #24]
 8000a42:	1cd9      	adds	r1, r3, #3
 8000a44:	f7ff fdd4 	bl	80005f0 <cb_sq_from_str>
 8000a48:	2800      	cmp	r0, #0
 8000a4a:	d100      	bne.n	8000a4e <cb_parse_cmd+0x40e>
 8000a4c:	e65c      	b.n	8000708 <cb_parse_cmd+0xc8>
            int n; if(!parse_i(tok[3], &n) || n<0 || n>64) return false;
 8000a4e:	9d07      	ldr	r5, [sp, #28]
static bool parse_i(const char* t, int* v){ if(!t||!v) return false;
 8000a50:	2d00      	cmp	r5, #0
 8000a52:	d100      	bne.n	8000a56 <cb_parse_cmd+0x416>
 8000a54:	e658      	b.n	8000708 <cb_parse_cmd+0xc8>
    char* e=NULL; long x=strtol(t,&e,10); if(e==t||*e) return false; *v=(int)x; return true; }
 8000a56:	9703      	str	r7, [sp, #12]
 8000a58:	af03      	add	r7, sp, #12
 8000a5a:	220a      	movs	r2, #10
 8000a5c:	0039      	movs	r1, r7
 8000a5e:	0028      	movs	r0, r5
 8000a60:	f003 fc18 	bl	8004294 <strtol>
 8000a64:	9b03      	ldr	r3, [sp, #12]
 8000a66:	429d      	cmp	r5, r3
 8000a68:	d100      	bne.n	8000a6c <cb_parse_cmd+0x42c>
 8000a6a:	e64d      	b.n	8000708 <cb_parse_cmd+0xc8>
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d000      	beq.n	8000a74 <cb_parse_cmd+0x434>
 8000a72:	e649      	b.n	8000708 <cb_parse_cmd+0xc8>
            int n; if(!parse_i(tok[3], &n) || n<0 || n>64) return false;
 8000a74:	2840      	cmp	r0, #64	@ 0x40
 8000a76:	d900      	bls.n	8000a7a <cb_parse_cmd+0x43a>
 8000a78:	e646      	b.n	8000708 <cb_parse_cmd+0xc8>
            if(nt != 4 + n) return false;
 8000a7a:	1d03      	adds	r3, r0, #4
 8000a7c:	42b3      	cmp	r3, r6
 8000a7e:	d000      	beq.n	8000a82 <cb_parse_cmd+0x442>
 8000a80:	e642      	b.n	8000708 <cb_parse_cmd+0xc8>
            out->type=CB_CMD_LED_MOVES; out->u.led_moves.from_idx=from; out->u.led_moves.n_to=(uint8_t)n;
 8000a82:	2317      	movs	r3, #23
 8000a84:	7023      	strb	r3, [r4, #0]
 8000a86:	ab02      	add	r3, sp, #8
 8000a88:	78db      	ldrb	r3, [r3, #3]
 8000a8a:	7260      	strb	r0, [r4, #9]
 8000a8c:	7223      	strb	r3, [r4, #8]
            for(int i=0;i<n;i++){
 8000a8e:	1823      	adds	r3, r4, r0
 8000a90:	ae04      	add	r6, sp, #16
 8000a92:	9300      	str	r3, [sp, #0]
                uint8_t idx; if(!cb_sq_from_str(tok[4+i], &idx)) return false;
 8000a94:	6930      	ldr	r0, [r6, #16]
 8000a96:	0039      	movs	r1, r7
 8000a98:	f7ff fdaa 	bl	80005f0 <cb_sq_from_str>
 8000a9c:	3401      	adds	r4, #1
 8000a9e:	0005      	movs	r5, r0
 8000aa0:	3604      	adds	r6, #4
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	d100      	bne.n	8000aa8 <cb_parse_cmd+0x468>
 8000aa6:	e62f      	b.n	8000708 <cb_parse_cmd+0xc8>
                out->u.led_moves.to_list[i]=idx;
 8000aa8:	783b      	ldrb	r3, [r7, #0]
 8000aaa:	7263      	strb	r3, [r4, #9]
            for(int i=0;i<n;i++){
 8000aac:	9b00      	ldr	r3, [sp, #0]
 8000aae:	42a3      	cmp	r3, r4
 8000ab0:	d1f0      	bne.n	8000a94 <cb_parse_cmd+0x454>
 8000ab2:	e608      	b.n	80006c6 <cb_parse_cmd+0x86>
        if(strcmp(tok[1],"OK")==0 && nt==4){
 8000ab4:	0028      	movs	r0, r5
 8000ab6:	4973      	ldr	r1, [pc, #460]	@ (8000c84 <cb_parse_cmd+0x644>)
 8000ab8:	f7ff fb22 	bl	8000100 <strcmp>
 8000abc:	2800      	cmp	r0, #0
 8000abe:	d119      	bne.n	8000af4 <cb_parse_cmd+0x4b4>
 8000ac0:	2e04      	cmp	r6, #4
 8000ac2:	d117      	bne.n	8000af4 <cb_parse_cmd+0x4b4>
            uint8_t a,b; if(!cb_sq_from_str(tok[2],&a)||!cb_sq_from_str(tok[3],&b)) return false;
 8000ac4:	ab02      	add	r3, sp, #8
 8000ac6:	1cdf      	adds	r7, r3, #3
 8000ac8:	0039      	movs	r1, r7
 8000aca:	9806      	ldr	r0, [sp, #24]
 8000acc:	f7ff fd90 	bl	80005f0 <cb_sq_from_str>
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	d100      	bne.n	8000ad6 <cb_parse_cmd+0x496>
 8000ad4:	e618      	b.n	8000708 <cb_parse_cmd+0xc8>
 8000ad6:	ae03      	add	r6, sp, #12
 8000ad8:	0031      	movs	r1, r6
 8000ada:	9807      	ldr	r0, [sp, #28]
 8000adc:	f7ff fd88 	bl	80005f0 <cb_sq_from_str>
            out->type=CB_CMD_LED_OK; out->u.led_ok.from_idx=a; out->u.led_ok.to_idx=b; return true;
 8000ae0:	2318      	movs	r3, #24
            uint8_t a,b; if(!cb_sq_from_str(tok[2],&a)||!cb_sq_from_str(tok[3],&b)) return false;
 8000ae2:	1e05      	subs	r5, r0, #0
 8000ae4:	d100      	bne.n	8000ae8 <cb_parse_cmd+0x4a8>
 8000ae6:	e60f      	b.n	8000708 <cb_parse_cmd+0xc8>
            out->type=CB_CMD_LED_FAIL; out->u.led_fail.from_idx=a; out->u.led_fail.to_idx=b; return true;
 8000ae8:	7023      	strb	r3, [r4, #0]
 8000aea:	783b      	ldrb	r3, [r7, #0]
 8000aec:	7223      	strb	r3, [r4, #8]
 8000aee:	7833      	ldrb	r3, [r6, #0]
 8000af0:	7263      	strb	r3, [r4, #9]
 8000af2:	e5e8      	b.n	80006c6 <cb_parse_cmd+0x86>
        if(strcmp(tok[1],"FAIL")==0 && nt==4){
 8000af4:	0028      	movs	r0, r5
 8000af6:	4964      	ldr	r1, [pc, #400]	@ (8000c88 <cb_parse_cmd+0x648>)
 8000af8:	f7ff fb02 	bl	8000100 <strcmp>
 8000afc:	2800      	cmp	r0, #0
 8000afe:	d000      	beq.n	8000b02 <cb_parse_cmd+0x4c2>
 8000b00:	e602      	b.n	8000708 <cb_parse_cmd+0xc8>
 8000b02:	2e04      	cmp	r6, #4
 8000b04:	d000      	beq.n	8000b08 <cb_parse_cmd+0x4c8>
 8000b06:	e5ff      	b.n	8000708 <cb_parse_cmd+0xc8>
            uint8_t a,b; if(!cb_sq_from_str(tok[2],&a)||!cb_sq_from_str(tok[3],&b)) return false;
 8000b08:	ab02      	add	r3, sp, #8
 8000b0a:	1cdf      	adds	r7, r3, #3
 8000b0c:	0039      	movs	r1, r7
 8000b0e:	9806      	ldr	r0, [sp, #24]
 8000b10:	f7ff fd6e 	bl	80005f0 <cb_sq_from_str>
 8000b14:	2800      	cmp	r0, #0
 8000b16:	d100      	bne.n	8000b1a <cb_parse_cmd+0x4da>
 8000b18:	e5f6      	b.n	8000708 <cb_parse_cmd+0xc8>
 8000b1a:	ae03      	add	r6, sp, #12
 8000b1c:	0031      	movs	r1, r6
 8000b1e:	9807      	ldr	r0, [sp, #28]
 8000b20:	f7ff fd66 	bl	80005f0 <cb_sq_from_str>
 8000b24:	1e05      	subs	r5, r0, #0
 8000b26:	d100      	bne.n	8000b2a <cb_parse_cmd+0x4ea>
 8000b28:	e5ee      	b.n	8000708 <cb_parse_cmd+0xc8>
            out->type=CB_CMD_LED_FAIL; out->u.led_fail.from_idx=a; out->u.led_fail.to_idx=b; return true;
 8000b2a:	2319      	movs	r3, #25
 8000b2c:	e7dc      	b.n	8000ae8 <cb_parse_cmd+0x4a8>
    if(strcmp(T0,"COLOR")==0 && nt>=2){
 8000b2e:	0028      	movs	r0, r5
 8000b30:	4956      	ldr	r1, [pc, #344]	@ (8000c8c <cb_parse_cmd+0x64c>)
 8000b32:	f7ff fae5 	bl	8000100 <strcmp>
 8000b36:	2800      	cmp	r0, #0
 8000b38:	d153      	bne.n	8000be2 <cb_parse_cmd+0x5a2>
 8000b3a:	2e01      	cmp	r6, #1
 8000b3c:	d051      	beq.n	8000be2 <cb_parse_cmd+0x5a2>
        if(strcmp(tok[1],"SET")==0 && nt==6){
 8000b3e:	9d05      	ldr	r5, [sp, #20]
 8000b40:	4953      	ldr	r1, [pc, #332]	@ (8000c90 <cb_parse_cmd+0x650>)
 8000b42:	0028      	movs	r0, r5
 8000b44:	f7ff fadc 	bl	8000100 <strcmp>
 8000b48:	2800      	cmp	r0, #0
 8000b4a:	d12d      	bne.n	8000ba8 <cb_parse_cmd+0x568>
 8000b4c:	2e06      	cmp	r6, #6
 8000b4e:	d12b      	bne.n	8000ba8 <cb_parse_cmd+0x568>
            if(!parse_u8(tok[3],&r)||!parse_u8(tok[4],&g)||!parse_u8(tok[5],&b)) return false;
 8000b50:	ab02      	add	r3, sp, #8
 8000b52:	1c9f      	adds	r7, r3, #2
 8000b54:	0039      	movs	r1, r7
 8000b56:	9807      	ldr	r0, [sp, #28]
 8000b58:	f7ff fd13 	bl	8000582 <parse_u8>
 8000b5c:	2800      	cmp	r0, #0
 8000b5e:	d100      	bne.n	8000b62 <cb_parse_cmd+0x522>
 8000b60:	e5d2      	b.n	8000708 <cb_parse_cmd+0xc8>
 8000b62:	ab02      	add	r3, sp, #8
 8000b64:	1cde      	adds	r6, r3, #3
 8000b66:	0031      	movs	r1, r6
 8000b68:	9808      	ldr	r0, [sp, #32]
 8000b6a:	f7ff fd0a 	bl	8000582 <parse_u8>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	d100      	bne.n	8000b74 <cb_parse_cmd+0x534>
 8000b72:	e5c9      	b.n	8000708 <cb_parse_cmd+0xc8>
 8000b74:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000b76:	a903      	add	r1, sp, #12
 8000b78:	f7ff fd03 	bl	8000582 <parse_u8>
 8000b7c:	1e05      	subs	r5, r0, #0
 8000b7e:	d100      	bne.n	8000b82 <cb_parse_cmd+0x542>
 8000b80:	e5c2      	b.n	8000708 <cb_parse_cmd+0xc8>
            out->type=CB_CMD_COLOR_SET;
 8000b82:	2314      	movs	r3, #20
            strncpy(out->u.color_set.name, tok[2], CB_MAX_STR-1);
 8000b84:	0020      	movs	r0, r4
            out->type=CB_CMD_COLOR_SET;
 8000b86:	7023      	strb	r3, [r4, #0]
            strncpy(out->u.color_set.name, tok[2], CB_MAX_STR-1);
 8000b88:	2219      	movs	r2, #25
 8000b8a:	9906      	ldr	r1, [sp, #24]
 8000b8c:	3008      	adds	r0, #8
 8000b8e:	f003 fd5f 	bl	8004650 <strncpy>
            out->u.color_set.r=r; out->u.color_set.g=g; out->u.color_set.b=b; return true;
 8000b92:	783a      	ldrb	r2, [r7, #0]
 8000b94:	1ce3      	adds	r3, r4, #3
 8000b96:	77da      	strb	r2, [r3, #31]
 8000b98:	7832      	ldrb	r2, [r6, #0]
 8000b9a:	1d23      	adds	r3, r4, #4
 8000b9c:	77da      	strb	r2, [r3, #31]
 8000b9e:	ab02      	add	r3, sp, #8
 8000ba0:	791b      	ldrb	r3, [r3, #4]
 8000ba2:	3405      	adds	r4, #5
 8000ba4:	77e3      	strb	r3, [r4, #31]
 8000ba6:	e58e      	b.n	80006c6 <cb_parse_cmd+0x86>
        if(strcmp(tok[1],"GET")==0 && nt==3){
 8000ba8:	0028      	movs	r0, r5
 8000baa:	493a      	ldr	r1, [pc, #232]	@ (8000c94 <cb_parse_cmd+0x654>)
 8000bac:	f7ff faa8 	bl	8000100 <strcmp>
 8000bb0:	2800      	cmp	r0, #0
 8000bb2:	d10a      	bne.n	8000bca <cb_parse_cmd+0x58a>
 8000bb4:	2e03      	cmp	r6, #3
 8000bb6:	d108      	bne.n	8000bca <cb_parse_cmd+0x58a>
            out->type=CB_CMD_COLOR_GET;
 8000bb8:	2315      	movs	r3, #21
            strncpy(out->u.color_get.name, tok[2], CB_MAX_STR-1);
 8000bba:	0020      	movs	r0, r4
 8000bbc:	2219      	movs	r2, #25
 8000bbe:	9906      	ldr	r1, [sp, #24]
            out->type=CB_CMD_COLOR_GET;
 8000bc0:	7023      	strb	r3, [r4, #0]
            strncpy(out->u.color_get.name, tok[2], CB_MAX_STR-1);
 8000bc2:	3008      	adds	r0, #8
        out->type=CB_CMD_CFG_GET; strncpy(out->u.cfg_get.key, tok[2], CB_MAX_STR-1); return true;
 8000bc4:	f003 fd44 	bl	8004650 <strncpy>
 8000bc8:	e57c      	b.n	80006c4 <cb_parse_cmd+0x84>
        if(strcmp(tok[1],"?")==0 && nt==2){
 8000bca:	0028      	movs	r0, r5
 8000bcc:	4932      	ldr	r1, [pc, #200]	@ (8000c98 <cb_parse_cmd+0x658>)
 8000bce:	f7ff fa97 	bl	8000100 <strcmp>
 8000bd2:	2800      	cmp	r0, #0
 8000bd4:	d000      	beq.n	8000bd8 <cb_parse_cmd+0x598>
 8000bd6:	e597      	b.n	8000708 <cb_parse_cmd+0xc8>
            out->type=CB_CMD_COLOR_LIST_Q; return true;
 8000bd8:	2316      	movs	r3, #22
        if(strcmp(tok[1],"?")==0 && nt==2){
 8000bda:	2e02      	cmp	r6, #2
 8000bdc:	d000      	beq.n	8000be0 <cb_parse_cmd+0x5a0>
 8000bde:	e593      	b.n	8000708 <cb_parse_cmd+0xc8>
 8000be0:	e59d      	b.n	800071e <cb_parse_cmd+0xde>
    if(strcmp(T0,"CFG?")==0 && nt==1){ out->type=CB_CMD_CFG_Q; return true; }
 8000be2:	0028      	movs	r0, r5
 8000be4:	492d      	ldr	r1, [pc, #180]	@ (8000c9c <cb_parse_cmd+0x65c>)
 8000be6:	f7ff fa8b 	bl	8000100 <strcmp>
 8000bea:	2800      	cmp	r0, #0
 8000bec:	d103      	bne.n	8000bf6 <cb_parse_cmd+0x5b6>
 8000bee:	231c      	movs	r3, #28
 8000bf0:	2e01      	cmp	r6, #1
 8000bf2:	d100      	bne.n	8000bf6 <cb_parse_cmd+0x5b6>
 8000bf4:	e593      	b.n	800071e <cb_parse_cmd+0xde>
    if(strcmp(T0,"CFG")==0 && nt>=3 && strcmp(tok[1],"GET")==0 && nt==3){
 8000bf6:	0028      	movs	r0, r5
 8000bf8:	4929      	ldr	r1, [pc, #164]	@ (8000ca0 <cb_parse_cmd+0x660>)
 8000bfa:	f7ff fa81 	bl	8000100 <strcmp>
 8000bfe:	2800      	cmp	r0, #0
 8000c00:	d000      	beq.n	8000c04 <cb_parse_cmd+0x5c4>
 8000c02:	e581      	b.n	8000708 <cb_parse_cmd+0xc8>
 8000c04:	2e02      	cmp	r6, #2
 8000c06:	dc00      	bgt.n	8000c0a <cb_parse_cmd+0x5ca>
 8000c08:	e57e      	b.n	8000708 <cb_parse_cmd+0xc8>
 8000c0a:	9f05      	ldr	r7, [sp, #20]
 8000c0c:	4921      	ldr	r1, [pc, #132]	@ (8000c94 <cb_parse_cmd+0x654>)
 8000c0e:	0038      	movs	r0, r7
 8000c10:	ad04      	add	r5, sp, #16
 8000c12:	f7ff fa75 	bl	8000100 <strcmp>
 8000c16:	2800      	cmp	r0, #0
 8000c18:	d108      	bne.n	8000c2c <cb_parse_cmd+0x5ec>
 8000c1a:	2e03      	cmp	r6, #3
 8000c1c:	d106      	bne.n	8000c2c <cb_parse_cmd+0x5ec>
        out->type=CB_CMD_CFG_GET; strncpy(out->u.cfg_get.key, tok[2], CB_MAX_STR-1); return true;
 8000c1e:	231d      	movs	r3, #29
 8000c20:	0020      	movs	r0, r4
 8000c22:	2219      	movs	r2, #25
 8000c24:	68a9      	ldr	r1, [r5, #8]
 8000c26:	7023      	strb	r3, [r4, #0]
 8000c28:	3008      	adds	r0, #8
 8000c2a:	e7cb      	b.n	8000bc4 <cb_parse_cmd+0x584>
    if(strcmp(T0,"CFG")==0 && nt>=3 && strcmp(tok[1],"SET")==0){
 8000c2c:	0038      	movs	r0, r7
 8000c2e:	4918      	ldr	r1, [pc, #96]	@ (8000c90 <cb_parse_cmd+0x650>)
 8000c30:	f7ff fa66 	bl	8000100 <strcmp>
 8000c34:	1e07      	subs	r7, r0, #0
 8000c36:	d000      	beq.n	8000c3a <cb_parse_cmd+0x5fa>
 8000c38:	e566      	b.n	8000708 <cb_parse_cmd+0xc8>
        out->type=CB_CMD_CFG_SET_KV;
 8000c3a:	231e      	movs	r3, #30
 8000c3c:	7023      	strb	r3, [r4, #0]
        for(int i=2;i<nt && cnt<CB_MAX_TOKENS;i++){
 8000c3e:	3b1c      	subs	r3, #28
 8000c40:	9300      	str	r3, [sp, #0]
            if(strchr(tok[i],'=')) out->u.cfg_set_kv.pairs[cnt++] = tok[i];
 8000c42:	9b00      	ldr	r3, [sp, #0]
 8000c44:	213d      	movs	r1, #61	@ 0x3d
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	58eb      	ldr	r3, [r5, r3]
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	9301      	str	r3, [sp, #4]
 8000c4e:	f003 fcf1 	bl	8004634 <strchr>
 8000c52:	2800      	cmp	r0, #0
 8000c54:	d005      	beq.n	8000c62 <cb_parse_cmd+0x622>
 8000c56:	1cbb      	adds	r3, r7, #2
 8000c58:	9a01      	ldr	r2, [sp, #4]
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	18e3      	adds	r3, r4, r3
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	3701      	adds	r7, #1
        for(int i=2;i<nt && cnt<CB_MAX_TOKENS;i++){
 8000c62:	9b00      	ldr	r3, [sp, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	429e      	cmp	r6, r3
 8000c6a:	d001      	beq.n	8000c70 <cb_parse_cmd+0x630>
 8000c6c:	2f18      	cmp	r7, #24
 8000c6e:	d1e8      	bne.n	8000c42 <cb_parse_cmd+0x602>
        return cnt>0;
 8000c70:	17fd      	asrs	r5, r7, #31
 8000c72:	1bed      	subs	r5, r5, r7
        out->u.cfg_set_kv.n_pairs = cnt;
 8000c74:	60a7      	str	r7, [r4, #8]
        return cnt>0;
 8000c76:	0fed      	lsrs	r5, r5, #31
 8000c78:	e525      	b.n	80006c6 <cb_parse_cmd+0x86>
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	08004fb1 	.word	0x08004fb1
 8000c80:	08004fba 	.word	0x08004fba
 8000c84:	08004fc0 	.word	0x08004fc0
 8000c88:	08004fc3 	.word	0x08004fc3
 8000c8c:	08004fc8 	.word	0x08004fc8
 8000c90:	08004fa3 	.word	0x08004fa3
 8000c94:	08004fce 	.word	0x08004fce
 8000c98:	08004f7a 	.word	0x08004f7a
 8000c9c:	08004fd2 	.word	0x08004fd2
 8000ca0:	08004fd7 	.word	0x08004fd7

08000ca4 <cb_fmt_evt_lift>:
    if(hw && *hw)  pos += s_write(out+pos, cap-pos, " HW=%s", hw);
    pos += s_write(out+pos, cap-pos, " t=%u\r\n", (unsigned)t_ms);
    return pos>cap?cap:pos;
}

size_t cb_fmt_evt_lift(char* out, size_t cap, uint8_t idx, uint32_t t_ms){
 8000ca4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8000ca6:	001e      	movs	r6, r3
 8000ca8:	0004      	movs	r4, r0
 8000caa:	000d      	movs	r5, r1
 8000cac:	0010      	movs	r0, r2
    char sq[3]; cb_sq_to_str(idx, sq);
 8000cae:	a903      	add	r1, sp, #12
 8000cb0:	f7ff fc5d 	bl	800056e <cb_sq_to_str>
    return s_write(out, cap, "EVT LIFT %s t=%u\r\n", sq, (unsigned)t_ms);
 8000cb4:	0029      	movs	r1, r5
 8000cb6:	0020      	movs	r0, r4
 8000cb8:	4a03      	ldr	r2, [pc, #12]	@ (8000cc8 <cb_fmt_evt_lift+0x24>)
 8000cba:	9600      	str	r6, [sp, #0]
 8000cbc:	ab03      	add	r3, sp, #12
 8000cbe:	f7ff fc78 	bl	80005b2 <s_write>
}
 8000cc2:	b004      	add	sp, #16
 8000cc4:	bd70      	pop	{r4, r5, r6, pc}
 8000cc6:	46c0      	nop			@ (mov r8, r8)
 8000cc8:	08004fdb 	.word	0x08004fdb

08000ccc <cb_fmt_evt_place>:

size_t cb_fmt_evt_place(char* out, size_t cap, uint8_t idx, uint32_t t_ms){
 8000ccc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8000cce:	001e      	movs	r6, r3
 8000cd0:	0004      	movs	r4, r0
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	0010      	movs	r0, r2
    char sq[3]; cb_sq_to_str(idx, sq);
 8000cd6:	a903      	add	r1, sp, #12
 8000cd8:	f7ff fc49 	bl	800056e <cb_sq_to_str>
    return s_write(out, cap, "EVT PLACE %s t=%u\r\n", sq, (unsigned)t_ms);
 8000cdc:	0029      	movs	r1, r5
 8000cde:	0020      	movs	r0, r4
 8000ce0:	4a03      	ldr	r2, [pc, #12]	@ (8000cf0 <cb_fmt_evt_place+0x24>)
 8000ce2:	9600      	str	r6, [sp, #0]
 8000ce4:	ab03      	add	r3, sp, #12
 8000ce6:	f7ff fc64 	bl	80005b2 <s_write>
}
 8000cea:	b004      	add	sp, #16
 8000cec:	bd70      	pop	{r4, r5, r6, pc}
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	08004fee 	.word	0x08004fee

08000cf4 <uart_fifo_init>:
#include "fifo.h"
#include <string.h>
#include "stm32g0xx_hal.h"

void uart_fifo_init(uart_fifo_t *f) {
    f->len = 0;
 8000cf4:	2280      	movs	r2, #128	@ 0x80
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	0092      	lsls	r2, r2, #2
 8000cfa:	5283      	strh	r3, [r0, r2]
    f->overflow = 0;
 8000cfc:	3204      	adds	r2, #4
 8000cfe:	5083      	str	r3, [r0, r2]
}
 8000d00:	4770      	bx	lr

08000d02 <uart_fifo_push_isr>:

int uart_fifo_push_isr(uart_fifo_t *f, uint8_t c) {
    // appelé depuis ISR : pas de désactivation d'interrupt ici
    uint16_t l = f->len;
 8000d02:	2280      	movs	r2, #128	@ 0x80
int uart_fifo_push_isr(uart_fifo_t *f, uint8_t c) {
 8000d04:	b510      	push	{r4, lr}
    uint16_t l = f->len;
 8000d06:	0092      	lsls	r2, r2, #2
 8000d08:	5a84      	ldrh	r4, [r0, r2]
 8000d0a:	b2a3      	uxth	r3, r4
    if (l >= UART_FIFO_SIZE) {
 8000d0c:	4294      	cmp	r4, r2
 8000d0e:	d305      	bcc.n	8000d1c <uart_fifo_push_isr+0x1a>
        f->overflow++;
 8000d10:	3204      	adds	r2, #4
 8000d12:	5883      	ldr	r3, [r0, r2]
 8000d14:	3301      	adds	r3, #1
 8000d16:	5083      	str	r3, [r0, r2]
        return 0; // overflow, on jette l'octet
 8000d18:	2000      	movs	r0, #0
    }
    f->buf[l] = c;
    // écrire len en dernier pour éviter de laisser état incohérent
    f->len = l + 1;
    return 1;
}
 8000d1a:	bd10      	pop	{r4, pc}
    f->buf[l] = c;
 8000d1c:	54c1      	strb	r1, [r0, r3]
    f->len = l + 1;
 8000d1e:	3301      	adds	r3, #1
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	5283      	strh	r3, [r0, r2]
    return 1;
 8000d24:	2001      	movs	r0, #1
 8000d26:	e7f8      	b.n	8000d1a <uart_fifo_push_isr+0x18>

08000d28 <uart_fifo_get_command>:

int uart_fifo_get_command(uart_fifo_t *f, char *out, size_t out_size) {
 8000d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2a:	0005      	movs	r5, r0
 8000d2c:	000f      	movs	r7, r1
 8000d2e:	b085      	sub	sp, #20
    if (out_size == 0) return 0;
 8000d30:	2a00      	cmp	r2, #0
 8000d32:	d00c      	beq.n	8000d4e <uart_fifo_get_command+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i

    // courte section critique pour éviter que l'ISR ne modifie len pendant la recherche/copie.
    __disable_irq();

    uint16_t len = f->len;
 8000d36:	2380      	movs	r3, #128	@ 0x80
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	5ac3      	ldrh	r3, [r0, r3]
    uint16_t pos = 0xFFFF;
    // chercher '\n'
    for (uint16_t i = 0; i < len; ++i) {
        if (f->buf[i] == '\n') {
 8000d3c:	1e41      	subs	r1, r0, #1
    uint16_t len = f->len;
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	9302      	str	r3, [sp, #8]
    for (uint16_t i = 0; i < len; ++i) {
 8000d42:	2300      	movs	r3, #0
 8000d44:	9802      	ldr	r0, [sp, #8]
 8000d46:	b29e      	uxth	r6, r3
 8000d48:	42b0      	cmp	r0, r6
 8000d4a:	d804      	bhi.n	8000d56 <uart_fifo_get_command+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d4c:	b662      	cpsie	i
    if (out_size == 0) return 0;
 8000d4e:	2400      	movs	r4, #0
    }
    f->len = remaining;

    __enable_irq();
    return ret;
}
 8000d50:	0020      	movs	r0, r4
 8000d52:	b005      	add	sp, #20
 8000d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (f->buf[i] == '\n') {
 8000d56:	1c58      	adds	r0, r3, #1
 8000d58:	9003      	str	r0, [sp, #12]
 8000d5a:	5c08      	ldrb	r0, [r1, r0]
 8000d5c:	280a      	cmp	r0, #10
 8000d5e:	d030      	beq.n	8000dc2 <uart_fifo_get_command+0x9a>
 8000d60:	9b03      	ldr	r3, [sp, #12]
 8000d62:	e7ef      	b.n	8000d44 <uart_fifo_get_command+0x1c>
    if (cmd_end > 0 && f->buf[cmd_end - 1] == '\r') {
 8000d64:	18eb      	adds	r3, r5, r3
 8000d66:	3b01      	subs	r3, #1
 8000d68:	781b      	ldrb	r3, [r3, #0]
    uint16_t cmd_end = pos; // index du '\n'
 8000d6a:	0034      	movs	r4, r6
    if (cmd_end > 0 && f->buf[cmd_end - 1] == '\r') {
 8000d6c:	2b0d      	cmp	r3, #13
 8000d6e:	d101      	bne.n	8000d74 <uart_fifo_get_command+0x4c>
        cmd_end -= 1;
 8000d70:	1e74      	subs	r4, r6, #1
 8000d72:	b2a4      	uxth	r4, r4
    if ((size_t)cmd_end < out_size) {
 8000d74:	9401      	str	r4, [sp, #4]
 8000d76:	4294      	cmp	r4, r2
 8000d78:	d218      	bcs.n	8000dac <uart_fifo_get_command+0x84>
        memcpy(out, f->buf, cmd_end);
 8000d7a:	9a01      	ldr	r2, [sp, #4]
 8000d7c:	0029      	movs	r1, r5
 8000d7e:	0038      	movs	r0, r7
 8000d80:	f003 fcb2 	bl	80046e8 <memcpy>
        out[cmd_end] = '\0';
 8000d84:	2300      	movs	r3, #0
 8000d86:	9a01      	ldr	r2, [sp, #4]
 8000d88:	54bb      	strb	r3, [r7, r2]
    uint16_t remaining = len - (pos + 1);
 8000d8a:	9b02      	ldr	r3, [sp, #8]
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	1b9e      	subs	r6, r3, r6
 8000d90:	b2b6      	uxth	r6, r6
    if (remaining > 0) {
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d005      	beq.n	8000da2 <uart_fifo_get_command+0x7a>
        memmove(f->buf, f->buf + pos + 1, remaining);
 8000d96:	9b03      	ldr	r3, [sp, #12]
 8000d98:	0032      	movs	r2, r6
 8000d9a:	0028      	movs	r0, r5
 8000d9c:	18e9      	adds	r1, r5, r3
 8000d9e:	f003 fc2f 	bl	8004600 <memmove>
    f->len = remaining;
 8000da2:	2380      	movs	r3, #128	@ 0x80
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	52ee      	strh	r6, [r5, r3]
 8000da8:	b662      	cpsie	i
    return ret;
 8000daa:	e7d1      	b.n	8000d50 <uart_fifo_get_command+0x28>
        memcpy(out, f->buf, out_size - 1);
 8000dac:	1e54      	subs	r4, r2, #1
 8000dae:	0022      	movs	r2, r4
 8000db0:	0029      	movs	r1, r5
 8000db2:	0038      	movs	r0, r7
 8000db4:	f003 fc98 	bl	80046e8 <memcpy>
        out[out_size - 1] = '\0';
 8000db8:	2300      	movs	r3, #0
 8000dba:	553b      	strb	r3, [r7, r4]
        ret = -1;
 8000dbc:	2401      	movs	r4, #1
 8000dbe:	4264      	negs	r4, r4
 8000dc0:	e7e3      	b.n	8000d8a <uart_fifo_get_command+0x62>
    if (cmd_end > 0 && f->buf[cmd_end - 1] == '\r') {
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d1ce      	bne.n	8000d64 <uart_fifo_get_command+0x3c>
    uint16_t cmd_end = pos; // index du '\n'
 8000dc6:	0034      	movs	r4, r6
    if ((size_t)cmd_end < out_size) {
 8000dc8:	9601      	str	r6, [sp, #4]
 8000dca:	e7d6      	b.n	8000d7a <uart_fifo_get_command+0x52>

08000dcc <uart_write>:
void leds_clear(uint8_t colors[][3]);

/* --- helpers UART --- */
static inline uint32_t t_ms(void){ return HAL_GetTick(); }
static void uart_write(const char *s)
{
 8000dcc:	b510      	push	{r4, lr}
 8000dce:	0004      	movs	r4, r0
    HAL_UART_Transmit(&huart2, (uint8_t*)s, (uint16_t)strlen(s), 100);
 8000dd0:	f7ff f9a0 	bl	8000114 <strlen>
 8000dd4:	2364      	movs	r3, #100	@ 0x64
 8000dd6:	b282      	uxth	r2, r0
 8000dd8:	0021      	movs	r1, r4
 8000dda:	4802      	ldr	r0, [pc, #8]	@ (8000de4 <uart_write+0x18>)
 8000ddc:	f003 f801 	bl	8003de2 <HAL_UART_Transmit>
}
 8000de0:	bd10      	pop	{r4, pc}
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	20000284 	.word	0x20000284

08000de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de8:	b510      	push	{r4, lr}
 8000dea:	b092      	sub	sp, #72	@ 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dec:	2234      	movs	r2, #52	@ 0x34
 8000dee:	2100      	movs	r1, #0
 8000df0:	a805      	add	r0, sp, #20
 8000df2:	f003 fc17 	bl	8004624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df6:	2210      	movs	r2, #16
 8000df8:	2100      	movs	r1, #0
 8000dfa:	a801      	add	r0, sp, #4
 8000dfc:	f003 fc12 	bl	8004624 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e00:	2080      	movs	r0, #128	@ 0x80
 8000e02:	0080      	lsls	r0, r0, #2
 8000e04:	f001 f890 	bl	8001f28 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e08:	2380      	movs	r3, #128	@ 0x80
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000e12:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000e14:	3308      	adds	r3, #8
 8000e16:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e18:	2380      	movs	r3, #128	@ 0x80
 8000e1a:	029b      	lsls	r3, r3, #10
 8000e1c:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000e1e:	23c0      	movs	r3, #192	@ 0xc0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e20:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e22:	2240      	movs	r2, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000e24:	05db      	lsls	r3, r3, #23
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e26:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e28:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e2a:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e2c:	940c      	str	r4, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e2e:	940d      	str	r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000e30:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e32:	f001 f8a5 	bl	8001f80 <HAL_RCC_OscConfig>
 8000e36:	2800      	cmp	r0, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0x56>
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <SystemClock_Config+0x54>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3e:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e40:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e42:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e44:	2101      	movs	r1, #1
 8000e46:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e48:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4a:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e4c:	f001 faf8 	bl	8002440 <HAL_RCC_ClockConfig>
 8000e50:	2800      	cmp	r0, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0x70>
 8000e54:	b672      	cpsid	i
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <SystemClock_Config+0x6e>
}
 8000e58:	b012      	add	sp, #72	@ 0x48
 8000e5a:	bd10      	pop	{r4, pc}

08000e5c <HAL_TIM_PWM_Send_To_DMA>:
    ws2812_transfer_complete = 0;
 8000e5c:	2100      	movs	r1, #0
{
 8000e5e:	b570      	push	{r4, r5, r6, lr}
    HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t*)pwm_data, LED_BUFFER_SIZE);
 8000e60:	4c05      	ldr	r4, [pc, #20]	@ (8000e78 <HAL_TIM_PWM_Send_To_DMA+0x1c>)
    ws2812_transfer_complete = 0;
 8000e62:	4d06      	ldr	r5, [pc, #24]	@ (8000e7c <HAL_TIM_PWM_Send_To_DMA+0x20>)
{
 8000e64:	0002      	movs	r2, r0
    HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t*)pwm_data, LED_BUFFER_SIZE);
 8000e66:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <HAL_TIM_PWM_Send_To_DMA+0x24>)
 8000e68:	0020      	movs	r0, r4
    ws2812_transfer_complete = 0;
 8000e6a:	7029      	strb	r1, [r5, #0]
    HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t*)pwm_data, LED_BUFFER_SIZE);
 8000e6c:	f002 f8f2 	bl	8003054 <HAL_TIM_PWM_Start_DMA>
    while(!ws2812_transfer_complete) {}
 8000e70:	782b      	ldrb	r3, [r5, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0fc      	beq.n	8000e70 <HAL_TIM_PWM_Send_To_DMA+0x14>
}
 8000e76:	bd70      	pop	{r4, r5, r6, pc}
 8000e78:	20000374 	.word	0x20000374
 8000e7c:	20000414 	.word	0x20000414
 8000e80:	00000632 	.word	0x00000632

08000e84 <HAL_TIM_PWM_PulseFinishedCallback>:
    if(htim->Instance == TIM17)
 8000e84:	4b05      	ldr	r3, [pc, #20]	@ (8000e9c <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 8000e86:	6802      	ldr	r2, [r0, #0]
{
 8000e88:	b510      	push	{r4, lr}
    if(htim->Instance == TIM17)
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d105      	bne.n	8000e9a <HAL_TIM_PWM_PulseFinishedCallback+0x16>
        HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8000e8e:	2100      	movs	r1, #0
 8000e90:	f002 f95a 	bl	8003148 <HAL_TIM_PWM_Stop_DMA>
        ws2812_transfer_complete = 1;
 8000e94:	2201      	movs	r2, #1
 8000e96:	4b02      	ldr	r3, [pc, #8]	@ (8000ea0 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8000e98:	701a      	strb	r2, [r3, #0]
}
 8000e9a:	bd10      	pop	{r4, pc}
 8000e9c:	40014800 	.word	0x40014800
 8000ea0:	20000414 	.word	0x20000414

08000ea4 <HAL_UART_RxCpltCallback>:
    if (huart->Instance == USART2)
 8000ea4:	4b07      	ldr	r3, [pc, #28]	@ (8000ec4 <HAL_UART_RxCpltCallback+0x20>)
 8000ea6:	6802      	ldr	r2, [r0, #0]
{
 8000ea8:	b510      	push	{r4, lr}
    if (huart->Instance == USART2)
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d109      	bne.n	8000ec2 <HAL_UART_RxCpltCallback+0x1e>
    		uart_fifo_push_isr(&uartFifo, rx_data);
 8000eae:	4c06      	ldr	r4, [pc, #24]	@ (8000ec8 <HAL_UART_RxCpltCallback+0x24>)
 8000eb0:	4806      	ldr	r0, [pc, #24]	@ (8000ecc <HAL_UART_RxCpltCallback+0x28>)
 8000eb2:	7821      	ldrb	r1, [r4, #0]
 8000eb4:	f7ff ff25 	bl	8000d02 <uart_fifo_push_isr>
        HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	0021      	movs	r1, r4
 8000ebc:	4804      	ldr	r0, [pc, #16]	@ (8000ed0 <HAL_UART_RxCpltCallback+0x2c>)
 8000ebe:	f003 f92d 	bl	800411c <HAL_UART_Receive_IT>
}
 8000ec2:	bd10      	pop	{r4, pc}
 8000ec4:	40004400 	.word	0x40004400
 8000ec8:	20000280 	.word	0x20000280
 8000ecc:	20000078 	.word	0x20000078
 8000ed0:	20000284 	.word	0x20000284

08000ed4 <is_a_piece_lift>:
uint8_t is_a_piece_lift(uint64_t current, uint64_t old) {
 8000ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000ed6:	0005      	movs	r5, r0
 8000ed8:	0016      	movs	r6, r2
 8000eda:	001f      	movs	r7, r3
 8000edc:	2400      	movs	r4, #0
 8000ede:	9101      	str	r1, [sp, #4]
		if(bitmap_get_bit(old, index) == 1 && bitmap_get_bit(current, index) == 0) {
 8000ee0:	0022      	movs	r2, r4
 8000ee2:	0030      	movs	r0, r6
 8000ee4:	0039      	movs	r1, r7
 8000ee6:	f7ff fb37 	bl	8000558 <bitmap_get_bit>
 8000eea:	2801      	cmp	r0, #1
 8000eec:	d004      	beq.n	8000ef8 <is_a_piece_lift+0x24>
	for(uint8_t index = 0; index < 64; ++index) {
 8000eee:	3401      	adds	r4, #1
 8000ef0:	2c40      	cmp	r4, #64	@ 0x40
 8000ef2:	d1f5      	bne.n	8000ee0 <is_a_piece_lift+0xc>
	return NO_INDEX_FOUND;
 8000ef4:	20ff      	movs	r0, #255	@ 0xff
}
 8000ef6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if(bitmap_get_bit(old, index) == 1 && bitmap_get_bit(current, index) == 0) {
 8000ef8:	0022      	movs	r2, r4
 8000efa:	0028      	movs	r0, r5
 8000efc:	9901      	ldr	r1, [sp, #4]
 8000efe:	f7ff fb2b 	bl	8000558 <bitmap_get_bit>
 8000f02:	2800      	cmp	r0, #0
 8000f04:	d1f3      	bne.n	8000eee <is_a_piece_lift+0x1a>
 8000f06:	b2e0      	uxtb	r0, r4
 8000f08:	e7f5      	b.n	8000ef6 <is_a_piece_lift+0x22>

08000f0a <is_a_piece_placed>:
uint8_t is_a_piece_placed(uint64_t current, uint64_t old) {
 8000f0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f0c:	0005      	movs	r5, r0
 8000f0e:	0016      	movs	r6, r2
 8000f10:	001f      	movs	r7, r3
 8000f12:	2400      	movs	r4, #0
 8000f14:	9101      	str	r1, [sp, #4]
		if(bitmap_get_bit(old, index) == 0 && bitmap_get_bit(current, index) == 1) {
 8000f16:	0022      	movs	r2, r4
 8000f18:	0030      	movs	r0, r6
 8000f1a:	0039      	movs	r1, r7
 8000f1c:	f7ff fb1c 	bl	8000558 <bitmap_get_bit>
 8000f20:	2800      	cmp	r0, #0
 8000f22:	d004      	beq.n	8000f2e <is_a_piece_placed+0x24>
	for(uint8_t index = 0; index < 64; ++index) {
 8000f24:	3401      	adds	r4, #1
 8000f26:	2c40      	cmp	r4, #64	@ 0x40
 8000f28:	d1f5      	bne.n	8000f16 <is_a_piece_placed+0xc>
	return NO_INDEX_FOUND;
 8000f2a:	20ff      	movs	r0, #255	@ 0xff
}
 8000f2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if(bitmap_get_bit(old, index) == 0 && bitmap_get_bit(current, index) == 1) {
 8000f2e:	0022      	movs	r2, r4
 8000f30:	0028      	movs	r0, r5
 8000f32:	9901      	ldr	r1, [sp, #4]
 8000f34:	f7ff fb10 	bl	8000558 <bitmap_get_bit>
 8000f38:	2801      	cmp	r0, #1
 8000f3a:	d1f3      	bne.n	8000f24 <is_a_piece_placed+0x1a>
 8000f3c:	b2e0      	uxtb	r0, r4
 8000f3e:	e7f5      	b.n	8000f2c <is_a_piece_placed+0x22>

08000f40 <are_bitamps_the_same>:
uint8_t are_bitamps_the_same(uint64_t bitmap_a, uint64_t bitmap_b) {
 8000f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f42:	0015      	movs	r5, r2
 8000f44:	001e      	movs	r6, r3
 8000f46:	2400      	movs	r4, #0
 8000f48:	9000      	str	r0, [sp, #0]
 8000f4a:	9101      	str	r1, [sp, #4]
		if(bitmap_get_bit(bitmap_a, index) != bitmap_get_bit(bitmap_b, index)) {
 8000f4c:	0022      	movs	r2, r4
 8000f4e:	9901      	ldr	r1, [sp, #4]
 8000f50:	9800      	ldr	r0, [sp, #0]
 8000f52:	f7ff fb01 	bl	8000558 <bitmap_get_bit>
 8000f56:	0022      	movs	r2, r4
 8000f58:	0007      	movs	r7, r0
 8000f5a:	0031      	movs	r1, r6
 8000f5c:	0028      	movs	r0, r5
 8000f5e:	f7ff fafb 	bl	8000558 <bitmap_get_bit>
 8000f62:	4287      	cmp	r7, r0
 8000f64:	d104      	bne.n	8000f70 <are_bitamps_the_same+0x30>
	for(uint8_t index = 0; index < 64; ++index) {
 8000f66:	3401      	adds	r4, #1
 8000f68:	2c40      	cmp	r4, #64	@ 0x40
 8000f6a:	d1ef      	bne.n	8000f4c <are_bitamps_the_same+0xc>
	return NO_INDEX_FOUND;
 8000f6c:	20ff      	movs	r0, #255	@ 0xff
}
 8000f6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000f70:	b2e0      	uxtb	r0, r4
 8000f72:	e7fc      	b.n	8000f6e <are_bitamps_the_same+0x2e>

08000f74 <set_gpio_column>:
void set_gpio_column(uint8_t column) {
 8000f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f76:	0006      	movs	r6, r0
	uint8_t mask = 1;
 8000f78:	2401      	movs	r4, #1
 8000f7a:	4d08      	ldr	r5, [pc, #32]	@ (8000f9c <set_gpio_column+0x28>)
 8000f7c:	4f08      	ldr	r7, [pc, #32]	@ (8000fa0 <set_gpio_column+0x2c>)
		if(column & mask) {
 8000f7e:	0022      	movs	r2, r4
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_SET);
 8000f80:	69a8      	ldr	r0, [r5, #24]
 8000f82:	8ba9      	ldrh	r1, [r5, #28]
		if(column & mask) {
 8000f84:	4032      	ands	r2, r6
 8000f86:	4234      	tst	r4, r6
 8000f88:	d000      	beq.n	8000f8c <set_gpio_column+0x18>
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
		mask *= 2;
 8000f8c:	0064      	lsls	r4, r4, #1
	for(uint8_t i = COL0; i < PIN_NUMBER_FOR_COLUMN + COL0; ++i) {
 8000f8e:	3508      	adds	r5, #8
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_RESET);
 8000f90:	f000 ff1c 	bl	8001dcc <HAL_GPIO_WritePin>
		mask *= 2;
 8000f94:	b2e4      	uxtb	r4, r4
	for(uint8_t i = COL0; i < PIN_NUMBER_FOR_COLUMN + COL0; ++i) {
 8000f96:	42bd      	cmp	r5, r7
 8000f98:	d1f1      	bne.n	8000f7e <set_gpio_column+0xa>
}
 8000f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f9c:	080050d4 	.word	0x080050d4
 8000fa0:	080050ec 	.word	0x080050ec

08000fa4 <set_gpio_line>:
void set_gpio_line(uint8_t line) {
 8000fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa6:	0006      	movs	r6, r0
	uint8_t mask = 1;
 8000fa8:	2401      	movs	r4, #1
 8000faa:	4d08      	ldr	r5, [pc, #32]	@ (8000fcc <set_gpio_line+0x28>)
 8000fac:	4f08      	ldr	r7, [pc, #32]	@ (8000fd0 <set_gpio_line+0x2c>)
		if(line & mask) {
 8000fae:	0022      	movs	r2, r4
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_SET);
 8000fb0:	6828      	ldr	r0, [r5, #0]
 8000fb2:	88a9      	ldrh	r1, [r5, #4]
		if(line & mask) {
 8000fb4:	4032      	ands	r2, r6
 8000fb6:	4234      	tst	r4, r6
 8000fb8:	d000      	beq.n	8000fbc <set_gpio_line+0x18>
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_SET);
 8000fba:	2201      	movs	r2, #1
		mask *= 2;
 8000fbc:	0064      	lsls	r4, r4, #1
	for(uint8_t i = ROW0; i < PIN_NUMBER_FOR_LINE; ++i) {
 8000fbe:	3508      	adds	r5, #8
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_RESET);
 8000fc0:	f000 ff04 	bl	8001dcc <HAL_GPIO_WritePin>
		mask *= 2;
 8000fc4:	b2e4      	uxtb	r4, r4
	for(uint8_t i = ROW0; i < PIN_NUMBER_FOR_LINE; ++i) {
 8000fc6:	42bd      	cmp	r5, r7
 8000fc8:	d1f1      	bne.n	8000fae <set_gpio_line+0xa>
}
 8000fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fcc:	080050d4 	.word	0x080050d4
 8000fd0:	080050ec 	.word	0x080050ec

08000fd4 <read_reed_value>:
uint8_t read_reed_value(Square square) {
 8000fd4:	b513      	push	{r0, r1, r4, lr}
 8000fd6:	ac01      	add	r4, sp, #4
 8000fd8:	8020      	strh	r0, [r4, #0]
	set_gpio_column(square.column);
 8000fda:	b2c0      	uxtb	r0, r0
 8000fdc:	f7ff ffca 	bl	8000f74 <set_gpio_column>
	set_gpio_line(square.line);
 8000fe0:	7860      	ldrb	r0, [r4, #1]
 8000fe2:	f7ff ffdf 	bl	8000fa4 <set_gpio_line>
	return HAL_GPIO_ReadPin(gpio_pins[READ].port, gpio_pins[READ].pin);
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	4801      	ldr	r0, [pc, #4]	@ (8000ff0 <read_reed_value+0x1c>)
 8000fea:	f000 fee9 	bl	8001dc0 <HAL_GPIO_ReadPin>
}
 8000fee:	bd16      	pop	{r1, r2, r4, pc}
 8000ff0:	50000400 	.word	0x50000400

08000ff4 <read_full_board>:
void read_full_board(uint64_t *board_bitmap) {
 8000ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ff6:	0006      	movs	r6, r0
 8000ff8:	2500      	movs	r5, #0
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	2400      	movs	r4, #0
 8000ffe:	00eb      	lsls	r3, r5, #3
 8001000:	b2ef      	uxtb	r7, r5
		for(uint8_t column = 0; column < BOARD_HEIGHT; ++column) {
 8001002:	9301      	str	r3, [sp, #4]
			square.column = column;
 8001004:	ab03      	add	r3, sp, #12
 8001006:	701c      	strb	r4, [r3, #0]
			square.line = line;
 8001008:	705f      	strb	r7, [r3, #1]
			if(read_reed_value(square)) {
 800100a:	9803      	ldr	r0, [sp, #12]
 800100c:	f7ff ffe2 	bl	8000fd4 <read_reed_value>
				bitmap_set_bit(board_bitmap, line * BOARD_WIDTH + column);
 8001010:	9b01      	ldr	r3, [sp, #4]
 8001012:	18e1      	adds	r1, r4, r3
			if(read_reed_value(square)) {
 8001014:	2800      	cmp	r0, #0
 8001016:	d00a      	beq.n	800102e <read_full_board+0x3a>
				bitmap_set_bit(board_bitmap, line * BOARD_WIDTH + column);
 8001018:	0030      	movs	r0, r6
 800101a:	f7ff fa7f 	bl	800051c <bitmap_set_bit>
		for(uint8_t column = 0; column < BOARD_HEIGHT; ++column) {
 800101e:	3401      	adds	r4, #1
 8001020:	2c08      	cmp	r4, #8
 8001022:	d1ef      	bne.n	8001004 <read_full_board+0x10>
	for(uint8_t line = 0; line < BOARD_WIDTH; ++line) {
 8001024:	3501      	adds	r5, #1
 8001026:	2d08      	cmp	r5, #8
 8001028:	d1e8      	bne.n	8000ffc <read_full_board+0x8>
}
 800102a:	b005      	add	sp, #20
 800102c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bitmap_clear_bit(board_bitmap, line * BOARD_WIDTH + column);
 800102e:	0030      	movs	r0, r6
 8001030:	f7ff fa83 	bl	800053a <bitmap_clear_bit>
 8001034:	e7f3      	b.n	800101e <read_full_board+0x2a>

08001036 <leds_clear>:
	for(uint8_t index = 0; index < LED_NUMBER; ++index) {
 8001036:	0002      	movs	r2, r0
		colors[index][0] = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	32c0      	adds	r2, #192	@ 0xc0
 800103c:	7003      	strb	r3, [r0, #0]
		colors[index][1] = 0;
 800103e:	7043      	strb	r3, [r0, #1]
		colors[index][2] = 0;
 8001040:	7083      	strb	r3, [r0, #2]
	for(uint8_t index = 0; index < LED_NUMBER; ++index) {
 8001042:	3003      	adds	r0, #3
 8001044:	4290      	cmp	r0, r2
 8001046:	d1f9      	bne.n	800103c <leds_clear+0x6>
}
 8001048:	4770      	bx	lr
	...

0800104c <main>:
{
 800104c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104e:	4ca8      	ldr	r4, [pc, #672]	@ (80012f0 <main+0x2a4>)
	uint16_t  pwm_data[LED_BUFFER_SIZE] = {0};
 8001050:	2100      	movs	r1, #0
{
 8001052:	44a5      	add	sp, r4
	uint16_t  pwm_data[LED_BUFFER_SIZE] = {0};
 8001054:	4aa7      	ldr	r2, [pc, #668]	@ (80012f4 <main+0x2a8>)
 8001056:	a89d      	add	r0, sp, #628	@ 0x274
 8001058:	f003 fae4 	bl	8004624 <memset>
	uint8_t colors[LED_NUMBER][3] = {0};
 800105c:	22c0      	movs	r2, #192	@ 0xc0
 800105e:	2100      	movs	r1, #0
 8001060:	a86d      	add	r0, sp, #436	@ 0x1b4
 8001062:	f003 fadf 	bl	8004624 <memset>
  uint64_t  board_bitmap = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	2702      	movs	r7, #2
  uint64_t  board_bitmap = 0;
 800106c:	9208      	str	r2, [sp, #32]
 800106e:	9309      	str	r3, [sp, #36]	@ 0x24
  char msg[64] = {0};
 8001070:	2100      	movs	r1, #0
 8001072:	3240      	adds	r2, #64	@ 0x40
 8001074:	a816      	add	r0, sp, #88	@ 0x58
 8001076:	f003 fad5 	bl	8004624 <memset>
  HAL_Init();
 800107a:	f000 fbd5 	bl	8001828 <HAL_Init>
  SystemClock_Config();
 800107e:	f7ff feb3 	bl	8000de8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001082:	2214      	movs	r2, #20
 8001084:	2100      	movs	r1, #0
 8001086:	a846      	add	r0, sp, #280	@ 0x118
 8001088:	f003 facc 	bl	8004624 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108c:	2204      	movs	r2, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001090:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	4d99      	ldr	r5, [pc, #612]	@ (80012f8 <main+0x2ac>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001094:	4899      	ldr	r0, [pc, #612]	@ (80012fc <main+0x2b0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001098:	0209      	lsls	r1, r1, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	433b      	orrs	r3, r7
 800109c:	636b      	str	r3, [r5, #52]	@ 0x34
 800109e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a0:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	403b      	ands	r3, r7
 80010a4:	9305      	str	r3, [sp, #20]
 80010a6:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80010aa:	4313      	orrs	r3, r2
 80010ac:	636b      	str	r3, [r5, #52]	@ 0x34
 80010ae:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80010b0:	4013      	ands	r3, r2
 80010b2:	9306      	str	r3, [sp, #24]
 80010b4:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	4333      	orrs	r3, r6
 80010bc:	636b      	str	r3, [r5, #52]	@ 0x34
 80010be:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80010c0:	4033      	ands	r3, r6
 80010c2:	9307      	str	r3, [sp, #28]
 80010c4:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80010c6:	f000 fe81 	bl	8001dcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 80010ca:	20a0      	movs	r0, #160	@ 0xa0
 80010cc:	2200      	movs	r2, #0
 80010ce:	498c      	ldr	r1, [pc, #560]	@ (8001300 <main+0x2b4>)
 80010d0:	05c0      	lsls	r0, r0, #23
 80010d2:	f000 fe7b 	bl	8001dcc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010d6:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d8:	488a      	ldr	r0, [pc, #552]	@ (8001304 <main+0x2b8>)
 80010da:	a946      	add	r1, sp, #280	@ 0x118
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010dc:	9346      	str	r3, [sp, #280]	@ 0x118
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010de:	9447      	str	r4, [sp, #284]	@ 0x11c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	9448      	str	r4, [sp, #288]	@ 0x120
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e2:	f000 fdbb 	bl	8001c5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010e6:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e8:	4884      	ldr	r0, [pc, #528]	@ (80012fc <main+0x2b0>)
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010ea:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ec:	a946      	add	r1, sp, #280	@ 0x118
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010ee:	9346      	str	r3, [sp, #280]	@ 0x118
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	9647      	str	r6, [sp, #284]	@ 0x11c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	9448      	str	r4, [sp, #288]	@ 0x120
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	9449      	str	r4, [sp, #292]	@ 0x124
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f6:	f000 fdb1 	bl	8001c5c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 80010fc:	4b80      	ldr	r3, [pc, #512]	@ (8001300 <main+0x2b4>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	a946      	add	r1, sp, #280	@ 0x118
 8001100:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 8001102:	9346      	str	r3, [sp, #280]	@ 0x118
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	9647      	str	r6, [sp, #284]	@ 0x11c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	9448      	str	r4, [sp, #288]	@ 0x120
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	9449      	str	r4, [sp, #292]	@ 0x124
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f000 fda7 	bl	8001c5c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	487d      	ldr	r0, [pc, #500]	@ (8001304 <main+0x2b8>)
 8001110:	a946      	add	r1, sp, #280	@ 0x118
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001112:	9646      	str	r6, [sp, #280]	@ 0x118
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001114:	9447      	str	r4, [sp, #284]	@ 0x11c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001116:	9748      	str	r7, [sp, #288]	@ 0x120
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001118:	f000 fda0 	bl	8001c5c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800111c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800111e:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001120:	4333      	orrs	r3, r6
 8001122:	63ab      	str	r3, [r5, #56]	@ 0x38
 8001124:	6bab      	ldr	r3, [r5, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001126:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001128:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800112a:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 800112c:	9304      	str	r3, [sp, #16]
 800112e:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001130:	f000 fba0 	bl	8001874 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001134:	2009      	movs	r0, #9
 8001136:	f000 fbc7 	bl	80018c8 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 800113a:	4d73      	ldr	r5, [pc, #460]	@ (8001308 <main+0x2bc>)
 800113c:	4b73      	ldr	r3, [pc, #460]	@ (800130c <main+0x2c0>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800113e:	0028      	movs	r0, r5
  hi2c1.Instance = I2C1;
 8001140:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8001142:	4b73      	ldr	r3, [pc, #460]	@ (8001310 <main+0x2c4>)
  hi2c1.Init.OwnAddress1 = 0;
 8001144:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.Timing = 0x00B07CB4;
 8001146:	606b      	str	r3, [r5, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001148:	60ee      	str	r6, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800114a:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800114c:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800114e:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001150:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001152:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001154:	f000 fe40 	bl	8001dd8 <HAL_I2C_Init>
 8001158:	0001      	movs	r1, r0
 800115a:	42a0      	cmp	r0, r4
 800115c:	d001      	beq.n	8001162 <main+0x116>
 800115e:	b672      	cpsid	i
  while (1)
 8001160:	e7fe      	b.n	8001160 <main+0x114>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001162:	0028      	movs	r0, r5
 8001164:	f000 fe96 	bl	8001e94 <HAL_I2CEx_ConfigAnalogFilter>
 8001168:	1e01      	subs	r1, r0, #0
 800116a:	d001      	beq.n	8001170 <main+0x124>
 800116c:	b672      	cpsid	i
  while (1)
 800116e:	e7fe      	b.n	800116e <main+0x122>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001170:	0028      	movs	r0, r5
 8001172:	f000 feb5 	bl	8001ee0 <HAL_I2CEx_ConfigDigitalFilter>
 8001176:	2800      	cmp	r0, #0
 8001178:	d001      	beq.n	800117e <main+0x132>
 800117a:	b672      	cpsid	i
  while (1)
 800117c:	e7fe      	b.n	800117c <main+0x130>
  huart2.Instance = USART2;
 800117e:	4c65      	ldr	r4, [pc, #404]	@ (8001314 <main+0x2c8>)
 8001180:	4b65      	ldr	r3, [pc, #404]	@ (8001318 <main+0x2cc>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001182:	60a0      	str	r0, [r4, #8]
  huart2.Instance = USART2;
 8001184:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 115200;
 8001186:	23e1      	movs	r3, #225	@ 0xe1
 8001188:	025b      	lsls	r3, r3, #9
 800118a:	6063      	str	r3, [r4, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800118c:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800118e:	60e0      	str	r0, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001190:	6120      	str	r0, [r4, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001192:	61a0      	str	r0, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	61e0      	str	r0, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001196:	6220      	str	r0, [r4, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001198:	6260      	str	r0, [r4, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800119a:	62a0      	str	r0, [r4, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119c:	0020      	movs	r0, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 800119e:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011a0:	f002 feee 	bl	8003f80 <HAL_UART_Init>
 80011a4:	1e07      	subs	r7, r0, #0
 80011a6:	d001      	beq.n	80011ac <main+0x160>
 80011a8:	b672      	cpsid	i
  while (1)
 80011aa:	e7fe      	b.n	80011aa <main+0x15e>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ac:	0001      	movs	r1, r0
 80011ae:	221c      	movs	r2, #28
 80011b0:	a826      	add	r0, sp, #152	@ 0x98
 80011b2:	f003 fa37 	bl	8004624 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011b6:	2234      	movs	r2, #52	@ 0x34
 80011b8:	0039      	movs	r1, r7
 80011ba:	a846      	add	r0, sp, #280	@ 0x118
 80011bc:	f003 fa32 	bl	8004624 <memset>
  htim17.Instance = TIM17;
 80011c0:	4d56      	ldr	r5, [pc, #344]	@ (800131c <main+0x2d0>)
 80011c2:	4b57      	ldr	r3, [pc, #348]	@ (8001320 <main+0x2d4>)
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80011c4:	0028      	movs	r0, r5
  htim17.Instance = TIM17;
 80011c6:	602b      	str	r3, [r5, #0]
  htim17.Init.Period = 39;
 80011c8:	2327      	movs	r3, #39	@ 0x27
  htim17.Init.Prescaler = 0;
 80011ca:	606f      	str	r7, [r5, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011cc:	60af      	str	r7, [r5, #8]
  htim17.Init.Period = 39;
 80011ce:	60eb      	str	r3, [r5, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d0:	612f      	str	r7, [r5, #16]
  htim17.Init.RepetitionCounter = 0;
 80011d2:	616f      	str	r7, [r5, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d4:	61af      	str	r7, [r5, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80011d6:	f001 fd25 	bl	8002c24 <HAL_TIM_Base_Init>
 80011da:	2800      	cmp	r0, #0
 80011dc:	d001      	beq.n	80011e2 <main+0x196>
 80011de:	b672      	cpsid	i
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <main+0x194>
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80011e2:	0028      	movs	r0, r5
 80011e4:	f001 fd48 	bl	8002c78 <HAL_TIM_PWM_Init>
 80011e8:	1e02      	subs	r2, r0, #0
 80011ea:	d001      	beq.n	80011f0 <main+0x1a4>
 80011ec:	b672      	cpsid	i
  while (1)
 80011ee:	e7fe      	b.n	80011ee <main+0x1a2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f0:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.Pulse = 0;
 80011f2:	9027      	str	r0, [sp, #156]	@ 0x9c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f4:	9028      	str	r0, [sp, #160]	@ 0xa0
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011f6:	9029      	str	r0, [sp, #164]	@ 0xa4
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f8:	902a      	str	r0, [sp, #168]	@ 0xa8
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011fa:	902b      	str	r0, [sp, #172]	@ 0xac
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011fc:	902c      	str	r0, [sp, #176]	@ 0xb0
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011fe:	a926      	add	r1, sp, #152	@ 0x98
 8001200:	0028      	movs	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001202:	9326      	str	r3, [sp, #152]	@ 0x98
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001204:	f001 fd9e 	bl	8002d44 <HAL_TIM_PWM_ConfigChannel>
 8001208:	2800      	cmp	r0, #0
 800120a:	d001      	beq.n	8001210 <main+0x1c4>
 800120c:	b672      	cpsid	i
  while (1)
 800120e:	e7fe      	b.n	800120e <main+0x1c2>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001210:	2380      	movs	r3, #128	@ 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001212:	9046      	str	r0, [sp, #280]	@ 0x118
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001214:	9047      	str	r0, [sp, #284]	@ 0x11c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001216:	9048      	str	r0, [sp, #288]	@ 0x120
  sBreakDeadTimeConfig.DeadTime = 0;
 8001218:	9049      	str	r0, [sp, #292]	@ 0x124
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800121a:	904a      	str	r0, [sp, #296]	@ 0x128
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800121c:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.BreakFilter = 0;
 800121e:	904c      	str	r0, [sp, #304]	@ 0x130
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001220:	9052      	str	r0, [sp, #328]	@ 0x148
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001222:	a946      	add	r1, sp, #280	@ 0x118
 8001224:	0028      	movs	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001226:	934b      	str	r3, [sp, #300]	@ 0x12c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001228:	f001 ff92 	bl	8003150 <HAL_TIMEx_ConfigBreakDeadTime>
 800122c:	1e07      	subs	r7, r0, #0
 800122e:	d001      	beq.n	8001234 <main+0x1e8>
 8001230:	b672      	cpsid	i
  while (1)
 8001232:	e7fe      	b.n	8001232 <main+0x1e6>
  HAL_TIM_MspPostInit(&htim17);
 8001234:	0028      	movs	r0, r5
 8001236:	f000 fa07 	bl	8001648 <HAL_TIM_MspPostInit>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800123a:	0032      	movs	r2, r6
 800123c:	4939      	ldr	r1, [pc, #228]	@ (8001324 <main+0x2d8>)
 800123e:	0020      	movs	r0, r4
 8001240:	f002 ff6c 	bl	800411c <HAL_UART_Receive_IT>
  uart_fifo_init(&uartFifo);
 8001244:	4838      	ldr	r0, [pc, #224]	@ (8001328 <main+0x2dc>)
 8001246:	f7ff fd55 	bl	8000cf4 <uart_fifo_init>
	colors[index][0] = r;
 800124a:	2603      	movs	r6, #3
  			old_board_bitmap = board_bitmap;
 800124c:	9c08      	ldr	r4, [sp, #32]
 800124e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
				read_full_board(&board_bitmap);
 8001250:	a808      	add	r0, sp, #32
  	switch(game_state) {
 8001252:	2f01      	cmp	r7, #1
 8001254:	d06a      	beq.n	800132c <main+0x2e0>
				read_full_board(&board_bitmap);
 8001256:	f7ff fecd 	bl	8000ff4 <read_full_board>
				idx = are_bitamps_the_same(board_bitmap, old_board_bitmap);
 800125a:	9808      	ldr	r0, [sp, #32]
 800125c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800125e:	0022      	movs	r2, r4
 8001260:	002b      	movs	r3, r5
 8001262:	f7ff fe6d 	bl	8000f40 <are_bitamps_the_same>
 8001266:	0004      	movs	r4, r0
				if(idx != NO_INDEX_FOUND) {
 8001268:	28ff      	cmp	r0, #255	@ 0xff
 800126a:	d012      	beq.n	8001292 <main+0x246>
					cb_fmt_evt_lift(msg, 64, idx, HAL_GetTick());
 800126c:	f000 fafc 	bl	8001868 <HAL_GetTick>
 8001270:	0022      	movs	r2, r4
 8001272:	0003      	movs	r3, r0
 8001274:	2140      	movs	r1, #64	@ 0x40
 8001276:	a816      	add	r0, sp, #88	@ 0x58
 8001278:	f7ff fd14 	bl	8000ca4 <cb_fmt_evt_lift>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800127c:	a816      	add	r0, sp, #88	@ 0x58
 800127e:	f7fe ff49 	bl	8000114 <strlen>
 8001282:	2301      	movs	r3, #1
 8001284:	b282      	uxth	r2, r0
 8001286:	425b      	negs	r3, r3
 8001288:	4822      	ldr	r0, [pc, #136]	@ (8001314 <main+0x2c8>)
 800128a:	a916      	add	r1, sp, #88	@ 0x58
 800128c:	f002 fda9 	bl	8003de2 <HAL_UART_Transmit>
					game_state = WORKING;
 8001290:	2701      	movs	r7, #1
 8001292:	2500      	movs	r5, #0
					uint8_t led_index = convert_reed_index_to_led_index(i);
 8001294:	b2e8      	uxtb	r0, r5
 8001296:	f7ff f9a3 	bl	80005e0 <convert_reed_index_to_led_index>
					if(bitmap_get_bit(board_bitmap, i)) {
 800129a:	002a      	movs	r2, r5
					uint8_t led_index = convert_reed_index_to_led_index(i);
 800129c:	0004      	movs	r4, r0
					if(bitmap_get_bit(board_bitmap, i)) {
 800129e:	9808      	ldr	r0, [sp, #32]
 80012a0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80012a2:	f7ff f959 	bl	8000558 <bitmap_get_bit>
						colors[led_index][0] = 0; colors[led_index][1] = 255; colors[led_index][2] = 0;
 80012a6:	4374      	muls	r4, r6
					if(bitmap_get_bit(board_bitmap, i)) {
 80012a8:	2800      	cmp	r0, #0
 80012aa:	d015      	beq.n	80012d8 <main+0x28c>
						colors[led_index][0] = 0; colors[led_index][1] = 255; colors[led_index][2] = 0;
 80012ac:	21d6      	movs	r1, #214	@ 0xd6
 80012ae:	2200      	movs	r2, #0
 80012b0:	0049      	lsls	r1, r1, #1
 80012b2:	ab02      	add	r3, sp, #8
 80012b4:	185b      	adds	r3, r3, r1
 80012b6:	551a      	strb	r2, [r3, r4]
 80012b8:	ab6d      	add	r3, sp, #436	@ 0x1b4
 80012ba:	191b      	adds	r3, r3, r4
 80012bc:	39ad      	subs	r1, #173	@ 0xad
 80012be:	7059      	strb	r1, [r3, #1]
 80012c0:	709a      	strb	r2, [r3, #2]
				for(uint8_t i = 0; i < LED_NUMBER; ++i){
 80012c2:	3501      	adds	r5, #1
 80012c4:	2d40      	cmp	r5, #64	@ 0x40
 80012c6:	d1e5      	bne.n	8001294 <main+0x248>
					rgb_update_buffer(pwm_data, colors);
 80012c8:	a89d      	add	r0, sp, #628	@ 0x274
 80012ca:	a96d      	add	r1, sp, #436	@ 0x1b4
 80012cc:	f000 f8fe 	bl	80014cc <rgb_update_buffer>
					HAL_TIM_PWM_Send_To_DMA(pwm_data);
 80012d0:	a89d      	add	r0, sp, #628	@ 0x274
 80012d2:	f7ff fdc3 	bl	8000e5c <HAL_TIM_PWM_Send_To_DMA>
 80012d6:	e7b9      	b.n	800124c <main+0x200>
						colors[led_index][0] = 255; colors[led_index][1] = 0; colors[led_index][2] = 0;
 80012d8:	22d6      	movs	r2, #214	@ 0xd6
 80012da:	ab02      	add	r3, sp, #8
 80012dc:	0052      	lsls	r2, r2, #1
 80012de:	189b      	adds	r3, r3, r2
 80012e0:	3aad      	subs	r2, #173	@ 0xad
 80012e2:	551a      	strb	r2, [r3, r4]
 80012e4:	ab6d      	add	r3, sp, #436	@ 0x1b4
 80012e6:	191b      	adds	r3, r3, r4
 80012e8:	7058      	strb	r0, [r3, #1]
 80012ea:	7098      	strb	r0, [r3, #2]
 80012ec:	e7e9      	b.n	80012c2 <main+0x276>
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	fffff124 	.word	0xfffff124
 80012f4:	00000c64 	.word	0x00000c64
 80012f8:	40021000 	.word	0x40021000
 80012fc:	50000800 	.word	0x50000800
 8001300:	00001870 	.word	0x00001870
 8001304:	50000400 	.word	0x50000400
 8001308:	200003c0 	.word	0x200003c0
 800130c:	40005400 	.word	0x40005400
 8001310:	00b07cb4 	.word	0x00b07cb4
 8001314:	20000284 	.word	0x20000284
 8001318:	40004400 	.word	0x40004400
 800131c:	20000374 	.word	0x20000374
 8001320:	40014800 	.word	0x40014800
 8001324:	20000280 	.word	0x20000280
 8001328:	20000078 	.word	0x20000078
				read_full_board(&board_bitmap);
 800132c:	f7ff fe62 	bl	8000ff4 <read_full_board>
				idx = is_a_piece_lift(board_bitmap, old_board_bitmap);
 8001330:	9808      	ldr	r0, [sp, #32]
 8001332:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8001334:	0022      	movs	r2, r4
 8001336:	002b      	movs	r3, r5
 8001338:	f7ff fdcc 	bl	8000ed4 <is_a_piece_lift>
 800133c:	9001      	str	r0, [sp, #4]
				if(idx != NO_INDEX_FOUND) {
 800133e:	28ff      	cmp	r0, #255	@ 0xff
 8001340:	d011      	beq.n	8001366 <main+0x31a>
					cb_fmt_evt_lift(msg, 64, idx, HAL_GetTick());
 8001342:	f000 fa91 	bl	8001868 <HAL_GetTick>
 8001346:	2140      	movs	r1, #64	@ 0x40
 8001348:	0003      	movs	r3, r0
 800134a:	9a01      	ldr	r2, [sp, #4]
 800134c:	a816      	add	r0, sp, #88	@ 0x58
 800134e:	f7ff fca9 	bl	8000ca4 <cb_fmt_evt_lift>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001352:	a816      	add	r0, sp, #88	@ 0x58
 8001354:	f7fe fede 	bl	8000114 <strlen>
 8001358:	2301      	movs	r3, #1
 800135a:	b282      	uxth	r2, r0
 800135c:	425b      	negs	r3, r3
 800135e:	484b      	ldr	r0, [pc, #300]	@ (800148c <main+0x440>)
 8001360:	a916      	add	r1, sp, #88	@ 0x58
 8001362:	f002 fd3e 	bl	8003de2 <HAL_UART_Transmit>
				idx = is_a_piece_placed(board_bitmap, old_board_bitmap);
 8001366:	9808      	ldr	r0, [sp, #32]
 8001368:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800136a:	0022      	movs	r2, r4
 800136c:	002b      	movs	r3, r5
 800136e:	f7ff fdcc 	bl	8000f0a <is_a_piece_placed>
 8001372:	0004      	movs	r4, r0
				if(idx != NO_INDEX_FOUND) {
 8001374:	28ff      	cmp	r0, #255	@ 0xff
 8001376:	d014      	beq.n	80013a2 <main+0x356>
					leds_clear(colors);
 8001378:	a86d      	add	r0, sp, #436	@ 0x1b4
 800137a:	f7ff fe5c 	bl	8001036 <leds_clear>
					cb_fmt_evt_place(msg, 64, idx, HAL_GetTick());
 800137e:	f000 fa73 	bl	8001868 <HAL_GetTick>
 8001382:	0022      	movs	r2, r4
 8001384:	0003      	movs	r3, r0
 8001386:	2140      	movs	r1, #64	@ 0x40
 8001388:	a816      	add	r0, sp, #88	@ 0x58
 800138a:	f7ff fc9f 	bl	8000ccc <cb_fmt_evt_place>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800138e:	a816      	add	r0, sp, #88	@ 0x58
 8001390:	f7fe fec0 	bl	8000114 <strlen>
 8001394:	2301      	movs	r3, #1
 8001396:	b282      	uxth	r2, r0
 8001398:	425b      	negs	r3, r3
 800139a:	483c      	ldr	r0, [pc, #240]	@ (800148c <main+0x440>)
 800139c:	a916      	add	r1, sp, #88	@ 0x58
 800139e:	f002 fd20 	bl	8003de2 <HAL_UART_Transmit>
  			int r = uart_fifo_get_command(&uartFifo, command, sizeof(command));
 80013a2:	2280      	movs	r2, #128	@ 0x80
 80013a4:	483a      	ldr	r0, [pc, #232]	@ (8001490 <main+0x444>)
 80013a6:	a926      	add	r1, sp, #152	@ 0x98
 80013a8:	f7ff fcbe 	bl	8000d28 <uart_fifo_get_command>
				if (r > 0) {
 80013ac:	2800      	cmp	r0, #0
 80013ae:	dd66      	ble.n	800147e <main+0x432>
					uart_write(command);
 80013b0:	a826      	add	r0, sp, #152	@ 0x98
					cb_parse_cmd(command, &cmd);
 80013b2:	ac46      	add	r4, sp, #280	@ 0x118
					uart_write(command);
 80013b4:	f7ff fd0a 	bl	8000dcc <uart_write>
					cb_parse_cmd(command, &cmd);
 80013b8:	0021      	movs	r1, r4
 80013ba:	a826      	add	r0, sp, #152	@ 0x98
 80013bc:	f7ff f940 	bl	8000640 <cb_parse_cmd>
					memset(command, 0, 64);
 80013c0:	2240      	movs	r2, #64	@ 0x40
 80013c2:	2100      	movs	r1, #0
 80013c4:	a826      	add	r0, sp, #152	@ 0x98
 80013c6:	f003 f92d 	bl	8004624 <memset>
					switch(cmd.type) {
 80013ca:	7820      	ldrb	r0, [r4, #0]
 80013cc:	3801      	subs	r0, #1
 80013ce:	281c      	cmp	r0, #28
 80013d0:	d853      	bhi.n	800147a <main+0x42e>
 80013d2:	f7fe fea7 	bl	8000124 <__gnu_thumb1_case_uqi>
 80013d6:	130f      	.short	0x130f
 80013d8:	2f2d2415 	.word	0x2f2d2415
 80013dc:	52523331 	.word	0x52523331
 80013e0:	52525242 	.word	0x52525242
 80013e4:	52525252 	.word	0x52525252
 80013e8:	5252524c 	.word	0x5252524c
 80013ec:	4c4c4c4c 	.word	0x4c4c4c4c
 80013f0:	4e4c      	.short	0x4e4c
 80013f2:	50          	.byte	0x50
 80013f3:	00          	.byte	0x00
						case CB_CMD_PING:      uart_write("OK PING\r\n"); break;
 80013f4:	4827      	ldr	r0, [pc, #156]	@ (8001494 <main+0x448>)
						default: uart_write("ERR CMD\r\n"); break;
 80013f6:	f7ff fce9 	bl	8000dcc <uart_write>
 80013fa:	e765      	b.n	80012c8 <main+0x27c>
						case CB_CMD_VER_Q:     uart_write("OK FW=FW1.0.0 HW=PCBv1\r\n"); break;
 80013fc:	4826      	ldr	r0, [pc, #152]	@ (8001498 <main+0x44c>)
 80013fe:	e7fa      	b.n	80013f6 <main+0x3aa>
static inline uint32_t t_ms(void){ return HAL_GetTick(); }
 8001400:	f000 fa32 	bl	8001868 <HAL_GetTick>
						case CB_CMD_TIME_Q:   { char o[48]; int n=snprintf(o,sizeof o,"OK TIME %lu\r\n",(unsigned long)t_ms()); uart_write_n(o,(size_t)n); } break;
 8001404:	2130      	movs	r1, #48	@ 0x30
static inline uint32_t t_ms(void){ return HAL_GetTick(); }
 8001406:	0003      	movs	r3, r0
						case CB_CMD_TIME_Q:   { char o[48]; int n=snprintf(o,sizeof o,"OK TIME %lu\r\n",(unsigned long)t_ms()); uart_write_n(o,(size_t)n); } break;
 8001408:	4a24      	ldr	r2, [pc, #144]	@ (800149c <main+0x450>)
																		char o[32]; int n=snprintf(o,sizeof o,"OK READ SQ %s 0\r\n",sq); uart_write_n(o,(size_t)n); } break;
 800140a:	a80a      	add	r0, sp, #40	@ 0x28
 800140c:	f003 f888 	bl	8004520 <sniprintf>
static void uart_write_n(const char *s, size_t n){ HAL_UART_Transmit(&huart2,(uint8_t*)s,(uint16_t)n,100); }
 8001410:	2364      	movs	r3, #100	@ 0x64
 8001412:	b282      	uxth	r2, r0
 8001414:	a90a      	add	r1, sp, #40	@ 0x28
 8001416:	481d      	ldr	r0, [pc, #116]	@ (800148c <main+0x440>)
 8001418:	f002 fce3 	bl	8003de2 <HAL_UART_Transmit>
																		char o[32]; int n=snprintf(o,sizeof o,"OK READ SQ %s 0\r\n",sq); uart_write_n(o,(size_t)n); } break;
 800141c:	e754      	b.n	80012c8 <main+0x27c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800141e:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001422:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <main+0x454>)
 8001424:	4a1f      	ldr	r2, [pc, #124]	@ (80014a4 <main+0x458>)
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800142c:	46c0      	nop			@ (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 800142e:	e7fd      	b.n	800142c <main+0x3e0>
						case CB_CMD_SAVE:      uart_write("OK SAVE\r\n"); break;
 8001430:	481d      	ldr	r0, [pc, #116]	@ (80014a8 <main+0x45c>)
 8001432:	e7e0      	b.n	80013f6 <main+0x3aa>
						case CB_CMD_STREAM:    /* cmd.u.stream.on */ uart_write("OK STREAM\r\n"); break;
 8001434:	481d      	ldr	r0, [pc, #116]	@ (80014ac <main+0x460>)
 8001436:	e7de      	b.n	80013f6 <main+0x3aa>
						case CB_CMD_READ_ALL:  uart_write("OK READ ALL 0x0000000000000000\r\n"); break;
 8001438:	481d      	ldr	r0, [pc, #116]	@ (80014b0 <main+0x464>)
 800143a:	e7dc      	b.n	80013f6 <main+0x3aa>
    *file = (uint8_t)(idx % 8u);
 800143c:	2207      	movs	r2, #7
						case CB_CMD_READ_SQ:  { char sq[3]; cb_sq_to_str(cmd.u.read_sq.idx,sq);
 800143e:	7a23      	ldrb	r3, [r4, #8]
    out[0] = (char)('A'+f); out[1]=(char)('1'+r); out[2]='\0';
 8001440:	a902      	add	r1, sp, #8
    *file = (uint8_t)(idx % 8u);
 8001442:	401a      	ands	r2, r3
    *rank = (uint8_t)(idx / 8u);
 8001444:	08db      	lsrs	r3, r3, #3
    out[0] = (char)('A'+f); out[1]=(char)('1'+r); out[2]='\0';
 8001446:	3331      	adds	r3, #49	@ 0x31
 8001448:	714b      	strb	r3, [r1, #5]
 800144a:	2300      	movs	r3, #0
 800144c:	3241      	adds	r2, #65	@ 0x41
 800144e:	710a      	strb	r2, [r1, #4]
 8001450:	718b      	strb	r3, [r1, #6]
																		char o[32]; int n=snprintf(o,sizeof o,"OK READ SQ %s 0\r\n",sq); uart_write_n(o,(size_t)n); } break;
 8001452:	4a18      	ldr	r2, [pc, #96]	@ (80014b4 <main+0x468>)
 8001454:	2120      	movs	r1, #32
 8001456:	ab03      	add	r3, sp, #12
 8001458:	e7d7      	b.n	800140a <main+0x3be>
	colors[index][0] = r;
 800145a:	7a23      	ldrb	r3, [r4, #8]
 800145c:	a86d      	add	r0, sp, #436	@ 0x1b4
 800145e:	4373      	muls	r3, r6
						case CB_CMD_LED_SET:       led_set(cmd.u.led_set.idx, cmd.u.led_set.r, cmd.u.led_set.g, cmd.u.led_set.b, colors); uart_write("OK\r\n"); break;
 8001460:	7aa1      	ldrb	r1, [r4, #10]
	colors[index][0] = r;
 8001462:	18c3      	adds	r3, r0, r3
						case CB_CMD_LED_SET:       led_set(cmd.u.led_set.idx, cmd.u.led_set.r, cmd.u.led_set.g, cmd.u.led_set.b, colors); uart_write("OK\r\n"); break;
 8001464:	7ae2      	ldrb	r2, [r4, #11]
	colors[index][0] = r;
 8001466:	7a60      	ldrb	r0, [r4, #9]
	colors[index][1] = g;
 8001468:	7059      	strb	r1, [r3, #1]
	colors[index][0] = r;
 800146a:	7018      	strb	r0, [r3, #0]
	colors[index][2] = b;
 800146c:	709a      	strb	r2, [r3, #2]
						case CB_CMD_LED_MAP_HEX:   /* cmd.u.led_map_hex.hex192 */ uart_write("OK\r\n"); break;
 800146e:	4812      	ldr	r0, [pc, #72]	@ (80014b8 <main+0x46c>)
 8001470:	e7c1      	b.n	80013f6 <main+0x3aa>
						case CB_CMD_CFG_Q:         uart_write("OK CFG\r\n"); break;
 8001472:	4812      	ldr	r0, [pc, #72]	@ (80014bc <main+0x470>)
 8001474:	e7bf      	b.n	80013f6 <main+0x3aa>
						case CB_CMD_CFG_GET:       uart_write("OK CFG VAL\r\n"); break;
 8001476:	4812      	ldr	r0, [pc, #72]	@ (80014c0 <main+0x474>)
 8001478:	e7bd      	b.n	80013f6 <main+0x3aa>
						default: uart_write("ERR CMD\r\n"); break;
 800147a:	4812      	ldr	r0, [pc, #72]	@ (80014c4 <main+0x478>)
 800147c:	e7bb      	b.n	80013f6 <main+0x3aa>
				} else if (r == -1) {
 800147e:	3001      	adds	r0, #1
 8001480:	d000      	beq.n	8001484 <main+0x438>
 8001482:	e6e3      	b.n	800124c <main+0x200>
						uart_write(command);
 8001484:	a826      	add	r0, sp, #152	@ 0x98
 8001486:	f7ff fca1 	bl	8000dcc <uart_write>
 800148a:	e6df      	b.n	800124c <main+0x200>
 800148c:	20000284 	.word	0x20000284
 8001490:	20000078 	.word	0x20000078
 8001494:	08005002 	.word	0x08005002
 8001498:	0800500c 	.word	0x0800500c
 800149c:	08005025 	.word	0x08005025
 80014a0:	e000ed00 	.word	0xe000ed00
 80014a4:	05fa0004 	.word	0x05fa0004
 80014a8:	08005033 	.word	0x08005033
 80014ac:	0800503d 	.word	0x0800503d
 80014b0:	08005049 	.word	0x08005049
 80014b4:	0800506a 	.word	0x0800506a
 80014b8:	0800507c 	.word	0x0800507c
 80014bc:	08005081 	.word	0x08005081
 80014c0:	0800508a 	.word	0x0800508a
 80014c4:	08005097 	.word	0x08005097

080014c8 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80014c8:	b672      	cpsid	i
  while (1)
 80014ca:	e7fe      	b.n	80014ca <Error_Handler+0x2>

080014cc <rgb_update_buffer>:

// -------------------------------------------------------------------
// Fill the buffer PWM depending on the table "colors"
// -------------------------------------------------------------------
void rgb_update_buffer(uint16_t *pwm_data, uint8_t colors[][3])
{
 80014cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        uint32_t color = ((uint32_t)colors[led][1] << 16) |  // R
        				 ((uint32_t)colors[led][0] << 8) |  // G
                         ((uint32_t)colors[led][2] << 0);  // R
        for(int i = 0; i < 24; i++)
        {
            if(color & (1 << (23-i)))
 80014ce:	230d      	movs	r3, #13
{
 80014d0:	2400      	movs	r4, #0
            if(color & (1 << (23-i)))
 80014d2:	469c      	mov	ip, r3
        uint32_t color = ((uint32_t)colors[led][1] << 16) |  // R
 80014d4:	2517      	movs	r5, #23
 80014d6:	784b      	ldrb	r3, [r1, #1]
        				 ((uint32_t)colors[led][0] << 8) |  // G
 80014d8:	780a      	ldrb	r2, [r1, #0]
        uint32_t color = ((uint32_t)colors[led][1] << 16) |  // R
 80014da:	041b      	lsls	r3, r3, #16
        				 ((uint32_t)colors[led][0] << 8) |  // G
 80014dc:	0212      	lsls	r2, r2, #8
        uint32_t color = ((uint32_t)colors[led][1] << 16) |  // R
 80014de:	4313      	orrs	r3, r2
                         ((uint32_t)colors[led][2] << 0);  // R
 80014e0:	788a      	ldrb	r2, [r1, #2]
        uint32_t color = ((uint32_t)colors[led][1] << 16) |  // R
 80014e2:	4313      	orrs	r3, r2
        for(int i = 0; i < 24; i++)
 80014e4:	0062      	lsls	r2, r4, #1
 80014e6:	1882      	adds	r2, r0, r2
            if(color & (1 << (23-i)))
 80014e8:	2601      	movs	r6, #1
 80014ea:	40ae      	lsls	r6, r5
 80014ec:	271a      	movs	r7, #26
 80014ee:	4233      	tst	r3, r6
 80014f0:	d100      	bne.n	80014f4 <rgb_update_buffer+0x28>
 80014f2:	4667      	mov	r7, ip
            	pwm_data[led*24 + i] = HIGH_DUTY;
 80014f4:	8017      	strh	r7, [r2, #0]
        for(int i = 0; i < 24; i++)
 80014f6:	3202      	adds	r2, #2
 80014f8:	3d01      	subs	r5, #1
 80014fa:	d2f5      	bcs.n	80014e8 <rgb_update_buffer+0x1c>
    for(int led = 0; led < LED_NUMBER; led++)
 80014fc:	23c0      	movs	r3, #192	@ 0xc0
 80014fe:	3418      	adds	r4, #24
 8001500:	3103      	adds	r1, #3
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	429c      	cmp	r4, r3
 8001506:	d1e5      	bne.n	80014d4 <rgb_update_buffer+0x8>
    }

    // Ajoute les zéros pour le reset (>50µs)
    for(int i = 24*LED_NUMBER; i < LED_BUFFER_SIZE; i++)
    {
    	pwm_data[i] = 0;
 8001508:	23c0      	movs	r3, #192	@ 0xc0
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	2264      	movs	r2, #100	@ 0x64
 800150e:	2100      	movs	r1, #0
 8001510:	18c0      	adds	r0, r0, r3
 8001512:	f003 f887 	bl	8004624 <memset>
    }
}
 8001516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001518 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001518:	2101      	movs	r1, #1
 800151a:	4b0a      	ldr	r3, [pc, #40]	@ (8001544 <HAL_MspInit+0x2c>)
{
 800151c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001520:	430a      	orrs	r2, r1
 8001522:	641a      	str	r2, [r3, #64]	@ 0x40
 8001524:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001526:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001528:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152a:	9200      	str	r2, [sp, #0]
 800152c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001530:	0549      	lsls	r1, r1, #21
 8001532:	430a      	orrs	r2, r1
 8001534:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001538:	400b      	ands	r3, r1
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153e:	b002      	add	sp, #8
 8001540:	4770      	bx	lr
 8001542:	46c0      	nop			@ (mov r8, r8)
 8001544:	40021000 	.word	0x40021000

08001548 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001548:	b510      	push	{r4, lr}
 800154a:	0004      	movs	r4, r0
 800154c:	b08e      	sub	sp, #56	@ 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154e:	2214      	movs	r2, #20
 8001550:	2100      	movs	r1, #0
 8001552:	a803      	add	r0, sp, #12
 8001554:	f003 f866 	bl	8004624 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001558:	2218      	movs	r2, #24
 800155a:	2100      	movs	r1, #0
 800155c:	a808      	add	r0, sp, #32
 800155e:	f003 f861 	bl	8004624 <memset>
  if(hi2c->Instance==I2C1)
 8001562:	4b17      	ldr	r3, [pc, #92]	@ (80015c0 <HAL_I2C_MspInit+0x78>)
 8001564:	6822      	ldr	r2, [r4, #0]
 8001566:	429a      	cmp	r2, r3
 8001568:	d128      	bne.n	80015bc <HAL_I2C_MspInit+0x74>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800156a:	2320      	movs	r3, #32
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800156c:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800156e:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001570:	f001 f824 	bl	80025bc <HAL_RCCEx_PeriphCLKConfig>
 8001574:	2800      	cmp	r0, #0
 8001576:	d001      	beq.n	800157c <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8001578:	f7ff ffa6 	bl	80014c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157c:	2202      	movs	r2, #2
 800157e:	4c11      	ldr	r4, [pc, #68]	@ (80015c4 <HAL_I2C_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001580:	4811      	ldr	r0, [pc, #68]	@ (80015c8 <HAL_I2C_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001584:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	4313      	orrs	r3, r2
 8001588:	6363      	str	r3, [r4, #52]	@ 0x34
 800158a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800158c:	4013      	ands	r3, r2
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 8001592:	2390      	movs	r3, #144	@ 0x90
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001598:	2312      	movs	r3, #18
 800159a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80015a2:	3306      	adds	r3, #6
 80015a4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a6:	f000 fb59 	bl	8001c5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015aa:	2280      	movs	r2, #128	@ 0x80
 80015ac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80015ae:	0392      	lsls	r2, r2, #14
 80015b0:	4313      	orrs	r3, r2
 80015b2:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80015b4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80015b6:	4013      	ands	r3, r2
 80015b8:	9302      	str	r3, [sp, #8]
 80015ba:	9b02      	ldr	r3, [sp, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80015bc:	b00e      	add	sp, #56	@ 0x38
 80015be:	bd10      	pop	{r4, pc}
 80015c0:	40005400 	.word	0x40005400
 80015c4:	40021000 	.word	0x40021000
 80015c8:	50000400 	.word	0x50000400

080015cc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(htim_base->Instance==TIM17)
 80015ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <HAL_TIM_Base_MspInit+0x6c>)
 80015d0:	6802      	ldr	r2, [r0, #0]
{
 80015d2:	0005      	movs	r5, r0
  if(htim_base->Instance==TIM17)
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d12e      	bne.n	8001636 <HAL_TIM_Base_MspInit+0x6a>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80015d8:	2180      	movs	r1, #128	@ 0x80
 80015da:	4b18      	ldr	r3, [pc, #96]	@ (800163c <HAL_TIM_Base_MspInit+0x70>)
 80015dc:	02c9      	lsls	r1, r1, #11
 80015de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40

    /* TIM17 DMA Init */
    /* TIM17_CH1 Init */
    hdma_tim17_ch1.Instance = DMA1_Channel1;
 80015e0:	4c17      	ldr	r4, [pc, #92]	@ (8001640 <HAL_TIM_Base_MspInit+0x74>)
    __HAL_RCC_TIM17_CLK_ENABLE();
 80015e2:	430a      	orrs	r2, r1
 80015e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80015e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
    hdma_tim17_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80015e8:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_TIM17_CLK_ENABLE();
 80015ea:	400b      	ands	r3, r1
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	9b01      	ldr	r3, [sp, #4]
    hdma_tim17_ch1.Instance = DMA1_Channel1;
 80015f0:	4b14      	ldr	r3, [pc, #80]	@ (8001644 <HAL_TIM_Base_MspInit+0x78>)
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80015f2:	6122      	str	r2, [r4, #16]
    hdma_tim17_ch1.Instance = DMA1_Channel1;
 80015f4:	6023      	str	r3, [r4, #0]
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
 80015f6:	232f      	movs	r3, #47	@ 0x2f
 80015f8:	6063      	str	r3, [r4, #4]
    hdma_tim17_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015fa:	3b1f      	subs	r3, #31
 80015fc:	60a3      	str	r3, [r4, #8]
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015fe:	2300      	movs	r3, #0
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001600:	1892      	adds	r2, r2, r2
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001602:	60e3      	str	r3, [r4, #12]
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001604:	6162      	str	r2, [r4, #20]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_tim17_ch1.Init.Mode = DMA_NORMAL;
 8001606:	61e3      	str	r3, [r4, #28]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001608:	2280      	movs	r2, #128	@ 0x80
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800160a:	2380      	movs	r3, #128	@ 0x80
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800160c:	00d2      	lsls	r2, r2, #3
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800160e:	015b      	lsls	r3, r3, #5
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 8001610:	0020      	movs	r0, r4
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001612:	61a2      	str	r2, [r4, #24]
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001614:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 8001616:	f000 f9b7 	bl	8001988 <HAL_DMA_Init>
 800161a:	2800      	cmp	r0, #0
 800161c:	d001      	beq.n	8001622 <HAL_TIM_Base_MspInit+0x56>
    {
      Error_Handler();
 800161e:	f7ff ff53 	bl	80014c8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2016      	movs	r0, #22
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 8001626:	626c      	str	r4, [r5, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001628:	0011      	movs	r1, r2
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 800162a:	62a5      	str	r5, [r4, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800162c:	f000 f922 	bl	8001874 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001630:	2016      	movs	r0, #22
 8001632:	f000 f949 	bl	80018c8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8001636:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8001638:	40014800 	.word	0x40014800
 800163c:	40021000 	.word	0x40021000
 8001640:	20000318 	.word	0x20000318
 8001644:	40020008 	.word	0x40020008

08001648 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001648:	b510      	push	{r4, lr}
 800164a:	0004      	movs	r4, r0
 800164c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164e:	2214      	movs	r2, #20
 8001650:	2100      	movs	r1, #0
 8001652:	a801      	add	r0, sp, #4
 8001654:	f002 ffe6 	bl	8004624 <memset>
  if(htim->Instance==TIM17)
 8001658:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <HAL_TIM_MspPostInit+0x44>)
 800165a:	6822      	ldr	r2, [r4, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d113      	bne.n	8001688 <HAL_TIM_MspPostInit+0x40>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001660:	2101      	movs	r1, #1
 8001662:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001664:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	430a      	orrs	r2, r1
 800166c:	635a      	str	r2, [r3, #52]	@ 0x34
 800166e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001670:	400b      	ands	r3, r1
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001676:	2380      	movs	r3, #128	@ 0x80
 8001678:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	3b7e      	subs	r3, #126	@ 0x7e
 800167c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8001680:	3303      	adds	r3, #3
 8001682:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001684:	f000 faea 	bl	8001c5c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001688:	b006      	add	sp, #24
 800168a:	bd10      	pop	{r4, pc}
 800168c:	40014800 	.word	0x40014800
 8001690:	40021000 	.word	0x40021000

08001694 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001694:	b510      	push	{r4, lr}
 8001696:	0004      	movs	r4, r0
 8001698:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169a:	2214      	movs	r2, #20
 800169c:	2100      	movs	r1, #0
 800169e:	a803      	add	r0, sp, #12
 80016a0:	f002 ffc0 	bl	8004624 <memset>
  if(huart->Instance==USART2)
 80016a4:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <HAL_UART_MspInit+0x64>)
 80016a6:	6822      	ldr	r2, [r4, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d123      	bne.n	80016f4 <HAL_UART_MspInit+0x60>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ac:	2180      	movs	r1, #128	@ 0x80
 80016ae:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <HAL_UART_MspInit+0x68>)
 80016b0:	0289      	lsls	r1, r1, #10
 80016b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b4:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 80016b6:	430a      	orrs	r2, r1
 80016b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016bc:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 80016be:	400a      	ands	r2, r1
 80016c0:	9201      	str	r2, [sp, #4]
 80016c2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c4:	2201      	movs	r2, #1
 80016c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016c8:	4311      	orrs	r1, r2
 80016ca:	6359      	str	r1, [r3, #52]	@ 0x34
 80016cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	4013      	ands	r3, r2
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016d6:	230c      	movs	r3, #12
 80016d8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	3b0a      	subs	r3, #10
 80016dc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80016de:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f000 fabc 	bl	8001c5c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	201c      	movs	r0, #28
 80016e8:	0011      	movs	r1, r2
 80016ea:	f000 f8c3 	bl	8001874 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016ee:	201c      	movs	r0, #28
 80016f0:	f000 f8ea 	bl	80018c8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80016f4:	b008      	add	sp, #32
 80016f6:	bd10      	pop	{r4, pc}
 80016f8:	40004400 	.word	0x40004400
 80016fc:	40021000 	.word	0x40021000

08001700 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001700:	e7fe      	b.n	8001700 <NMI_Handler>

08001702 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <HardFault_Handler>

08001704 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001704:	4770      	bx	lr

08001706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001706:	4770      	bx	lr

08001708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001708:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800170a:	f000 f8a1 	bl	8001850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170e:	bd10      	pop	{r4, pc}

08001710 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001710:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1);
 8001712:	4802      	ldr	r0, [pc, #8]	@ (800171c <DMA1_Channel1_IRQHandler+0xc>)
 8001714:	f000 fa4e 	bl	8001bb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001718:	bd10      	pop	{r4, pc}
 800171a:	46c0      	nop			@ (mov r8, r8)
 800171c:	20000318 	.word	0x20000318

08001720 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001720:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001722:	4802      	ldr	r0, [pc, #8]	@ (800172c <TIM17_IRQHandler+0xc>)
 8001724:	f001 f95e 	bl	80029e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001728:	bd10      	pop	{r4, pc}
 800172a:	46c0      	nop			@ (mov r8, r8)
 800172c:	20000374 	.word	0x20000374

08001730 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001730:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001732:	4802      	ldr	r0, [pc, #8]	@ (800173c <USART2_IRQHandler+0xc>)
 8001734:	f001 fdae 	bl	8003294 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001738:	bd10      	pop	{r4, pc}
 800173a:	46c0      	nop			@ (mov r8, r8)
 800173c:	20000284 	.word	0x20000284

08001740 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001740:	490b      	ldr	r1, [pc, #44]	@ (8001770 <_sbrk+0x30>)
 8001742:	4a0c      	ldr	r2, [pc, #48]	@ (8001774 <_sbrk+0x34>)
{
 8001744:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001746:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001748:	490b      	ldr	r1, [pc, #44]	@ (8001778 <_sbrk+0x38>)
{
 800174a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800174c:	6808      	ldr	r0, [r1, #0]
 800174e:	2800      	cmp	r0, #0
 8001750:	d101      	bne.n	8001756 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8001752:	480a      	ldr	r0, [pc, #40]	@ (800177c <_sbrk+0x3c>)
 8001754:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001756:	6808      	ldr	r0, [r1, #0]
 8001758:	18c3      	adds	r3, r0, r3
 800175a:	4293      	cmp	r3, r2
 800175c:	d906      	bls.n	800176c <_sbrk+0x2c>
  {
    errno = ENOMEM;
 800175e:	f002 ff97 	bl	8004690 <__errno>
 8001762:	230c      	movs	r3, #12
 8001764:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001766:	2001      	movs	r0, #1
 8001768:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800176a:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800176c:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 800176e:	e7fc      	b.n	800176a <_sbrk+0x2a>
 8001770:	00000400 	.word	0x00000400
 8001774:	20002000 	.word	0x20002000
 8001778:	20000418 	.word	0x20000418
 800177c:	20000568 	.word	0x20000568

08001780 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001780:	4770      	bx	lr
	...

08001784 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001784:	480d      	ldr	r0, [pc, #52]	@ (80017bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001786:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001788:	f7ff fffa 	bl	8001780 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800178c:	480c      	ldr	r0, [pc, #48]	@ (80017c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800178e:	490d      	ldr	r1, [pc, #52]	@ (80017c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001790:	4a0d      	ldr	r2, [pc, #52]	@ (80017c8 <LoopForever+0xe>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001794:	e002      	b.n	800179c <LoopCopyDataInit>

08001796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179a:	3304      	adds	r3, #4

0800179c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800179c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a0:	d3f9      	bcc.n	8001796 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a2:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80017a4:	4c0a      	ldr	r4, [pc, #40]	@ (80017d0 <LoopForever+0x16>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a8:	e001      	b.n	80017ae <LoopFillZerobss>

080017aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ac:	3204      	adds	r2, #4

080017ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b0:	d3fb      	bcc.n	80017aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017b2:	f002 ff73 	bl	800469c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80017b6:	f7ff fc49 	bl	800104c <main>

080017ba <LoopForever>:

LoopForever:
  b LoopForever
 80017ba:	e7fe      	b.n	80017ba <LoopForever>
  ldr   r0, =_estack
 80017bc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80017c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80017c8:	080052a4 	.word	0x080052a4
  ldr r2, =_sbss
 80017cc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80017d0:	20000568 	.word	0x20000568

080017d4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC1_IRQHandler>
	...

080017d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d8:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80017da:	4b10      	ldr	r3, [pc, #64]	@ (800181c <HAL_InitTick+0x44>)
{
 80017dc:	0005      	movs	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 80017de:	7819      	ldrb	r1, [r3, #0]
 80017e0:	2900      	cmp	r1, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 80017e4:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 80017e6:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80017e8:	20fa      	movs	r0, #250	@ 0xfa
 80017ea:	0080      	lsls	r0, r0, #2
 80017ec:	f7fe fcae 	bl	800014c <__udivsi3>
 80017f0:	4c0b      	ldr	r4, [pc, #44]	@ (8001820 <HAL_InitTick+0x48>)
 80017f2:	0001      	movs	r1, r0
 80017f4:	6820      	ldr	r0, [r4, #0]
 80017f6:	f7fe fca9 	bl	800014c <__udivsi3>
 80017fa:	f000 f871 	bl	80018e0 <HAL_SYSTICK_Config>
 80017fe:	1e04      	subs	r4, r0, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001802:	2d03      	cmp	r5, #3
 8001804:	d8ee      	bhi.n	80017e4 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001806:	0002      	movs	r2, r0
 8001808:	2001      	movs	r0, #1
 800180a:	0029      	movs	r1, r5
 800180c:	4240      	negs	r0, r0
 800180e:	f000 f831 	bl	8001874 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001812:	4b04      	ldr	r3, [pc, #16]	@ (8001824 <HAL_InitTick+0x4c>)
 8001814:	0020      	movs	r0, r4
 8001816:	601d      	str	r5, [r3, #0]
  return status;
 8001818:	e7e5      	b.n	80017e6 <HAL_InitTick+0xe>
 800181a:	46c0      	nop			@ (mov r8, r8)
 800181c:	20000004 	.word	0x20000004
 8001820:	20000000 	.word	0x20000000
 8001824:	20000008 	.word	0x20000008

08001828 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001828:	2380      	movs	r3, #128	@ 0x80
 800182a:	4a08      	ldr	r2, [pc, #32]	@ (800184c <HAL_Init+0x24>)
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	6811      	ldr	r1, [r2, #0]
{
 8001830:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001832:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001834:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001836:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001838:	f7ff ffce 	bl	80017d8 <HAL_InitTick>
 800183c:	1e04      	subs	r4, r0, #0
 800183e:	d103      	bne.n	8001848 <HAL_Init+0x20>
  HAL_MspInit();
 8001840:	f7ff fe6a 	bl	8001518 <HAL_MspInit>
}
 8001844:	0020      	movs	r0, r4
 8001846:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001848:	2401      	movs	r4, #1
 800184a:	e7fb      	b.n	8001844 <HAL_Init+0x1c>
 800184c:	40022000 	.word	0x40022000

08001850 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001850:	4a03      	ldr	r2, [pc, #12]	@ (8001860 <HAL_IncTick+0x10>)
 8001852:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <HAL_IncTick+0x14>)
 8001854:	6811      	ldr	r1, [r2, #0]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	185b      	adds	r3, r3, r1
 800185a:	6013      	str	r3, [r2, #0]
}
 800185c:	4770      	bx	lr
 800185e:	46c0      	nop			@ (mov r8, r8)
 8001860:	2000041c 	.word	0x2000041c
 8001864:	20000004 	.word	0x20000004

08001868 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001868:	4b01      	ldr	r3, [pc, #4]	@ (8001870 <HAL_GetTick+0x8>)
 800186a:	6818      	ldr	r0, [r3, #0]
}
 800186c:	4770      	bx	lr
 800186e:	46c0      	nop			@ (mov r8, r8)
 8001870:	2000041c 	.word	0x2000041c

08001874 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001874:	b510      	push	{r4, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001876:	24ff      	movs	r4, #255	@ 0xff
 8001878:	2203      	movs	r2, #3
 800187a:	000b      	movs	r3, r1
 800187c:	0021      	movs	r1, r4
 800187e:	4002      	ands	r2, r0
 8001880:	00d2      	lsls	r2, r2, #3
 8001882:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001884:	019b      	lsls	r3, r3, #6
 8001886:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001888:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800188a:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 800188c:	2800      	cmp	r0, #0
 800188e:	db0a      	blt.n	80018a6 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001890:	24c0      	movs	r4, #192	@ 0xc0
 8001892:	4a0b      	ldr	r2, [pc, #44]	@ (80018c0 <HAL_NVIC_SetPriority+0x4c>)
 8001894:	0880      	lsrs	r0, r0, #2
 8001896:	0080      	lsls	r0, r0, #2
 8001898:	1880      	adds	r0, r0, r2
 800189a:	00a4      	lsls	r4, r4, #2
 800189c:	5902      	ldr	r2, [r0, r4]
 800189e:	400a      	ands	r2, r1
 80018a0:	4313      	orrs	r3, r2
 80018a2:	5103      	str	r3, [r0, r4]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80018a4:	bd10      	pop	{r4, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018a6:	220f      	movs	r2, #15
 80018a8:	4010      	ands	r0, r2
 80018aa:	3808      	subs	r0, #8
 80018ac:	4a05      	ldr	r2, [pc, #20]	@ (80018c4 <HAL_NVIC_SetPriority+0x50>)
 80018ae:	0880      	lsrs	r0, r0, #2
 80018b0:	0080      	lsls	r0, r0, #2
 80018b2:	1880      	adds	r0, r0, r2
 80018b4:	69c2      	ldr	r2, [r0, #28]
 80018b6:	4011      	ands	r1, r2
 80018b8:	4319      	orrs	r1, r3
 80018ba:	61c1      	str	r1, [r0, #28]
 80018bc:	e7f2      	b.n	80018a4 <HAL_NVIC_SetPriority+0x30>
 80018be:	46c0      	nop			@ (mov r8, r8)
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80018c8:	2800      	cmp	r0, #0
 80018ca:	db05      	blt.n	80018d8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018cc:	231f      	movs	r3, #31
 80018ce:	4018      	ands	r0, r3
 80018d0:	3b1e      	subs	r3, #30
 80018d2:	4083      	lsls	r3, r0
 80018d4:	4a01      	ldr	r2, [pc, #4]	@ (80018dc <HAL_NVIC_EnableIRQ+0x14>)
 80018d6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80018d8:	4770      	bx	lr
 80018da:	46c0      	nop			@ (mov r8, r8)
 80018dc:	e000e100 	.word	0xe000e100

080018e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e0:	2280      	movs	r2, #128	@ 0x80
 80018e2:	1e43      	subs	r3, r0, #1
 80018e4:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e6:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d20d      	bcs.n	8001908 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018ec:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ee:	4a07      	ldr	r2, [pc, #28]	@ (800190c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018f0:	4807      	ldr	r0, [pc, #28]	@ (8001910 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f2:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018f4:	6a03      	ldr	r3, [r0, #32]
 80018f6:	0609      	lsls	r1, r1, #24
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	0a1b      	lsrs	r3, r3, #8
 80018fc:	430b      	orrs	r3, r1
 80018fe:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001900:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001902:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001904:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001906:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8001908:	4770      	bx	lr
 800190a:	46c0      	nop			@ (mov r8, r8)
 800190c:	e000e010 	.word	0xe000e010
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001914:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001916:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8001918:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 800191a:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800191c:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 800191e:	2c00      	cmp	r4, #0
 8001920:	d002      	beq.n	8001928 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001922:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8001924:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8001926:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001928:	241c      	movs	r4, #28
 800192a:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800192c:	4e08      	ldr	r6, [pc, #32]	@ (8001950 <DMA_SetConfig+0x3c>)
 800192e:	4025      	ands	r5, r4
 8001930:	3c1b      	subs	r4, #27
 8001932:	40ac      	lsls	r4, r5
 8001934:	6877      	ldr	r7, [r6, #4]
 8001936:	433c      	orrs	r4, r7
 8001938:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800193a:	6804      	ldr	r4, [r0, #0]
 800193c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800193e:	6883      	ldr	r3, [r0, #8]
 8001940:	2b10      	cmp	r3, #16
 8001942:	d102      	bne.n	800194a <DMA_SetConfig+0x36>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001944:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001946:	60e1      	str	r1, [r4, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001948:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 800194a:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 800194c:	60e2      	str	r2, [r4, #12]
}
 800194e:	e7fb      	b.n	8001948 <DMA_SetConfig+0x34>
 8001950:	40020000 	.word	0x40020000

08001954 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001954:	b510      	push	{r4, lr}
 8001956:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001958:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800195a:	4a09      	ldr	r2, [pc, #36]	@ (8001980 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	189b      	adds	r3, r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	6443      	str	r3, [r0, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001964:	6800      	ldr	r0, [r0, #0]
 8001966:	2114      	movs	r1, #20
 8001968:	b2c0      	uxtb	r0, r0
 800196a:	3808      	subs	r0, #8
 800196c:	f7fe fbee 	bl	800014c <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001970:	4b04      	ldr	r3, [pc, #16]	@ (8001984 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8001972:	64a3      	str	r3, [r4, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001974:	231f      	movs	r3, #31
 8001976:	4018      	ands	r0, r3
 8001978:	3b1e      	subs	r3, #30
 800197a:	4083      	lsls	r3, r0
 800197c:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 800197e:	bd10      	pop	{r4, pc}
 8001980:	10008200 	.word	0x10008200
 8001984:	40020880 	.word	0x40020880

08001988 <HAL_DMA_Init>:
{
 8001988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800198a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800198c:	2001      	movs	r0, #1
  if (hdma == NULL)
 800198e:	2c00      	cmp	r4, #0
 8001990:	d046      	beq.n	8001a20 <HAL_DMA_Init+0x98>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001992:	6825      	ldr	r5, [r4, #0]
 8001994:	4b25      	ldr	r3, [pc, #148]	@ (8001a2c <HAL_DMA_Init+0xa4>)
 8001996:	2114      	movs	r1, #20
 8001998:	18e8      	adds	r0, r5, r3
 800199a:	f7fe fbd7 	bl	800014c <__udivsi3>
  hdma->State = HAL_DMA_STATE_BUSY;
 800199e:	2302      	movs	r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80019a0:	0080      	lsls	r0, r0, #2
  hdma->State = HAL_DMA_STATE_BUSY;
 80019a2:	1da6      	adds	r6, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80019a4:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80019a6:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019a8:	682b      	ldr	r3, [r5, #0]
 80019aa:	4a21      	ldr	r2, [pc, #132]	@ (8001a30 <HAL_DMA_Init+0xa8>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80019ac:	68a7      	ldr	r7, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019ae:	4013      	ands	r3, r2
 80019b0:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80019b2:	68e3      	ldr	r3, [r4, #12]
 80019b4:	6921      	ldr	r1, [r4, #16]
 80019b6:	433b      	orrs	r3, r7
 80019b8:	430b      	orrs	r3, r1
 80019ba:	6961      	ldr	r1, [r4, #20]
 80019bc:	682a      	ldr	r2, [r5, #0]
 80019be:	430b      	orrs	r3, r1
 80019c0:	69a1      	ldr	r1, [r4, #24]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80019c2:	0020      	movs	r0, r4
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80019c4:	430b      	orrs	r3, r1
 80019c6:	69e1      	ldr	r1, [r4, #28]
 80019c8:	430b      	orrs	r3, r1
 80019ca:	6a21      	ldr	r1, [r4, #32]
 80019cc:	430b      	orrs	r3, r1
 80019ce:	4313      	orrs	r3, r2
 80019d0:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80019d2:	f7ff ffbf 	bl	8001954 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80019d6:	2380      	movs	r3, #128	@ 0x80
 80019d8:	01db      	lsls	r3, r3, #7
 80019da:	429f      	cmp	r7, r3
 80019dc:	d101      	bne.n	80019e2 <HAL_DMA_Init+0x5a>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80019de:	2300      	movs	r3, #0
 80019e0:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80019e2:	233f      	movs	r3, #63	@ 0x3f
 80019e4:	6862      	ldr	r2, [r4, #4]
 80019e6:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80019e8:	4013      	ands	r3, r2
 80019ea:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019ec:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80019ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80019f0:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019f2:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80019f4:	2a03      	cmp	r2, #3
 80019f6:	d814      	bhi.n	8001a22 <HAL_DMA_Init+0x9a>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80019f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001a34 <HAL_DMA_Init+0xac>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80019fa:	480f      	ldr	r0, [pc, #60]	@ (8001a38 <HAL_DMA_Init+0xb0>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80019fc:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80019fe:	2201      	movs	r2, #1
 8001a00:	3b01      	subs	r3, #1
 8001a02:	409a      	lsls	r2, r3
 8001a04:	65a2      	str	r2, [r4, #88]	@ 0x58
 8001a06:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a08:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001a0a:	0089      	lsls	r1, r1, #2
 8001a0c:	6521      	str	r1, [r4, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a0e:	6560      	str	r0, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a10:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a12:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a14:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001a16:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a18:	63e0      	str	r0, [r4, #60]	@ 0x3c
  __HAL_UNLOCK(hdma);
 8001a1a:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_READY;
 8001a1c:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 8001a1e:	77e0      	strb	r0, [r4, #31]
}
 8001a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->DMAmuxRequestGen = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001a26:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a28:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001a2a:	e7f3      	b.n	8001a14 <HAL_DMA_Init+0x8c>
 8001a2c:	bffdfff8 	.word	0xbffdfff8
 8001a30:	ffff800f 	.word	0xffff800f
 8001a34:	1000823f 	.word	0x1000823f
 8001a38:	40020940 	.word	0x40020940

08001a3c <HAL_DMA_Start_IT>:
{
 8001a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8001a3e:	1d45      	adds	r5, r0, #5
{
 8001a40:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8001a42:	7fee      	ldrb	r6, [r5, #31]
{
 8001a44:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8001a46:	2002      	movs	r0, #2
 8001a48:	2e01      	cmp	r6, #1
 8001a4a:	d033      	beq.n	8001ab4 <HAL_DMA_Start_IT+0x78>
 8001a4c:	3801      	subs	r0, #1
 8001a4e:	77e8      	strb	r0, [r5, #31]
  if (hdma->State == HAL_DMA_STATE_READY)
 8001a50:	1da7      	adds	r7, r4, #6
 8001a52:	7ffe      	ldrb	r6, [r7, #31]
 8001a54:	46b4      	mov	ip, r6
 8001a56:	4663      	mov	r3, ip
 8001a58:	b2f6      	uxtb	r6, r6
 8001a5a:	9600      	str	r6, [sp, #0]
 8001a5c:	2600      	movs	r6, #0
 8001a5e:	4283      	cmp	r3, r0
 8001a60:	d130      	bne.n	8001ac4 <HAL_DMA_Start_IT+0x88>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a62:	3001      	adds	r0, #1
 8001a64:	77f8      	strb	r0, [r7, #31]
    __HAL_DMA_DISABLE(hdma);
 8001a66:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a68:	63e6      	str	r6, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001a6a:	6828      	ldr	r0, [r5, #0]
 8001a6c:	9b00      	ldr	r3, [sp, #0]
 8001a6e:	4398      	bics	r0, r3
 8001a70:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a72:	9b01      	ldr	r3, [sp, #4]
 8001a74:	0020      	movs	r0, r4
 8001a76:	f7ff ff4d 	bl	8001914 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8001a7a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001a7c:	42b3      	cmp	r3, r6
 8001a7e:	d01a      	beq.n	8001ab6 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a80:	230e      	movs	r3, #14
 8001a82:	682a      	ldr	r2, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a84:	4313      	orrs	r3, r2
 8001a86:	602b      	str	r3, [r5, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001a88:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	03d2      	lsls	r2, r2, #15
 8001a8e:	d504      	bpl.n	8001a9a <HAL_DMA_Start_IT+0x5e>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001a90:	2280      	movs	r2, #128	@ 0x80
 8001a92:	6819      	ldr	r1, [r3, #0]
 8001a94:	0052      	lsls	r2, r2, #1
 8001a96:	430a      	orrs	r2, r1
 8001a98:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8001a9a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d004      	beq.n	8001aaa <HAL_DMA_Start_IT+0x6e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001aa0:	2280      	movs	r2, #128	@ 0x80
 8001aa2:	6819      	ldr	r1, [r3, #0]
 8001aa4:	0052      	lsls	r2, r2, #1
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8001aaa:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8001aac:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001aae:	682a      	ldr	r2, [r5, #0]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	602b      	str	r3, [r5, #0]
}
 8001ab4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	682b      	ldr	r3, [r5, #0]
 8001aba:	4393      	bics	r3, r2
 8001abc:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001abe:	682a      	ldr	r2, [r5, #0]
 8001ac0:	230a      	movs	r3, #10
 8001ac2:	e7df      	b.n	8001a84 <HAL_DMA_Start_IT+0x48>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001ac4:	2380      	movs	r3, #128	@ 0x80
 8001ac6:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8001ac8:	77ee      	strb	r6, [r5, #31]
    status = HAL_ERROR;
 8001aca:	e7f3      	b.n	8001ab4 <HAL_DMA_Start_IT+0x78>

08001acc <HAL_DMA_Abort>:
{
 8001acc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (NULL == hdma)
 8001ace:	2800      	cmp	r0, #0
 8001ad0:	d008      	beq.n	8001ae4 <HAL_DMA_Abort+0x18>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001ad2:	1d84      	adds	r4, r0, #6
 8001ad4:	7fe3      	ldrb	r3, [r4, #31]
 8001ad6:	1d41      	adds	r1, r0, #5
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d005      	beq.n	8001ae8 <HAL_DMA_Abort+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001adc:	2304      	movs	r3, #4
 8001ade:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	77cb      	strb	r3, [r1, #31]
    return HAL_ERROR;
 8001ae4:	2001      	movs	r0, #1
}
 8001ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ae8:	250e      	movs	r5, #14
 8001aea:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001aec:	6c46      	ldr	r6, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aee:	6813      	ldr	r3, [r2, #0]
 8001af0:	43ab      	bics	r3, r5
 8001af2:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001af4:	6833      	ldr	r3, [r6, #0]
 8001af6:	4d10      	ldr	r5, [pc, #64]	@ (8001b38 <HAL_DMA_Abort+0x6c>)
 8001af8:	402b      	ands	r3, r5
 8001afa:	6033      	str	r3, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 8001afc:	2301      	movs	r3, #1
 8001afe:	6816      	ldr	r6, [r2, #0]
 8001b00:	439e      	bics	r6, r3
 8001b02:	6016      	str	r6, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001b04:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001b06:	331b      	adds	r3, #27
 8001b08:	401a      	ands	r2, r3
 8001b0a:	3b1b      	subs	r3, #27
 8001b0c:	4093      	lsls	r3, r2
 8001b0e:	4e0b      	ldr	r6, [pc, #44]	@ (8001b3c <HAL_DMA_Abort+0x70>)
 8001b10:	6877      	ldr	r7, [r6, #4]
 8001b12:	433b      	orrs	r3, r7
 8001b14:	6073      	str	r3, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b16:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8001b18:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8001b1a:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8001b1c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d005      	beq.n	8001b2e <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	402a      	ands	r2, r5
 8001b26:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b28:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001b2a:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8001b2c:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001b2e:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8001b30:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001b32:	77e3      	strb	r3, [r4, #31]
    __HAL_UNLOCK(hdma);
 8001b34:	77c8      	strb	r0, [r1, #31]
  return HAL_OK;
 8001b36:	e7d6      	b.n	8001ae6 <HAL_DMA_Abort+0x1a>
 8001b38:	fffffeff 	.word	0xfffffeff
 8001b3c:	40020000 	.word	0x40020000

08001b40 <HAL_DMA_Abort_IT>:
{
 8001b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001b42:	1d81      	adds	r1, r0, #6
 8001b44:	7fcb      	ldrb	r3, [r1, #31]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d003      	beq.n	8001b52 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 8001b4e:	2001      	movs	r0, #1
}
 8001b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b52:	240e      	movs	r4, #14
 8001b54:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001b56:	271c      	movs	r7, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b58:	6813      	ldr	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b5a:	6c45      	ldr	r5, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b5c:	43a3      	bics	r3, r4
 8001b5e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001b60:	2301      	movs	r3, #1
 8001b62:	6814      	ldr	r4, [r2, #0]
 8001b64:	439c      	bics	r4, r3
 8001b66:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b68:	682a      	ldr	r2, [r5, #0]
 8001b6a:	4c10      	ldr	r4, [pc, #64]	@ (8001bac <HAL_DMA_Abort_IT+0x6c>)
 8001b6c:	4022      	ands	r2, r4
 8001b6e:	602a      	str	r2, [r5, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001b70:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001b72:	4d0f      	ldr	r5, [pc, #60]	@ (8001bb0 <HAL_DMA_Abort_IT+0x70>)
 8001b74:	403a      	ands	r2, r7
 8001b76:	4093      	lsls	r3, r2
 8001b78:	686e      	ldr	r6, [r5, #4]
 8001b7a:	4333      	orrs	r3, r6
 8001b7c:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b7e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8001b80:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8001b82:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8001b84:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d005      	beq.n	8001b96 <HAL_DMA_Abort_IT+0x56>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4022      	ands	r2, r4
 8001b8e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b90:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001b92:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8001b94:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001b96:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8001b98:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001b9a:	77cb      	strb	r3, [r1, #31]
    __HAL_UNLOCK(hdma);
 8001b9c:	1d43      	adds	r3, r0, #5
 8001b9e:	77da      	strb	r2, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 8001ba0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d000      	beq.n	8001ba8 <HAL_DMA_Abort_IT+0x68>
      hdma->XferAbortCallback(hdma);
 8001ba6:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001ba8:	2000      	movs	r0, #0
 8001baa:	e7d1      	b.n	8001b50 <HAL_DMA_Abort_IT+0x10>
 8001bac:	fffffeff 	.word	0xfffffeff
 8001bb0:	40020000 	.word	0x40020000

08001bb4 <HAL_DMA_IRQHandler>:
{
 8001bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001bb6:	241c      	movs	r4, #28
 8001bb8:	2704      	movs	r7, #4
 8001bba:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t flag_it = DMA1->ISR;
 8001bbc:	4a26      	ldr	r2, [pc, #152]	@ (8001c58 <HAL_DMA_IRQHandler+0xa4>)
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001bbe:	4021      	ands	r1, r4
 8001bc0:	003c      	movs	r4, r7
 8001bc2:	408c      	lsls	r4, r1
  uint32_t flag_it = DMA1->ISR;
 8001bc4:	6816      	ldr	r6, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001bc6:	6803      	ldr	r3, [r0, #0]
 8001bc8:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001bca:	4226      	tst	r6, r4
 8001bcc:	d00f      	beq.n	8001bee <HAL_DMA_IRQHandler+0x3a>
 8001bce:	423d      	tst	r5, r7
 8001bd0:	d00d      	beq.n	8001bee <HAL_DMA_IRQHandler+0x3a>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bd2:	6819      	ldr	r1, [r3, #0]
 8001bd4:	0689      	lsls	r1, r1, #26
 8001bd6:	d402      	bmi.n	8001bde <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bd8:	6819      	ldr	r1, [r3, #0]
 8001bda:	43b9      	bics	r1, r7
 8001bdc:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001bde:	6853      	ldr	r3, [r2, #4]
 8001be0:	431c      	orrs	r4, r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001be2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001be4:	6054      	str	r4, [r2, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d01b      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 8001bea:	4798      	blx	r3
  return;
 8001bec:	e019      	b.n	8001c22 <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001bee:	2702      	movs	r7, #2
 8001bf0:	003c      	movs	r4, r7
 8001bf2:	408c      	lsls	r4, r1
 8001bf4:	4226      	tst	r6, r4
 8001bf6:	d015      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x70>
 8001bf8:	423d      	tst	r5, r7
 8001bfa:	d013      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x70>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bfc:	6819      	ldr	r1, [r3, #0]
 8001bfe:	0689      	lsls	r1, r1, #26
 8001c00:	d406      	bmi.n	8001c10 <HAL_DMA_IRQHandler+0x5c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c02:	250a      	movs	r5, #10
 8001c04:	6819      	ldr	r1, [r3, #0]
 8001c06:	43a9      	bics	r1, r5
 8001c08:	6019      	str	r1, [r3, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	1d83      	adds	r3, r0, #6
 8001c0e:	77d9      	strb	r1, [r3, #31]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001c10:	6853      	ldr	r3, [r2, #4]
 8001c12:	431c      	orrs	r4, r3
 8001c14:	6054      	str	r4, [r2, #4]
      __HAL_UNLOCK(hdma);
 8001c16:	2200      	movs	r2, #0
 8001c18:	1d43      	adds	r3, r0, #5
 8001c1a:	77da      	strb	r2, [r3, #31]
      if (hdma->XferCpltCallback != NULL)
 8001c1c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d1e3      	bne.n	8001bea <HAL_DMA_IRQHandler+0x36>
}
 8001c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001c24:	2408      	movs	r4, #8
 8001c26:	0027      	movs	r7, r4
 8001c28:	408f      	lsls	r7, r1
 8001c2a:	423e      	tst	r6, r7
 8001c2c:	d0f9      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x6e>
 8001c2e:	4225      	tst	r5, r4
 8001c30:	d0f7      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c32:	250e      	movs	r5, #14
 8001c34:	681c      	ldr	r4, [r3, #0]
 8001c36:	43ac      	bics	r4, r5
 8001c38:	601c      	str	r4, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	001d      	movs	r5, r3
 8001c3e:	408d      	lsls	r5, r1
 8001c40:	0029      	movs	r1, r5
 8001c42:	6854      	ldr	r4, [r2, #4]
 8001c44:	4321      	orrs	r1, r4
 8001c46:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001c48:	1d82      	adds	r2, r0, #6
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c4a:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001c4c:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	1d43      	adds	r3, r0, #5
 8001c52:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8001c54:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001c56:	e7e2      	b.n	8001c1e <HAL_DMA_IRQHandler+0x6a>
 8001c58:	40020000 	.word	0x40020000

08001c5c <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8001c5c:	2300      	movs	r3, #0
{
 8001c5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c60:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c62:	680a      	ldr	r2, [r1, #0]
 8001c64:	0014      	movs	r4, r2
 8001c66:	40dc      	lsrs	r4, r3
 8001c68:	d101      	bne.n	8001c6e <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 8001c6a:	b005      	add	sp, #20
 8001c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c6e:	2501      	movs	r5, #1
 8001c70:	0014      	movs	r4, r2
 8001c72:	409d      	lsls	r5, r3
 8001c74:	402c      	ands	r4, r5
 8001c76:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8001c78:	422a      	tst	r2, r5
 8001c7a:	d100      	bne.n	8001c7e <HAL_GPIO_Init+0x22>
 8001c7c:	e091      	b.n	8001da2 <HAL_GPIO_Init+0x146>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c7e:	684a      	ldr	r2, [r1, #4]
 8001c80:	005f      	lsls	r7, r3, #1
 8001c82:	4694      	mov	ip, r2
 8001c84:	2203      	movs	r2, #3
 8001c86:	4664      	mov	r4, ip
 8001c88:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c8a:	2403      	movs	r4, #3
 8001c8c:	40bc      	lsls	r4, r7
 8001c8e:	43e4      	mvns	r4, r4
 8001c90:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c92:	1e54      	subs	r4, r2, #1
 8001c94:	2c01      	cmp	r4, #1
 8001c96:	d82e      	bhi.n	8001cf6 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8001c98:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c9a:	9c01      	ldr	r4, [sp, #4]
 8001c9c:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c9e:	68cc      	ldr	r4, [r1, #12]
 8001ca0:	40bc      	lsls	r4, r7
 8001ca2:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8001ca4:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001ca6:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ca8:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001caa:	43ac      	bics	r4, r5
 8001cac:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cae:	4664      	mov	r4, ip
 8001cb0:	0924      	lsrs	r4, r4, #4
 8001cb2:	4034      	ands	r4, r6
 8001cb4:	409c      	lsls	r4, r3
 8001cb6:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001cb8:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8001cba:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001cbc:	9c01      	ldr	r4, [sp, #4]
 8001cbe:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cc0:	688c      	ldr	r4, [r1, #8]
 8001cc2:	40bc      	lsls	r4, r7
 8001cc4:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8001cc6:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc8:	2a02      	cmp	r2, #2
 8001cca:	d116      	bne.n	8001cfa <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ccc:	2507      	movs	r5, #7
 8001cce:	260f      	movs	r6, #15
 8001cd0:	401d      	ands	r5, r3
 8001cd2:	00ad      	lsls	r5, r5, #2
 8001cd4:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8001cd6:	08dc      	lsrs	r4, r3, #3
 8001cd8:	00a4      	lsls	r4, r4, #2
 8001cda:	1904      	adds	r4, r0, r4
 8001cdc:	9402      	str	r4, [sp, #8]
 8001cde:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ce0:	9603      	str	r6, [sp, #12]
 8001ce2:	0026      	movs	r6, r4
 8001ce4:	9c03      	ldr	r4, [sp, #12]
 8001ce6:	43a6      	bics	r6, r4
 8001ce8:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cea:	690e      	ldr	r6, [r1, #16]
 8001cec:	40ae      	lsls	r6, r5
 8001cee:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8001cf0:	9c02      	ldr	r4, [sp, #8]
 8001cf2:	6226      	str	r6, [r4, #32]
 8001cf4:	e001      	b.n	8001cfa <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cf6:	2a03      	cmp	r2, #3
 8001cf8:	d1df      	bne.n	8001cba <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cfa:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8001cfc:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cfe:	9d01      	ldr	r5, [sp, #4]
 8001d00:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d02:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d04:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8001d06:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d08:	4662      	mov	r2, ip
 8001d0a:	02a4      	lsls	r4, r4, #10
 8001d0c:	4222      	tst	r2, r4
 8001d0e:	d048      	beq.n	8001da2 <HAL_GPIO_Init+0x146>
        temp = EXTI->EXTICR[position >> 2u];
 8001d10:	4a25      	ldr	r2, [pc, #148]	@ (8001da8 <HAL_GPIO_Init+0x14c>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001d12:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 8001d14:	089c      	lsrs	r4, r3, #2
 8001d16:	00a4      	lsls	r4, r4, #2
 8001d18:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001d1a:	220f      	movs	r2, #15
 8001d1c:	401d      	ands	r5, r3
 8001d1e:	00ed      	lsls	r5, r5, #3
 8001d20:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001d22:	27a0      	movs	r7, #160	@ 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 8001d24:	6e26      	ldr	r6, [r4, #96]	@ 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001d26:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001d28:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	42b8      	cmp	r0, r7
 8001d2e:	d00c      	beq.n	8001d4a <HAL_GPIO_Init+0xee>
 8001d30:	4f1e      	ldr	r7, [pc, #120]	@ (8001dac <HAL_GPIO_Init+0x150>)
 8001d32:	3201      	adds	r2, #1
 8001d34:	42b8      	cmp	r0, r7
 8001d36:	d008      	beq.n	8001d4a <HAL_GPIO_Init+0xee>
 8001d38:	4f1d      	ldr	r7, [pc, #116]	@ (8001db0 <HAL_GPIO_Init+0x154>)
 8001d3a:	3201      	adds	r2, #1
 8001d3c:	42b8      	cmp	r0, r7
 8001d3e:	d004      	beq.n	8001d4a <HAL_GPIO_Init+0xee>
 8001d40:	4f1c      	ldr	r7, [pc, #112]	@ (8001db4 <HAL_GPIO_Init+0x158>)
 8001d42:	3203      	adds	r2, #3
 8001d44:	42b8      	cmp	r0, r7
 8001d46:	d100      	bne.n	8001d4a <HAL_GPIO_Init+0xee>
 8001d48:	3a02      	subs	r2, #2
 8001d4a:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d4c:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001d4e:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 8001d50:	6622      	str	r2, [r4, #96]	@ 0x60
        temp = EXTI->RTSR1;
 8001d52:	4c15      	ldr	r4, [pc, #84]	@ (8001da8 <HAL_GPIO_Init+0x14c>)
        temp &= ~(iocurrent);
 8001d54:	9a00      	ldr	r2, [sp, #0]
        temp = EXTI->RTSR1;
 8001d56:	6826      	ldr	r6, [r4, #0]
          temp |= iocurrent;
 8001d58:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8001d5a:	43d2      	mvns	r2, r2
          temp |= iocurrent;
 8001d5c:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d5e:	02ff      	lsls	r7, r7, #11
 8001d60:	d401      	bmi.n	8001d66 <HAL_GPIO_Init+0x10a>
        temp &= ~(iocurrent);
 8001d62:	0035      	movs	r5, r6
 8001d64:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d66:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 8001d68:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8001d6a:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 8001d6c:	9d00      	ldr	r5, [sp, #0]
 8001d6e:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d70:	02bf      	lsls	r7, r7, #10
 8001d72:	d401      	bmi.n	8001d78 <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 8001d74:	0035      	movs	r5, r6
 8001d76:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d78:	4667      	mov	r7, ip
        EXTI->FTSR1 = temp;
 8001d7a:	6065      	str	r5, [r4, #4]
        temp = EXTI->EMR1;
 8001d7c:	4c0e      	ldr	r4, [pc, #56]	@ (8001db8 <HAL_GPIO_Init+0x15c>)
          temp |= iocurrent;
 8001d7e:	9d00      	ldr	r5, [sp, #0]
        temp = EXTI->EMR1;
 8001d80:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 8001d82:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d84:	03bf      	lsls	r7, r7, #14
 8001d86:	d401      	bmi.n	8001d8c <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 8001d88:	0035      	movs	r5, r6
 8001d8a:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d8c:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 8001d8e:	67e5      	str	r5, [r4, #124]	@ 0x7c
        temp = EXTI->IMR1;
 8001d90:	4c0a      	ldr	r4, [pc, #40]	@ (8001dbc <HAL_GPIO_Init+0x160>)
          temp |= iocurrent;
 8001d92:	9e00      	ldr	r6, [sp, #0]
        temp = EXTI->IMR1;
 8001d94:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 8001d96:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d98:	03ff      	lsls	r7, r7, #15
 8001d9a:	d401      	bmi.n	8001da0 <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 8001d9c:	4015      	ands	r5, r2
 8001d9e:	002e      	movs	r6, r5
        EXTI->IMR1 = temp;
 8001da0:	67e6      	str	r6, [r4, #124]	@ 0x7c
    position++;
 8001da2:	3301      	adds	r3, #1
 8001da4:	e75d      	b.n	8001c62 <HAL_GPIO_Init+0x6>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	40021800 	.word	0x40021800
 8001dac:	50000400 	.word	0x50000400
 8001db0:	50000800 	.word	0x50000800
 8001db4:	50000c00 	.word	0x50000c00
 8001db8:	40021808 	.word	0x40021808
 8001dbc:	40021804 	.word	0x40021804

08001dc0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001dc0:	6900      	ldr	r0, [r0, #16]
 8001dc2:	4008      	ands	r0, r1
 8001dc4:	1e43      	subs	r3, r0, #1
 8001dc6:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001dc8:	b2c0      	uxtb	r0, r0
}
 8001dca:	4770      	bx	lr

08001dcc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dcc:	2a00      	cmp	r2, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dd0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dd2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dd4:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8001dd6:	e7fc      	b.n	8001dd2 <HAL_GPIO_WritePin+0x6>

08001dd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dd8:	b570      	push	{r4, r5, r6, lr}
 8001dda:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 8001ddc:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8001dde:	2c00      	cmp	r4, #0
 8001de0:	d04e      	beq.n	8001e80 <HAL_I2C_Init+0xa8>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001de2:	0025      	movs	r5, r4
 8001de4:	3541      	adds	r5, #65	@ 0x41
 8001de6:	782b      	ldrb	r3, [r5, #0]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d105      	bne.n	8001dfa <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dee:	0023      	movs	r3, r4
 8001df0:	3340      	adds	r3, #64	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001df2:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8001df4:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8001df6:	f7ff fba7 	bl	8001548 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dfa:	2324      	movs	r3, #36	@ 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dfc:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dfe:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8001e00:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e02:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8001e04:	681a      	ldr	r2, [r3, #0]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e06:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8001e08:	438a      	bics	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e0c:	491d      	ldr	r1, [pc, #116]	@ (8001e84 <HAL_I2C_Init+0xac>)
 8001e0e:	6862      	ldr	r2, [r4, #4]
 8001e10:	400a      	ands	r2, r1
 8001e12:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	491c      	ldr	r1, [pc, #112]	@ (8001e88 <HAL_I2C_Init+0xb0>)
 8001e18:	400a      	ands	r2, r1
 8001e1a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e1c:	2801      	cmp	r0, #1
 8001e1e:	d107      	bne.n	8001e30 <HAL_I2C_Init+0x58>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e20:	2280      	movs	r2, #128	@ 0x80
 8001e22:	0212      	lsls	r2, r2, #8
 8001e24:	4332      	orrs	r2, r6
 8001e26:	609a      	str	r2, [r3, #8]
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	4818      	ldr	r0, [pc, #96]	@ (8001e8c <HAL_I2C_Init+0xb4>)
 8001e2c:	4002      	ands	r2, r0
 8001e2e:	e009      	b.n	8001e44 <HAL_I2C_Init+0x6c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e30:	2284      	movs	r2, #132	@ 0x84
 8001e32:	0212      	lsls	r2, r2, #8
 8001e34:	4332      	orrs	r2, r6
 8001e36:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e38:	2802      	cmp	r0, #2
 8001e3a:	d1f5      	bne.n	8001e28 <HAL_I2C_Init+0x50>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e3c:	2280      	movs	r2, #128	@ 0x80
 8001e3e:	6858      	ldr	r0, [r3, #4]
 8001e40:	0112      	lsls	r2, r2, #4
 8001e42:	4302      	orrs	r2, r0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e46:	6858      	ldr	r0, [r3, #4]
 8001e48:	4a11      	ldr	r2, [pc, #68]	@ (8001e90 <HAL_I2C_Init+0xb8>)
 8001e4a:	4302      	orrs	r2, r0
 8001e4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e4e:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e50:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e52:	400a      	ands	r2, r1
 8001e54:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e56:	6961      	ldr	r1, [r4, #20]
 8001e58:	6922      	ldr	r2, [r4, #16]
 8001e5a:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e5c:	69a1      	ldr	r1, [r4, #24]
 8001e5e:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e60:	430a      	orrs	r2, r1
 8001e62:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e64:	6a21      	ldr	r1, [r4, #32]
 8001e66:	69e2      	ldr	r2, [r4, #28]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	6819      	ldr	r1, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001e74:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e76:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e78:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e7a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e7c:	3442      	adds	r4, #66	@ 0x42
 8001e7e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001e80:	bd70      	pop	{r4, r5, r6, pc}
 8001e82:	46c0      	nop			@ (mov r8, r8)
 8001e84:	f0ffffff 	.word	0xf0ffffff
 8001e88:	ffff7fff 	.word	0xffff7fff
 8001e8c:	fffff7ff 	.word	0xfffff7ff
 8001e90:	02008000 	.word	0x02008000

08001e94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e94:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e96:	0004      	movs	r4, r0
 8001e98:	3441      	adds	r4, #65	@ 0x41
 8001e9a:	7822      	ldrb	r2, [r4, #0]
{
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	000f      	movs	r7, r1
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ea2:	b2d6      	uxtb	r6, r2
 8001ea4:	2a20      	cmp	r2, #32
 8001ea6:	d118      	bne.n	8001eda <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8001ea8:	001d      	movs	r5, r3
 8001eaa:	3540      	adds	r5, #64	@ 0x40
 8001eac:	782a      	ldrb	r2, [r5, #0]
 8001eae:	2a01      	cmp	r2, #1
 8001eb0:	d013      	beq.n	8001eda <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb2:	2224      	movs	r2, #36	@ 0x24
 8001eb4:	7022      	strb	r2, [r4, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	3a23      	subs	r2, #35	@ 0x23
 8001eba:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ebc:	4807      	ldr	r0, [pc, #28]	@ (8001edc <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8001ebe:	4391      	bics	r1, r2
 8001ec0:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ec2:	6819      	ldr	r1, [r3, #0]
 8001ec4:	4001      	ands	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ec6:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ec8:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001eca:	6819      	ldr	r1, [r3, #0]
 8001ecc:	4339      	orrs	r1, r7
 8001ece:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001ed0:	6819      	ldr	r1, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001ed6:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8001ed8:	7028      	strb	r0, [r5, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001edc:	ffffefff 	.word	0xffffefff

08001ee0 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee0:	0002      	movs	r2, r0
{
 8001ee2:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee4:	3241      	adds	r2, #65	@ 0x41
 8001ee6:	7814      	ldrb	r4, [r2, #0]
{
 8001ee8:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eea:	b2e5      	uxtb	r5, r4
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eec:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eee:	2c20      	cmp	r4, #32
 8001ef0:	d117      	bne.n	8001f22 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8001ef2:	001c      	movs	r4, r3
 8001ef4:	3440      	adds	r4, #64	@ 0x40
 8001ef6:	7826      	ldrb	r6, [r4, #0]
 8001ef8:	2e01      	cmp	r6, #1
 8001efa:	d012      	beq.n	8001f22 <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001efc:	3022      	adds	r0, #34	@ 0x22
 8001efe:	7010      	strb	r0, [r2, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	3823      	subs	r0, #35	@ 0x23
 8001f04:	681e      	ldr	r6, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f06:	4f07      	ldr	r7, [pc, #28]	@ (8001f24 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8001f08:	4386      	bics	r6, r0
 8001f0a:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8001f0c:	681e      	ldr	r6, [r3, #0]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f0e:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8001f10:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8001f12:	4331      	orrs	r1, r6

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f14:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f16:	6819      	ldr	r1, [r3, #0]
 8001f18:	4308      	orrs	r0, r1
 8001f1a:	6018      	str	r0, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f1c:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001f1e:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8001f20:	7020      	strb	r0, [r4, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f24:	fffff0ff 	.word	0xfffff0ff

08001f28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f28:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001f2a:	4c11      	ldr	r4, [pc, #68]	@ (8001f70 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8001f2c:	4911      	ldr	r1, [pc, #68]	@ (8001f74 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8001f2e:	6823      	ldr	r3, [r4, #0]
{
 8001f30:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001f32:	400b      	ands	r3, r1
 8001f34:	4303      	orrs	r3, r0
 8001f36:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f38:	2380      	movs	r3, #128	@ 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001f3a:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d10e      	bne.n	8001f60 <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001f42:	4b0d      	ldr	r3, [pc, #52]	@ (8001f78 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8001f44:	490d      	ldr	r1, [pc, #52]	@ (8001f7c <HAL_PWREx_ControlVoltageScaling+0x54>)
 8001f46:	6818      	ldr	r0, [r3, #0]
 8001f48:	2306      	movs	r3, #6
 8001f4a:	4358      	muls	r0, r3
 8001f4c:	f7fe f8fe 	bl	800014c <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f50:	2280      	movs	r2, #128	@ 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001f52:	1c43      	adds	r3, r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f54:	00d2      	lsls	r2, r2, #3
 8001f56:	6961      	ldr	r1, [r4, #20]
 8001f58:	0008      	movs	r0, r1
 8001f5a:	4010      	ands	r0, r2
 8001f5c:	4211      	tst	r1, r2
 8001f5e:	d100      	bne.n	8001f62 <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 8001f60:	bd10      	pop	{r4, pc}
      if (wait_loop_index != 0U)
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 8001f66:	3b01      	subs	r3, #1
 8001f68:	e7f5      	b.n	8001f56 <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 8001f6a:	2003      	movs	r0, #3
 8001f6c:	e7f8      	b.n	8001f60 <HAL_PWREx_ControlVoltageScaling+0x38>
 8001f6e:	46c0      	nop			@ (mov r8, r8)
 8001f70:	40007000 	.word	0x40007000
 8001f74:	fffff9ff 	.word	0xfffff9ff
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	000f4240 	.word	0x000f4240

08001f80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f82:	0004      	movs	r4, r0
 8001f84:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f86:	2800      	cmp	r0, #0
 8001f88:	d102      	bne.n	8001f90 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001f8a:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8001f8c:	b005      	add	sp, #20
 8001f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f90:	6803      	ldr	r3, [r0, #0]
 8001f92:	07db      	lsls	r3, r3, #31
 8001f94:	d410      	bmi.n	8001fb8 <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f96:	6823      	ldr	r3, [r4, #0]
 8001f98:	079b      	lsls	r3, r3, #30
 8001f9a:	d45c      	bmi.n	8002056 <HAL_RCC_OscConfig+0xd6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9c:	6823      	ldr	r3, [r4, #0]
 8001f9e:	071b      	lsls	r3, r3, #28
 8001fa0:	d500      	bpl.n	8001fa4 <HAL_RCC_OscConfig+0x24>
 8001fa2:	e0c1      	b.n	8002128 <HAL_RCC_OscConfig+0x1a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa4:	6823      	ldr	r3, [r4, #0]
 8001fa6:	075b      	lsls	r3, r3, #29
 8001fa8:	d500      	bpl.n	8001fac <HAL_RCC_OscConfig+0x2c>
 8001faa:	e0f2      	b.n	8002192 <HAL_RCC_OscConfig+0x212>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fac:	69e3      	ldr	r3, [r4, #28]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d000      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x34>
 8001fb2:	e179      	b.n	80022a8 <HAL_RCC_OscConfig+0x328>
  return HAL_OK;
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	e7e9      	b.n	8001f8c <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fb8:	2238      	movs	r2, #56	@ 0x38
 8001fba:	4daf      	ldr	r5, [pc, #700]	@ (8002278 <HAL_RCC_OscConfig+0x2f8>)
 8001fbc:	68ab      	ldr	r3, [r5, #8]
 8001fbe:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fc0:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001fc2:	2b10      	cmp	r3, #16
 8001fc4:	d109      	bne.n	8001fda <HAL_RCC_OscConfig+0x5a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fc6:	43d3      	mvns	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001fc8:	079b      	lsls	r3, r3, #30
 8001fca:	d108      	bne.n	8001fde <HAL_RCC_OscConfig+0x5e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fcc:	682b      	ldr	r3, [r5, #0]
 8001fce:	039b      	lsls	r3, r3, #14
 8001fd0:	d5e1      	bpl.n	8001f96 <HAL_RCC_OscConfig+0x16>
 8001fd2:	6863      	ldr	r3, [r4, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1de      	bne.n	8001f96 <HAL_RCC_OscConfig+0x16>
 8001fd8:	e7d7      	b.n	8001f8a <HAL_RCC_OscConfig+0xa>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d0f6      	beq.n	8001fcc <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fde:	2280      	movs	r2, #128	@ 0x80
 8001fe0:	6863      	ldr	r3, [r4, #4]
 8001fe2:	0252      	lsls	r2, r2, #9
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d111      	bne.n	800200c <HAL_RCC_OscConfig+0x8c>
 8001fe8:	682a      	ldr	r2, [r5, #0]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001fee:	f7ff fc3b 	bl	8001868 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ff2:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001ff4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ff6:	02bf      	lsls	r7, r7, #10
 8001ff8:	682b      	ldr	r3, [r5, #0]
 8001ffa:	423b      	tst	r3, r7
 8001ffc:	d1cb      	bne.n	8001f96 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ffe:	f7ff fc33 	bl	8001868 <HAL_GetTick>
 8002002:	1b80      	subs	r0, r0, r6
 8002004:	2864      	cmp	r0, #100	@ 0x64
 8002006:	d9f7      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8002008:	2003      	movs	r0, #3
 800200a:	e7bf      	b.n	8001f8c <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800200c:	21a0      	movs	r1, #160	@ 0xa0
 800200e:	02c9      	lsls	r1, r1, #11
 8002010:	428b      	cmp	r3, r1
 8002012:	d108      	bne.n	8002026 <HAL_RCC_OscConfig+0xa6>
 8002014:	2380      	movs	r3, #128	@ 0x80
 8002016:	6829      	ldr	r1, [r5, #0]
 8002018:	02db      	lsls	r3, r3, #11
 800201a:	430b      	orrs	r3, r1
 800201c:	602b      	str	r3, [r5, #0]
 800201e:	682b      	ldr	r3, [r5, #0]
 8002020:	431a      	orrs	r2, r3
 8002022:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002024:	e7e3      	b.n	8001fee <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002026:	682a      	ldr	r2, [r5, #0]
 8002028:	4994      	ldr	r1, [pc, #592]	@ (800227c <HAL_RCC_OscConfig+0x2fc>)
 800202a:	400a      	ands	r2, r1
 800202c:	602a      	str	r2, [r5, #0]
 800202e:	682a      	ldr	r2, [r5, #0]
 8002030:	4993      	ldr	r1, [pc, #588]	@ (8002280 <HAL_RCC_OscConfig+0x300>)
 8002032:	400a      	ands	r2, r1
 8002034:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1d9      	bne.n	8001fee <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 800203a:	f7ff fc15 	bl	8001868 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800203e:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8002040:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002042:	02bf      	lsls	r7, r7, #10
 8002044:	682b      	ldr	r3, [r5, #0]
 8002046:	423b      	tst	r3, r7
 8002048:	d0a5      	beq.n	8001f96 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800204a:	f7ff fc0d 	bl	8001868 <HAL_GetTick>
 800204e:	1b80      	subs	r0, r0, r6
 8002050:	2864      	cmp	r0, #100	@ 0x64
 8002052:	d9f7      	bls.n	8002044 <HAL_RCC_OscConfig+0xc4>
 8002054:	e7d8      	b.n	8002008 <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002056:	2238      	movs	r2, #56	@ 0x38
 8002058:	4d87      	ldr	r5, [pc, #540]	@ (8002278 <HAL_RCC_OscConfig+0x2f8>)
 800205a:	68ab      	ldr	r3, [r5, #8]
 800205c:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800205e:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002060:	2b10      	cmp	r3, #16
 8002062:	d128      	bne.n	80020b6 <HAL_RCC_OscConfig+0x136>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002064:	2103      	movs	r1, #3
 8002066:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002068:	2a02      	cmp	r2, #2
 800206a:	d126      	bne.n	80020ba <HAL_RCC_OscConfig+0x13a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800206c:	682a      	ldr	r2, [r5, #0]
 800206e:	0552      	lsls	r2, r2, #21
 8002070:	d503      	bpl.n	800207a <HAL_RCC_OscConfig+0xfa>
 8002072:	68e2      	ldr	r2, [r4, #12]
 8002074:	2a00      	cmp	r2, #0
 8002076:	d100      	bne.n	800207a <HAL_RCC_OscConfig+0xfa>
 8002078:	e787      	b.n	8001f8a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207a:	6869      	ldr	r1, [r5, #4]
 800207c:	6962      	ldr	r2, [r4, #20]
 800207e:	4881      	ldr	r0, [pc, #516]	@ (8002284 <HAL_RCC_OscConfig+0x304>)
 8002080:	0212      	lsls	r2, r2, #8
 8002082:	4001      	ands	r1, r0
 8002084:	430a      	orrs	r2, r1
 8002086:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10c      	bne.n	80020a6 <HAL_RCC_OscConfig+0x126>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800208c:	682b      	ldr	r3, [r5, #0]
 800208e:	4a7e      	ldr	r2, [pc, #504]	@ (8002288 <HAL_RCC_OscConfig+0x308>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002090:	497e      	ldr	r1, [pc, #504]	@ (800228c <HAL_RCC_OscConfig+0x30c>)
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002092:	4013      	ands	r3, r2
 8002094:	6922      	ldr	r2, [r4, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800209a:	682b      	ldr	r3, [r5, #0]
 800209c:	4a7c      	ldr	r2, [pc, #496]	@ (8002290 <HAL_RCC_OscConfig+0x310>)
 800209e:	049b      	lsls	r3, r3, #18
 80020a0:	0f5b      	lsrs	r3, r3, #29
 80020a2:	40da      	lsrs	r2, r3
 80020a4:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020a6:	4b7b      	ldr	r3, [pc, #492]	@ (8002294 <HAL_RCC_OscConfig+0x314>)
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	f7ff fb95 	bl	80017d8 <HAL_InitTick>
 80020ae:	2800      	cmp	r0, #0
 80020b0:	d100      	bne.n	80020b4 <HAL_RCC_OscConfig+0x134>
 80020b2:	e773      	b.n	8001f9c <HAL_RCC_OscConfig+0x1c>
 80020b4:	e769      	b.n	8001f8a <HAL_RCC_OscConfig+0xa>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0d8      	beq.n	800206c <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ba:	68e3      	ldr	r3, [r4, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d020      	beq.n	8002102 <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80020c0:	682b      	ldr	r3, [r5, #0]
 80020c2:	4a71      	ldr	r2, [pc, #452]	@ (8002288 <HAL_RCC_OscConfig+0x308>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020c4:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80020c6:	4013      	ands	r3, r2
 80020c8:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ca:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80020cc:	4313      	orrs	r3, r2
 80020ce:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 80020d0:	2380      	movs	r3, #128	@ 0x80
 80020d2:	682a      	ldr	r2, [r5, #0]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4313      	orrs	r3, r2
 80020d8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80020da:	f7ff fbc5 	bl	8001868 <HAL_GetTick>
 80020de:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e0:	682b      	ldr	r3, [r5, #0]
 80020e2:	423b      	tst	r3, r7
 80020e4:	d007      	beq.n	80020f6 <HAL_RCC_OscConfig+0x176>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e6:	686a      	ldr	r2, [r5, #4]
 80020e8:	6963      	ldr	r3, [r4, #20]
 80020ea:	4966      	ldr	r1, [pc, #408]	@ (8002284 <HAL_RCC_OscConfig+0x304>)
 80020ec:	021b      	lsls	r3, r3, #8
 80020ee:	400a      	ands	r2, r1
 80020f0:	4313      	orrs	r3, r2
 80020f2:	606b      	str	r3, [r5, #4]
 80020f4:	e752      	b.n	8001f9c <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f6:	f7ff fbb7 	bl	8001868 <HAL_GetTick>
 80020fa:	1b80      	subs	r0, r0, r6
 80020fc:	2802      	cmp	r0, #2
 80020fe:	d9ef      	bls.n	80020e0 <HAL_RCC_OscConfig+0x160>
 8002100:	e782      	b.n	8002008 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8002102:	682b      	ldr	r3, [r5, #0]
 8002104:	4a64      	ldr	r2, [pc, #400]	@ (8002298 <HAL_RCC_OscConfig+0x318>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002106:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8002108:	4013      	ands	r3, r2
 800210a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800210c:	f7ff fbac 	bl	8001868 <HAL_GetTick>
 8002110:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002112:	00ff      	lsls	r7, r7, #3
 8002114:	682b      	ldr	r3, [r5, #0]
 8002116:	423b      	tst	r3, r7
 8002118:	d100      	bne.n	800211c <HAL_RCC_OscConfig+0x19c>
 800211a:	e73f      	b.n	8001f9c <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800211c:	f7ff fba4 	bl	8001868 <HAL_GetTick>
 8002120:	1b80      	subs	r0, r0, r6
 8002122:	2802      	cmp	r0, #2
 8002124:	d9f6      	bls.n	8002114 <HAL_RCC_OscConfig+0x194>
 8002126:	e76f      	b.n	8002008 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002128:	2238      	movs	r2, #56	@ 0x38
 800212a:	4d53      	ldr	r5, [pc, #332]	@ (8002278 <HAL_RCC_OscConfig+0x2f8>)
 800212c:	68ab      	ldr	r3, [r5, #8]
 800212e:	4013      	ands	r3, r2
 8002130:	2b18      	cmp	r3, #24
 8002132:	d108      	bne.n	8002146 <HAL_RCC_OscConfig+0x1c6>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002134:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8002136:	079b      	lsls	r3, r3, #30
 8002138:	d400      	bmi.n	800213c <HAL_RCC_OscConfig+0x1bc>
 800213a:	e733      	b.n	8001fa4 <HAL_RCC_OscConfig+0x24>
 800213c:	69a3      	ldr	r3, [r4, #24]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d000      	beq.n	8002144 <HAL_RCC_OscConfig+0x1c4>
 8002142:	e72f      	b.n	8001fa4 <HAL_RCC_OscConfig+0x24>
 8002144:	e721      	b.n	8001f8a <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002146:	69a2      	ldr	r2, [r4, #24]
 8002148:	2301      	movs	r3, #1
 800214a:	2a00      	cmp	r2, #0
 800214c:	d010      	beq.n	8002170 <HAL_RCC_OscConfig+0x1f0>
        __HAL_RCC_LSI_ENABLE();
 800214e:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002150:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8002152:	4313      	orrs	r3, r2
 8002154:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002156:	f7ff fb87 	bl	8001868 <HAL_GetTick>
 800215a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800215c:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800215e:	423b      	tst	r3, r7
 8002160:	d000      	beq.n	8002164 <HAL_RCC_OscConfig+0x1e4>
 8002162:	e71f      	b.n	8001fa4 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002164:	f7ff fb80 	bl	8001868 <HAL_GetTick>
 8002168:	1b80      	subs	r0, r0, r6
 800216a:	2802      	cmp	r0, #2
 800216c:	d9f6      	bls.n	800215c <HAL_RCC_OscConfig+0x1dc>
 800216e:	e74b      	b.n	8002008 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_LSI_DISABLE();
 8002170:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002172:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8002174:	439a      	bics	r2, r3
 8002176:	662a      	str	r2, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002178:	f7ff fb76 	bl	8001868 <HAL_GetTick>
 800217c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800217e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8002180:	423b      	tst	r3, r7
 8002182:	d100      	bne.n	8002186 <HAL_RCC_OscConfig+0x206>
 8002184:	e70e      	b.n	8001fa4 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002186:	f7ff fb6f 	bl	8001868 <HAL_GetTick>
 800218a:	1b80      	subs	r0, r0, r6
 800218c:	2802      	cmp	r0, #2
 800218e:	d9f6      	bls.n	800217e <HAL_RCC_OscConfig+0x1fe>
 8002190:	e73a      	b.n	8002008 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002192:	2238      	movs	r2, #56	@ 0x38
 8002194:	4d38      	ldr	r5, [pc, #224]	@ (8002278 <HAL_RCC_OscConfig+0x2f8>)
 8002196:	68ab      	ldr	r3, [r5, #8]
 8002198:	4013      	ands	r3, r2
 800219a:	2b20      	cmp	r3, #32
 800219c:	d108      	bne.n	80021b0 <HAL_RCC_OscConfig+0x230>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800219e:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 80021a0:	079b      	lsls	r3, r3, #30
 80021a2:	d400      	bmi.n	80021a6 <HAL_RCC_OscConfig+0x226>
 80021a4:	e702      	b.n	8001fac <HAL_RCC_OscConfig+0x2c>
 80021a6:	68a3      	ldr	r3, [r4, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d000      	beq.n	80021ae <HAL_RCC_OscConfig+0x22e>
 80021ac:	e6fe      	b.n	8001fac <HAL_RCC_OscConfig+0x2c>
 80021ae:	e6ec      	b.n	8001f8a <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021b0:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 80021b2:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021b4:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80021b6:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 80021b8:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021ba:	4213      	tst	r3, r2
 80021bc:	d108      	bne.n	80021d0 <HAL_RCC_OscConfig+0x250>
        __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80021c0:	4313      	orrs	r3, r2
 80021c2:	63eb      	str	r3, [r5, #60]	@ 0x3c
 80021c4:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80021c6:	4013      	ands	r3, r2
 80021c8:	9303      	str	r3, [sp, #12]
 80021ca:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 80021cc:	2301      	movs	r3, #1
 80021ce:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d0:	2780      	movs	r7, #128	@ 0x80
 80021d2:	4e32      	ldr	r6, [pc, #200]	@ (800229c <HAL_RCC_OscConfig+0x31c>)
 80021d4:	007f      	lsls	r7, r7, #1
 80021d6:	6833      	ldr	r3, [r6, #0]
 80021d8:	423b      	tst	r3, r7
 80021da:	d015      	beq.n	8002208 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021dc:	68a3      	ldr	r3, [r4, #8]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d122      	bne.n	8002228 <HAL_RCC_OscConfig+0x2a8>
 80021e2:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 80021e4:	4313      	orrs	r3, r2
 80021e6:	65eb      	str	r3, [r5, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 80021e8:	f7ff fb3e 	bl	8001868 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ec:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80021ee:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f0:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 80021f2:	423b      	tst	r3, r7
 80021f4:	d038      	beq.n	8002268 <HAL_RCC_OscConfig+0x2e8>
      if (pwrclkchanged == SET)
 80021f6:	9b00      	ldr	r3, [sp, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d000      	beq.n	80021fe <HAL_RCC_OscConfig+0x27e>
 80021fc:	e6d6      	b.n	8001fac <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 80021fe:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8002200:	4a27      	ldr	r2, [pc, #156]	@ (80022a0 <HAL_RCC_OscConfig+0x320>)
 8002202:	4013      	ands	r3, r2
 8002204:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8002206:	e6d1      	b.n	8001fac <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002208:	6833      	ldr	r3, [r6, #0]
 800220a:	433b      	orrs	r3, r7
 800220c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800220e:	f7ff fb2b 	bl	8001868 <HAL_GetTick>
 8002212:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002214:	6833      	ldr	r3, [r6, #0]
 8002216:	423b      	tst	r3, r7
 8002218:	d1e0      	bne.n	80021dc <HAL_RCC_OscConfig+0x25c>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221a:	f7ff fb25 	bl	8001868 <HAL_GetTick>
 800221e:	9b01      	ldr	r3, [sp, #4]
 8002220:	1ac0      	subs	r0, r0, r3
 8002222:	2802      	cmp	r0, #2
 8002224:	d9f6      	bls.n	8002214 <HAL_RCC_OscConfig+0x294>
 8002226:	e6ef      	b.n	8002008 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002228:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 800222a:	2b05      	cmp	r3, #5
 800222c:	d105      	bne.n	800223a <HAL_RCC_OscConfig+0x2ba>
 800222e:	3b01      	subs	r3, #1
 8002230:	4313      	orrs	r3, r2
 8002232:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8002234:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8002236:	2301      	movs	r3, #1
 8002238:	e7d4      	b.n	80021e4 <HAL_RCC_OscConfig+0x264>
 800223a:	2101      	movs	r1, #1
 800223c:	438a      	bics	r2, r1
 800223e:	65ea      	str	r2, [r5, #92]	@ 0x5c
 8002240:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8002242:	3103      	adds	r1, #3
 8002244:	438a      	bics	r2, r1
 8002246:	65ea      	str	r2, [r5, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1cd      	bne.n	80021e8 <HAL_RCC_OscConfig+0x268>
        tickstart = HAL_GetTick();
 800224c:	f7ff fb0c 	bl	8001868 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002250:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8002252:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002254:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8002256:	423b      	tst	r3, r7
 8002258:	d0cd      	beq.n	80021f6 <HAL_RCC_OscConfig+0x276>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225a:	f7ff fb05 	bl	8001868 <HAL_GetTick>
 800225e:	4b11      	ldr	r3, [pc, #68]	@ (80022a4 <HAL_RCC_OscConfig+0x324>)
 8002260:	1b80      	subs	r0, r0, r6
 8002262:	4298      	cmp	r0, r3
 8002264:	d9f6      	bls.n	8002254 <HAL_RCC_OscConfig+0x2d4>
 8002266:	e6cf      	b.n	8002008 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002268:	f7ff fafe 	bl	8001868 <HAL_GetTick>
 800226c:	4b0d      	ldr	r3, [pc, #52]	@ (80022a4 <HAL_RCC_OscConfig+0x324>)
 800226e:	1b80      	subs	r0, r0, r6
 8002270:	4298      	cmp	r0, r3
 8002272:	d9bd      	bls.n	80021f0 <HAL_RCC_OscConfig+0x270>
 8002274:	e6c8      	b.n	8002008 <HAL_RCC_OscConfig+0x88>
 8002276:	46c0      	nop			@ (mov r8, r8)
 8002278:	40021000 	.word	0x40021000
 800227c:	fffeffff 	.word	0xfffeffff
 8002280:	fffbffff 	.word	0xfffbffff
 8002284:	ffff80ff 	.word	0xffff80ff
 8002288:	ffffc7ff 	.word	0xffffc7ff
 800228c:	20000000 	.word	0x20000000
 8002290:	00f42400 	.word	0x00f42400
 8002294:	20000008 	.word	0x20000008
 8002298:	fffffeff 	.word	0xfffffeff
 800229c:	40007000 	.word	0x40007000
 80022a0:	efffffff 	.word	0xefffffff
 80022a4:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022a8:	2138      	movs	r1, #56	@ 0x38
 80022aa:	4d3f      	ldr	r5, [pc, #252]	@ (80023a8 <HAL_RCC_OscConfig+0x428>)
 80022ac:	68aa      	ldr	r2, [r5, #8]
 80022ae:	400a      	ands	r2, r1
 80022b0:	2a10      	cmp	r2, #16
 80022b2:	d051      	beq.n	8002358 <HAL_RCC_OscConfig+0x3d8>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022b4:	4a3d      	ldr	r2, [pc, #244]	@ (80023ac <HAL_RCC_OscConfig+0x42c>)
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d138      	bne.n	800232c <HAL_RCC_OscConfig+0x3ac>
        __HAL_RCC_PLL_DISABLE();
 80022ba:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022bc:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80022be:	4013      	ands	r3, r2
 80022c0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80022c2:	f7ff fad1 	bl	8001868 <HAL_GetTick>
 80022c6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c8:	04bf      	lsls	r7, r7, #18
 80022ca:	682b      	ldr	r3, [r5, #0]
 80022cc:	423b      	tst	r3, r7
 80022ce:	d127      	bne.n	8002320 <HAL_RCC_OscConfig+0x3a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022d0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80022d2:	6a23      	ldr	r3, [r4, #32]
 80022d4:	68ea      	ldr	r2, [r5, #12]
 80022d6:	430b      	orrs	r3, r1
 80022d8:	4935      	ldr	r1, [pc, #212]	@ (80023b0 <HAL_RCC_OscConfig+0x430>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022da:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022dc:	400a      	ands	r2, r1
 80022de:	4313      	orrs	r3, r2
 80022e0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e2:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e4:	4313      	orrs	r3, r2
 80022e6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80022e8:	4313      	orrs	r3, r2
 80022ea:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80022ec:	0212      	lsls	r2, r2, #8
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80022f2:	2380      	movs	r3, #128	@ 0x80
 80022f4:	682a      	ldr	r2, [r5, #0]
 80022f6:	045b      	lsls	r3, r3, #17
 80022f8:	4313      	orrs	r3, r2
 80022fa:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80022fc:	2380      	movs	r3, #128	@ 0x80
 80022fe:	68ea      	ldr	r2, [r5, #12]
 8002300:	055b      	lsls	r3, r3, #21
 8002302:	4313      	orrs	r3, r2
 8002304:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8002306:	f7ff faaf 	bl	8001868 <HAL_GetTick>
 800230a:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800230c:	682b      	ldr	r3, [r5, #0]
 800230e:	4233      	tst	r3, r6
 8002310:	d000      	beq.n	8002314 <HAL_RCC_OscConfig+0x394>
 8002312:	e64f      	b.n	8001fb4 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002314:	f7ff faa8 	bl	8001868 <HAL_GetTick>
 8002318:	1b00      	subs	r0, r0, r4
 800231a:	2802      	cmp	r0, #2
 800231c:	d9f6      	bls.n	800230c <HAL_RCC_OscConfig+0x38c>
 800231e:	e673      	b.n	8002008 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002320:	f7ff faa2 	bl	8001868 <HAL_GetTick>
 8002324:	1b80      	subs	r0, r0, r6
 8002326:	2802      	cmp	r0, #2
 8002328:	d9cf      	bls.n	80022ca <HAL_RCC_OscConfig+0x34a>
 800232a:	e66d      	b.n	8002008 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_PLL_DISABLE();
 800232c:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800232e:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8002330:	4013      	ands	r3, r2
 8002332:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002334:	f7ff fa98 	bl	8001868 <HAL_GetTick>
 8002338:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800233a:	04b6      	lsls	r6, r6, #18
 800233c:	682b      	ldr	r3, [r5, #0]
 800233e:	4233      	tst	r3, r6
 8002340:	d104      	bne.n	800234c <HAL_RCC_OscConfig+0x3cc>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002342:	68eb      	ldr	r3, [r5, #12]
 8002344:	4a1b      	ldr	r2, [pc, #108]	@ (80023b4 <HAL_RCC_OscConfig+0x434>)
 8002346:	4013      	ands	r3, r2
 8002348:	60eb      	str	r3, [r5, #12]
 800234a:	e633      	b.n	8001fb4 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234c:	f7ff fa8c 	bl	8001868 <HAL_GetTick>
 8002350:	1b00      	subs	r0, r0, r4
 8002352:	2802      	cmp	r0, #2
 8002354:	d9f2      	bls.n	800233c <HAL_RCC_OscConfig+0x3bc>
 8002356:	e657      	b.n	8002008 <HAL_RCC_OscConfig+0x88>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002358:	2b01      	cmp	r3, #1
 800235a:	d100      	bne.n	800235e <HAL_RCC_OscConfig+0x3de>
 800235c:	e615      	b.n	8001f8a <HAL_RCC_OscConfig+0xa>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235e:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8002360:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002362:	6a21      	ldr	r1, [r4, #32]
 8002364:	4002      	ands	r2, r0
 8002366:	428a      	cmp	r2, r1
 8002368:	d000      	beq.n	800236c <HAL_RCC_OscConfig+0x3ec>
 800236a:	e60e      	b.n	8001f8a <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800236c:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002370:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002372:	428a      	cmp	r2, r1
 8002374:	d000      	beq.n	8002378 <HAL_RCC_OscConfig+0x3f8>
 8002376:	e608      	b.n	8001f8a <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002378:	21fe      	movs	r1, #254	@ 0xfe
 800237a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800237c:	01c9      	lsls	r1, r1, #7
 800237e:	4001      	ands	r1, r0
 8002380:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002382:	4291      	cmp	r1, r2
 8002384:	d000      	beq.n	8002388 <HAL_RCC_OscConfig+0x408>
 8002386:	e600      	b.n	8001f8a <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002388:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800238a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800238c:	0392      	lsls	r2, r2, #14
 800238e:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002390:	428a      	cmp	r2, r1
 8002392:	d000      	beq.n	8002396 <HAL_RCC_OscConfig+0x416>
 8002394:	e5f9      	b.n	8001f8a <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002396:	6b23      	ldr	r3, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002398:	0f40      	lsrs	r0, r0, #29
 800239a:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800239c:	1ac0      	subs	r0, r0, r3
 800239e:	1e43      	subs	r3, r0, #1
 80023a0:	4198      	sbcs	r0, r3
 80023a2:	b2c0      	uxtb	r0, r0
 80023a4:	e5f2      	b.n	8001f8c <HAL_RCC_OscConfig+0xc>
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	40021000 	.word	0x40021000
 80023ac:	feffffff 	.word	0xfeffffff
 80023b0:	1fc1808c 	.word	0x1fc1808c
 80023b4:	effefffc 	.word	0xeffefffc

080023b8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023b8:	2338      	movs	r3, #56	@ 0x38
{
 80023ba:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023bc:	4c1d      	ldr	r4, [pc, #116]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x7c>)
 80023be:	68a2      	ldr	r2, [r4, #8]
 80023c0:	421a      	tst	r2, r3
 80023c2:	d105      	bne.n	80023d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80023c4:	6823      	ldr	r3, [r4, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80023c6:	481c      	ldr	r0, [pc, #112]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x80>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80023c8:	049b      	lsls	r3, r3, #18
 80023ca:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 80023cc:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80023ce:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023d0:	68a2      	ldr	r2, [r4, #8]
 80023d2:	401a      	ands	r2, r3
 80023d4:	2a08      	cmp	r2, #8
 80023d6:	d027      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0x70>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023d8:	68a2      	ldr	r2, [r4, #8]
 80023da:	401a      	ands	r2, r3
 80023dc:	2a10      	cmp	r2, #16
 80023de:	d117      	bne.n	8002410 <HAL_RCC_GetSysClockFreq+0x58>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80023e0:	68e3      	ldr	r3, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023e2:	68e1      	ldr	r1, [r4, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80023e4:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80023e6:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023e8:	0649      	lsls	r1, r1, #25
 80023ea:	0f49      	lsrs	r1, r1, #29
 80023ec:	326f      	adds	r2, #111	@ 0x6f
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80023ee:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023f0:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80023f2:	4015      	ands	r5, r2
    switch (pllsource)
 80023f4:	079b      	lsls	r3, r3, #30
 80023f6:	d109      	bne.n	800240c <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023f8:	4810      	ldr	r0, [pc, #64]	@ (800243c <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80023fa:	f7fd fea7 	bl	800014c <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80023fe:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002400:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002402:	0f49      	lsrs	r1, r1, #29
 8002404:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8002406:	f7fd fea1 	bl	800014c <__udivsi3>
 800240a:	e7e0      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800240c:	480a      	ldr	r0, [pc, #40]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x80>)
 800240e:	e7f4      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0x42>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002410:	68a2      	ldr	r2, [r4, #8]
 8002412:	401a      	ands	r2, r3
 8002414:	2a20      	cmp	r2, #32
 8002416:	d009      	beq.n	800242c <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002418:	68a2      	ldr	r2, [r4, #8]
    sysclockfreq = 0U;
 800241a:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800241c:	4013      	ands	r3, r2
 800241e:	2b18      	cmp	r3, #24
 8002420:	d1d5      	bne.n	80023ce <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSI_VALUE;
 8002422:	20fa      	movs	r0, #250	@ 0xfa
 8002424:	01c0      	lsls	r0, r0, #7
 8002426:	e7d2      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8002428:	4804      	ldr	r0, [pc, #16]	@ (800243c <HAL_RCC_GetSysClockFreq+0x84>)
 800242a:	e7d0      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 800242c:	2080      	movs	r0, #128	@ 0x80
 800242e:	0200      	lsls	r0, r0, #8
 8002430:	e7cd      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0x16>
 8002432:	46c0      	nop			@ (mov r8, r8)
 8002434:	40021000 	.word	0x40021000
 8002438:	00f42400 	.word	0x00f42400
 800243c:	007a1200 	.word	0x007a1200

08002440 <HAL_RCC_ClockConfig>:
{
 8002440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002442:	0004      	movs	r4, r0
 8002444:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002446:	2800      	cmp	r0, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800244a:	2001      	movs	r0, #1
}
 800244c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800244e:	2707      	movs	r7, #7
 8002450:	4e48      	ldr	r6, [pc, #288]	@ (8002574 <HAL_RCC_ClockConfig+0x134>)
 8002452:	6833      	ldr	r3, [r6, #0]
 8002454:	403b      	ands	r3, r7
 8002456:	428b      	cmp	r3, r1
 8002458:	d32a      	bcc.n	80024b0 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800245a:	6822      	ldr	r2, [r4, #0]
 800245c:	0793      	lsls	r3, r2, #30
 800245e:	d43b      	bmi.n	80024d8 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002460:	07d2      	lsls	r2, r2, #31
 8002462:	d448      	bmi.n	80024f6 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002464:	2707      	movs	r7, #7
 8002466:	6833      	ldr	r3, [r6, #0]
 8002468:	403b      	ands	r3, r7
 800246a:	42ab      	cmp	r3, r5
 800246c:	d90a      	bls.n	8002484 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	6833      	ldr	r3, [r6, #0]
 8002470:	43bb      	bics	r3, r7
 8002472:	432b      	orrs	r3, r5
 8002474:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002476:	f7ff f9f7 	bl	8001868 <HAL_GetTick>
 800247a:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800247c:	6833      	ldr	r3, [r6, #0]
 800247e:	403b      	ands	r3, r7
 8002480:	42ab      	cmp	r3, r5
 8002482:	d168      	bne.n	8002556 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002484:	6823      	ldr	r3, [r4, #0]
 8002486:	4d3c      	ldr	r5, [pc, #240]	@ (8002578 <HAL_RCC_ClockConfig+0x138>)
 8002488:	075b      	lsls	r3, r3, #29
 800248a:	d46c      	bmi.n	8002566 <HAL_RCC_ClockConfig+0x126>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800248c:	f7ff ff94 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8002490:	68ab      	ldr	r3, [r5, #8]
 8002492:	493a      	ldr	r1, [pc, #232]	@ (800257c <HAL_RCC_ClockConfig+0x13c>)
 8002494:	051b      	lsls	r3, r3, #20
 8002496:	0f1b      	lsrs	r3, r3, #28
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	585b      	ldr	r3, [r3, r1]
 800249c:	211f      	movs	r1, #31
 800249e:	400b      	ands	r3, r1
 80024a0:	40d8      	lsrs	r0, r3
 80024a2:	4a37      	ldr	r2, [pc, #220]	@ (8002580 <HAL_RCC_ClockConfig+0x140>)
  return HAL_InitTick(uwTickPrio);
 80024a4:	4b37      	ldr	r3, [pc, #220]	@ (8002584 <HAL_RCC_ClockConfig+0x144>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80024a6:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	f7ff f995 	bl	80017d8 <HAL_InitTick>
 80024ae:	e7cd      	b.n	800244c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b0:	6833      	ldr	r3, [r6, #0]
 80024b2:	43bb      	bics	r3, r7
 80024b4:	430b      	orrs	r3, r1
 80024b6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80024b8:	f7ff f9d6 	bl	8001868 <HAL_GetTick>
 80024bc:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024be:	6833      	ldr	r3, [r6, #0]
 80024c0:	403b      	ands	r3, r7
 80024c2:	42ab      	cmp	r3, r5
 80024c4:	d0c9      	beq.n	800245a <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c6:	f7ff f9cf 	bl	8001868 <HAL_GetTick>
 80024ca:	9b01      	ldr	r3, [sp, #4]
 80024cc:	1ac0      	subs	r0, r0, r3
 80024ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002588 <HAL_RCC_ClockConfig+0x148>)
 80024d0:	4298      	cmp	r0, r3
 80024d2:	d9f4      	bls.n	80024be <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 80024d4:	2003      	movs	r0, #3
 80024d6:	e7b9      	b.n	800244c <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d8:	4927      	ldr	r1, [pc, #156]	@ (8002578 <HAL_RCC_ClockConfig+0x138>)
 80024da:	0753      	lsls	r3, r2, #29
 80024dc:	d504      	bpl.n	80024e8 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80024de:	23e0      	movs	r3, #224	@ 0xe0
 80024e0:	6888      	ldr	r0, [r1, #8]
 80024e2:	01db      	lsls	r3, r3, #7
 80024e4:	4303      	orrs	r3, r0
 80024e6:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e8:	688b      	ldr	r3, [r1, #8]
 80024ea:	4828      	ldr	r0, [pc, #160]	@ (800258c <HAL_RCC_ClockConfig+0x14c>)
 80024ec:	4003      	ands	r3, r0
 80024ee:	68a0      	ldr	r0, [r4, #8]
 80024f0:	4303      	orrs	r3, r0
 80024f2:	608b      	str	r3, [r1, #8]
 80024f4:	e7b4      	b.n	8002460 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f6:	6860      	ldr	r0, [r4, #4]
 80024f8:	4f1f      	ldr	r7, [pc, #124]	@ (8002578 <HAL_RCC_ClockConfig+0x138>)
 80024fa:	2803      	cmp	r0, #3
 80024fc:	d829      	bhi.n	8002552 <HAL_RCC_ClockConfig+0x112>
 80024fe:	f7fd fe11 	bl	8000124 <__gnu_thumb1_case_uqi>
 8002502:	0220      	.short	0x0220
 8002504:	241c      	.short	0x241c
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	039b      	lsls	r3, r3, #14
 800250a:	d59e      	bpl.n	800244a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800250c:	2207      	movs	r2, #7
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	4393      	bics	r3, r2
 8002512:	4303      	orrs	r3, r0
 8002514:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8002516:	f7ff f9a7 	bl	8001868 <HAL_GetTick>
 800251a:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251c:	2338      	movs	r3, #56	@ 0x38
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	401a      	ands	r2, r3
 8002522:	6863      	ldr	r3, [r4, #4]
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	429a      	cmp	r2, r3
 8002528:	d09c      	beq.n	8002464 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800252a:	f7ff f99d 	bl	8001868 <HAL_GetTick>
 800252e:	9b01      	ldr	r3, [sp, #4]
 8002530:	1ac0      	subs	r0, r0, r3
 8002532:	4b15      	ldr	r3, [pc, #84]	@ (8002588 <HAL_RCC_ClockConfig+0x148>)
 8002534:	4298      	cmp	r0, r3
 8002536:	d9f1      	bls.n	800251c <HAL_RCC_ClockConfig+0xdc>
 8002538:	e7cc      	b.n	80024d4 <HAL_RCC_ClockConfig+0x94>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	019b      	lsls	r3, r3, #6
 800253e:	d4e5      	bmi.n	800250c <HAL_RCC_ClockConfig+0xcc>
 8002540:	e783      	b.n	800244a <HAL_RCC_ClockConfig+0xa>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	055b      	lsls	r3, r3, #21
 8002546:	d4e1      	bmi.n	800250c <HAL_RCC_ClockConfig+0xcc>
 8002548:	e77f      	b.n	800244a <HAL_RCC_ClockConfig+0xa>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800254a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800254c:	079b      	lsls	r3, r3, #30
 800254e:	d4dd      	bmi.n	800250c <HAL_RCC_ClockConfig+0xcc>
 8002550:	e77b      	b.n	800244a <HAL_RCC_ClockConfig+0xa>
 8002552:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002554:	e7fa      	b.n	800254c <HAL_RCC_ClockConfig+0x10c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002556:	f7ff f987 	bl	8001868 <HAL_GetTick>
 800255a:	9b01      	ldr	r3, [sp, #4]
 800255c:	1ac0      	subs	r0, r0, r3
 800255e:	4b0a      	ldr	r3, [pc, #40]	@ (8002588 <HAL_RCC_ClockConfig+0x148>)
 8002560:	4298      	cmp	r0, r3
 8002562:	d98b      	bls.n	800247c <HAL_RCC_ClockConfig+0x3c>
 8002564:	e7b6      	b.n	80024d4 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002566:	68ab      	ldr	r3, [r5, #8]
 8002568:	4a09      	ldr	r2, [pc, #36]	@ (8002590 <HAL_RCC_ClockConfig+0x150>)
 800256a:	4013      	ands	r3, r2
 800256c:	68e2      	ldr	r2, [r4, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	60ab      	str	r3, [r5, #8]
 8002572:	e78b      	b.n	800248c <HAL_RCC_ClockConfig+0x4c>
 8002574:	40022000 	.word	0x40022000
 8002578:	40021000 	.word	0x40021000
 800257c:	08005134 	.word	0x08005134
 8002580:	20000000 	.word	0x20000000
 8002584:	20000008 	.word	0x20000008
 8002588:	00001388 	.word	0x00001388
 800258c:	fffff0ff 	.word	0xfffff0ff
 8002590:	ffff8fff 	.word	0xffff8fff

08002594 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002594:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002596:	4907      	ldr	r1, [pc, #28]	@ (80025b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002598:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800259a:	4a07      	ldr	r2, [pc, #28]	@ (80025b8 <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800259c:	045b      	lsls	r3, r3, #17
 800259e:	0f5b      	lsrs	r3, r3, #29
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	585b      	ldr	r3, [r3, r1]
 80025a4:	211f      	movs	r1, #31
 80025a6:	6810      	ldr	r0, [r2, #0]
 80025a8:	400b      	ands	r3, r1
 80025aa:	40d8      	lsrs	r0, r3
}
 80025ac:	4770      	bx	lr
 80025ae:	46c0      	nop			@ (mov r8, r8)
 80025b0:	40021000 	.word	0x40021000
 80025b4:	08005114 	.word	0x08005114
 80025b8:	20000000 	.word	0x20000000

080025bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025bc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025be:	6803      	ldr	r3, [r0, #0]
{
 80025c0:	0005      	movs	r5, r0
 80025c2:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025c4:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025c6:	039b      	lsls	r3, r3, #14
 80025c8:	d551      	bpl.n	800266e <HAL_RCCEx_PeriphCLKConfig+0xb2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ca:	2280      	movs	r2, #128	@ 0x80
 80025cc:	4c48      	ldr	r4, [pc, #288]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025ce:	0552      	lsls	r2, r2, #21
 80025d0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80025d2:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d4:	4213      	tst	r3, r2
 80025d6:	d108      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80025da:	4313      	orrs	r3, r2
 80025dc:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80025de:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80025e0:	4013      	ands	r3, r2
 80025e2:	9303      	str	r3, [sp, #12]
 80025e4:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80025e6:	2301      	movs	r3, #1
 80025e8:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025ea:	2780      	movs	r7, #128	@ 0x80
 80025ec:	4e41      	ldr	r6, [pc, #260]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80025ee:	007f      	lsls	r7, r7, #1
 80025f0:	6833      	ldr	r3, [r6, #0]
 80025f2:	433b      	orrs	r3, r7
 80025f4:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025f6:	f7ff f937 	bl	8001868 <HAL_GetTick>
 80025fa:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025fc:	6833      	ldr	r3, [r6, #0]
 80025fe:	423b      	tst	r3, r7
 8002600:	d027      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x96>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002602:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002604:	23c0      	movs	r3, #192	@ 0xc0
 8002606:	0010      	movs	r0, r2
 8002608:	009b      	lsls	r3, r3, #2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800260a:	6969      	ldr	r1, [r5, #20]
 800260c:	4e3a      	ldr	r6, [pc, #232]	@ (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800260e:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002610:	421a      	tst	r2, r3
 8002612:	d017      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8002614:	4281      	cmp	r1, r0
 8002616:	d015      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002618:	2280      	movs	r2, #128	@ 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800261a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 800261c:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800261e:	0019      	movs	r1, r3
        __HAL_RCC_BACKUPRESET_FORCE();
 8002620:	0252      	lsls	r2, r2, #9
 8002622:	4302      	orrs	r2, r0
 8002624:	65e2      	str	r2, [r4, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002626:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002628:	4834      	ldr	r0, [pc, #208]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x140>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800262a:	4031      	ands	r1, r6
        __HAL_RCC_BACKUPRESET_RELEASE();
 800262c:	4002      	ands	r2, r0
 800262e:	65e2      	str	r2, [r4, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002630:	65e1      	str	r1, [r4, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002632:	07db      	lsls	r3, r3, #31
 8002634:	d506      	bpl.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002636:	f7ff f917 	bl	8001868 <HAL_GetTick>
 800263a:	0007      	movs	r7, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800263c:	2202      	movs	r2, #2
 800263e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002640:	4213      	tst	r3, r2
 8002642:	d04d      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x124>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002644:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002646:	696a      	ldr	r2, [r5, #20]
 8002648:	4033      	ands	r3, r6
 800264a:	4313      	orrs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800264c:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800264e:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8002650:	e006      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002652:	f7ff f909 	bl	8001868 <HAL_GetTick>
 8002656:	9b01      	ldr	r3, [sp, #4]
 8002658:	1ac0      	subs	r0, r0, r3
 800265a:	2802      	cmp	r0, #2
 800265c:	d9ce      	bls.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x40>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800265e:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002660:	9b00      	ldr	r3, [sp, #0]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d103      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002666:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002668:	4a25      	ldr	r2, [pc, #148]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800266a:	4013      	ands	r3, r2
 800266c:	63e3      	str	r3, [r4, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800266e:	682a      	ldr	r2, [r5, #0]
 8002670:	07d3      	lsls	r3, r2, #31
 8002672:	d506      	bpl.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002674:	2403      	movs	r4, #3
 8002676:	491e      	ldr	r1, [pc, #120]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002678:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 800267a:	43a3      	bics	r3, r4
 800267c:	686c      	ldr	r4, [r5, #4]
 800267e:	4323      	orrs	r3, r4
 8002680:	654b      	str	r3, [r1, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002682:	0693      	lsls	r3, r2, #26
 8002684:	d506      	bpl.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002686:	491a      	ldr	r1, [pc, #104]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002688:	4c1e      	ldr	r4, [pc, #120]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800268a:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 800268c:	4023      	ands	r3, r4
 800268e:	68ac      	ldr	r4, [r5, #8]
 8002690:	4323      	orrs	r3, r4
 8002692:	654b      	str	r3, [r1, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002694:	0453      	lsls	r3, r2, #17
 8002696:	d50f      	bpl.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002698:	4915      	ldr	r1, [pc, #84]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800269a:	692c      	ldr	r4, [r5, #16]
 800269c:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	089b      	lsrs	r3, r3, #2
 80026a2:	4323      	orrs	r3, r4
 80026a4:	654b      	str	r3, [r1, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80026a6:	2380      	movs	r3, #128	@ 0x80
 80026a8:	05db      	lsls	r3, r3, #23
 80026aa:	429c      	cmp	r4, r3
 80026ac:	d104      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80026ae:	2380      	movs	r3, #128	@ 0x80
 80026b0:	68cc      	ldr	r4, [r1, #12]
 80026b2:	025b      	lsls	r3, r3, #9
 80026b4:	4323      	orrs	r3, r4
 80026b6:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80026b8:	0512      	lsls	r2, r2, #20
 80026ba:	d50f      	bpl.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80026bc:	4a0c      	ldr	r2, [pc, #48]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026be:	4c12      	ldr	r4, [pc, #72]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80026c0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80026c2:	68e9      	ldr	r1, [r5, #12]
 80026c4:	4023      	ands	r3, r4
 80026c6:	430b      	orrs	r3, r1
 80026c8:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80026ca:	2380      	movs	r3, #128	@ 0x80
 80026cc:	01db      	lsls	r3, r3, #7
 80026ce:	4299      	cmp	r1, r3
 80026d0:	d104      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80026d2:	2380      	movs	r3, #128	@ 0x80
 80026d4:	68d1      	ldr	r1, [r2, #12]
 80026d6:	025b      	lsls	r3, r3, #9
 80026d8:	430b      	orrs	r3, r1
 80026da:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 80026dc:	b005      	add	sp, #20
 80026de:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e0:	f7ff f8c2 	bl	8001868 <HAL_GetTick>
 80026e4:	4b09      	ldr	r3, [pc, #36]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80026e6:	1bc0      	subs	r0, r0, r7
 80026e8:	4298      	cmp	r0, r3
 80026ea:	d9a7      	bls.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x80>
 80026ec:	e7b7      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80026ee:	46c0      	nop			@ (mov r8, r8)
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40007000 	.word	0x40007000
 80026f8:	fffffcff 	.word	0xfffffcff
 80026fc:	fffeffff 	.word	0xfffeffff
 8002700:	efffffff 	.word	0xefffffff
 8002704:	ffffcfff 	.word	0xffffcfff
 8002708:	ffff3fff 	.word	0xffff3fff
 800270c:	00001388 	.word	0x00001388

08002710 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002710:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002712:	2401      	movs	r4, #1
  tmpccer = TIMx->CCER;
 8002714:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002716:	6a02      	ldr	r2, [r0, #32]
 8002718:	43a2      	bics	r2, r4
 800271a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800271c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800271e:	4a12      	ldr	r2, [pc, #72]	@ (8002768 <TIM_OC1_SetConfig+0x58>)
  tmpccmrx = TIMx->CCMR1;
 8002720:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002722:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002724:	680a      	ldr	r2, [r1, #0]
 8002726:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002728:	2202      	movs	r2, #2
 800272a:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800272c:	688a      	ldr	r2, [r1, #8]
 800272e:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002730:	4a0e      	ldr	r2, [pc, #56]	@ (800276c <TIM_OC1_SetConfig+0x5c>)
 8002732:	4290      	cmp	r0, r2
 8002734:	d005      	beq.n	8002742 <TIM_OC1_SetConfig+0x32>
 8002736:	4a0e      	ldr	r2, [pc, #56]	@ (8002770 <TIM_OC1_SetConfig+0x60>)
 8002738:	4290      	cmp	r0, r2
 800273a:	d002      	beq.n	8002742 <TIM_OC1_SetConfig+0x32>
 800273c:	4a0d      	ldr	r2, [pc, #52]	@ (8002774 <TIM_OC1_SetConfig+0x64>)
 800273e:	4290      	cmp	r0, r2
 8002740:	d10b      	bne.n	800275a <TIM_OC1_SetConfig+0x4a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002742:	2208      	movs	r2, #8
 8002744:	4393      	bics	r3, r2
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002746:	68ca      	ldr	r2, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002748:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 800274a:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 800274c:	2204      	movs	r2, #4
 800274e:	4393      	bics	r3, r2
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002750:	4a09      	ldr	r2, [pc, #36]	@ (8002778 <TIM_OC1_SetConfig+0x68>)
 8002752:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002754:	694c      	ldr	r4, [r1, #20]
 8002756:	4334      	orrs	r4, r6
 8002758:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800275a:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800275c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800275e:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002760:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002762:	6203      	str	r3, [r0, #32]
}
 8002764:	bd70      	pop	{r4, r5, r6, pc}
 8002766:	46c0      	nop			@ (mov r8, r8)
 8002768:	fffeff8c 	.word	0xfffeff8c
 800276c:	40012c00 	.word	0x40012c00
 8002770:	40014400 	.word	0x40014400
 8002774:	40014800 	.word	0x40014800
 8002778:	fffffcff 	.word	0xfffffcff

0800277c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800277c:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800277e:	4a17      	ldr	r2, [pc, #92]	@ (80027dc <TIM_OC3_SetConfig+0x60>)
  tmpccer = TIMx->CCER;
 8002780:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002782:	6a03      	ldr	r3, [r0, #32]
 8002784:	4013      	ands	r3, r2
 8002786:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002788:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800278a:	4b15      	ldr	r3, [pc, #84]	@ (80027e0 <TIM_OC3_SetConfig+0x64>)
  tmpccmrx = TIMx->CCMR2;
 800278c:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800278e:	401c      	ands	r4, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002790:	680b      	ldr	r3, [r1, #0]
 8002792:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002794:	4b13      	ldr	r3, [pc, #76]	@ (80027e4 <TIM_OC3_SetConfig+0x68>)
 8002796:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002798:	688b      	ldr	r3, [r1, #8]
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800279e:	4d12      	ldr	r5, [pc, #72]	@ (80027e8 <TIM_OC3_SetConfig+0x6c>)
 80027a0:	42a8      	cmp	r0, r5
 80027a2:	d10e      	bne.n	80027c2 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027a4:	4d11      	ldr	r5, [pc, #68]	@ (80027ec <TIM_OC3_SetConfig+0x70>)
 80027a6:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027a8:	68cb      	ldr	r3, [r1, #12]
 80027aa:	021b      	lsls	r3, r3, #8
 80027ac:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027ae:	4d10      	ldr	r5, [pc, #64]	@ (80027f0 <TIM_OC3_SetConfig+0x74>)
 80027b0:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027b2:	4d10      	ldr	r5, [pc, #64]	@ (80027f4 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027b4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027b6:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027b8:	694a      	ldr	r2, [r1, #20]
 80027ba:	4332      	orrs	r2, r6
 80027bc:	0112      	lsls	r2, r2, #4
 80027be:	432a      	orrs	r2, r5
 80027c0:	e005      	b.n	80027ce <TIM_OC3_SetConfig+0x52>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027c2:	4d0d      	ldr	r5, [pc, #52]	@ (80027f8 <TIM_OC3_SetConfig+0x7c>)
 80027c4:	42a8      	cmp	r0, r5
 80027c6:	d0f4      	beq.n	80027b2 <TIM_OC3_SetConfig+0x36>
 80027c8:	4d0c      	ldr	r5, [pc, #48]	@ (80027fc <TIM_OC3_SetConfig+0x80>)
 80027ca:	42a8      	cmp	r0, r5
 80027cc:	d0f1      	beq.n	80027b2 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027ce:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027d0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80027d2:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80027d4:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027d6:	6203      	str	r3, [r0, #32]
}
 80027d8:	bd70      	pop	{r4, r5, r6, pc}
 80027da:	46c0      	nop			@ (mov r8, r8)
 80027dc:	fffffeff 	.word	0xfffffeff
 80027e0:	fffeff8c 	.word	0xfffeff8c
 80027e4:	fffffdff 	.word	0xfffffdff
 80027e8:	40012c00 	.word	0x40012c00
 80027ec:	fffff7ff 	.word	0xfffff7ff
 80027f0:	fffffbff 	.word	0xfffffbff
 80027f4:	ffffcfff 	.word	0xffffcfff
 80027f8:	40014400 	.word	0x40014400
 80027fc:	40014800 	.word	0x40014800

08002800 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002800:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002802:	4a12      	ldr	r2, [pc, #72]	@ (800284c <TIM_OC4_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 8002804:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002806:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002808:	4d11      	ldr	r5, [pc, #68]	@ (8002850 <TIM_OC4_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800280a:	4013      	ands	r3, r2
 800280c:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800280e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002810:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002812:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002814:	680d      	ldr	r5, [r1, #0]
 8002816:	022d      	lsls	r5, r5, #8
 8002818:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800281a:	4a0e      	ldr	r2, [pc, #56]	@ (8002854 <TIM_OC4_SetConfig+0x54>)
 800281c:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800281e:	688a      	ldr	r2, [r1, #8]
 8002820:	0312      	lsls	r2, r2, #12
 8002822:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002824:	4c0c      	ldr	r4, [pc, #48]	@ (8002858 <TIM_OC4_SetConfig+0x58>)
 8002826:	42a0      	cmp	r0, r4
 8002828:	d005      	beq.n	8002836 <TIM_OC4_SetConfig+0x36>
 800282a:	4c0c      	ldr	r4, [pc, #48]	@ (800285c <TIM_OC4_SetConfig+0x5c>)
 800282c:	42a0      	cmp	r0, r4
 800282e:	d002      	beq.n	8002836 <TIM_OC4_SetConfig+0x36>
 8002830:	4c0b      	ldr	r4, [pc, #44]	@ (8002860 <TIM_OC4_SetConfig+0x60>)
 8002832:	42a0      	cmp	r0, r4
 8002834:	d104      	bne.n	8002840 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002836:	4c0b      	ldr	r4, [pc, #44]	@ (8002864 <TIM_OC4_SetConfig+0x64>)
 8002838:	401c      	ands	r4, r3

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800283a:	694b      	ldr	r3, [r1, #20]
 800283c:	019b      	lsls	r3, r3, #6
 800283e:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002840:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002842:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002844:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002846:	6403      	str	r3, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002848:	6202      	str	r2, [r0, #32]
}
 800284a:	bd30      	pop	{r4, r5, pc}
 800284c:	ffffefff 	.word	0xffffefff
 8002850:	feff8cff 	.word	0xfeff8cff
 8002854:	ffffdfff 	.word	0xffffdfff
 8002858:	40012c00 	.word	0x40012c00
 800285c:	40014400 	.word	0x40014400
 8002860:	40014800 	.word	0x40014800
 8002864:	ffffbfff 	.word	0xffffbfff

08002868 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002868:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800286a:	6a06      	ldr	r6, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800286c:	4c10      	ldr	r4, [pc, #64]	@ (80028b0 <TIM_OC5_SetConfig+0x48>)
 800286e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002870:	4a10      	ldr	r2, [pc, #64]	@ (80028b4 <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002872:	4023      	ands	r3, r4
 8002874:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002876:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8002878:	6d45      	ldr	r5, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800287a:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800287c:	680a      	ldr	r2, [r1, #0]
 800287e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002880:	4a0d      	ldr	r2, [pc, #52]	@ (80028b8 <TIM_OC5_SetConfig+0x50>)
 8002882:	4016      	ands	r6, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002884:	688a      	ldr	r2, [r1, #8]
 8002886:	0412      	lsls	r2, r2, #16
 8002888:	4332      	orrs	r2, r6

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800288a:	4e0c      	ldr	r6, [pc, #48]	@ (80028bc <TIM_OC5_SetConfig+0x54>)
 800288c:	42b0      	cmp	r0, r6
 800288e:	d005      	beq.n	800289c <TIM_OC5_SetConfig+0x34>
 8002890:	4e0b      	ldr	r6, [pc, #44]	@ (80028c0 <TIM_OC5_SetConfig+0x58>)
 8002892:	42b0      	cmp	r0, r6
 8002894:	d002      	beq.n	800289c <TIM_OC5_SetConfig+0x34>
 8002896:	4e0b      	ldr	r6, [pc, #44]	@ (80028c4 <TIM_OC5_SetConfig+0x5c>)
 8002898:	42b0      	cmp	r0, r6
 800289a:	d103      	bne.n	80028a4 <TIM_OC5_SetConfig+0x3c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800289c:	401c      	ands	r4, r3
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800289e:	694b      	ldr	r3, [r1, #20]
 80028a0:	021b      	lsls	r3, r3, #8
 80028a2:	4323      	orrs	r3, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028a4:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80028a6:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 80028a8:	6545      	str	r5, [r0, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 80028aa:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ac:	6202      	str	r2, [r0, #32]
}
 80028ae:	bd70      	pop	{r4, r5, r6, pc}
 80028b0:	fffeffff 	.word	0xfffeffff
 80028b4:	fffeff8f 	.word	0xfffeff8f
 80028b8:	fffdffff 	.word	0xfffdffff
 80028bc:	40012c00 	.word	0x40012c00
 80028c0:	40014400 	.word	0x40014400
 80028c4:	40014800 	.word	0x40014800

080028c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80028c8:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80028ca:	4a12      	ldr	r2, [pc, #72]	@ (8002914 <TIM_OC6_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 80028cc:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80028ce:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80028d0:	4d11      	ldr	r5, [pc, #68]	@ (8002918 <TIM_OC6_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80028d2:	4013      	ands	r3, r2
 80028d4:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80028d6:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 80028d8:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80028da:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028dc:	680d      	ldr	r5, [r1, #0]
 80028de:	022d      	lsls	r5, r5, #8
 80028e0:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80028e2:	4a0e      	ldr	r2, [pc, #56]	@ (800291c <TIM_OC6_SetConfig+0x54>)
 80028e4:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80028e6:	688a      	ldr	r2, [r1, #8]
 80028e8:	0512      	lsls	r2, r2, #20
 80028ea:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ec:	4c0c      	ldr	r4, [pc, #48]	@ (8002920 <TIM_OC6_SetConfig+0x58>)
 80028ee:	42a0      	cmp	r0, r4
 80028f0:	d005      	beq.n	80028fe <TIM_OC6_SetConfig+0x36>
 80028f2:	4c0c      	ldr	r4, [pc, #48]	@ (8002924 <TIM_OC6_SetConfig+0x5c>)
 80028f4:	42a0      	cmp	r0, r4
 80028f6:	d002      	beq.n	80028fe <TIM_OC6_SetConfig+0x36>
 80028f8:	4c0b      	ldr	r4, [pc, #44]	@ (8002928 <TIM_OC6_SetConfig+0x60>)
 80028fa:	42a0      	cmp	r0, r4
 80028fc:	d104      	bne.n	8002908 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80028fe:	4c0b      	ldr	r4, [pc, #44]	@ (800292c <TIM_OC6_SetConfig+0x64>)
 8002900:	401c      	ands	r4, r3
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002902:	694b      	ldr	r3, [r1, #20]
 8002904:	029b      	lsls	r3, r3, #10
 8002906:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002908:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800290a:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 800290c:	6545      	str	r5, [r0, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800290e:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002910:	6202      	str	r2, [r0, #32]
}
 8002912:	bd30      	pop	{r4, r5, pc}
 8002914:	ffefffff 	.word	0xffefffff
 8002918:	feff8fff 	.word	0xfeff8fff
 800291c:	ffdfffff 	.word	0xffdfffff
 8002920:	40012c00 	.word	0x40012c00
 8002924:	40014400 	.word	0x40014400
 8002928:	40014800 	.word	0x40014800
 800292c:	fffbffff 	.word	0xfffbffff

08002930 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8002930:	4770      	bx	lr

08002932 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8002932:	4770      	bx	lr

08002934 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8002934:	4770      	bx	lr

08002936 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8002936:	4770      	bx	lr

08002938 <TIM_DMADelayPulseCplt>:
{
 8002938:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800293a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800293c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800293e:	4282      	cmp	r2, r0
 8002940:	d10d      	bne.n	800295e <TIM_DMADelayPulseCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002942:	2301      	movs	r3, #1
 8002944:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8002946:	69d2      	ldr	r2, [r2, #28]
 8002948:	2a00      	cmp	r2, #0
 800294a:	d102      	bne.n	8002952 <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800294c:	0022      	movs	r2, r4
 800294e:	323e      	adds	r2, #62	@ 0x3e
 8002950:	7013      	strb	r3, [r2, #0]
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002952:	0020      	movs	r0, r4
 8002954:	f7fe fa96 	bl	8000e84 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002958:	2300      	movs	r3, #0
 800295a:	7723      	strb	r3, [r4, #28]
}
 800295c:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800295e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002960:	4283      	cmp	r3, r0
 8002962:	d109      	bne.n	8002978 <TIM_DMADelayPulseCplt+0x40>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002964:	2202      	movs	r2, #2
 8002966:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f1      	bne.n	8002952 <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800296e:	0023      	movs	r3, r4
 8002970:	3a01      	subs	r2, #1
 8002972:	333f      	adds	r3, #63	@ 0x3f
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002974:	701a      	strb	r2, [r3, #0]
 8002976:	e7ec      	b.n	8002952 <TIM_DMADelayPulseCplt+0x1a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002978:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800297a:	4283      	cmp	r3, r0
 800297c:	d108      	bne.n	8002990 <TIM_DMADelayPulseCplt+0x58>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800297e:	2204      	movs	r2, #4
 8002980:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1e4      	bne.n	8002952 <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002988:	0023      	movs	r3, r4
 800298a:	3a03      	subs	r2, #3
 800298c:	3340      	adds	r3, #64	@ 0x40
 800298e:	e7f1      	b.n	8002974 <TIM_DMADelayPulseCplt+0x3c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002990:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002992:	4283      	cmp	r3, r0
 8002994:	d1dd      	bne.n	8002952 <TIM_DMADelayPulseCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002996:	2208      	movs	r2, #8
 8002998:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1d8      	bne.n	8002952 <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80029a0:	0023      	movs	r3, r4
 80029a2:	3a07      	subs	r2, #7
 80029a4:	3341      	adds	r3, #65	@ 0x41
 80029a6:	e7e5      	b.n	8002974 <TIM_DMADelayPulseCplt+0x3c>

080029a8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
 80029a8:	4770      	bx	lr

080029aa <TIM_DMADelayPulseHalfCplt>:
{
 80029aa:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ac:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80029ae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80029b0:	4283      	cmp	r3, r0
 80029b2:	d107      	bne.n	80029c4 <TIM_DMADelayPulseHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029b4:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029b6:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80029b8:	0020      	movs	r0, r4
 80029ba:	f7ff fff5 	bl	80029a8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029be:	2300      	movs	r3, #0
 80029c0:	7723      	strb	r3, [r4, #28]
}
 80029c2:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80029c4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80029c6:	4283      	cmp	r3, r0
 80029c8:	d101      	bne.n	80029ce <TIM_DMADelayPulseHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ca:	2302      	movs	r3, #2
 80029cc:	e7f3      	b.n	80029b6 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80029ce:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80029d0:	4283      	cmp	r3, r0
 80029d2:	d101      	bne.n	80029d8 <TIM_DMADelayPulseHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029d4:	2304      	movs	r3, #4
 80029d6:	e7ee      	b.n	80029b6 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80029d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80029da:	4283      	cmp	r3, r0
 80029dc:	d1ec      	bne.n	80029b8 <TIM_DMADelayPulseHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029de:	2308      	movs	r3, #8
 80029e0:	e7e9      	b.n	80029b6 <TIM_DMADelayPulseHalfCplt+0xc>

080029e2 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80029e2:	4770      	bx	lr

080029e4 <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029e4:	2202      	movs	r2, #2
  uint32_t itsource = htim->Instance->DIER;
 80029e6:	6803      	ldr	r3, [r0, #0]
{
 80029e8:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 80029ea:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029ec:	691e      	ldr	r6, [r3, #16]
{
 80029ee:	0004      	movs	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029f0:	4216      	tst	r6, r2
 80029f2:	d00d      	beq.n	8002a10 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029f4:	4215      	tst	r5, r2
 80029f6:	d00b      	beq.n	8002a10 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029f8:	3a05      	subs	r2, #5
 80029fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029fc:	3204      	adds	r2, #4
 80029fe:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	079b      	lsls	r3, r3, #30
 8002a04:	d100      	bne.n	8002a08 <HAL_TIM_IRQHandler+0x24>
 8002a06:	e07c      	b.n	8002b02 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002a08:	f7ff ff95 	bl	8002936 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a10:	2304      	movs	r3, #4
 8002a12:	421e      	tst	r6, r3
 8002a14:	d012      	beq.n	8002a3c <HAL_TIM_IRQHandler+0x58>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a16:	421d      	tst	r5, r3
 8002a18:	d010      	beq.n	8002a3c <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a1a:	2205      	movs	r2, #5
 8002a1c:	6823      	ldr	r3, [r4, #0]
 8002a1e:	4252      	negs	r2, r2
 8002a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a22:	3207      	adds	r2, #7
 8002a24:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a26:	699a      	ldr	r2, [r3, #24]
 8002a28:	23c0      	movs	r3, #192	@ 0xc0
 8002a2a:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2c:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a2e:	421a      	tst	r2, r3
 8002a30:	d100      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x50>
 8002a32:	e06c      	b.n	8002b0e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002a34:	f7ff ff7f 	bl	8002936 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a3c:	2308      	movs	r3, #8
 8002a3e:	421e      	tst	r6, r3
 8002a40:	d00f      	beq.n	8002a62 <HAL_TIM_IRQHandler+0x7e>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a42:	421d      	tst	r5, r3
 8002a44:	d00d      	beq.n	8002a62 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a46:	2209      	movs	r2, #9
 8002a48:	6823      	ldr	r3, [r4, #0]
 8002a4a:	4252      	negs	r2, r2
 8002a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a4e:	320d      	adds	r2, #13
 8002a50:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a52:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002a54:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a56:	079b      	lsls	r3, r3, #30
 8002a58:	d05f      	beq.n	8002b1a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002a5a:	f7ff ff6c 	bl	8002936 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a62:	2310      	movs	r3, #16
 8002a64:	421e      	tst	r6, r3
 8002a66:	d011      	beq.n	8002a8c <HAL_TIM_IRQHandler+0xa8>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a68:	421d      	tst	r5, r3
 8002a6a:	d00f      	beq.n	8002a8c <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a6c:	2211      	movs	r2, #17
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	4252      	negs	r2, r2
 8002a72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a74:	3219      	adds	r2, #25
 8002a76:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a78:	69da      	ldr	r2, [r3, #28]
 8002a7a:	23c0      	movs	r3, #192	@ 0xc0
 8002a7c:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7e:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a80:	421a      	tst	r2, r3
 8002a82:	d050      	beq.n	8002b26 <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8002a84:	f7ff ff57 	bl	8002936 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	421e      	tst	r6, r3
 8002a90:	d008      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0xc0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a92:	421d      	tst	r5, r3
 8002a94:	d006      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a96:	2202      	movs	r2, #2
 8002a98:	6823      	ldr	r3, [r4, #0]
 8002a9a:	4252      	negs	r2, r2
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a9c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a9e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aa0:	f7ff ff47 	bl	8002932 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002aa4:	2382      	movs	r3, #130	@ 0x82
 8002aa6:	019b      	lsls	r3, r3, #6
 8002aa8:	421e      	tst	r6, r3
 8002aaa:	d007      	beq.n	8002abc <HAL_TIM_IRQHandler+0xd8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002aac:	062b      	lsls	r3, r5, #24
 8002aae:	d505      	bpl.n	8002abc <HAL_TIM_IRQHandler+0xd8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002ab0:	6823      	ldr	r3, [r4, #0]
 8002ab2:	4a20      	ldr	r2, [pc, #128]	@ (8002b34 <HAL_TIM_IRQHandler+0x150>)
      HAL_TIMEx_BreakCallback(htim);
 8002ab4:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002ab6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002ab8:	f000 fba9 	bl	800320e <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002abc:	05f3      	lsls	r3, r6, #23
 8002abe:	d507      	bpl.n	8002ad0 <HAL_TIM_IRQHandler+0xec>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ac0:	062b      	lsls	r3, r5, #24
 8002ac2:	d505      	bpl.n	8002ad0 <HAL_TIM_IRQHandler+0xec>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ac4:	6823      	ldr	r3, [r4, #0]
 8002ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b38 <HAL_TIM_IRQHandler+0x154>)
      HAL_TIMEx_Break2Callback(htim);
 8002ac8:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002aca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002acc:	f000 fba0 	bl	8003210 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ad0:	2340      	movs	r3, #64	@ 0x40
 8002ad2:	421e      	tst	r6, r3
 8002ad4:	d008      	beq.n	8002ae8 <HAL_TIM_IRQHandler+0x104>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ad6:	421d      	tst	r5, r3
 8002ad8:	d006      	beq.n	8002ae8 <HAL_TIM_IRQHandler+0x104>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ada:	2241      	movs	r2, #65	@ 0x41
 8002adc:	6823      	ldr	r3, [r4, #0]
 8002ade:	4252      	negs	r2, r2
      HAL_TIM_TriggerCallback(htim);
 8002ae0:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ae2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002ae4:	f7ff ff7d 	bl	80029e2 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ae8:	2320      	movs	r3, #32
 8002aea:	421e      	tst	r6, r3
 8002aec:	d008      	beq.n	8002b00 <HAL_TIM_IRQHandler+0x11c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002aee:	421d      	tst	r5, r3
 8002af0:	d006      	beq.n	8002b00 <HAL_TIM_IRQHandler+0x11c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002af2:	2221      	movs	r2, #33	@ 0x21
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	4252      	negs	r2, r2
      HAL_TIMEx_CommutCallback(htim);
 8002af8:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002afa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002afc:	f000 fb86 	bl	800320c <HAL_TIMEx_CommutCallback>
}
 8002b00:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b02:	f7ff ff17 	bl	8002934 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b06:	0020      	movs	r0, r4
 8002b08:	f7fe f9bc 	bl	8000e84 <HAL_TIM_PWM_PulseFinishedCallback>
 8002b0c:	e77e      	b.n	8002a0c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0e:	f7ff ff11 	bl	8002934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b12:	0020      	movs	r0, r4
 8002b14:	f7fe f9b6 	bl	8000e84 <HAL_TIM_PWM_PulseFinishedCallback>
 8002b18:	e78e      	b.n	8002a38 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1a:	f7ff ff0b 	bl	8002934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1e:	0020      	movs	r0, r4
 8002b20:	f7fe f9b0 	bl	8000e84 <HAL_TIM_PWM_PulseFinishedCallback>
 8002b24:	e79b      	b.n	8002a5e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b26:	f7ff ff05 	bl	8002934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2a:	0020      	movs	r0, r4
 8002b2c:	f7fe f9aa 	bl	8000e84 <HAL_TIM_PWM_PulseFinishedCallback>
 8002b30:	e7aa      	b.n	8002a88 <HAL_TIM_IRQHandler+0xa4>
 8002b32:	46c0      	nop			@ (mov r8, r8)
 8002b34:	ffffdf7f 	.word	0xffffdf7f
 8002b38:	fffffeff 	.word	0xfffffeff

08002b3c <HAL_TIM_ErrorCallback>:
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
 8002b3c:	4770      	bx	lr

08002b3e <TIM_DMAError>:
{
 8002b3e:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b40:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002b42:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002b44:	4283      	cmp	r3, r0
 8002b46:	d105      	bne.n	8002b54 <TIM_DMAError+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b48:	2301      	movs	r3, #1
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b4a:	0022      	movs	r2, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b4c:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b4e:	323e      	adds	r2, #62	@ 0x3e
    htim->State = HAL_TIM_STATE_READY;
 8002b50:	7013      	strb	r3, [r2, #0]
 8002b52:	e008      	b.n	8002b66 <TIM_DMAError+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002b54:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002b56:	4283      	cmp	r3, r0
 8002b58:	d10b      	bne.n	8002b72 <TIM_DMAError+0x34>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b5e:	0023      	movs	r3, r4
 8002b60:	2201      	movs	r2, #1
 8002b62:	333f      	adds	r3, #63	@ 0x3f
 8002b64:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ErrorCallback(htim);
 8002b66:	0020      	movs	r0, r4
 8002b68:	f7ff ffe8 	bl	8002b3c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	7723      	strb	r3, [r4, #28]
}
 8002b70:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002b72:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002b74:	2301      	movs	r3, #1
 8002b76:	4282      	cmp	r2, r0
 8002b78:	d104      	bne.n	8002b84 <TIM_DMAError+0x46>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002b7e:	0022      	movs	r2, r4
 8002b80:	3240      	adds	r2, #64	@ 0x40
 8002b82:	e7e5      	b.n	8002b50 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002b84:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002b86:	4282      	cmp	r2, r0
 8002b88:	d104      	bne.n	8002b94 <TIM_DMAError+0x56>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b8a:	2208      	movs	r2, #8
 8002b8c:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002b8e:	0022      	movs	r2, r4
 8002b90:	3241      	adds	r2, #65	@ 0x41
 8002b92:	e7dd      	b.n	8002b50 <TIM_DMAError+0x12>
    htim->State = HAL_TIM_STATE_READY;
 8002b94:	0022      	movs	r2, r4
 8002b96:	323d      	adds	r2, #61	@ 0x3d
 8002b98:	e7da      	b.n	8002b50 <TIM_DMAError+0x12>
	...

08002b9c <TIM_Base_SetConfig>:
{
 8002b9c:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b9e:	4c1b      	ldr	r4, [pc, #108]	@ (8002c0c <TIM_Base_SetConfig+0x70>)
  tmpcr1 = TIMx->CR1;
 8002ba0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ba2:	42a0      	cmp	r0, r4
 8002ba4:	d00a      	beq.n	8002bbc <TIM_Base_SetConfig+0x20>
 8002ba6:	4a1a      	ldr	r2, [pc, #104]	@ (8002c10 <TIM_Base_SetConfig+0x74>)
 8002ba8:	4290      	cmp	r0, r2
 8002baa:	d007      	beq.n	8002bbc <TIM_Base_SetConfig+0x20>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bac:	4a19      	ldr	r2, [pc, #100]	@ (8002c14 <TIM_Base_SetConfig+0x78>)
 8002bae:	4290      	cmp	r0, r2
 8002bb0:	d109      	bne.n	8002bc6 <TIM_Base_SetConfig+0x2a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bb2:	4a19      	ldr	r2, [pc, #100]	@ (8002c18 <TIM_Base_SetConfig+0x7c>)
 8002bb4:	401a      	ands	r2, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bb6:	68cb      	ldr	r3, [r1, #12]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	e00a      	b.n	8002bd2 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bbc:	2270      	movs	r2, #112	@ 0x70
 8002bbe:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8002bc0:	684a      	ldr	r2, [r1, #4]
 8002bc2:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bc4:	e7f5      	b.n	8002bb2 <TIM_Base_SetConfig+0x16>
 8002bc6:	4a15      	ldr	r2, [pc, #84]	@ (8002c1c <TIM_Base_SetConfig+0x80>)
 8002bc8:	4290      	cmp	r0, r2
 8002bca:	d0f2      	beq.n	8002bb2 <TIM_Base_SetConfig+0x16>
 8002bcc:	4a14      	ldr	r2, [pc, #80]	@ (8002c20 <TIM_Base_SetConfig+0x84>)
 8002bce:	4290      	cmp	r0, r2
 8002bd0:	d0ef      	beq.n	8002bb2 <TIM_Base_SetConfig+0x16>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bd2:	2280      	movs	r2, #128	@ 0x80
 8002bd4:	4393      	bics	r3, r2
 8002bd6:	694a      	ldr	r2, [r1, #20]
 8002bd8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002bda:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bdc:	688b      	ldr	r3, [r1, #8]
 8002bde:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002be0:	680b      	ldr	r3, [r1, #0]
 8002be2:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002be4:	42a0      	cmp	r0, r4
 8002be6:	d005      	beq.n	8002bf4 <TIM_Base_SetConfig+0x58>
 8002be8:	4b0c      	ldr	r3, [pc, #48]	@ (8002c1c <TIM_Base_SetConfig+0x80>)
 8002bea:	4298      	cmp	r0, r3
 8002bec:	d002      	beq.n	8002bf4 <TIM_Base_SetConfig+0x58>
 8002bee:	4b0c      	ldr	r3, [pc, #48]	@ (8002c20 <TIM_Base_SetConfig+0x84>)
 8002bf0:	4298      	cmp	r0, r3
 8002bf2:	d101      	bne.n	8002bf8 <TIM_Base_SetConfig+0x5c>
    TIMx->RCR = Structure->RepetitionCounter;
 8002bf4:	690b      	ldr	r3, [r1, #16]
 8002bf6:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	6142      	str	r2, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bfc:	6903      	ldr	r3, [r0, #16]
 8002bfe:	4213      	tst	r3, r2
 8002c00:	d002      	beq.n	8002c08 <TIM_Base_SetConfig+0x6c>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c02:	6903      	ldr	r3, [r0, #16]
 8002c04:	4393      	bics	r3, r2
 8002c06:	6103      	str	r3, [r0, #16]
}
 8002c08:	bd10      	pop	{r4, pc}
 8002c0a:	46c0      	nop			@ (mov r8, r8)
 8002c0c:	40012c00 	.word	0x40012c00
 8002c10:	40000400 	.word	0x40000400
 8002c14:	40002000 	.word	0x40002000
 8002c18:	fffffcff 	.word	0xfffffcff
 8002c1c:	40014400 	.word	0x40014400
 8002c20:	40014800 	.word	0x40014800

08002c24 <HAL_TIM_Base_Init>:
{
 8002c24:	b570      	push	{r4, r5, r6, lr}
 8002c26:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002c28:	2001      	movs	r0, #1
  if (htim == NULL)
 8002c2a:	2c00      	cmp	r4, #0
 8002c2c:	d023      	beq.n	8002c76 <HAL_TIM_Base_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002c2e:	0025      	movs	r5, r4
 8002c30:	353d      	adds	r5, #61	@ 0x3d
 8002c32:	782b      	ldrb	r3, [r5, #0]
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d105      	bne.n	8002c46 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8002c3a:	0023      	movs	r3, r4
 8002c3c:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002c3e:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8002c40:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8002c42:	f7fe fcc3 	bl	80015cc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002c46:	2302      	movs	r3, #2
 8002c48:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c4a:	6820      	ldr	r0, [r4, #0]
 8002c4c:	1d21      	adds	r1, r4, #4
 8002c4e:	f7ff ffa5 	bl	8002b9c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c52:	0022      	movs	r2, r4
 8002c54:	2301      	movs	r3, #1
  return HAL_OK;
 8002c56:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c58:	3248      	adds	r2, #72	@ 0x48
 8002c5a:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c5c:	3447      	adds	r4, #71	@ 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c5e:	3a0a      	subs	r2, #10
 8002c60:	7013      	strb	r3, [r2, #0]
 8002c62:	7053      	strb	r3, [r2, #1]
 8002c64:	7093      	strb	r3, [r2, #2]
 8002c66:	70d3      	strb	r3, [r2, #3]
 8002c68:	7113      	strb	r3, [r2, #4]
 8002c6a:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c6c:	7193      	strb	r3, [r2, #6]
 8002c6e:	71d3      	strb	r3, [r2, #7]
 8002c70:	7213      	strb	r3, [r2, #8]
 8002c72:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002c74:	702b      	strb	r3, [r5, #0]
}
 8002c76:	bd70      	pop	{r4, r5, r6, pc}

08002c78 <HAL_TIM_PWM_Init>:
{
 8002c78:	b570      	push	{r4, r5, r6, lr}
 8002c7a:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002c7c:	2001      	movs	r0, #1
  if (htim == NULL)
 8002c7e:	2c00      	cmp	r4, #0
 8002c80:	d023      	beq.n	8002cca <HAL_TIM_PWM_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002c82:	0025      	movs	r5, r4
 8002c84:	353d      	adds	r5, #61	@ 0x3d
 8002c86:	782b      	ldrb	r3, [r5, #0]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d105      	bne.n	8002c9a <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8002c8e:	0023      	movs	r3, r4
 8002c90:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002c92:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8002c94:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 8002c96:	f7ff fe4b 	bl	8002930 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c9e:	6820      	ldr	r0, [r4, #0]
 8002ca0:	1d21      	adds	r1, r4, #4
 8002ca2:	f7ff ff7b 	bl	8002b9c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ca6:	0022      	movs	r2, r4
 8002ca8:	2301      	movs	r3, #1
  return HAL_OK;
 8002caa:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cac:	3248      	adds	r2, #72	@ 0x48
 8002cae:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb0:	3447      	adds	r4, #71	@ 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb2:	3a0a      	subs	r2, #10
 8002cb4:	7013      	strb	r3, [r2, #0]
 8002cb6:	7053      	strb	r3, [r2, #1]
 8002cb8:	7093      	strb	r3, [r2, #2]
 8002cba:	70d3      	strb	r3, [r2, #3]
 8002cbc:	7113      	strb	r3, [r2, #4]
 8002cbe:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc0:	7193      	strb	r3, [r2, #6]
 8002cc2:	71d3      	strb	r3, [r2, #7]
 8002cc4:	7213      	strb	r3, [r2, #8]
 8002cc6:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002cc8:	702b      	strb	r3, [r5, #0]
}
 8002cca:	bd70      	pop	{r4, r5, r6, pc}

08002ccc <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ccc:	2210      	movs	r2, #16
{
 8002cce:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 8002cd0:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cd2:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cd4:	4c16      	ldr	r4, [pc, #88]	@ (8002d30 <TIM_OC2_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cd6:	4393      	bics	r3, r2
 8002cd8:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002cda:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002cdc:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cde:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ce0:	680c      	ldr	r4, [r1, #0]
 8002ce2:	0224      	lsls	r4, r4, #8
 8002ce4:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 8002ce6:	2320      	movs	r3, #32
 8002ce8:	439d      	bics	r5, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cea:	688b      	ldr	r3, [r1, #8]
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	432b      	orrs	r3, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cf0:	4d10      	ldr	r5, [pc, #64]	@ (8002d34 <TIM_OC2_SetConfig+0x68>)
 8002cf2:	42a8      	cmp	r0, r5
 8002cf4:	d10f      	bne.n	8002d16 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8002cf6:	2580      	movs	r5, #128	@ 0x80
 8002cf8:	43ab      	bics	r3, r5
 8002cfa:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cfc:	68cb      	ldr	r3, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 8002cfe:	3d40      	subs	r5, #64	@ 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d04:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d06:	4d0c      	ldr	r5, [pc, #48]	@ (8002d38 <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d08:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d0a:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d0c:	694a      	ldr	r2, [r1, #20]
 8002d0e:	4332      	orrs	r2, r6
 8002d10:	0092      	lsls	r2, r2, #2
 8002d12:	432a      	orrs	r2, r5
 8002d14:	e005      	b.n	8002d22 <TIM_OC2_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d16:	4d09      	ldr	r5, [pc, #36]	@ (8002d3c <TIM_OC2_SetConfig+0x70>)
 8002d18:	42a8      	cmp	r0, r5
 8002d1a:	d0f4      	beq.n	8002d06 <TIM_OC2_SetConfig+0x3a>
 8002d1c:	4d08      	ldr	r5, [pc, #32]	@ (8002d40 <TIM_OC2_SetConfig+0x74>)
 8002d1e:	42a8      	cmp	r0, r5
 8002d20:	d0f1      	beq.n	8002d06 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8002d22:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8002d24:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002d26:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002d28:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8002d2a:	6203      	str	r3, [r0, #32]
}
 8002d2c:	bd70      	pop	{r4, r5, r6, pc}
 8002d2e:	46c0      	nop			@ (mov r8, r8)
 8002d30:	feff8cff 	.word	0xfeff8cff
 8002d34:	40012c00 	.word	0x40012c00
 8002d38:	fffff3ff 	.word	0xfffff3ff
 8002d3c:	40014400 	.word	0x40014400
 8002d40:	40014800 	.word	0x40014800

08002d44 <HAL_TIM_PWM_ConfigChannel>:
{
 8002d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8002d46:	0007      	movs	r7, r0
 8002d48:	373c      	adds	r7, #60	@ 0x3c
{
 8002d4a:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 8002d4c:	783a      	ldrb	r2, [r7, #0]
{
 8002d4e:	0003      	movs	r3, r0
 8002d50:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 8002d52:	2002      	movs	r0, #2
 8002d54:	2a01      	cmp	r2, #1
 8002d56:	d00c      	beq.n	8002d72 <HAL_TIM_PWM_ConfigChannel+0x2e>
 8002d58:	3801      	subs	r0, #1
 8002d5a:	7038      	strb	r0, [r7, #0]
  switch (Channel)
 8002d5c:	2d0c      	cmp	r5, #12
 8002d5e:	d051      	beq.n	8002e04 <HAL_TIM_PWM_ConfigChannel+0xc0>
 8002d60:	d808      	bhi.n	8002d74 <HAL_TIM_PWM_ConfigChannel+0x30>
 8002d62:	2d04      	cmp	r5, #4
 8002d64:	d02d      	beq.n	8002dc2 <HAL_TIM_PWM_ConfigChannel+0x7e>
 8002d66:	2d08      	cmp	r5, #8
 8002d68:	d03c      	beq.n	8002de4 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8002d6a:	2d00      	cmp	r5, #0
 8002d6c:	d017      	beq.n	8002d9e <HAL_TIM_PWM_ConfigChannel+0x5a>
  __HAL_UNLOCK(htim);
 8002d6e:	2300      	movs	r3, #0
 8002d70:	703b      	strb	r3, [r7, #0]
}
 8002d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8002d74:	2d10      	cmp	r5, #16
 8002d76:	d058      	beq.n	8002e2a <HAL_TIM_PWM_ConfigChannel+0xe6>
 8002d78:	2d14      	cmp	r5, #20
 8002d7a:	d1f8      	bne.n	8002d6e <HAL_TIM_PWM_ConfigChannel+0x2a>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002d7c:	681d      	ldr	r5, [r3, #0]
 8002d7e:	0028      	movs	r0, r5
 8002d80:	f7ff fda2 	bl	80028c8 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002d84:	2380      	movs	r3, #128	@ 0x80
 8002d86:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002d8e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8002d90:	4a2e      	ldr	r2, [pc, #184]	@ (8002e4c <HAL_TIM_PWM_ConfigChannel+0x108>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002d96:	6923      	ldr	r3, [r4, #16]
 8002d98:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	e053      	b.n	8002e46 <HAL_TIM_PWM_ConfigChannel+0x102>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d9e:	681d      	ldr	r5, [r3, #0]
 8002da0:	0028      	movs	r0, r5
 8002da2:	f7ff fcb5 	bl	8002710 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002da6:	2308      	movs	r3, #8
 8002da8:	69aa      	ldr	r2, [r5, #24]
 8002daa:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dac:	2204      	movs	r2, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dae:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002db0:	69ab      	ldr	r3, [r5, #24]
 8002db2:	4393      	bics	r3, r2
 8002db4:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002db6:	69ab      	ldr	r3, [r5, #24]
 8002db8:	6922      	ldr	r2, [r4, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61ab      	str	r3, [r5, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	e7d5      	b.n	8002d6e <HAL_TIM_PWM_ConfigChannel+0x2a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dc2:	681d      	ldr	r5, [r3, #0]
 8002dc4:	0028      	movs	r0, r5
 8002dc6:	f7ff ff81 	bl	8002ccc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dca:	2380      	movs	r3, #128	@ 0x80
 8002dcc:	69aa      	ldr	r2, [r5, #24]
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002dd4:	69ab      	ldr	r3, [r5, #24]
 8002dd6:	4a1d      	ldr	r2, [pc, #116]	@ (8002e4c <HAL_TIM_PWM_ConfigChannel+0x108>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ddc:	6923      	ldr	r3, [r4, #16]
 8002dde:	69aa      	ldr	r2, [r5, #24]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	e7ea      	b.n	8002dba <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002de4:	681e      	ldr	r6, [r3, #0]
 8002de6:	0030      	movs	r0, r6
 8002de8:	f7ff fcc8 	bl	800277c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dec:	2204      	movs	r2, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dee:	69f3      	ldr	r3, [r6, #28]
 8002df0:	431d      	orrs	r5, r3
 8002df2:	61f5      	str	r5, [r6, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002df4:	69f3      	ldr	r3, [r6, #28]
 8002df6:	4393      	bics	r3, r2
 8002df8:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dfa:	69f3      	ldr	r3, [r6, #28]
 8002dfc:	6922      	ldr	r2, [r4, #16]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61f3      	str	r3, [r6, #28]
      break;
 8002e02:	e7dc      	b.n	8002dbe <HAL_TIM_PWM_ConfigChannel+0x7a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e04:	681d      	ldr	r5, [r3, #0]
 8002e06:	0028      	movs	r0, r5
 8002e08:	f7ff fcfa 	bl	8002800 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e0c:	2380      	movs	r3, #128	@ 0x80
 8002e0e:	69ea      	ldr	r2, [r5, #28]
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e16:	69eb      	ldr	r3, [r5, #28]
 8002e18:	4a0c      	ldr	r2, [pc, #48]	@ (8002e4c <HAL_TIM_PWM_ConfigChannel+0x108>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e1e:	6923      	ldr	r3, [r4, #16]
 8002e20:	69ea      	ldr	r2, [r5, #28]
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61eb      	str	r3, [r5, #28]
      break;
 8002e28:	e7c9      	b.n	8002dbe <HAL_TIM_PWM_ConfigChannel+0x7a>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e2a:	681d      	ldr	r5, [r3, #0]
 8002e2c:	0028      	movs	r0, r5
 8002e2e:	f7ff fd1b 	bl	8002868 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e32:	2308      	movs	r3, #8
 8002e34:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8002e36:	4313      	orrs	r3, r2
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002e38:	2204      	movs	r2, #4
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e3a:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002e3c:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8002e3e:	4393      	bics	r3, r2
 8002e40:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002e42:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8002e44:	6922      	ldr	r2, [r4, #16]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002e46:	4313      	orrs	r3, r2
 8002e48:	656b      	str	r3, [r5, #84]	@ 0x54
      break;
 8002e4a:	e7b8      	b.n	8002dbe <HAL_TIM_PWM_ConfigChannel+0x7a>
 8002e4c:	fffffbff 	.word	0xfffffbff

08002e50 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e50:	231f      	movs	r3, #31
{
 8002e52:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e54:	2401      	movs	r4, #1
 8002e56:	4019      	ands	r1, r3
 8002e58:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e5a:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8002e5c:	6a03      	ldr	r3, [r0, #32]
 8002e5e:	43a3      	bics	r3, r4
 8002e60:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e62:	6a03      	ldr	r3, [r0, #32]
 8002e64:	431a      	orrs	r2, r3
 8002e66:	6202      	str	r2, [r0, #32]
}
 8002e68:	bd10      	pop	{r4, pc}
	...

08002e6c <HAL_TIM_OC_Start_DMA>:
{
 8002e6c:	b570      	push	{r4, r5, r6, lr}
 8002e6e:	000e      	movs	r6, r1
 8002e70:	0005      	movs	r5, r0
 8002e72:	0011      	movs	r1, r2
 8002e74:	2e08      	cmp	r6, #8
 8002e76:	d01c      	beq.n	8002eb2 <HAL_TIM_OC_Start_DMA+0x46>
 8002e78:	d806      	bhi.n	8002e88 <HAL_TIM_OC_Start_DMA+0x1c>
 8002e7a:	2e00      	cmp	r6, #0
 8002e7c:	d00b      	beq.n	8002e96 <HAL_TIM_OC_Start_DMA+0x2a>
 8002e7e:	2e04      	cmp	r6, #4
 8002e80:	d014      	beq.n	8002eac <HAL_TIM_OC_Start_DMA+0x40>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002e82:	002a      	movs	r2, r5
 8002e84:	3243      	adds	r2, #67	@ 0x43
 8002e86:	e008      	b.n	8002e9a <HAL_TIM_OC_Start_DMA+0x2e>
 8002e88:	2e0c      	cmp	r6, #12
 8002e8a:	d015      	beq.n	8002eb8 <HAL_TIM_OC_Start_DMA+0x4c>
 8002e8c:	2e10      	cmp	r6, #16
 8002e8e:	d1f8      	bne.n	8002e82 <HAL_TIM_OC_Start_DMA+0x16>
 8002e90:	0002      	movs	r2, r0
 8002e92:	3242      	adds	r2, #66	@ 0x42
 8002e94:	e001      	b.n	8002e9a <HAL_TIM_OC_Start_DMA+0x2e>
 8002e96:	0002      	movs	r2, r0
 8002e98:	323e      	adds	r2, #62	@ 0x3e
 8002e9a:	7814      	ldrb	r4, [r2, #0]
    return HAL_BUSY;
 8002e9c:	2002      	movs	r0, #2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002e9e:	3c02      	subs	r4, #2
 8002ea0:	4262      	negs	r2, r4
 8002ea2:	4154      	adcs	r4, r2
 8002ea4:	b2e4      	uxtb	r4, r4
 8002ea6:	2c00      	cmp	r4, #0
 8002ea8:	d009      	beq.n	8002ebe <HAL_TIM_OC_Start_DMA+0x52>
}
 8002eaa:	bd70      	pop	{r4, r5, r6, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002eac:	0002      	movs	r2, r0
 8002eae:	323f      	adds	r2, #63	@ 0x3f
 8002eb0:	e7f3      	b.n	8002e9a <HAL_TIM_OC_Start_DMA+0x2e>
 8002eb2:	0002      	movs	r2, r0
 8002eb4:	3240      	adds	r2, #64	@ 0x40
 8002eb6:	e7f0      	b.n	8002e9a <HAL_TIM_OC_Start_DMA+0x2e>
 8002eb8:	0002      	movs	r2, r0
 8002eba:	3241      	adds	r2, #65	@ 0x41
 8002ebc:	e7ed      	b.n	8002e9a <HAL_TIM_OC_Start_DMA+0x2e>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002ebe:	2e08      	cmp	r6, #8
 8002ec0:	d024      	beq.n	8002f0c <HAL_TIM_OC_Start_DMA+0xa0>
 8002ec2:	d806      	bhi.n	8002ed2 <HAL_TIM_OC_Start_DMA+0x66>
 8002ec4:	2e00      	cmp	r6, #0
 8002ec6:	d00b      	beq.n	8002ee0 <HAL_TIM_OC_Start_DMA+0x74>
 8002ec8:	2e04      	cmp	r6, #4
 8002eca:	d01c      	beq.n	8002f06 <HAL_TIM_OC_Start_DMA+0x9a>
 8002ecc:	002a      	movs	r2, r5
 8002ece:	3243      	adds	r2, #67	@ 0x43
 8002ed0:	e008      	b.n	8002ee4 <HAL_TIM_OC_Start_DMA+0x78>
 8002ed2:	2e0c      	cmp	r6, #12
 8002ed4:	d025      	beq.n	8002f22 <HAL_TIM_OC_Start_DMA+0xb6>
 8002ed6:	2e10      	cmp	r6, #16
 8002ed8:	d1f8      	bne.n	8002ecc <HAL_TIM_OC_Start_DMA+0x60>
 8002eda:	002a      	movs	r2, r5
 8002edc:	3242      	adds	r2, #66	@ 0x42
 8002ede:	e017      	b.n	8002f10 <HAL_TIM_OC_Start_DMA+0xa4>
 8002ee0:	002a      	movs	r2, r5
 8002ee2:	323e      	adds	r2, #62	@ 0x3e
 8002ee4:	7812      	ldrb	r2, [r2, #0]
 8002ee6:	2a01      	cmp	r2, #1
 8002ee8:	d119      	bne.n	8002f1e <HAL_TIM_OC_Start_DMA+0xb2>
    if ((pData == NULL) || (Length == 0U))
 8002eea:	2900      	cmp	r1, #0
 8002eec:	d017      	beq.n	8002f1e <HAL_TIM_OC_Start_DMA+0xb2>
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d015      	beq.n	8002f1e <HAL_TIM_OC_Start_DMA+0xb2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	2e08      	cmp	r6, #8
 8002ef6:	d066      	beq.n	8002fc6 <HAL_TIM_OC_Start_DMA+0x15a>
 8002ef8:	d816      	bhi.n	8002f28 <HAL_TIM_OC_Start_DMA+0xbc>
 8002efa:	2e00      	cmp	r6, #0
 8002efc:	d01b      	beq.n	8002f36 <HAL_TIM_OC_Start_DMA+0xca>
 8002efe:	2e04      	cmp	r6, #4
 8002f00:	d04c      	beq.n	8002f9c <HAL_TIM_OC_Start_DMA+0x130>
 8002f02:	3543      	adds	r5, #67	@ 0x43
 8002f04:	e015      	b.n	8002f32 <HAL_TIM_OC_Start_DMA+0xc6>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002f06:	002a      	movs	r2, r5
 8002f08:	323f      	adds	r2, #63	@ 0x3f
 8002f0a:	e7eb      	b.n	8002ee4 <HAL_TIM_OC_Start_DMA+0x78>
 8002f0c:	002a      	movs	r2, r5
 8002f0e:	3240      	adds	r2, #64	@ 0x40
 8002f10:	7812      	ldrb	r2, [r2, #0]
 8002f12:	3a01      	subs	r2, #1
 8002f14:	4250      	negs	r0, r2
 8002f16:	4142      	adcs	r2, r0
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	2a00      	cmp	r2, #0
 8002f1c:	d1e5      	bne.n	8002eea <HAL_TIM_OC_Start_DMA+0x7e>
      return HAL_ERROR;
 8002f1e:	2001      	movs	r0, #1
 8002f20:	e7c3      	b.n	8002eaa <HAL_TIM_OC_Start_DMA+0x3e>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002f22:	002a      	movs	r2, r5
 8002f24:	3241      	adds	r2, #65	@ 0x41
 8002f26:	e7f3      	b.n	8002f10 <HAL_TIM_OC_Start_DMA+0xa4>
 8002f28:	2e0c      	cmp	r6, #12
 8002f2a:	d061      	beq.n	8002ff0 <HAL_TIM_OC_Start_DMA+0x184>
 8002f2c:	2e10      	cmp	r6, #16
 8002f2e:	d1e8      	bne.n	8002f02 <HAL_TIM_OC_Start_DMA+0x96>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f30:	3542      	adds	r5, #66	@ 0x42
 8002f32:	702a      	strb	r2, [r5, #0]
  switch (Channel)
 8002f34:	e7f3      	b.n	8002f1e <HAL_TIM_OC_Start_DMA+0xb2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f36:	0028      	movs	r0, r5
 8002f38:	303e      	adds	r0, #62	@ 0x3e
 8002f3a:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f3c:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002f3e:	4a3d      	ldr	r2, [pc, #244]	@ (8003034 <HAL_TIM_OC_Start_DMA+0x1c8>)
 8002f40:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f42:	4a3d      	ldr	r2, [pc, #244]	@ (8003038 <HAL_TIM_OC_Start_DMA+0x1cc>)
 8002f44:	6302      	str	r2, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002f46:	4a3d      	ldr	r2, [pc, #244]	@ (800303c <HAL_TIM_OC_Start_DMA+0x1d0>)
 8002f48:	6342      	str	r2, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002f4a:	682a      	ldr	r2, [r5, #0]
 8002f4c:	3234      	adds	r2, #52	@ 0x34
 8002f4e:	f7fe fd75 	bl	8001a3c <HAL_DMA_Start_IT>
 8002f52:	2800      	cmp	r0, #0
 8002f54:	d1e3      	bne.n	8002f1e <HAL_TIM_OC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002f56:	2380      	movs	r3, #128	@ 0x80
 8002f58:	682a      	ldr	r2, [r5, #0]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	68d1      	ldr	r1, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f5e:	682c      	ldr	r4, [r5, #0]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002f60:	430b      	orrs	r3, r1
 8002f62:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f64:	0031      	movs	r1, r6
 8002f66:	2201      	movs	r2, #1
 8002f68:	0020      	movs	r0, r4
 8002f6a:	f7ff ff71 	bl	8002e50 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f6e:	4a34      	ldr	r2, [pc, #208]	@ (8003040 <HAL_TIM_OC_Start_DMA+0x1d4>)
 8002f70:	4294      	cmp	r4, r2
 8002f72:	d005      	beq.n	8002f80 <HAL_TIM_OC_Start_DMA+0x114>
 8002f74:	4b33      	ldr	r3, [pc, #204]	@ (8003044 <HAL_TIM_OC_Start_DMA+0x1d8>)
 8002f76:	429c      	cmp	r4, r3
 8002f78:	d002      	beq.n	8002f80 <HAL_TIM_OC_Start_DMA+0x114>
 8002f7a:	4b33      	ldr	r3, [pc, #204]	@ (8003048 <HAL_TIM_OC_Start_DMA+0x1dc>)
 8002f7c:	429c      	cmp	r4, r3
 8002f7e:	d14c      	bne.n	800301a <HAL_TIM_OC_Start_DMA+0x1ae>
      __HAL_TIM_MOE_ENABLE(htim);
 8002f80:	2380      	movs	r3, #128	@ 0x80
 8002f82:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8002f84:	021b      	lsls	r3, r3, #8
 8002f86:	430b      	orrs	r3, r1
 8002f88:	6463      	str	r3, [r4, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f8a:	4294      	cmp	r4, r2
 8002f8c:	d148      	bne.n	8003020 <HAL_TIM_OC_Start_DMA+0x1b4>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f8e:	68a3      	ldr	r3, [r4, #8]
 8002f90:	4a2e      	ldr	r2, [pc, #184]	@ (800304c <HAL_TIM_OC_Start_DMA+0x1e0>)
 8002f92:	4013      	ands	r3, r2
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f94:	2b06      	cmp	r3, #6
 8002f96:	d148      	bne.n	800302a <HAL_TIM_OC_Start_DMA+0x1be>
    return HAL_BUSY;
 8002f98:	2000      	movs	r0, #0
 8002f9a:	e786      	b.n	8002eaa <HAL_TIM_OC_Start_DMA+0x3e>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f9c:	0028      	movs	r0, r5
 8002f9e:	303f      	adds	r0, #63	@ 0x3f
 8002fa0:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002fa2:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8002fa4:	4a23      	ldr	r2, [pc, #140]	@ (8003034 <HAL_TIM_OC_Start_DMA+0x1c8>)
 8002fa6:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002fa8:	4a23      	ldr	r2, [pc, #140]	@ (8003038 <HAL_TIM_OC_Start_DMA+0x1cc>)
 8002faa:	6302      	str	r2, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002fac:	4a23      	ldr	r2, [pc, #140]	@ (800303c <HAL_TIM_OC_Start_DMA+0x1d0>)
 8002fae:	6342      	str	r2, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002fb0:	682a      	ldr	r2, [r5, #0]
 8002fb2:	3238      	adds	r2, #56	@ 0x38
 8002fb4:	f7fe fd42 	bl	8001a3c <HAL_DMA_Start_IT>
 8002fb8:	2800      	cmp	r0, #0
 8002fba:	d1b0      	bne.n	8002f1e <HAL_TIM_OC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002fbc:	2380      	movs	r3, #128	@ 0x80
 8002fbe:	682a      	ldr	r2, [r5, #0]
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	68d1      	ldr	r1, [r2, #12]
 8002fc4:	e7cb      	b.n	8002f5e <HAL_TIM_OC_Start_DMA+0xf2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fc6:	0028      	movs	r0, r5
 8002fc8:	3040      	adds	r0, #64	@ 0x40
 8002fca:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002fcc:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8002fce:	4a19      	ldr	r2, [pc, #100]	@ (8003034 <HAL_TIM_OC_Start_DMA+0x1c8>)
 8002fd0:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002fd2:	4a19      	ldr	r2, [pc, #100]	@ (8003038 <HAL_TIM_OC_Start_DMA+0x1cc>)
 8002fd4:	6302      	str	r2, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002fd6:	4a19      	ldr	r2, [pc, #100]	@ (800303c <HAL_TIM_OC_Start_DMA+0x1d0>)
 8002fd8:	6342      	str	r2, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002fda:	682a      	ldr	r2, [r5, #0]
 8002fdc:	323c      	adds	r2, #60	@ 0x3c
 8002fde:	f7fe fd2d 	bl	8001a3c <HAL_DMA_Start_IT>
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d19b      	bne.n	8002f1e <HAL_TIM_OC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002fe6:	2380      	movs	r3, #128	@ 0x80
 8002fe8:	682a      	ldr	r2, [r5, #0]
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	68d1      	ldr	r1, [r2, #12]
 8002fee:	e7b6      	b.n	8002f5e <HAL_TIM_OC_Start_DMA+0xf2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ff0:	0028      	movs	r0, r5
 8002ff2:	3041      	adds	r0, #65	@ 0x41
 8002ff4:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ff6:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8002ff8:	4a0e      	ldr	r2, [pc, #56]	@ (8003034 <HAL_TIM_OC_Start_DMA+0x1c8>)
 8002ffa:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ffc:	4a0e      	ldr	r2, [pc, #56]	@ (8003038 <HAL_TIM_OC_Start_DMA+0x1cc>)
 8002ffe:	6302      	str	r2, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003000:	4a0e      	ldr	r2, [pc, #56]	@ (800303c <HAL_TIM_OC_Start_DMA+0x1d0>)
 8003002:	6342      	str	r2, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003004:	682a      	ldr	r2, [r5, #0]
 8003006:	3240      	adds	r2, #64	@ 0x40
 8003008:	f7fe fd18 	bl	8001a3c <HAL_DMA_Start_IT>
 800300c:	2800      	cmp	r0, #0
 800300e:	d186      	bne.n	8002f1e <HAL_TIM_OC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003010:	2380      	movs	r3, #128	@ 0x80
 8003012:	682a      	ldr	r2, [r5, #0]
 8003014:	015b      	lsls	r3, r3, #5
 8003016:	68d1      	ldr	r1, [r2, #12]
 8003018:	e7a1      	b.n	8002f5e <HAL_TIM_OC_Start_DMA+0xf2>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800301a:	4b0d      	ldr	r3, [pc, #52]	@ (8003050 <HAL_TIM_OC_Start_DMA+0x1e4>)
 800301c:	429c      	cmp	r4, r3
 800301e:	d0b6      	beq.n	8002f8e <HAL_TIM_OC_Start_DMA+0x122>
      __HAL_TIM_ENABLE(htim);
 8003020:	2301      	movs	r3, #1
 8003022:	6822      	ldr	r2, [r4, #0]
 8003024:	4313      	orrs	r3, r2
 8003026:	6023      	str	r3, [r4, #0]
 8003028:	e7b6      	b.n	8002f98 <HAL_TIM_OC_Start_DMA+0x12c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800302a:	2280      	movs	r2, #128	@ 0x80
 800302c:	0252      	lsls	r2, r2, #9
 800302e:	4293      	cmp	r3, r2
 8003030:	d1f6      	bne.n	8003020 <HAL_TIM_OC_Start_DMA+0x1b4>
 8003032:	e7b1      	b.n	8002f98 <HAL_TIM_OC_Start_DMA+0x12c>
 8003034:	08002939 	.word	0x08002939
 8003038:	080029ab 	.word	0x080029ab
 800303c:	08002b3f 	.word	0x08002b3f
 8003040:	40012c00 	.word	0x40012c00
 8003044:	40014400 	.word	0x40014400
 8003048:	40014800 	.word	0x40014800
 800304c:	00010007 	.word	0x00010007
 8003050:	40000400 	.word	0x40000400

08003054 <HAL_TIM_PWM_Start_DMA>:
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
 8003054:	b510      	push	{r4, lr}
 8003056:	f7ff ff09 	bl	8002e6c <HAL_TIM_OC_Start_DMA>
 800305a:	bd10      	pop	{r4, pc}

0800305c <HAL_TIM_OC_Stop_DMA>:
{
 800305c:	b570      	push	{r4, r5, r6, lr}
 800305e:	0004      	movs	r4, r0
 8003060:	000e      	movs	r6, r1
  switch (Channel)
 8003062:	2908      	cmp	r1, #8
 8003064:	d04b      	beq.n	80030fe <HAL_TIM_OC_Stop_DMA+0xa2>
 8003066:	d805      	bhi.n	8003074 <HAL_TIM_OC_Stop_DMA+0x18>
 8003068:	2900      	cmp	r1, #0
 800306a:	d00c      	beq.n	8003086 <HAL_TIM_OC_Stop_DMA+0x2a>
 800306c:	2904      	cmp	r1, #4
 800306e:	d03f      	beq.n	80030f0 <HAL_TIM_OC_Stop_DMA+0x94>
 8003070:	2001      	movs	r0, #1
}
 8003072:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8003074:	290c      	cmp	r1, #12
 8003076:	d1fb      	bne.n	8003070 <HAL_TIM_OC_Stop_DMA+0x14>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003078:	6802      	ldr	r2, [r0, #0]
 800307a:	4929      	ldr	r1, [pc, #164]	@ (8003120 <HAL_TIM_OC_Stop_DMA+0xc4>)
 800307c:	68d3      	ldr	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800307e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003080:	400b      	ands	r3, r1
 8003082:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003084:	e005      	b.n	8003092 <HAL_TIM_OC_Stop_DMA+0x36>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003086:	6802      	ldr	r2, [r0, #0]
 8003088:	4926      	ldr	r1, [pc, #152]	@ (8003124 <HAL_TIM_OC_Stop_DMA+0xc8>)
 800308a:	68d3      	ldr	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800308c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800308e:	400b      	ands	r3, r1
 8003090:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003092:	f7fe fd55 	bl	8001b40 <HAL_DMA_Abort_IT>
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003096:	6825      	ldr	r5, [r4, #0]
 8003098:	2200      	movs	r2, #0
 800309a:	0031      	movs	r1, r6
 800309c:	0028      	movs	r0, r5
 800309e:	f7ff fed7 	bl	8002e50 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030a2:	4b21      	ldr	r3, [pc, #132]	@ (8003128 <HAL_TIM_OC_Stop_DMA+0xcc>)
 80030a4:	4a21      	ldr	r2, [pc, #132]	@ (800312c <HAL_TIM_OC_Stop_DMA+0xd0>)
 80030a6:	429d      	cmp	r5, r3
 80030a8:	d005      	beq.n	80030b6 <HAL_TIM_OC_Stop_DMA+0x5a>
 80030aa:	4b21      	ldr	r3, [pc, #132]	@ (8003130 <HAL_TIM_OC_Stop_DMA+0xd4>)
 80030ac:	429d      	cmp	r5, r3
 80030ae:	d002      	beq.n	80030b6 <HAL_TIM_OC_Stop_DMA+0x5a>
 80030b0:	4b20      	ldr	r3, [pc, #128]	@ (8003134 <HAL_TIM_OC_Stop_DMA+0xd8>)
 80030b2:	429d      	cmp	r5, r3
 80030b4:	d10a      	bne.n	80030cc <HAL_TIM_OC_Stop_DMA+0x70>
      __HAL_TIM_MOE_DISABLE(htim);
 80030b6:	6a2b      	ldr	r3, [r5, #32]
 80030b8:	4213      	tst	r3, r2
 80030ba:	d107      	bne.n	80030cc <HAL_TIM_OC_Stop_DMA+0x70>
 80030bc:	6a29      	ldr	r1, [r5, #32]
 80030be:	4b1e      	ldr	r3, [pc, #120]	@ (8003138 <HAL_TIM_OC_Stop_DMA+0xdc>)
 80030c0:	4219      	tst	r1, r3
 80030c2:	d103      	bne.n	80030cc <HAL_TIM_OC_Stop_DMA+0x70>
 80030c4:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80030c6:	491d      	ldr	r1, [pc, #116]	@ (800313c <HAL_TIM_OC_Stop_DMA+0xe0>)
 80030c8:	400b      	ands	r3, r1
 80030ca:	646b      	str	r3, [r5, #68]	@ 0x44
    __HAL_TIM_DISABLE(htim);
 80030cc:	6a2b      	ldr	r3, [r5, #32]
 80030ce:	4213      	tst	r3, r2
 80030d0:	d107      	bne.n	80030e2 <HAL_TIM_OC_Stop_DMA+0x86>
 80030d2:	6a2a      	ldr	r2, [r5, #32]
 80030d4:	4b18      	ldr	r3, [pc, #96]	@ (8003138 <HAL_TIM_OC_Stop_DMA+0xdc>)
 80030d6:	421a      	tst	r2, r3
 80030d8:	d103      	bne.n	80030e2 <HAL_TIM_OC_Stop_DMA+0x86>
 80030da:	2201      	movs	r2, #1
 80030dc:	682b      	ldr	r3, [r5, #0]
 80030de:	4393      	bics	r3, r2
 80030e0:	602b      	str	r3, [r5, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80030e2:	2301      	movs	r3, #1
 80030e4:	2e00      	cmp	r6, #0
 80030e6:	d111      	bne.n	800310c <HAL_TIM_OC_Stop_DMA+0xb0>
 80030e8:	343e      	adds	r4, #62	@ 0x3e
  switch (Channel)
 80030ea:	2000      	movs	r0, #0
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80030ec:	7023      	strb	r3, [r4, #0]
 80030ee:	e7c0      	b.n	8003072 <HAL_TIM_OC_Stop_DMA+0x16>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80030f0:	6802      	ldr	r2, [r0, #0]
 80030f2:	4913      	ldr	r1, [pc, #76]	@ (8003140 <HAL_TIM_OC_Stop_DMA+0xe4>)
 80030f4:	68d3      	ldr	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80030f6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80030f8:	400b      	ands	r3, r1
 80030fa:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80030fc:	e7c9      	b.n	8003092 <HAL_TIM_OC_Stop_DMA+0x36>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80030fe:	6802      	ldr	r2, [r0, #0]
 8003100:	4910      	ldr	r1, [pc, #64]	@ (8003144 <HAL_TIM_OC_Stop_DMA+0xe8>)
 8003102:	68d3      	ldr	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003104:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003106:	400b      	ands	r3, r1
 8003108:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800310a:	e7c2      	b.n	8003092 <HAL_TIM_OC_Stop_DMA+0x36>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800310c:	2e04      	cmp	r6, #4
 800310e:	d101      	bne.n	8003114 <HAL_TIM_OC_Stop_DMA+0xb8>
 8003110:	343f      	adds	r4, #63	@ 0x3f
 8003112:	e7ea      	b.n	80030ea <HAL_TIM_OC_Stop_DMA+0x8e>
 8003114:	2e08      	cmp	r6, #8
 8003116:	d101      	bne.n	800311c <HAL_TIM_OC_Stop_DMA+0xc0>
 8003118:	3440      	adds	r4, #64	@ 0x40
 800311a:	e7e6      	b.n	80030ea <HAL_TIM_OC_Stop_DMA+0x8e>
 800311c:	3441      	adds	r4, #65	@ 0x41
 800311e:	e7e4      	b.n	80030ea <HAL_TIM_OC_Stop_DMA+0x8e>
 8003120:	ffffefff 	.word	0xffffefff
 8003124:	fffffdff 	.word	0xfffffdff
 8003128:	40012c00 	.word	0x40012c00
 800312c:	00001111 	.word	0x00001111
 8003130:	40014400 	.word	0x40014400
 8003134:	40014800 	.word	0x40014800
 8003138:	00000444 	.word	0x00000444
 800313c:	ffff7fff 	.word	0xffff7fff
 8003140:	fffffbff 	.word	0xfffffbff
 8003144:	fffff7ff 	.word	0xfffff7ff

08003148 <HAL_TIM_PWM_Stop_DMA>:
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
 8003148:	b510      	push	{r4, lr}
 800314a:	f7ff ff87 	bl	800305c <HAL_TIM_OC_Stop_DMA>
 800314e:	bd10      	pop	{r4, pc}

08003150 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003150:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003152:	0004      	movs	r4, r0
 8003154:	343c      	adds	r4, #60	@ 0x3c
 8003156:	7823      	ldrb	r3, [r4, #0]
{
 8003158:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 800315a:	2002      	movs	r0, #2
 800315c:	2b01      	cmp	r3, #1
 800315e:	d039      	beq.n	80031d4 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003160:	481d      	ldr	r0, [pc, #116]	@ (80031d8 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8003162:	68cb      	ldr	r3, [r1, #12]
 8003164:	4003      	ands	r3, r0
 8003166:	6888      	ldr	r0, [r1, #8]
 8003168:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800316a:	481c      	ldr	r0, [pc, #112]	@ (80031dc <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 800316c:	4003      	ands	r3, r0
 800316e:	6848      	ldr	r0, [r1, #4]
 8003170:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003172:	481b      	ldr	r0, [pc, #108]	@ (80031e0 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8003174:	4003      	ands	r3, r0
 8003176:	6808      	ldr	r0, [r1, #0]
 8003178:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800317a:	481a      	ldr	r0, [pc, #104]	@ (80031e4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 800317c:	4003      	ands	r3, r0
 800317e:	6908      	ldr	r0, [r1, #16]
 8003180:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003182:	4819      	ldr	r0, [pc, #100]	@ (80031e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8003184:	4003      	ands	r3, r0
 8003186:	6948      	ldr	r0, [r1, #20]
 8003188:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800318a:	4818      	ldr	r0, [pc, #96]	@ (80031ec <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 800318c:	4003      	ands	r3, r0
 800318e:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 8003190:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003192:	4817      	ldr	r0, [pc, #92]	@ (80031f0 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8003194:	4003      	ands	r3, r0
 8003196:	6988      	ldr	r0, [r1, #24]
 8003198:	0400      	lsls	r0, r0, #16
 800319a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800319c:	4815      	ldr	r0, [pc, #84]	@ (80031f4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800319e:	4003      	ands	r3, r0
 80031a0:	69c8      	ldr	r0, [r1, #28]
 80031a2:	4303      	orrs	r3, r0

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80031a4:	6810      	ldr	r0, [r2, #0]
 80031a6:	4a14      	ldr	r2, [pc, #80]	@ (80031f8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80031a8:	4290      	cmp	r0, r2
 80031aa:	d110      	bne.n	80031ce <HAL_TIMEx_ConfigBreakDeadTime+0x7e>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80031ac:	4a13      	ldr	r2, [pc, #76]	@ (80031fc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80031b2:	0512      	lsls	r2, r2, #20
 80031b4:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80031b6:	4b12      	ldr	r3, [pc, #72]	@ (8003200 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80031b8:	401a      	ands	r2, r3
 80031ba:	6a0b      	ldr	r3, [r1, #32]
 80031bc:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80031be:	4b11      	ldr	r3, [pc, #68]	@ (8003204 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80031c0:	401a      	ands	r2, r3
 80031c2:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 80031c4:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80031c6:	4b10      	ldr	r3, [pc, #64]	@ (8003208 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80031c8:	401a      	ands	r2, r3
 80031ca:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80031cc:	4313      	orrs	r3, r2
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80031ce:	6443      	str	r3, [r0, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80031d0:	2000      	movs	r0, #0
 80031d2:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80031d4:	bd10      	pop	{r4, pc}
 80031d6:	46c0      	nop			@ (mov r8, r8)
 80031d8:	fffffcff 	.word	0xfffffcff
 80031dc:	fffffbff 	.word	0xfffffbff
 80031e0:	fffff7ff 	.word	0xfffff7ff
 80031e4:	ffffefff 	.word	0xffffefff
 80031e8:	ffffdfff 	.word	0xffffdfff
 80031ec:	ffffbfff 	.word	0xffffbfff
 80031f0:	fff0ffff 	.word	0xfff0ffff
 80031f4:	efffffff 	.word	0xefffffff
 80031f8:	40012c00 	.word	0x40012c00
 80031fc:	ff0fffff 	.word	0xff0fffff
 8003200:	feffffff 	.word	0xfeffffff
 8003204:	fdffffff 	.word	0xfdffffff
 8003208:	dfffffff 	.word	0xdfffffff

0800320c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800320c:	4770      	bx	lr

0800320e <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800320e:	4770      	bx	lr

08003210 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8003210:	4770      	bx	lr
	...

08003214 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003214:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003216:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800321a:	2201      	movs	r2, #1
 800321c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003220:	6801      	ldr	r1, [r0, #0]
 8003222:	4d13      	ldr	r5, [pc, #76]	@ (8003270 <UART_EndRxTransfer+0x5c>)
 8003224:	680b      	ldr	r3, [r1, #0]
 8003226:	402b      	ands	r3, r5
 8003228:	600b      	str	r3, [r1, #0]
 800322a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800322e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003232:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003236:	6802      	ldr	r2, [r0, #0]
 8003238:	4c0e      	ldr	r4, [pc, #56]	@ (8003274 <UART_EndRxTransfer+0x60>)
 800323a:	6893      	ldr	r3, [r2, #8]
 800323c:	4023      	ands	r3, r4
 800323e:	6093      	str	r3, [r2, #8]
 8003240:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003244:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8003246:	2b01      	cmp	r3, #1
 8003248:	d10a      	bne.n	8003260 <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800324a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800324e:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003252:	2410      	movs	r4, #16
 8003254:	6802      	ldr	r2, [r0, #0]
 8003256:	6813      	ldr	r3, [r2, #0]
 8003258:	43a3      	bics	r3, r4
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003260:	0003      	movs	r3, r0
 8003262:	2220      	movs	r2, #32
 8003264:	338c      	adds	r3, #140	@ 0x8c
 8003266:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003268:	2300      	movs	r3, #0
 800326a:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800326c:	6743      	str	r3, [r0, #116]	@ 0x74
}
 800326e:	bd30      	pop	{r4, r5, pc}
 8003270:	fffffedf 	.word	0xfffffedf
 8003274:	effffffe 	.word	0xeffffffe

08003278 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8003278:	4770      	bx	lr

0800327a <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800327a:	4770      	bx	lr

0800327c <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800327c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	0002      	movs	r2, r0
{
 8003282:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8003284:	325e      	adds	r2, #94	@ 0x5e
 8003286:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8003288:	3a08      	subs	r2, #8
 800328a:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800328c:	f7ff fff5 	bl	800327a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003290:	bd10      	pop	{r4, pc}

08003292 <HAL_UARTEx_RxEventCallback>:
}
 8003292:	4770      	bx	lr

08003294 <HAL_UART_IRQHandler>:
{
 8003294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003296:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003298:	4dc1      	ldr	r5, [pc, #772]	@ (80035a0 <HAL_UART_IRQHandler+0x30c>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800329a:	69cb      	ldr	r3, [r1, #28]
{
 800329c:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800329e:	680a      	ldr	r2, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032a0:	6888      	ldr	r0, [r1, #8]
  if (errorflags == 0U)
 80032a2:	422b      	tst	r3, r5
 80032a4:	d110      	bne.n	80032c8 <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80032a6:	2520      	movs	r5, #32
 80032a8:	422b      	tst	r3, r5
 80032aa:	d100      	bne.n	80032ae <HAL_UART_IRQHandler+0x1a>
 80032ac:	e09b      	b.n	80033e6 <HAL_UART_IRQHandler+0x152>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80032ae:	2680      	movs	r6, #128	@ 0x80
 80032b0:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80032b2:	4015      	ands	r5, r2
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80032b4:	4006      	ands	r6, r0
 80032b6:	4335      	orrs	r5, r6
 80032b8:	d100      	bne.n	80032bc <HAL_UART_IRQHandler+0x28>
 80032ba:	e094      	b.n	80033e6 <HAL_UART_IRQHandler+0x152>
      if (huart->RxISR != NULL)
 80032bc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
      huart->TxISR(huart);
 80032be:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d000      	beq.n	80032c6 <HAL_UART_IRQHandler+0x32>
 80032c4:	e085      	b.n	80033d2 <HAL_UART_IRQHandler+0x13e>
 80032c6:	e085      	b.n	80033d4 <HAL_UART_IRQHandler+0x140>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80032c8:	4db6      	ldr	r5, [pc, #728]	@ (80035a4 <HAL_UART_IRQHandler+0x310>)
 80032ca:	4005      	ands	r5, r0
 80032cc:	9500      	str	r5, [sp, #0]
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80032ce:	4db6      	ldr	r5, [pc, #728]	@ (80035a8 <HAL_UART_IRQHandler+0x314>)
 80032d0:	9e00      	ldr	r6, [sp, #0]
 80032d2:	4015      	ands	r5, r2
 80032d4:	4335      	orrs	r5, r6
 80032d6:	d100      	bne.n	80032da <HAL_UART_IRQHandler+0x46>
 80032d8:	e085      	b.n	80033e6 <HAL_UART_IRQHandler+0x152>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032da:	0025      	movs	r5, r4
 80032dc:	2601      	movs	r6, #1
 80032de:	3590      	adds	r5, #144	@ 0x90
 80032e0:	4233      	tst	r3, r6
 80032e2:	d005      	beq.n	80032f0 <HAL_UART_IRQHandler+0x5c>
 80032e4:	05d7      	lsls	r7, r2, #23
 80032e6:	d503      	bpl.n	80032f0 <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032e8:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032ea:	682f      	ldr	r7, [r5, #0]
 80032ec:	433e      	orrs	r6, r7
 80032ee:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032f0:	2602      	movs	r6, #2
 80032f2:	4233      	tst	r3, r6
 80032f4:	d00c      	beq.n	8003310 <HAL_UART_IRQHandler+0x7c>
 80032f6:	07c7      	lsls	r7, r0, #31
 80032f8:	d50a      	bpl.n	8003310 <HAL_UART_IRQHandler+0x7c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032fa:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032fc:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032fe:	3790      	adds	r7, #144	@ 0x90
 8003300:	683e      	ldr	r6, [r7, #0]
 8003302:	9701      	str	r7, [sp, #4]
 8003304:	46b4      	mov	ip, r6
 8003306:	2604      	movs	r6, #4
 8003308:	4667      	mov	r7, ip
 800330a:	433e      	orrs	r6, r7
 800330c:	9f01      	ldr	r7, [sp, #4]
 800330e:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003310:	2604      	movs	r6, #4
 8003312:	4233      	tst	r3, r6
 8003314:	d00c      	beq.n	8003330 <HAL_UART_IRQHandler+0x9c>
 8003316:	07c7      	lsls	r7, r0, #31
 8003318:	d50a      	bpl.n	8003330 <HAL_UART_IRQHandler+0x9c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800331a:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800331c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800331e:	3790      	adds	r7, #144	@ 0x90
 8003320:	683e      	ldr	r6, [r7, #0]
 8003322:	9701      	str	r7, [sp, #4]
 8003324:	46b4      	mov	ip, r6
 8003326:	2602      	movs	r6, #2
 8003328:	4667      	mov	r7, ip
 800332a:	433e      	orrs	r6, r7
 800332c:	9f01      	ldr	r7, [sp, #4]
 800332e:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003330:	2608      	movs	r6, #8
 8003332:	46b4      	mov	ip, r6
 8003334:	4233      	tst	r3, r6
 8003336:	d009      	beq.n	800334c <HAL_UART_IRQHandler+0xb8>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003338:	2720      	movs	r7, #32
 800333a:	9e00      	ldr	r6, [sp, #0]
 800333c:	4017      	ands	r7, r2
 800333e:	4337      	orrs	r7, r6
 8003340:	d004      	beq.n	800334c <HAL_UART_IRQHandler+0xb8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003342:	4666      	mov	r6, ip
 8003344:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003346:	682f      	ldr	r7, [r5, #0]
 8003348:	433e      	orrs	r6, r7
 800334a:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800334c:	2680      	movs	r6, #128	@ 0x80
 800334e:	0136      	lsls	r6, r6, #4
 8003350:	4233      	tst	r3, r6
 8003352:	d006      	beq.n	8003362 <HAL_UART_IRQHandler+0xce>
 8003354:	0157      	lsls	r7, r2, #5
 8003356:	d504      	bpl.n	8003362 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003358:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800335a:	2120      	movs	r1, #32
 800335c:	682e      	ldr	r6, [r5, #0]
 800335e:	4331      	orrs	r1, r6
 8003360:	6029      	str	r1, [r5, #0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003362:	6829      	ldr	r1, [r5, #0]
 8003364:	2900      	cmp	r1, #0
 8003366:	d035      	beq.n	80033d4 <HAL_UART_IRQHandler+0x140>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003368:	2120      	movs	r1, #32
 800336a:	420b      	tst	r3, r1
 800336c:	d00a      	beq.n	8003384 <HAL_UART_IRQHandler+0xf0>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800336e:	2380      	movs	r3, #128	@ 0x80
 8003370:	055b      	lsls	r3, r3, #21
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003372:	4011      	ands	r1, r2
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003374:	4003      	ands	r3, r0
 8003376:	4319      	orrs	r1, r3
 8003378:	d004      	beq.n	8003384 <HAL_UART_IRQHandler+0xf0>
        if (huart->RxISR != NULL)
 800337a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_UART_IRQHandler+0xf0>
          huart->RxISR(huart);
 8003380:	0020      	movs	r0, r4
 8003382:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003384:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8003386:	682b      	ldr	r3, [r5, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003388:	2740      	movs	r7, #64	@ 0x40
 800338a:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800338c:	2228      	movs	r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800338e:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003390:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8003392:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003394:	431e      	orrs	r6, r3
 8003396:	d022      	beq.n	80033de <HAL_UART_IRQHandler+0x14a>
        UART_EndRxTransfer(huart);
 8003398:	f7ff ff3c 	bl	8003214 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	423b      	tst	r3, r7
 80033a2:	d018      	beq.n	80033d6 <HAL_UART_IRQHandler+0x142>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033a4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a8:	2301      	movs	r3, #1
 80033aa:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ae:	0025      	movs	r5, r4
 80033b0:	cd04      	ldmia	r5!, {r2}
 80033b2:	6893      	ldr	r3, [r2, #8]
 80033b4:	43bb      	bics	r3, r7
 80033b6:	6093      	str	r3, [r2, #8]
 80033b8:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 80033bc:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 80033be:	2800      	cmp	r0, #0
 80033c0:	d009      	beq.n	80033d6 <HAL_UART_IRQHandler+0x142>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033c2:	4b7a      	ldr	r3, [pc, #488]	@ (80035ac <HAL_UART_IRQHandler+0x318>)
 80033c4:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033c6:	f7fe fbbb 	bl	8001b40 <HAL_DMA_Abort_IT>
 80033ca:	2800      	cmp	r0, #0
 80033cc:	d002      	beq.n	80033d4 <HAL_UART_IRQHandler+0x140>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033ce:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 80033d0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80033d2:	4798      	blx	r3
}
 80033d4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 80033d6:	0020      	movs	r0, r4
 80033d8:	f7ff ff4f 	bl	800327a <HAL_UART_ErrorCallback>
 80033dc:	e7fa      	b.n	80033d4 <HAL_UART_IRQHandler+0x140>
        HAL_UART_ErrorCallback(huart);
 80033de:	f7ff ff4c 	bl	800327a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e2:	602e      	str	r6, [r5, #0]
 80033e4:	e7f6      	b.n	80033d4 <HAL_UART_IRQHandler+0x140>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e6:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 80033e8:	2d01      	cmp	r5, #1
 80033ea:	d000      	beq.n	80033ee <HAL_UART_IRQHandler+0x15a>
 80033ec:	e09f      	b.n	800352e <HAL_UART_IRQHandler+0x29a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033ee:	2610      	movs	r6, #16
 80033f0:	4233      	tst	r3, r6
 80033f2:	d100      	bne.n	80033f6 <HAL_UART_IRQHandler+0x162>
 80033f4:	e09b      	b.n	800352e <HAL_UART_IRQHandler+0x29a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80033f6:	4232      	tst	r2, r6
 80033f8:	d100      	bne.n	80033fc <HAL_UART_IRQHandler+0x168>
 80033fa:	e098      	b.n	800352e <HAL_UART_IRQHandler+0x29a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033fc:	620e      	str	r6, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033fe:	6889      	ldr	r1, [r1, #8]
 8003400:	2340      	movs	r3, #64	@ 0x40
 8003402:	000a      	movs	r2, r1
 8003404:	401a      	ands	r2, r3
 8003406:	4219      	tst	r1, r3
 8003408:	d057      	beq.n	80034ba <HAL_UART_IRQHandler+0x226>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800340a:	1d21      	adds	r1, r4, #4
 800340c:	6fca      	ldr	r2, [r1, #124]	@ 0x7c
 800340e:	6810      	ldr	r0, [r2, #0]
 8003410:	6842      	ldr	r2, [r0, #4]
 8003412:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8003414:	2a00      	cmp	r2, #0
 8003416:	d0dd      	beq.n	80033d4 <HAL_UART_IRQHandler+0x140>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003418:	0027      	movs	r7, r4
 800341a:	375c      	adds	r7, #92	@ 0x5c
 800341c:	883f      	ldrh	r7, [r7, #0]
 800341e:	4297      	cmp	r7, r2
 8003420:	d9d8      	bls.n	80033d4 <HAL_UART_IRQHandler+0x140>
        huart->RxXferCount = nb_remaining_rx_data;
 8003422:	0027      	movs	r7, r4
 8003424:	375e      	adds	r7, #94	@ 0x5e
 8003426:	803a      	strh	r2, [r7, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003428:	6802      	ldr	r2, [r0, #0]
 800342a:	2020      	movs	r0, #32
 800342c:	4684      	mov	ip, r0
 800342e:	4010      	ands	r0, r2
 8003430:	9000      	str	r0, [sp, #0]
 8003432:	4660      	mov	r0, ip
 8003434:	4202      	tst	r2, r0
 8003436:	d132      	bne.n	800349e <HAL_UART_IRQHandler+0x20a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003438:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800343c:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003440:	6820      	ldr	r0, [r4, #0]
 8003442:	4e5b      	ldr	r6, [pc, #364]	@ (80035b0 <HAL_UART_IRQHandler+0x31c>)
 8003444:	6802      	ldr	r2, [r0, #0]
 8003446:	4032      	ands	r2, r6
 8003448:	6002      	str	r2, [r0, #0]
 800344a:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800344e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003452:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003456:	6820      	ldr	r0, [r4, #0]
 8003458:	6882      	ldr	r2, [r0, #8]
 800345a:	43aa      	bics	r2, r5
 800345c:	6082      	str	r2, [r0, #8]
 800345e:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003462:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003466:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800346a:	6820      	ldr	r0, [r4, #0]
 800346c:	6882      	ldr	r2, [r0, #8]
 800346e:	439a      	bics	r2, r3
 8003470:	6082      	str	r2, [r0, #8]
 8003472:	f387 8810 	msr	PRIMASK, r7
          huart->RxState = HAL_UART_STATE_READY;
 8003476:	0023      	movs	r3, r4
 8003478:	4662      	mov	r2, ip
 800347a:	338c      	adds	r3, #140	@ 0x8c
 800347c:	601a      	str	r2, [r3, #0]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800347e:	9b00      	ldr	r3, [sp, #0]
 8003480:	66e3      	str	r3, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003482:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003486:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800348a:	6822      	ldr	r2, [r4, #0]
 800348c:	350f      	adds	r5, #15
 800348e:	6813      	ldr	r3, [r2, #0]
 8003490:	43ab      	bics	r3, r5
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	f380 8810 	msr	PRIMASK, r0
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003498:	6fc8      	ldr	r0, [r1, #124]	@ 0x7c
 800349a:	f7fe fb17 	bl	8001acc <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800349e:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034a0:	0022      	movs	r2, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034a2:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034a4:	0023      	movs	r3, r4
 80034a6:	325c      	adds	r2, #92	@ 0x5c
 80034a8:	335e      	adds	r3, #94	@ 0x5e
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	8811      	ldrh	r1, [r2, #0]
 80034ae:	1ac9      	subs	r1, r1, r3
 80034b0:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034b2:	0020      	movs	r0, r4
 80034b4:	f7ff feed 	bl	8003292 <HAL_UARTEx_RxEventCallback>
 80034b8:	e78c      	b.n	80033d4 <HAL_UART_IRQHandler+0x140>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034ba:	0023      	movs	r3, r4
 80034bc:	0020      	movs	r0, r4
 80034be:	335c      	adds	r3, #92	@ 0x5c
 80034c0:	305e      	adds	r0, #94	@ 0x5e
 80034c2:	8819      	ldrh	r1, [r3, #0]
 80034c4:	8803      	ldrh	r3, [r0, #0]
      if ((huart->RxXferCount > 0U)
 80034c6:	8800      	ldrh	r0, [r0, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034c8:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 80034ca:	2800      	cmp	r0, #0
 80034cc:	d100      	bne.n	80034d0 <HAL_UART_IRQHandler+0x23c>
 80034ce:	e781      	b.n	80033d4 <HAL_UART_IRQHandler+0x140>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034d0:	1ac9      	subs	r1, r1, r3
 80034d2:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80034d4:	2900      	cmp	r1, #0
 80034d6:	d100      	bne.n	80034da <HAL_UART_IRQHandler+0x246>
 80034d8:	e77c      	b.n	80033d4 <HAL_UART_IRQHandler+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034da:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034de:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034e2:	6820      	ldr	r0, [r4, #0]
 80034e4:	4e33      	ldr	r6, [pc, #204]	@ (80035b4 <HAL_UART_IRQHandler+0x320>)
 80034e6:	6803      	ldr	r3, [r0, #0]
 80034e8:	4033      	ands	r3, r6
 80034ea:	6003      	str	r3, [r0, #0]
 80034ec:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f0:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f4:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80034f8:	6820      	ldr	r0, [r4, #0]
 80034fa:	4e2f      	ldr	r6, [pc, #188]	@ (80035b8 <HAL_UART_IRQHandler+0x324>)
 80034fc:	6883      	ldr	r3, [r0, #8]
 80034fe:	4033      	ands	r3, r6
 8003500:	6083      	str	r3, [r0, #8]
 8003502:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 8003506:	0023      	movs	r3, r4
 8003508:	2020      	movs	r0, #32
 800350a:	338c      	adds	r3, #140	@ 0x8c
 800350c:	6018      	str	r0, [r3, #0]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800350e:	66e2      	str	r2, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8003510:	6762      	str	r2, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003512:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003516:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800351a:	2510      	movs	r5, #16
 800351c:	6822      	ldr	r2, [r4, #0]
 800351e:	6813      	ldr	r3, [r2, #0]
 8003520:	43ab      	bics	r3, r5
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003528:	2302      	movs	r3, #2
 800352a:	6723      	str	r3, [r4, #112]	@ 0x70
 800352c:	e7c1      	b.n	80034b2 <HAL_UART_IRQHandler+0x21e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800352e:	2580      	movs	r5, #128	@ 0x80
 8003530:	036d      	lsls	r5, r5, #13
 8003532:	422b      	tst	r3, r5
 8003534:	d006      	beq.n	8003544 <HAL_UART_IRQHandler+0x2b0>
 8003536:	0246      	lsls	r6, r0, #9
 8003538:	d504      	bpl.n	8003544 <HAL_UART_IRQHandler+0x2b0>
    HAL_UARTEx_WakeupCallback(huart);
 800353a:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800353c:	620d      	str	r5, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800353e:	f000 fe1b 	bl	8004178 <HAL_UARTEx_WakeupCallback>
    return;
 8003542:	e747      	b.n	80033d4 <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003544:	2180      	movs	r1, #128	@ 0x80
 8003546:	420b      	tst	r3, r1
 8003548:	d007      	beq.n	800355a <HAL_UART_IRQHandler+0x2c6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800354a:	2580      	movs	r5, #128	@ 0x80
 800354c:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800354e:	4011      	ands	r1, r2
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003550:	4028      	ands	r0, r5
 8003552:	4301      	orrs	r1, r0
 8003554:	d001      	beq.n	800355a <HAL_UART_IRQHandler+0x2c6>
    if (huart->TxISR != NULL)
 8003556:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8003558:	e6b1      	b.n	80032be <HAL_UART_IRQHandler+0x2a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800355a:	2140      	movs	r1, #64	@ 0x40
 800355c:	420b      	tst	r3, r1
 800355e:	d016      	beq.n	800358e <HAL_UART_IRQHandler+0x2fa>
 8003560:	420a      	tst	r2, r1
 8003562:	d014      	beq.n	800358e <HAL_UART_IRQHandler+0x2fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003564:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003568:	2301      	movs	r3, #1
 800356a:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800356e:	6822      	ldr	r2, [r4, #0]
 8003570:	6813      	ldr	r3, [r2, #0]
 8003572:	438b      	bics	r3, r1
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800357a:	0023      	movs	r3, r4
 800357c:	2220      	movs	r2, #32
 800357e:	3388      	adds	r3, #136	@ 0x88
 8003580:	601a      	str	r2, [r3, #0]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003582:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003584:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8003586:	67a3      	str	r3, [r4, #120]	@ 0x78
  HAL_UART_TxCpltCallback(huart);
 8003588:	f7ff fe76 	bl	8003278 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800358c:	e722      	b.n	80033d4 <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800358e:	0219      	lsls	r1, r3, #8
 8003590:	d514      	bpl.n	80035bc <HAL_UART_IRQHandler+0x328>
 8003592:	0051      	lsls	r1, r2, #1
 8003594:	d512      	bpl.n	80035bc <HAL_UART_IRQHandler+0x328>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003596:	0020      	movs	r0, r4
 8003598:	f000 fdf0 	bl	800417c <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800359c:	e71a      	b.n	80033d4 <HAL_UART_IRQHandler+0x140>
 800359e:	46c0      	nop			@ (mov r8, r8)
 80035a0:	0000080f 	.word	0x0000080f
 80035a4:	10000001 	.word	0x10000001
 80035a8:	04000120 	.word	0x04000120
 80035ac:	0800327d 	.word	0x0800327d
 80035b0:	fffffeff 	.word	0xfffffeff
 80035b4:	fffffedf 	.word	0xfffffedf
 80035b8:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80035bc:	01db      	lsls	r3, r3, #7
 80035be:	d400      	bmi.n	80035c2 <HAL_UART_IRQHandler+0x32e>
 80035c0:	e708      	b.n	80033d4 <HAL_UART_IRQHandler+0x140>
 80035c2:	2a00      	cmp	r2, #0
 80035c4:	db00      	blt.n	80035c8 <HAL_UART_IRQHandler+0x334>
 80035c6:	e705      	b.n	80033d4 <HAL_UART_IRQHandler+0x140>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80035c8:	0020      	movs	r0, r4
 80035ca:	f000 fdd6 	bl	800417a <HAL_UARTEx_RxFifoFullCallback>
    return;
 80035ce:	e701      	b.n	80033d4 <HAL_UART_IRQHandler+0x140>

080035d0 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035d0:	0001      	movs	r1, r0
{
 80035d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t uhMask = huart->Mask;
 80035d4:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035d6:	318c      	adds	r1, #140	@ 0x8c
 80035d8:	680c      	ldr	r4, [r1, #0]
  uint16_t uhMask = huart->Mask;
 80035da:	3360      	adds	r3, #96	@ 0x60
 80035dc:	881a      	ldrh	r2, [r3, #0]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80035de:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035e0:	2c22      	cmp	r4, #34	@ 0x22
 80035e2:	d157      	bne.n	8003694 <UART_RxISR_8BIT+0xc4>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80035e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80035e6:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 80035e8:	4013      	ands	r3, r2
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 80035ea:	0002      	movs	r2, r0
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80035ec:	7023      	strb	r3, [r4, #0]
    huart->pRxBuffPtr++;
 80035ee:	6d83      	ldr	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80035f0:	325e      	adds	r2, #94	@ 0x5e
    huart->pRxBuffPtr++;
 80035f2:	3301      	adds	r3, #1
 80035f4:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80035f6:	8813      	ldrh	r3, [r2, #0]
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 80035fe:	8813      	ldrh	r3, [r2, #0]
 8003600:	b29c      	uxth	r4, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d142      	bne.n	800368c <UART_RxISR_8BIT+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003606:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360a:	3301      	adds	r3, #1
 800360c:	f383 8810 	msr	PRIMASK, r3
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003610:	6805      	ldr	r5, [r0, #0]
 8003612:	4f23      	ldr	r7, [pc, #140]	@ (80036a0 <UART_RxISR_8BIT+0xd0>)
 8003614:	682a      	ldr	r2, [r5, #0]
 8003616:	403a      	ands	r2, r7
 8003618:	602a      	str	r2, [r5, #0]
 800361a:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800361e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003622:	f383 8810 	msr	PRIMASK, r3

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003626:	6805      	ldr	r5, [r0, #0]
 8003628:	68aa      	ldr	r2, [r5, #8]
 800362a:	439a      	bics	r2, r3
 800362c:	60aa      	str	r2, [r5, #8]
 800362e:	f386 8810 	msr	PRIMASK, r6

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003632:	2220      	movs	r2, #32
 8003634:	600a      	str	r2, [r1, #0]
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003636:	6802      	ldr	r2, [r0, #0]
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003638:	6704      	str	r4, [r0, #112]	@ 0x70
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800363a:	6852      	ldr	r2, [r2, #4]
      huart->RxISR = NULL;
 800363c:	6744      	str	r4, [r0, #116]	@ 0x74
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800363e:	0212      	lsls	r2, r2, #8
 8003640:	d50a      	bpl.n	8003658 <UART_RxISR_8BIT+0x88>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003642:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003646:	f383 8810 	msr	PRIMASK, r3
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800364a:	6802      	ldr	r2, [r0, #0]
 800364c:	4c15      	ldr	r4, [pc, #84]	@ (80036a4 <UART_RxISR_8BIT+0xd4>)
 800364e:	6813      	ldr	r3, [r2, #0]
 8003650:	4023      	ands	r3, r4
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	f381 8810 	msr	PRIMASK, r1
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003658:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800365a:	2b01      	cmp	r3, #1
 800365c:	d117      	bne.n	800368e <UART_RxISR_8BIT+0xbe>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800365e:	2200      	movs	r2, #0
 8003660:	66c2      	str	r2, [r0, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003662:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003666:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800366a:	6801      	ldr	r1, [r0, #0]
 800366c:	330f      	adds	r3, #15
 800366e:	680a      	ldr	r2, [r1, #0]
 8003670:	439a      	bics	r2, r3
 8003672:	600a      	str	r2, [r1, #0]
 8003674:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003678:	6802      	ldr	r2, [r0, #0]
 800367a:	69d1      	ldr	r1, [r2, #28]
 800367c:	4219      	tst	r1, r3
 800367e:	d000      	beq.n	8003682 <UART_RxISR_8BIT+0xb2>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003680:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003682:	0003      	movs	r3, r0
 8003684:	335c      	adds	r3, #92	@ 0x5c
 8003686:	8819      	ldrh	r1, [r3, #0]
 8003688:	f7ff fe03 	bl	8003292 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800368c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_UART_RxCpltCallback(huart);
 800368e:	f7fd fc09 	bl	8000ea4 <HAL_UART_RxCpltCallback>
 8003692:	e7fb      	b.n	800368c <UART_RxISR_8BIT+0xbc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003694:	2208      	movs	r2, #8
 8003696:	6999      	ldr	r1, [r3, #24]
 8003698:	430a      	orrs	r2, r1
 800369a:	619a      	str	r2, [r3, #24]
}
 800369c:	e7f6      	b.n	800368c <UART_RxISR_8BIT+0xbc>
 800369e:	46c0      	nop			@ (mov r8, r8)
 80036a0:	fffffedf 	.word	0xfffffedf
 80036a4:	fbffffff 	.word	0xfbffffff

080036a8 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036a8:	0002      	movs	r2, r0
{
 80036aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t uhMask = huart->Mask;
 80036ac:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036ae:	328c      	adds	r2, #140	@ 0x8c
 80036b0:	6811      	ldr	r1, [r2, #0]
  uint16_t uhMask = huart->Mask;
 80036b2:	3360      	adds	r3, #96	@ 0x60
 80036b4:	881c      	ldrh	r4, [r3, #0]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80036b6:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036b8:	2922      	cmp	r1, #34	@ 0x22
 80036ba:	d156      	bne.n	800376a <UART_RxISR_16BIT+0xc2>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80036bc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80036be:	6d83      	ldr	r3, [r0, #88]	@ 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 80036c0:	4021      	ands	r1, r4
 80036c2:	8019      	strh	r1, [r3, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 80036c4:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 80036c6:	3302      	adds	r3, #2
 80036c8:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80036ca:	315e      	adds	r1, #94	@ 0x5e
 80036cc:	880b      	ldrh	r3, [r1, #0]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	800b      	strh	r3, [r1, #0]

    if (huart->RxXferCount == 0U)
 80036d4:	880b      	ldrh	r3, [r1, #0]
 80036d6:	b29c      	uxth	r4, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d142      	bne.n	8003762 <UART_RxISR_16BIT+0xba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036dc:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e0:	3301      	adds	r3, #1
 80036e2:	f383 8810 	msr	PRIMASK, r3
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036e6:	6805      	ldr	r5, [r0, #0]
 80036e8:	4f22      	ldr	r7, [pc, #136]	@ (8003774 <UART_RxISR_16BIT+0xcc>)
 80036ea:	6829      	ldr	r1, [r5, #0]
 80036ec:	4039      	ands	r1, r7
 80036ee:	6029      	str	r1, [r5, #0]
 80036f0:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036f4:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f8:	f383 8810 	msr	PRIMASK, r3

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036fc:	6805      	ldr	r5, [r0, #0]
 80036fe:	68a9      	ldr	r1, [r5, #8]
 8003700:	4399      	bics	r1, r3
 8003702:	60a9      	str	r1, [r5, #8]
 8003704:	f386 8810 	msr	PRIMASK, r6

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003708:	2120      	movs	r1, #32
 800370a:	6011      	str	r1, [r2, #0]
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800370c:	6802      	ldr	r2, [r0, #0]
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800370e:	6704      	str	r4, [r0, #112]	@ 0x70
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003710:	6852      	ldr	r2, [r2, #4]
      huart->RxISR = NULL;
 8003712:	6744      	str	r4, [r0, #116]	@ 0x74
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003714:	0212      	lsls	r2, r2, #8
 8003716:	d50a      	bpl.n	800372e <UART_RxISR_16BIT+0x86>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003718:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800371c:	f383 8810 	msr	PRIMASK, r3
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003720:	6802      	ldr	r2, [r0, #0]
 8003722:	4c15      	ldr	r4, [pc, #84]	@ (8003778 <UART_RxISR_16BIT+0xd0>)
 8003724:	6813      	ldr	r3, [r2, #0]
 8003726:	4023      	ands	r3, r4
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	f381 8810 	msr	PRIMASK, r1
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800372e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8003730:	2b01      	cmp	r3, #1
 8003732:	d117      	bne.n	8003764 <UART_RxISR_16BIT+0xbc>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003734:	2200      	movs	r2, #0
 8003736:	66c2      	str	r2, [r0, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003738:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800373c:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003740:	6801      	ldr	r1, [r0, #0]
 8003742:	330f      	adds	r3, #15
 8003744:	680a      	ldr	r2, [r1, #0]
 8003746:	439a      	bics	r2, r3
 8003748:	600a      	str	r2, [r1, #0]
 800374a:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800374e:	6802      	ldr	r2, [r0, #0]
 8003750:	69d1      	ldr	r1, [r2, #28]
 8003752:	4219      	tst	r1, r3
 8003754:	d000      	beq.n	8003758 <UART_RxISR_16BIT+0xb0>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003756:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003758:	0003      	movs	r3, r0
 800375a:	335c      	adds	r3, #92	@ 0x5c
 800375c:	8819      	ldrh	r1, [r3, #0]
 800375e:	f7ff fd98 	bl	8003292 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_UART_RxCpltCallback(huart);
 8003764:	f7fd fb9e 	bl	8000ea4 <HAL_UART_RxCpltCallback>
 8003768:	e7fb      	b.n	8003762 <UART_RxISR_16BIT+0xba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800376a:	2208      	movs	r2, #8
 800376c:	6999      	ldr	r1, [r3, #24]
 800376e:	430a      	orrs	r2, r1
 8003770:	619a      	str	r2, [r3, #24]
}
 8003772:	e7f6      	b.n	8003762 <UART_RxISR_16BIT+0xba>
 8003774:	fffffedf 	.word	0xfffffedf
 8003778:	fbffffff 	.word	0xfbffffff

0800377c <UART_RxISR_8BIT_FIFOEN>:
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  uhMask = huart->Mask;
 800377c:	0003      	movs	r3, r0
{
 800377e:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t  uhMask = huart->Mask;
 8003780:	3360      	adds	r3, #96	@ 0x60
 8003782:	881b      	ldrh	r3, [r3, #0]
{
 8003784:	b085      	sub	sp, #20
  uint16_t  uhMask = huart->Mask;
 8003786:	9302      	str	r3, [sp, #8]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003788:	6803      	ldr	r3, [r0, #0]
{
 800378a:	0004      	movs	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800378c:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	9203      	str	r2, [sp, #12]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	9201      	str	r2, [sp, #4]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003796:	0002      	movs	r2, r0
 8003798:	328c      	adds	r2, #140	@ 0x8c
 800379a:	6812      	ldr	r2, [r2, #0]
 800379c:	2a22      	cmp	r2, #34	@ 0x22
 800379e:	d000      	beq.n	80037a2 <UART_RxISR_8BIT_FIFOEN+0x26>
 80037a0:	e0c4      	b.n	800392c <UART_RxISR_8BIT_FIFOEN+0x1b0>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80037a2:	0003      	movs	r3, r0
 80037a4:	3368      	adds	r3, #104	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <UART_RxISR_8BIT_FIFOEN+0x36>
 80037ac:	2320      	movs	r3, #32
 80037ae:	421d      	tst	r5, r3
 80037b0:	d108      	bne.n	80037c4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80037b2:	0023      	movs	r3, r4
 80037b4:	335e      	adds	r3, #94	@ 0x5e
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d000      	beq.n	80037c0 <UART_RxISR_8BIT_FIFOEN+0x44>
 80037be:	e095      	b.n	80038ec <UART_RxISR_8BIT_FIFOEN+0x170>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80037c0:	b005      	add	sp, #20
 80037c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->RxXferCount--;
 80037c4:	0026      	movs	r6, r4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80037c6:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80037c8:	9902      	ldr	r1, [sp, #8]
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80037cc:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80037ce:	400b      	ands	r3, r1
 80037d0:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 80037d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 80037d4:	365e      	adds	r6, #94	@ 0x5e
      huart->pRxBuffPtr++;
 80037d6:	3301      	adds	r3, #1
 80037d8:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 80037da:	8833      	ldrh	r3, [r6, #0]
      isrflags = READ_REG(huart->Instance->ISR);
 80037dc:	6822      	ldr	r2, [r4, #0]
      huart->RxXferCount--;
 80037de:	3b01      	subs	r3, #1
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	8033      	strh	r3, [r6, #0]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80037e4:	2307      	movs	r3, #7
      isrflags = READ_REG(huart->Instance->ISR);
 80037e6:	69d5      	ldr	r5, [r2, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80037e8:	421d      	tst	r5, r3
 80037ea:	d02f      	beq.n	800384c <UART_RxISR_8BIT_FIFOEN+0xd0>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037ec:	3b06      	subs	r3, #6
 80037ee:	421d      	tst	r5, r3
 80037f0:	d008      	beq.n	8003804 <UART_RxISR_8BIT_FIFOEN+0x88>
 80037f2:	9903      	ldr	r1, [sp, #12]
 80037f4:	05c9      	lsls	r1, r1, #23
 80037f6:	d505      	bpl.n	8003804 <UART_RxISR_8BIT_FIFOEN+0x88>
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037f8:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037fa:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037fc:	3190      	adds	r1, #144	@ 0x90
 80037fe:	6808      	ldr	r0, [r1, #0]
 8003800:	4303      	orrs	r3, r0
 8003802:	600b      	str	r3, [r1, #0]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003804:	2302      	movs	r3, #2
 8003806:	421d      	tst	r5, r3
 8003808:	d009      	beq.n	800381e <UART_RxISR_8BIT_FIFOEN+0xa2>
 800380a:	9901      	ldr	r1, [sp, #4]
 800380c:	07c9      	lsls	r1, r1, #31
 800380e:	d506      	bpl.n	800381e <UART_RxISR_8BIT_FIFOEN+0xa2>
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003810:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003812:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003814:	3190      	adds	r1, #144	@ 0x90
 8003816:	6808      	ldr	r0, [r1, #0]
 8003818:	18db      	adds	r3, r3, r3
 800381a:	4303      	orrs	r3, r0
 800381c:	600b      	str	r3, [r1, #0]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800381e:	2304      	movs	r3, #4
 8003820:	421d      	tst	r5, r3
 8003822:	d009      	beq.n	8003838 <UART_RxISR_8BIT_FIFOEN+0xbc>
 8003824:	9901      	ldr	r1, [sp, #4]
 8003826:	07c9      	lsls	r1, r1, #31
 8003828:	d506      	bpl.n	8003838 <UART_RxISR_8BIT_FIFOEN+0xbc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800382a:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800382c:	0022      	movs	r2, r4
 800382e:	3290      	adds	r2, #144	@ 0x90
 8003830:	6811      	ldr	r1, [r2, #0]
 8003832:	3b02      	subs	r3, #2
 8003834:	430b      	orrs	r3, r1
 8003836:	6013      	str	r3, [r2, #0]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003838:	0027      	movs	r7, r4
 800383a:	3790      	adds	r7, #144	@ 0x90
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d004      	beq.n	800384c <UART_RxISR_8BIT_FIFOEN+0xd0>
          HAL_UART_ErrorCallback(huart);
 8003842:	0020      	movs	r0, r4
 8003844:	f7ff fd19 	bl	800327a <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003848:	2300      	movs	r3, #0
 800384a:	603b      	str	r3, [r7, #0]
      if (huart->RxXferCount == 0U)
 800384c:	8833      	ldrh	r3, [r6, #0]
 800384e:	b299      	uxth	r1, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1ab      	bne.n	80037ac <UART_RxISR_8BIT_FIFOEN+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003854:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003858:	3301      	adds	r3, #1
 800385a:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800385e:	6820      	ldr	r0, [r4, #0]
 8003860:	4f35      	ldr	r7, [pc, #212]	@ (8003938 <UART_RxISR_8BIT_FIFOEN+0x1bc>)
 8003862:	6802      	ldr	r2, [r0, #0]
 8003864:	403a      	ands	r2, r7
 8003866:	6002      	str	r2, [r0, #0]
 8003868:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003870:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003874:	6820      	ldr	r0, [r4, #0]
 8003876:	4f31      	ldr	r7, [pc, #196]	@ (800393c <UART_RxISR_8BIT_FIFOEN+0x1c0>)
 8003878:	6882      	ldr	r2, [r0, #8]
 800387a:	403a      	ands	r2, r7
 800387c:	6082      	str	r2, [r0, #8]
 800387e:	f386 8810 	msr	PRIMASK, r6
        huart->RxState = HAL_UART_STATE_READY;
 8003882:	0022      	movs	r2, r4
 8003884:	2020      	movs	r0, #32
 8003886:	328c      	adds	r2, #140	@ 0x8c
 8003888:	6010      	str	r0, [r2, #0]
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800388a:	6822      	ldr	r2, [r4, #0]
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800388c:	6721      	str	r1, [r4, #112]	@ 0x70
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800388e:	6852      	ldr	r2, [r2, #4]
        huart->RxISR = NULL;
 8003890:	6761      	str	r1, [r4, #116]	@ 0x74
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003892:	0212      	lsls	r2, r2, #8
 8003894:	d50a      	bpl.n	80038ac <UART_RxISR_8BIT_FIFOEN+0x130>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003896:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800389a:	f383 8810 	msr	PRIMASK, r3
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800389e:	6822      	ldr	r2, [r4, #0]
 80038a0:	4827      	ldr	r0, [pc, #156]	@ (8003940 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 80038a2:	6813      	ldr	r3, [r2, #0]
 80038a4:	4003      	ands	r3, r0
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	f381 8810 	msr	PRIMASK, r1
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ac:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d118      	bne.n	80038e4 <UART_RxISR_8BIT_FIFOEN+0x168>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b2:	2200      	movs	r2, #0
 80038b4:	66e2      	str	r2, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038b6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ba:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038be:	6821      	ldr	r1, [r4, #0]
 80038c0:	330f      	adds	r3, #15
 80038c2:	680a      	ldr	r2, [r1, #0]
 80038c4:	439a      	bics	r2, r3
 80038c6:	600a      	str	r2, [r1, #0]
 80038c8:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80038cc:	6822      	ldr	r2, [r4, #0]
 80038ce:	69d1      	ldr	r1, [r2, #28]
 80038d0:	4219      	tst	r1, r3
 80038d2:	d000      	beq.n	80038d6 <UART_RxISR_8BIT_FIFOEN+0x15a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038d4:	6213      	str	r3, [r2, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038d6:	0023      	movs	r3, r4
 80038d8:	335c      	adds	r3, #92	@ 0x5c
 80038da:	0020      	movs	r0, r4
 80038dc:	8819      	ldrh	r1, [r3, #0]
 80038de:	f7ff fcd8 	bl	8003292 <HAL_UARTEx_RxEventCallback>
 80038e2:	e763      	b.n	80037ac <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_RxCpltCallback(huart);
 80038e4:	0020      	movs	r0, r4
 80038e6:	f7fd fadd 	bl	8000ea4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80038ea:	e75f      	b.n	80037ac <UART_RxISR_8BIT_FIFOEN+0x30>
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80038ec:	0023      	movs	r3, r4
 80038ee:	3368      	adds	r3, #104	@ 0x68
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d800      	bhi.n	80038f8 <UART_RxISR_8BIT_FIFOEN+0x17c>
 80038f6:	e763      	b.n	80037c0 <UART_RxISR_8BIT_FIFOEN+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038f8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fc:	2201      	movs	r2, #1
 80038fe:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003902:	6821      	ldr	r1, [r4, #0]
 8003904:	4d0f      	ldr	r5, [pc, #60]	@ (8003944 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 8003906:	688b      	ldr	r3, [r1, #8]
 8003908:	402b      	ands	r3, r5
 800390a:	608b      	str	r3, [r1, #8]
 800390c:	f380 8810 	msr	PRIMASK, r0
      huart->RxISR = UART_RxISR_8BIT;
 8003910:	4b0d      	ldr	r3, [pc, #52]	@ (8003948 <UART_RxISR_8BIT_FIFOEN+0x1cc>)
 8003912:	6763      	str	r3, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003914:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003918:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800391c:	2320      	movs	r3, #32
 800391e:	6822      	ldr	r2, [r4, #0]
 8003920:	6810      	ldr	r0, [r2, #0]
 8003922:	4303      	orrs	r3, r0
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	f381 8810 	msr	PRIMASK, r1
}
 800392a:	e749      	b.n	80037c0 <UART_RxISR_8BIT_FIFOEN+0x44>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800392c:	2208      	movs	r2, #8
 800392e:	6999      	ldr	r1, [r3, #24]
 8003930:	430a      	orrs	r2, r1
 8003932:	619a      	str	r2, [r3, #24]
}
 8003934:	e744      	b.n	80037c0 <UART_RxISR_8BIT_FIFOEN+0x44>
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	fffffeff 	.word	0xfffffeff
 800393c:	effffffe 	.word	0xeffffffe
 8003940:	fbffffff 	.word	0xfbffffff
 8003944:	efffffff 	.word	0xefffffff
 8003948:	080035d1 	.word	0x080035d1

0800394c <UART_RxISR_16BIT_FIFOEN>:
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800394c:	0003      	movs	r3, r0
{
 800394e:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t  uhMask = huart->Mask;
 8003950:	3360      	adds	r3, #96	@ 0x60
 8003952:	881b      	ldrh	r3, [r3, #0]
{
 8003954:	b085      	sub	sp, #20
  uint16_t  uhMask = huart->Mask;
 8003956:	9302      	str	r3, [sp, #8]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003958:	6803      	ldr	r3, [r0, #0]
{
 800395a:	0004      	movs	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800395c:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	9203      	str	r2, [sp, #12]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	9201      	str	r2, [sp, #4]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003966:	0002      	movs	r2, r0
 8003968:	328c      	adds	r2, #140	@ 0x8c
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	2a22      	cmp	r2, #34	@ 0x22
 800396e:	d000      	beq.n	8003972 <UART_RxISR_16BIT_FIFOEN+0x26>
 8003970:	e0c2      	b.n	8003af8 <UART_RxISR_16BIT_FIFOEN+0x1ac>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003972:	0003      	movs	r3, r0
 8003974:	3368      	adds	r3, #104	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <UART_RxISR_16BIT_FIFOEN+0x36>
 800397c:	2320      	movs	r3, #32
 800397e:	421d      	tst	r5, r3
 8003980:	d108      	bne.n	8003994 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003982:	0023      	movs	r3, r4
 8003984:	335e      	adds	r3, #94	@ 0x5e
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800398a:	2b00      	cmp	r3, #0
 800398c:	d000      	beq.n	8003990 <UART_RxISR_16BIT_FIFOEN+0x44>
 800398e:	e093      	b.n	8003ab8 <UART_RxISR_16BIT_FIFOEN+0x16c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003990:	b005      	add	sp, #20
 8003992:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->RxXferCount--;
 8003994:	0026      	movs	r6, r4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003996:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8003998:	9802      	ldr	r0, [sp, #8]
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800399a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800399c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 800399e:	4001      	ands	r1, r0
 80039a0:	8011      	strh	r1, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80039a2:	3202      	adds	r2, #2
 80039a4:	65a2      	str	r2, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 80039a6:	365e      	adds	r6, #94	@ 0x5e
 80039a8:	8832      	ldrh	r2, [r6, #0]
 80039aa:	3a01      	subs	r2, #1
 80039ac:	b292      	uxth	r2, r2
 80039ae:	8032      	strh	r2, [r6, #0]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80039b0:	2207      	movs	r2, #7
      isrflags = READ_REG(huart->Instance->ISR);
 80039b2:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80039b4:	4215      	tst	r5, r2
 80039b6:	d02f      	beq.n	8003a18 <UART_RxISR_16BIT_FIFOEN+0xcc>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80039b8:	3a06      	subs	r2, #6
 80039ba:	4215      	tst	r5, r2
 80039bc:	d008      	beq.n	80039d0 <UART_RxISR_16BIT_FIFOEN+0x84>
 80039be:	9903      	ldr	r1, [sp, #12]
 80039c0:	05c9      	lsls	r1, r1, #23
 80039c2:	d505      	bpl.n	80039d0 <UART_RxISR_16BIT_FIFOEN+0x84>
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039c4:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80039c6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039c8:	3190      	adds	r1, #144	@ 0x90
 80039ca:	6808      	ldr	r0, [r1, #0]
 80039cc:	4302      	orrs	r2, r0
 80039ce:	600a      	str	r2, [r1, #0]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039d0:	2202      	movs	r2, #2
 80039d2:	4215      	tst	r5, r2
 80039d4:	d009      	beq.n	80039ea <UART_RxISR_16BIT_FIFOEN+0x9e>
 80039d6:	9901      	ldr	r1, [sp, #4]
 80039d8:	07c9      	lsls	r1, r1, #31
 80039da:	d506      	bpl.n	80039ea <UART_RxISR_16BIT_FIFOEN+0x9e>
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039dc:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80039de:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039e0:	3190      	adds	r1, #144	@ 0x90
 80039e2:	6808      	ldr	r0, [r1, #0]
 80039e4:	1892      	adds	r2, r2, r2
 80039e6:	4302      	orrs	r2, r0
 80039e8:	600a      	str	r2, [r1, #0]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039ea:	2204      	movs	r2, #4
 80039ec:	4215      	tst	r5, r2
 80039ee:	d009      	beq.n	8003a04 <UART_RxISR_16BIT_FIFOEN+0xb8>
 80039f0:	9901      	ldr	r1, [sp, #4]
 80039f2:	07c9      	lsls	r1, r1, #31
 80039f4:	d506      	bpl.n	8003a04 <UART_RxISR_16BIT_FIFOEN+0xb8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039f6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039f8:	0022      	movs	r2, r4
 80039fa:	2302      	movs	r3, #2
 80039fc:	3290      	adds	r2, #144	@ 0x90
 80039fe:	6811      	ldr	r1, [r2, #0]
 8003a00:	430b      	orrs	r3, r1
 8003a02:	6013      	str	r3, [r2, #0]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a04:	0027      	movs	r7, r4
 8003a06:	3790      	adds	r7, #144	@ 0x90
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d004      	beq.n	8003a18 <UART_RxISR_16BIT_FIFOEN+0xcc>
          HAL_UART_ErrorCallback(huart);
 8003a0e:	0020      	movs	r0, r4
 8003a10:	f7ff fc33 	bl	800327a <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a14:	2300      	movs	r3, #0
 8003a16:	603b      	str	r3, [r7, #0]
      if (huart->RxXferCount == 0U)
 8003a18:	8833      	ldrh	r3, [r6, #0]
 8003a1a:	b299      	uxth	r1, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1ad      	bne.n	800397c <UART_RxISR_16BIT_FIFOEN+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a20:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a24:	3301      	adds	r3, #1
 8003a26:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a2a:	6820      	ldr	r0, [r4, #0]
 8003a2c:	4f35      	ldr	r7, [pc, #212]	@ (8003b04 <UART_RxISR_16BIT_FIFOEN+0x1b8>)
 8003a2e:	6802      	ldr	r2, [r0, #0]
 8003a30:	403a      	ands	r2, r7
 8003a32:	6002      	str	r2, [r0, #0]
 8003a34:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a38:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3c:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a40:	6820      	ldr	r0, [r4, #0]
 8003a42:	4f31      	ldr	r7, [pc, #196]	@ (8003b08 <UART_RxISR_16BIT_FIFOEN+0x1bc>)
 8003a44:	6882      	ldr	r2, [r0, #8]
 8003a46:	403a      	ands	r2, r7
 8003a48:	6082      	str	r2, [r0, #8]
 8003a4a:	f386 8810 	msr	PRIMASK, r6
        huart->RxState = HAL_UART_STATE_READY;
 8003a4e:	0022      	movs	r2, r4
 8003a50:	2020      	movs	r0, #32
 8003a52:	328c      	adds	r2, #140	@ 0x8c
 8003a54:	6010      	str	r0, [r2, #0]
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a56:	6822      	ldr	r2, [r4, #0]
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a58:	6721      	str	r1, [r4, #112]	@ 0x70
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a5a:	6852      	ldr	r2, [r2, #4]
        huart->RxISR = NULL;
 8003a5c:	6761      	str	r1, [r4, #116]	@ 0x74
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a5e:	0212      	lsls	r2, r2, #8
 8003a60:	d50a      	bpl.n	8003a78 <UART_RxISR_16BIT_FIFOEN+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a62:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a66:	f383 8810 	msr	PRIMASK, r3
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a6a:	6822      	ldr	r2, [r4, #0]
 8003a6c:	4827      	ldr	r0, [pc, #156]	@ (8003b0c <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 8003a6e:	6813      	ldr	r3, [r2, #0]
 8003a70:	4003      	ands	r3, r0
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	f381 8810 	msr	PRIMASK, r1
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a78:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d118      	bne.n	8003ab0 <UART_RxISR_16BIT_FIFOEN+0x164>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7e:	2200      	movs	r2, #0
 8003a80:	66e2      	str	r2, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a82:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a86:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a8a:	6821      	ldr	r1, [r4, #0]
 8003a8c:	330f      	adds	r3, #15
 8003a8e:	680a      	ldr	r2, [r1, #0]
 8003a90:	439a      	bics	r2, r3
 8003a92:	600a      	str	r2, [r1, #0]
 8003a94:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003a98:	6822      	ldr	r2, [r4, #0]
 8003a9a:	69d1      	ldr	r1, [r2, #28]
 8003a9c:	4219      	tst	r1, r3
 8003a9e:	d000      	beq.n	8003aa2 <UART_RxISR_16BIT_FIFOEN+0x156>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003aa0:	6213      	str	r3, [r2, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003aa2:	0023      	movs	r3, r4
 8003aa4:	335c      	adds	r3, #92	@ 0x5c
 8003aa6:	0020      	movs	r0, r4
 8003aa8:	8819      	ldrh	r1, [r3, #0]
 8003aaa:	f7ff fbf2 	bl	8003292 <HAL_UARTEx_RxEventCallback>
 8003aae:	e765      	b.n	800397c <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_RxCpltCallback(huart);
 8003ab0:	0020      	movs	r0, r4
 8003ab2:	f7fd f9f7 	bl	8000ea4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003ab6:	e761      	b.n	800397c <UART_RxISR_16BIT_FIFOEN+0x30>
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003ab8:	0023      	movs	r3, r4
 8003aba:	3368      	adds	r3, #104	@ 0x68
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d800      	bhi.n	8003ac4 <UART_RxISR_16BIT_FIFOEN+0x178>
 8003ac2:	e765      	b.n	8003990 <UART_RxISR_16BIT_FIFOEN+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003ace:	6821      	ldr	r1, [r4, #0]
 8003ad0:	4d0f      	ldr	r5, [pc, #60]	@ (8003b10 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 8003ad2:	688b      	ldr	r3, [r1, #8]
 8003ad4:	402b      	ands	r3, r5
 8003ad6:	608b      	str	r3, [r1, #8]
 8003ad8:	f380 8810 	msr	PRIMASK, r0
      huart->RxISR = UART_RxISR_16BIT;
 8003adc:	4b0d      	ldr	r3, [pc, #52]	@ (8003b14 <UART_RxISR_16BIT_FIFOEN+0x1c8>)
 8003ade:	6763      	str	r3, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae4:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003ae8:	2320      	movs	r3, #32
 8003aea:	6822      	ldr	r2, [r4, #0]
 8003aec:	6810      	ldr	r0, [r2, #0]
 8003aee:	4303      	orrs	r3, r0
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	f381 8810 	msr	PRIMASK, r1
}
 8003af6:	e74b      	b.n	8003990 <UART_RxISR_16BIT_FIFOEN+0x44>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003af8:	2208      	movs	r2, #8
 8003afa:	6999      	ldr	r1, [r3, #24]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	619a      	str	r2, [r3, #24]
}
 8003b00:	e746      	b.n	8003990 <UART_RxISR_16BIT_FIFOEN+0x44>
 8003b02:	46c0      	nop			@ (mov r8, r8)
 8003b04:	fffffeff 	.word	0xfffffeff
 8003b08:	effffffe 	.word	0xeffffffe
 8003b0c:	fbffffff 	.word	0xfbffffff
 8003b10:	efffffff 	.word	0xefffffff
 8003b14:	080036a9 	.word	0x080036a9

08003b18 <UART_SetConfig>:
{
 8003b18:	b570      	push	{r4, r5, r6, lr}
 8003b1a:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b1c:	6925      	ldr	r5, [r4, #16]
 8003b1e:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b20:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b22:	4329      	orrs	r1, r5
 8003b24:	6965      	ldr	r5, [r4, #20]
 8003b26:	69c2      	ldr	r2, [r0, #28]
 8003b28:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b2a:	6818      	ldr	r0, [r3, #0]
 8003b2c:	4d49      	ldr	r5, [pc, #292]	@ (8003c54 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b2e:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b30:	4028      	ands	r0, r5
 8003b32:	4301      	orrs	r1, r0
 8003b34:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b36:	6859      	ldr	r1, [r3, #4]
 8003b38:	4847      	ldr	r0, [pc, #284]	@ (8003c58 <UART_SetConfig+0x140>)
    tmpreg |= huart->Init.OneBitSampling;
 8003b3a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b3c:	4001      	ands	r1, r0
 8003b3e:	68e0      	ldr	r0, [r4, #12]
 8003b40:	4301      	orrs	r1, r0
 8003b42:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b44:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b46:	6898      	ldr	r0, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8003b48:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b4a:	4d44      	ldr	r5, [pc, #272]	@ (8003c5c <UART_SetConfig+0x144>)
 8003b4c:	4028      	ands	r0, r5
 8003b4e:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b50:	200f      	movs	r0, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b52:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b56:	4381      	bics	r1, r0
 8003b58:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003b5a:	4301      	orrs	r1, r0
 8003b5c:	62d9      	str	r1, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b5e:	4940      	ldr	r1, [pc, #256]	@ (8003c60 <UART_SetConfig+0x148>)
 8003b60:	428b      	cmp	r3, r1
 8003b62:	d115      	bne.n	8003b90 <UART_SetConfig+0x78>
 8003b64:	2103      	movs	r1, #3
 8003b66:	4b3f      	ldr	r3, [pc, #252]	@ (8003c64 <UART_SetConfig+0x14c>)
 8003b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b6a:	400b      	ands	r3, r1
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d860      	bhi.n	8003c34 <UART_SetConfig+0x11c>
 8003b72:	493d      	ldr	r1, [pc, #244]	@ (8003c68 <UART_SetConfig+0x150>)
 8003b74:	5cc8      	ldrb	r0, [r1, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b76:	2380      	movs	r3, #128	@ 0x80
 8003b78:	021b      	lsls	r3, r3, #8
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d12f      	bne.n	8003bde <UART_SetConfig+0xc6>
    switch (clocksource)
 8003b7e:	2808      	cmp	r0, #8
 8003b80:	d856      	bhi.n	8003c30 <UART_SetConfig+0x118>
 8003b82:	f7fc facf 	bl	8000124 <__gnu_thumb1_case_uqi>
 8003b86:	555b      	.short	0x555b
 8003b88:	550b550e 	.word	0x550b550e
 8003b8c:	5555      	.short	0x5555
 8003b8e:	0f          	.byte	0x0f
 8003b8f:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b90:	4936      	ldr	r1, [pc, #216]	@ (8003c6c <UART_SetConfig+0x154>)
 8003b92:	185b      	adds	r3, r3, r1
 8003b94:	1e59      	subs	r1, r3, #1
 8003b96:	418b      	sbcs	r3, r1
 8003b98:	0118      	lsls	r0, r3, #4
 8003b9a:	e7ec      	b.n	8003b76 <UART_SetConfig+0x5e>
        pclk = HAL_RCC_GetSysClockFreq();
 8003b9c:	f7fe fc0c 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8003ba0:	e04e      	b.n	8003c40 <UART_SetConfig+0x128>
    switch (clocksource)
 8003ba2:	4a33      	ldr	r2, [pc, #204]	@ (8003c70 <UART_SetConfig+0x158>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ba4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003ba6:	4b33      	ldr	r3, [pc, #204]	@ (8003c74 <UART_SetConfig+0x15c>)
 8003ba8:	0049      	lsls	r1, r1, #1
 8003baa:	0010      	movs	r0, r2
 8003bac:	5ac9      	ldrh	r1, [r1, r3]
 8003bae:	f7fc facd 	bl	800014c <__udivsi3>
 8003bb2:	6865      	ldr	r5, [r4, #4]
 8003bb4:	0040      	lsls	r0, r0, #1
 8003bb6:	086b      	lsrs	r3, r5, #1
 8003bb8:	18c0      	adds	r0, r0, r3
 8003bba:	0029      	movs	r1, r5
 8003bbc:	f7fc fac6 	bl	800014c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bc0:	0002      	movs	r2, r0
 8003bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8003c78 <UART_SetConfig+0x160>)
 8003bc4:	3a10      	subs	r2, #16
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d832      	bhi.n	8003c30 <UART_SetConfig+0x118>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bca:	230f      	movs	r3, #15
 8003bcc:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bce:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bd0:	439a      	bics	r2, r3
 8003bd2:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bd4:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8003bd6:	6822      	ldr	r2, [r4, #0]
 8003bd8:	4303      	orrs	r3, r0
 8003bda:	60d3      	str	r3, [r2, #12]
 8003bdc:	e032      	b.n	8003c44 <UART_SetConfig+0x12c>
    switch (clocksource)
 8003bde:	2808      	cmp	r0, #8
 8003be0:	d826      	bhi.n	8003c30 <UART_SetConfig+0x118>
 8003be2:	f7fc fa9f 	bl	8000124 <__gnu_thumb1_case_uqi>
 8003be6:	251a      	.short	0x251a
 8003be8:	251f2505 	.word	0x251f2505
 8003bec:	2525      	.short	0x2525
 8003bee:	22          	.byte	0x22
 8003bef:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 8003bf0:	481f      	ldr	r0, [pc, #124]	@ (8003c70 <UART_SetConfig+0x158>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bf2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8003c74 <UART_SetConfig+0x15c>)
 8003bf6:	0052      	lsls	r2, r2, #1
 8003bf8:	5ad1      	ldrh	r1, [r2, r3]
 8003bfa:	f7fc faa7 	bl	800014c <__udivsi3>
 8003bfe:	6865      	ldr	r5, [r4, #4]
 8003c00:	086b      	lsrs	r3, r5, #1
 8003c02:	18c0      	adds	r0, r0, r3
 8003c04:	0029      	movs	r1, r5
 8003c06:	f7fc faa1 	bl	800014c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c0a:	0002      	movs	r2, r0
 8003c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8003c78 <UART_SetConfig+0x160>)
 8003c0e:	3a10      	subs	r2, #16
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d80d      	bhi.n	8003c30 <UART_SetConfig+0x118>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	60d8      	str	r0, [r3, #12]
 8003c18:	e014      	b.n	8003c44 <UART_SetConfig+0x12c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c1a:	f7fe fcbb 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003c1e:	2800      	cmp	r0, #0
 8003c20:	d010      	beq.n	8003c44 <UART_SetConfig+0x12c>
 8003c22:	e7e6      	b.n	8003bf2 <UART_SetConfig+0xda>
        pclk = HAL_RCC_GetSysClockFreq();
 8003c24:	f7fe fbc8 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
        break;
 8003c28:	e7f9      	b.n	8003c1e <UART_SetConfig+0x106>
    switch (clocksource)
 8003c2a:	2080      	movs	r0, #128	@ 0x80
 8003c2c:	0200      	lsls	r0, r0, #8
 8003c2e:	e7e0      	b.n	8003bf2 <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 8003c30:	2001      	movs	r0, #1
 8003c32:	e008      	b.n	8003c46 <UART_SetConfig+0x12e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c34:	2380      	movs	r3, #128	@ 0x80
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d1ee      	bne.n	8003c1a <UART_SetConfig+0x102>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c3c:	f7fe fcaa 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8003c40:	1e02      	subs	r2, r0, #0
    if (pclk != 0U)
 8003c42:	d1af      	bne.n	8003ba4 <UART_SetConfig+0x8c>
        ret = HAL_ERROR;
 8003c44:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8003c46:	4b0d      	ldr	r3, [pc, #52]	@ (8003c7c <UART_SetConfig+0x164>)
 8003c48:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8003c4e:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8003c50:	bd70      	pop	{r4, r5, r6, pc}
 8003c52:	46c0      	nop			@ (mov r8, r8)
 8003c54:	cfff69f3 	.word	0xcfff69f3
 8003c58:	ffffcfff 	.word	0xffffcfff
 8003c5c:	11fff4ff 	.word	0x11fff4ff
 8003c60:	40013800 	.word	0x40013800
 8003c64:	40021000 	.word	0x40021000
 8003c68:	08005174 	.word	0x08005174
 8003c6c:	bfffbc00 	.word	0xbfffbc00
 8003c70:	00f42400 	.word	0x00f42400
 8003c74:	08005178 	.word	0x08005178
 8003c78:	0000ffef 	.word	0x0000ffef
 8003c7c:	00010001 	.word	0x00010001

08003c80 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c80:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8003c82:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c84:	071a      	lsls	r2, r3, #28
 8003c86:	d506      	bpl.n	8003c96 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c88:	6801      	ldr	r1, [r0, #0]
 8003c8a:	4c28      	ldr	r4, [pc, #160]	@ (8003d2c <UART_AdvFeatureConfig+0xac>)
 8003c8c:	684a      	ldr	r2, [r1, #4]
 8003c8e:	4022      	ands	r2, r4
 8003c90:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8003c92:	4322      	orrs	r2, r4
 8003c94:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c96:	07da      	lsls	r2, r3, #31
 8003c98:	d506      	bpl.n	8003ca8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c9a:	6801      	ldr	r1, [r0, #0]
 8003c9c:	4c24      	ldr	r4, [pc, #144]	@ (8003d30 <UART_AdvFeatureConfig+0xb0>)
 8003c9e:	684a      	ldr	r2, [r1, #4]
 8003ca0:	4022      	ands	r2, r4
 8003ca2:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8003ca4:	4322      	orrs	r2, r4
 8003ca6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ca8:	079a      	lsls	r2, r3, #30
 8003caa:	d506      	bpl.n	8003cba <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cac:	6801      	ldr	r1, [r0, #0]
 8003cae:	4c21      	ldr	r4, [pc, #132]	@ (8003d34 <UART_AdvFeatureConfig+0xb4>)
 8003cb0:	684a      	ldr	r2, [r1, #4]
 8003cb2:	4022      	ands	r2, r4
 8003cb4:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8003cb6:	4322      	orrs	r2, r4
 8003cb8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cba:	075a      	lsls	r2, r3, #29
 8003cbc:	d506      	bpl.n	8003ccc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cbe:	6801      	ldr	r1, [r0, #0]
 8003cc0:	4c1d      	ldr	r4, [pc, #116]	@ (8003d38 <UART_AdvFeatureConfig+0xb8>)
 8003cc2:	684a      	ldr	r2, [r1, #4]
 8003cc4:	4022      	ands	r2, r4
 8003cc6:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8003cc8:	4322      	orrs	r2, r4
 8003cca:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ccc:	06da      	lsls	r2, r3, #27
 8003cce:	d506      	bpl.n	8003cde <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cd0:	6801      	ldr	r1, [r0, #0]
 8003cd2:	4c1a      	ldr	r4, [pc, #104]	@ (8003d3c <UART_AdvFeatureConfig+0xbc>)
 8003cd4:	688a      	ldr	r2, [r1, #8]
 8003cd6:	4022      	ands	r2, r4
 8003cd8:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8003cda:	4322      	orrs	r2, r4
 8003cdc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cde:	069a      	lsls	r2, r3, #26
 8003ce0:	d506      	bpl.n	8003cf0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ce2:	6801      	ldr	r1, [r0, #0]
 8003ce4:	4c16      	ldr	r4, [pc, #88]	@ (8003d40 <UART_AdvFeatureConfig+0xc0>)
 8003ce6:	688a      	ldr	r2, [r1, #8]
 8003ce8:	4022      	ands	r2, r4
 8003cea:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8003cec:	4322      	orrs	r2, r4
 8003cee:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cf0:	065a      	lsls	r2, r3, #25
 8003cf2:	d510      	bpl.n	8003d16 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cf4:	6801      	ldr	r1, [r0, #0]
 8003cf6:	4d13      	ldr	r5, [pc, #76]	@ (8003d44 <UART_AdvFeatureConfig+0xc4>)
 8003cf8:	684a      	ldr	r2, [r1, #4]
 8003cfa:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8003cfc:	402a      	ands	r2, r5
 8003cfe:	4322      	orrs	r2, r4
 8003d00:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d02:	2280      	movs	r2, #128	@ 0x80
 8003d04:	0352      	lsls	r2, r2, #13
 8003d06:	4294      	cmp	r4, r2
 8003d08:	d105      	bne.n	8003d16 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d0a:	684a      	ldr	r2, [r1, #4]
 8003d0c:	4c0e      	ldr	r4, [pc, #56]	@ (8003d48 <UART_AdvFeatureConfig+0xc8>)
 8003d0e:	4022      	ands	r2, r4
 8003d10:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8003d12:	4322      	orrs	r2, r4
 8003d14:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d16:	061b      	lsls	r3, r3, #24
 8003d18:	d506      	bpl.n	8003d28 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d1a:	6802      	ldr	r2, [r0, #0]
 8003d1c:	490b      	ldr	r1, [pc, #44]	@ (8003d4c <UART_AdvFeatureConfig+0xcc>)
 8003d1e:	6853      	ldr	r3, [r2, #4]
 8003d20:	400b      	ands	r3, r1
 8003d22:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8003d24:	430b      	orrs	r3, r1
 8003d26:	6053      	str	r3, [r2, #4]
}
 8003d28:	bd30      	pop	{r4, r5, pc}
 8003d2a:	46c0      	nop			@ (mov r8, r8)
 8003d2c:	ffff7fff 	.word	0xffff7fff
 8003d30:	fffdffff 	.word	0xfffdffff
 8003d34:	fffeffff 	.word	0xfffeffff
 8003d38:	fffbffff 	.word	0xfffbffff
 8003d3c:	ffffefff 	.word	0xffffefff
 8003d40:	ffffdfff 	.word	0xffffdfff
 8003d44:	ffefffff 	.word	0xffefffff
 8003d48:	ff9fffff 	.word	0xff9fffff
 8003d4c:	fff7ffff 	.word	0xfff7ffff

08003d50 <UART_WaitOnFlagUntilTimeout>:
{
 8003d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d52:	0004      	movs	r4, r0
 8003d54:	000d      	movs	r5, r1
 8003d56:	0017      	movs	r7, r2
 8003d58:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d5a:	6822      	ldr	r2, [r4, #0]
 8003d5c:	69d3      	ldr	r3, [r2, #28]
 8003d5e:	402b      	ands	r3, r5
 8003d60:	1b5b      	subs	r3, r3, r5
 8003d62:	4259      	negs	r1, r3
 8003d64:	414b      	adcs	r3, r1
 8003d66:	42bb      	cmp	r3, r7
 8003d68:	d001      	beq.n	8003d6e <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	e026      	b.n	8003dbc <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8003d6e:	9b08      	ldr	r3, [sp, #32]
 8003d70:	3301      	adds	r3, #1
 8003d72:	d0f3      	beq.n	8003d5c <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d74:	f7fd fd78 	bl	8001868 <HAL_GetTick>
 8003d78:	9b00      	ldr	r3, [sp, #0]
 8003d7a:	1ac0      	subs	r0, r0, r3
 8003d7c:	9b08      	ldr	r3, [sp, #32]
 8003d7e:	4298      	cmp	r0, r3
 8003d80:	d82d      	bhi.n	8003dde <UART_WaitOnFlagUntilTimeout+0x8e>
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d02b      	beq.n	8003dde <UART_WaitOnFlagUntilTimeout+0x8e>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	0752      	lsls	r2, r2, #29
 8003d8c:	d5e5      	bpl.n	8003d5a <UART_WaitOnFlagUntilTimeout+0xa>
 8003d8e:	002a      	movs	r2, r5
 8003d90:	2140      	movs	r1, #64	@ 0x40
 8003d92:	3a40      	subs	r2, #64	@ 0x40
 8003d94:	438a      	bics	r2, r1
 8003d96:	d0e0      	beq.n	8003d5a <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d98:	69da      	ldr	r2, [r3, #28]
 8003d9a:	2608      	movs	r6, #8
 8003d9c:	0011      	movs	r1, r2
 8003d9e:	4031      	ands	r1, r6
 8003da0:	9101      	str	r1, [sp, #4]
 8003da2:	4232      	tst	r2, r6
 8003da4:	d00b      	beq.n	8003dbe <UART_WaitOnFlagUntilTimeout+0x6e>
          UART_EndRxTransfer(huart);
 8003da6:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003da8:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 8003daa:	f7ff fa33 	bl	8003214 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dae:	0023      	movs	r3, r4
 8003db0:	3390      	adds	r3, #144	@ 0x90
 8003db2:	601e      	str	r6, [r3, #0]
          __HAL_UNLOCK(huart);
 8003db4:	2300      	movs	r3, #0
          return HAL_ERROR;
 8003db6:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 8003db8:	3484      	adds	r4, #132	@ 0x84
 8003dba:	7023      	strb	r3, [r4, #0]
}
 8003dbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dbe:	2280      	movs	r2, #128	@ 0x80
 8003dc0:	69d9      	ldr	r1, [r3, #28]
 8003dc2:	0112      	lsls	r2, r2, #4
 8003dc4:	4211      	tst	r1, r2
 8003dc6:	d0c8      	beq.n	8003d5a <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dc8:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8003dca:	0020      	movs	r0, r4
 8003dcc:	f7ff fa22 	bl	8003214 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dd0:	0023      	movs	r3, r4
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	3390      	adds	r3, #144	@ 0x90
 8003dd6:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(huart);
 8003dd8:	9b01      	ldr	r3, [sp, #4]
 8003dda:	3484      	adds	r4, #132	@ 0x84
 8003ddc:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8003dde:	2003      	movs	r0, #3
 8003de0:	e7ec      	b.n	8003dbc <UART_WaitOnFlagUntilTimeout+0x6c>

08003de2 <HAL_UART_Transmit>:
{
 8003de2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003de4:	0017      	movs	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003de6:	0002      	movs	r2, r0
{
 8003de8:	b087      	sub	sp, #28
  if (huart->gState == HAL_UART_STATE_READY)
 8003dea:	3288      	adds	r2, #136	@ 0x88
{
 8003dec:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8003dee:	6813      	ldr	r3, [r2, #0]
{
 8003df0:	0004      	movs	r4, r0
 8003df2:	000d      	movs	r5, r1
    return HAL_BUSY;
 8003df4:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8003df6:	2b20      	cmp	r3, #32
 8003df8:	d139      	bne.n	8003e6e <HAL_UART_Transmit+0x8c>
      return  HAL_ERROR;
 8003dfa:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003dfc:	2900      	cmp	r1, #0
 8003dfe:	d036      	beq.n	8003e6e <HAL_UART_Transmit+0x8c>
 8003e00:	2f00      	cmp	r7, #0
 8003e02:	d034      	beq.n	8003e6e <HAL_UART_Transmit+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e04:	2380      	movs	r3, #128	@ 0x80
 8003e06:	68a1      	ldr	r1, [r4, #8]
 8003e08:	015b      	lsls	r3, r3, #5
 8003e0a:	4299      	cmp	r1, r3
 8003e0c:	d104      	bne.n	8003e18 <HAL_UART_Transmit+0x36>
 8003e0e:	6923      	ldr	r3, [r4, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_UART_Transmit+0x36>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003e14:	4205      	tst	r5, r0
 8003e16:	d12a      	bne.n	8003e6e <HAL_UART_Transmit+0x8c>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e18:	0023      	movs	r3, r4
 8003e1a:	2600      	movs	r6, #0
 8003e1c:	3390      	adds	r3, #144	@ 0x90
 8003e1e:	601e      	str	r6, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e20:	2321      	movs	r3, #33	@ 0x21
 8003e22:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003e24:	f7fd fd20 	bl	8001868 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8003e28:	0023      	movs	r3, r4
 8003e2a:	3354      	adds	r3, #84	@ 0x54
 8003e2c:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8003e2e:	3302      	adds	r3, #2
 8003e30:	9303      	str	r3, [sp, #12]
 8003e32:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e34:	2380      	movs	r3, #128	@ 0x80
 8003e36:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8003e38:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e3a:	015b      	lsls	r3, r3, #5
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d104      	bne.n	8003e4a <HAL_UART_Transmit+0x68>
 8003e40:	6923      	ldr	r3, [r4, #16]
 8003e42:	42b3      	cmp	r3, r6
 8003e44:	d101      	bne.n	8003e4a <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8003e46:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8003e48:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8003e4a:	0023      	movs	r3, r4
 8003e4c:	3356      	adds	r3, #86	@ 0x56
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10d      	bne.n	8003e72 <HAL_UART_Transmit+0x90>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e56:	9b05      	ldr	r3, [sp, #20]
 8003e58:	0020      	movs	r0, r4
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	2140      	movs	r1, #64	@ 0x40
 8003e5e:	9b04      	ldr	r3, [sp, #16]
 8003e60:	f7ff ff76 	bl	8003d50 <UART_WaitOnFlagUntilTimeout>
 8003e64:	2320      	movs	r3, #32
 8003e66:	3488      	adds	r4, #136	@ 0x88
      huart->gState = HAL_UART_STATE_READY;
 8003e68:	6023      	str	r3, [r4, #0]
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	d10e      	bne.n	8003e8c <HAL_UART_Transmit+0xaa>
}
 8003e6e:	b007      	add	sp, #28
 8003e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e72:	9b05      	ldr	r3, [sp, #20]
 8003e74:	2200      	movs	r2, #0
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	2180      	movs	r1, #128	@ 0x80
 8003e7a:	0020      	movs	r0, r4
 8003e7c:	9b04      	ldr	r3, [sp, #16]
 8003e7e:	f7ff ff67 	bl	8003d50 <UART_WaitOnFlagUntilTimeout>
 8003e82:	2800      	cmp	r0, #0
 8003e84:	d004      	beq.n	8003e90 <HAL_UART_Transmit+0xae>
        huart->gState = HAL_UART_STATE_READY;
 8003e86:	2320      	movs	r3, #32
 8003e88:	3488      	adds	r4, #136	@ 0x88
 8003e8a:	6023      	str	r3, [r4, #0]
        return HAL_TIMEOUT;
 8003e8c:	2003      	movs	r0, #3
 8003e8e:	e7ee      	b.n	8003e6e <HAL_UART_Transmit+0x8c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e90:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003e92:	2d00      	cmp	r5, #0
 8003e94:	d10b      	bne.n	8003eae <HAL_UART_Transmit+0xcc>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e96:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8003e98:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e9a:	05db      	lsls	r3, r3, #23
 8003e9c:	0ddb      	lsrs	r3, r3, #23
 8003e9e:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8003ea0:	9b03      	ldr	r3, [sp, #12]
 8003ea2:	9a03      	ldr	r2, [sp, #12]
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	8013      	strh	r3, [r2, #0]
 8003eac:	e7cd      	b.n	8003e4a <HAL_UART_Transmit+0x68>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eae:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8003eb0:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eb2:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata8bits++;
 8003eb4:	e7f4      	b.n	8003ea0 <HAL_UART_Transmit+0xbe>
	...

08003eb8 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb8:	0003      	movs	r3, r0
{
 8003eba:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ebc:	2600      	movs	r6, #0
{
 8003ebe:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec0:	3390      	adds	r3, #144	@ 0x90
 8003ec2:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8003ec4:	f7fd fcd0 	bl	8001868 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ec8:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003eca:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	071b      	lsls	r3, r3, #28
 8003ed0:	d51f      	bpl.n	8003f12 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ed2:	2180      	movs	r1, #128	@ 0x80
 8003ed4:	4b28      	ldr	r3, [pc, #160]	@ (8003f78 <UART_CheckIdleState+0xc0>)
 8003ed6:	0032      	movs	r2, r6
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	0389      	lsls	r1, r1, #14
 8003edc:	0003      	movs	r3, r0
 8003ede:	0020      	movs	r0, r4
 8003ee0:	f7ff ff36 	bl	8003d50 <UART_WaitOnFlagUntilTimeout>
 8003ee4:	42b0      	cmp	r0, r6
 8003ee6:	d014      	beq.n	8003f12 <UART_CheckIdleState+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eec:	2301      	movs	r3, #1
 8003eee:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003ef2:	2080      	movs	r0, #128	@ 0x80
 8003ef4:	6822      	ldr	r2, [r4, #0]
 8003ef6:	6813      	ldr	r3, [r2, #0]
 8003ef8:	4383      	bics	r3, r0
 8003efa:	6013      	str	r3, [r2, #0]
 8003efc:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8003f00:	0023      	movs	r3, r4
 8003f02:	2220      	movs	r2, #32
 8003f04:	3388      	adds	r3, #136	@ 0x88
 8003f06:	601a      	str	r2, [r3, #0]
      return HAL_TIMEOUT;
 8003f08:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	3484      	adds	r4, #132	@ 0x84
 8003f0e:	7023      	strb	r3, [r4, #0]
}
 8003f10:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f12:	0026      	movs	r6, r4
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	368c      	adds	r6, #140	@ 0x8c
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	075b      	lsls	r3, r3, #29
 8003f1c:	d523      	bpl.n	8003f66 <UART_CheckIdleState+0xae>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f1e:	2180      	movs	r1, #128	@ 0x80
 8003f20:	4b15      	ldr	r3, [pc, #84]	@ (8003f78 <UART_CheckIdleState+0xc0>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	0020      	movs	r0, r4
 8003f28:	002b      	movs	r3, r5
 8003f2a:	03c9      	lsls	r1, r1, #15
 8003f2c:	f7ff ff10 	bl	8003d50 <UART_WaitOnFlagUntilTimeout>
 8003f30:	2800      	cmp	r0, #0
 8003f32:	d018      	beq.n	8003f66 <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f34:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f3e:	6821      	ldr	r1, [r4, #0]
 8003f40:	4d0e      	ldr	r5, [pc, #56]	@ (8003f7c <UART_CheckIdleState+0xc4>)
 8003f42:	680b      	ldr	r3, [r1, #0]
 8003f44:	402b      	ands	r3, r5
 8003f46:	600b      	str	r3, [r1, #0]
 8003f48:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f4c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f50:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f54:	6821      	ldr	r1, [r4, #0]
 8003f56:	688b      	ldr	r3, [r1, #8]
 8003f58:	4393      	bics	r3, r2
 8003f5a:	608b      	str	r3, [r1, #8]
 8003f5c:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8003f60:	2320      	movs	r3, #32
 8003f62:	6033      	str	r3, [r6, #0]
      return HAL_TIMEOUT;
 8003f64:	e7d0      	b.n	8003f08 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8003f66:	0023      	movs	r3, r4
 8003f68:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003f6c:	3388      	adds	r3, #136	@ 0x88
 8003f6e:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8003f70:	6032      	str	r2, [r6, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f72:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f74:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 8003f76:	e7c8      	b.n	8003f0a <UART_CheckIdleState+0x52>
 8003f78:	01ffffff 	.word	0x01ffffff
 8003f7c:	fffffedf 	.word	0xfffffedf

08003f80 <HAL_UART_Init>:
{
 8003f80:	b570      	push	{r4, r5, r6, lr}
 8003f82:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003f84:	d101      	bne.n	8003f8a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8003f86:	2001      	movs	r0, #1
}
 8003f88:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8003f8a:	0005      	movs	r5, r0
 8003f8c:	3588      	adds	r5, #136	@ 0x88
 8003f8e:	682b      	ldr	r3, [r5, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d104      	bne.n	8003f9e <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 8003f94:	0002      	movs	r2, r0
 8003f96:	3284      	adds	r2, #132	@ 0x84
 8003f98:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8003f9a:	f7fd fb7b 	bl	8001694 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003f9e:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003fa4:	602b      	str	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8003fa6:	6813      	ldr	r3, [r2, #0]
 8003fa8:	438b      	bics	r3, r1
 8003faa:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8003fb2:	0020      	movs	r0, r4
 8003fb4:	f7ff fe64 	bl	8003c80 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fb8:	0020      	movs	r0, r4
 8003fba:	f7ff fdad 	bl	8003b18 <UART_SetConfig>
 8003fbe:	2801      	cmp	r0, #1
 8003fc0:	d0e1      	beq.n	8003f86 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	4907      	ldr	r1, [pc, #28]	@ (8003fe4 <HAL_UART_Init+0x64>)
 8003fc6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8003fc8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fca:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fcc:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	438a      	bics	r2, r1
 8003fd4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	6819      	ldr	r1, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003fde:	f7ff ff6b 	bl	8003eb8 <UART_CheckIdleState>
 8003fe2:	e7d1      	b.n	8003f88 <HAL_UART_Init+0x8>
 8003fe4:	ffffb7ff 	.word	0xffffb7ff

08003fe8 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 8003fe8:	0003      	movs	r3, r0
 8003fea:	335c      	adds	r3, #92	@ 0x5c
{
 8003fec:	b570      	push	{r4, r5, r6, lr}
  huart->pRxBuffPtr  = pData;
 8003fee:	6581      	str	r1, [r0, #88]	@ 0x58
  UART_MASK_COMPUTATION(huart);
 8003ff0:	2480      	movs	r4, #128	@ 0x80
  huart->RxXferSize  = Size;
 8003ff2:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 8003ff4:	805a      	strh	r2, [r3, #2]
  huart->RxISR       = NULL;
 8003ff6:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 8003ff8:	6881      	ldr	r1, [r0, #8]
  huart->RxISR       = NULL;
 8003ffa:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8003ffc:	0164      	lsls	r4, r4, #5
 8003ffe:	42a1      	cmp	r1, r4
 8004000:	d13c      	bne.n	800407c <UART_Start_Receive_IT+0x94>
 8004002:	6903      	ldr	r3, [r0, #16]
 8004004:	4259      	negs	r1, r3
 8004006:	414b      	adcs	r3, r1
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	33ff      	adds	r3, #255	@ 0xff
 800400c:	0001      	movs	r1, r0
 800400e:	3160      	adds	r1, #96	@ 0x60
 8004010:	800b      	strh	r3, [r1, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004012:	0003      	movs	r3, r0
 8004014:	2100      	movs	r1, #0
 8004016:	3390      	adds	r3, #144	@ 0x90
 8004018:	6019      	str	r1, [r3, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800401a:	3122      	adds	r1, #34	@ 0x22
 800401c:	3b04      	subs	r3, #4
 800401e:	6019      	str	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004020:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004024:	2301      	movs	r3, #1
 8004026:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402a:	6801      	ldr	r1, [r0, #0]
 800402c:	688d      	ldr	r5, [r1, #8]
 800402e:	432b      	orrs	r3, r5
 8004030:	608b      	str	r3, [r1, #8]
 8004032:	f384 8810 	msr	PRIMASK, r4
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004036:	2580      	movs	r5, #128	@ 0x80
 8004038:	2180      	movs	r1, #128	@ 0x80
 800403a:	6e46      	ldr	r6, [r0, #100]	@ 0x64
 800403c:	6884      	ldr	r4, [r0, #8]
 800403e:	6903      	ldr	r3, [r0, #16]
 8004040:	05ad      	lsls	r5, r5, #22
 8004042:	0149      	lsls	r1, r1, #5
 8004044:	42ae      	cmp	r6, r5
 8004046:	d13f      	bne.n	80040c8 <UART_Start_Receive_IT+0xe0>
 8004048:	0005      	movs	r5, r0
 800404a:	3568      	adds	r5, #104	@ 0x68
 800404c:	882d      	ldrh	r5, [r5, #0]
 800404e:	4295      	cmp	r5, r2
 8004050:	d83a      	bhi.n	80040c8 <UART_Start_Receive_IT+0xe0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004052:	428c      	cmp	r4, r1
 8004054:	d133      	bne.n	80040be <UART_Start_Receive_IT+0xd6>
 8004056:	2b00      	cmp	r3, #0
 8004058:	d122      	bne.n	80040a0 <UART_Start_Receive_IT+0xb8>
 800405a:	4b2c      	ldr	r3, [pc, #176]	@ (800410c <UART_Start_Receive_IT+0x124>)
 800405c:	6743      	str	r3, [r0, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800405e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004062:	2301      	movs	r3, #1
 8004064:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004068:	2380      	movs	r3, #128	@ 0x80
 800406a:	6802      	ldr	r2, [r0, #0]
 800406c:	055b      	lsls	r3, r3, #21
 800406e:	6890      	ldr	r0, [r2, #8]
 8004070:	4303      	orrs	r3, r0
 8004072:	6093      	str	r3, [r2, #8]
 8004074:	f381 8810 	msr	PRIMASK, r1
}
 8004078:	2000      	movs	r0, #0
 800407a:	bd70      	pop	{r4, r5, r6, pc}
  UART_MASK_COMPUTATION(huart);
 800407c:	2900      	cmp	r1, #0
 800407e:	d105      	bne.n	800408c <UART_Start_Receive_IT+0xa4>
 8004080:	6901      	ldr	r1, [r0, #16]
 8004082:	23ff      	movs	r3, #255	@ 0xff
 8004084:	2900      	cmp	r1, #0
 8004086:	d0c1      	beq.n	800400c <UART_Start_Receive_IT+0x24>
 8004088:	3b80      	subs	r3, #128	@ 0x80
 800408a:	e7bf      	b.n	800400c <UART_Start_Receive_IT+0x24>
 800408c:	2480      	movs	r4, #128	@ 0x80
 800408e:	0564      	lsls	r4, r4, #21
 8004090:	42a1      	cmp	r1, r4
 8004092:	d1bb      	bne.n	800400c <UART_Start_Receive_IT+0x24>
 8004094:	6901      	ldr	r1, [r0, #16]
 8004096:	237f      	movs	r3, #127	@ 0x7f
 8004098:	2900      	cmp	r1, #0
 800409a:	d0b7      	beq.n	800400c <UART_Start_Receive_IT+0x24>
 800409c:	3b40      	subs	r3, #64	@ 0x40
 800409e:	e7b5      	b.n	800400c <UART_Start_Receive_IT+0x24>
 80040a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004110 <UART_Start_Receive_IT+0x128>)
 80040a2:	6743      	str	r3, [r0, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040a4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a8:	2301      	movs	r3, #1
 80040aa:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040ae:	6802      	ldr	r2, [r0, #0]
 80040b0:	33ff      	adds	r3, #255	@ 0xff
 80040b2:	6814      	ldr	r4, [r2, #0]
 80040b4:	4323      	orrs	r3, r4
 80040b6:	6013      	str	r3, [r2, #0]
 80040b8:	f381 8810 	msr	PRIMASK, r1
}
 80040bc:	e7cf      	b.n	800405e <UART_Start_Receive_IT+0x76>
 80040be:	4a14      	ldr	r2, [pc, #80]	@ (8004110 <UART_Start_Receive_IT+0x128>)
 80040c0:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0cb      	beq.n	800405e <UART_Start_Receive_IT+0x76>
 80040c6:	e7ed      	b.n	80040a4 <UART_Start_Receive_IT+0xbc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c8:	428c      	cmp	r4, r1
 80040ca:	d11a      	bne.n	8004102 <UART_Start_Receive_IT+0x11a>
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10a      	bne.n	80040e6 <UART_Start_Receive_IT+0xfe>
 80040d0:	4b10      	ldr	r3, [pc, #64]	@ (8004114 <UART_Start_Receive_IT+0x12c>)
 80040d2:	6743      	str	r3, [r0, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040d4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d8:	2301      	movs	r3, #1
 80040da:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80040de:	6802      	ldr	r2, [r0, #0]
 80040e0:	331f      	adds	r3, #31
 80040e2:	6810      	ldr	r0, [r2, #0]
 80040e4:	e00a      	b.n	80040fc <UART_Start_Receive_IT+0x114>
 80040e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004118 <UART_Start_Receive_IT+0x130>)
 80040e8:	6743      	str	r3, [r0, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ea:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ee:	2301      	movs	r3, #1
 80040f0:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80040f4:	6802      	ldr	r2, [r0, #0]
 80040f6:	3320      	adds	r3, #32
 80040f8:	6810      	ldr	r0, [r2, #0]
 80040fa:	33ff      	adds	r3, #255	@ 0xff
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80040fc:	4303      	orrs	r3, r0
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	e7b8      	b.n	8004074 <UART_Start_Receive_IT+0x8c>
 8004102:	4a05      	ldr	r2, [pc, #20]	@ (8004118 <UART_Start_Receive_IT+0x130>)
 8004104:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1ef      	bne.n	80040ea <UART_Start_Receive_IT+0x102>
 800410a:	e7e3      	b.n	80040d4 <UART_Start_Receive_IT+0xec>
 800410c:	0800394d 	.word	0x0800394d
 8004110:	0800377d 	.word	0x0800377d
 8004114:	080036a9 	.word	0x080036a9
 8004118:	080035d1 	.word	0x080035d1

0800411c <HAL_UART_Receive_IT>:
{
 800411c:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 800411e:	308c      	adds	r0, #140	@ 0x8c
{
 8004120:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004122:	6804      	ldr	r4, [r0, #0]
    return HAL_BUSY;
 8004124:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8004126:	2c20      	cmp	r4, #32
 8004128:	d125      	bne.n	8004176 <HAL_UART_Receive_IT+0x5a>
      return HAL_ERROR;
 800412a:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800412c:	2900      	cmp	r1, #0
 800412e:	d022      	beq.n	8004176 <HAL_UART_Receive_IT+0x5a>
 8004130:	2a00      	cmp	r2, #0
 8004132:	d020      	beq.n	8004176 <HAL_UART_Receive_IT+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004134:	2080      	movs	r0, #128	@ 0x80
 8004136:	689c      	ldr	r4, [r3, #8]
 8004138:	0140      	lsls	r0, r0, #5
 800413a:	4284      	cmp	r4, r0
 800413c:	d105      	bne.n	800414a <HAL_UART_Receive_IT+0x2e>
 800413e:	6918      	ldr	r0, [r3, #16]
 8004140:	2800      	cmp	r0, #0
 8004142:	d102      	bne.n	800414a <HAL_UART_Receive_IT+0x2e>
      return HAL_ERROR;
 8004144:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 8004146:	4201      	tst	r1, r0
 8004148:	d115      	bne.n	8004176 <HAL_UART_Receive_IT+0x5a>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414a:	2000      	movs	r0, #0
 800414c:	66d8      	str	r0, [r3, #108]	@ 0x6c
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	6840      	ldr	r0, [r0, #4]
 8004152:	0200      	lsls	r0, r0, #8
 8004154:	d50c      	bpl.n	8004170 <HAL_UART_Receive_IT+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004156:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800415a:	2001      	movs	r0, #1
 800415c:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004160:	2080      	movs	r0, #128	@ 0x80
 8004162:	681c      	ldr	r4, [r3, #0]
 8004164:	04c0      	lsls	r0, r0, #19
 8004166:	6826      	ldr	r6, [r4, #0]
 8004168:	4330      	orrs	r0, r6
 800416a:	6020      	str	r0, [r4, #0]
 800416c:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_IT(huart, pData, Size));
 8004170:	0018      	movs	r0, r3
 8004172:	f7ff ff39 	bl	8003fe8 <UART_Start_Receive_IT>
}
 8004176:	bd70      	pop	{r4, r5, r6, pc}

08004178 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004178:	4770      	bx	lr

0800417a <HAL_UARTEx_RxFifoFullCallback>:
/**
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 800417a:	4770      	bx	lr

0800417c <HAL_UARTEx_TxFifoEmptyCallback>:
/**
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 800417c:	4770      	bx	lr
	...

08004180 <_strtol_l.isra.0>:
 8004180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004182:	b085      	sub	sp, #20
 8004184:	0017      	movs	r7, r2
 8004186:	001e      	movs	r6, r3
 8004188:	9003      	str	r0, [sp, #12]
 800418a:	9101      	str	r1, [sp, #4]
 800418c:	2b24      	cmp	r3, #36	@ 0x24
 800418e:	d823      	bhi.n	80041d8 <_strtol_l.isra.0+0x58>
 8004190:	000c      	movs	r4, r1
 8004192:	2b01      	cmp	r3, #1
 8004194:	d020      	beq.n	80041d8 <_strtol_l.isra.0+0x58>
 8004196:	4b3d      	ldr	r3, [pc, #244]	@ (800428c <_strtol_l.isra.0+0x10c>)
 8004198:	2208      	movs	r2, #8
 800419a:	469c      	mov	ip, r3
 800419c:	0023      	movs	r3, r4
 800419e:	4661      	mov	r1, ip
 80041a0:	781d      	ldrb	r5, [r3, #0]
 80041a2:	3401      	adds	r4, #1
 80041a4:	5d48      	ldrb	r0, [r1, r5]
 80041a6:	0001      	movs	r1, r0
 80041a8:	4011      	ands	r1, r2
 80041aa:	4210      	tst	r0, r2
 80041ac:	d1f6      	bne.n	800419c <_strtol_l.isra.0+0x1c>
 80041ae:	2d2d      	cmp	r5, #45	@ 0x2d
 80041b0:	d119      	bne.n	80041e6 <_strtol_l.isra.0+0x66>
 80041b2:	7825      	ldrb	r5, [r4, #0]
 80041b4:	1c9c      	adds	r4, r3, #2
 80041b6:	2301      	movs	r3, #1
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	2210      	movs	r2, #16
 80041bc:	0033      	movs	r3, r6
 80041be:	4393      	bics	r3, r2
 80041c0:	d11d      	bne.n	80041fe <_strtol_l.isra.0+0x7e>
 80041c2:	2d30      	cmp	r5, #48	@ 0x30
 80041c4:	d115      	bne.n	80041f2 <_strtol_l.isra.0+0x72>
 80041c6:	2120      	movs	r1, #32
 80041c8:	7823      	ldrb	r3, [r4, #0]
 80041ca:	438b      	bics	r3, r1
 80041cc:	2b58      	cmp	r3, #88	@ 0x58
 80041ce:	d110      	bne.n	80041f2 <_strtol_l.isra.0+0x72>
 80041d0:	7865      	ldrb	r5, [r4, #1]
 80041d2:	3402      	adds	r4, #2
 80041d4:	2610      	movs	r6, #16
 80041d6:	e012      	b.n	80041fe <_strtol_l.isra.0+0x7e>
 80041d8:	f000 fa5a 	bl	8004690 <__errno>
 80041dc:	2316      	movs	r3, #22
 80041de:	6003      	str	r3, [r0, #0]
 80041e0:	2000      	movs	r0, #0
 80041e2:	b005      	add	sp, #20
 80041e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041e6:	9100      	str	r1, [sp, #0]
 80041e8:	2d2b      	cmp	r5, #43	@ 0x2b
 80041ea:	d1e6      	bne.n	80041ba <_strtol_l.isra.0+0x3a>
 80041ec:	7825      	ldrb	r5, [r4, #0]
 80041ee:	1c9c      	adds	r4, r3, #2
 80041f0:	e7e3      	b.n	80041ba <_strtol_l.isra.0+0x3a>
 80041f2:	2e00      	cmp	r6, #0
 80041f4:	d1ee      	bne.n	80041d4 <_strtol_l.isra.0+0x54>
 80041f6:	360a      	adds	r6, #10
 80041f8:	2d30      	cmp	r5, #48	@ 0x30
 80041fa:	d100      	bne.n	80041fe <_strtol_l.isra.0+0x7e>
 80041fc:	3e02      	subs	r6, #2
 80041fe:	4a24      	ldr	r2, [pc, #144]	@ (8004290 <_strtol_l.isra.0+0x110>)
 8004200:	9b00      	ldr	r3, [sp, #0]
 8004202:	4694      	mov	ip, r2
 8004204:	4463      	add	r3, ip
 8004206:	0031      	movs	r1, r6
 8004208:	0018      	movs	r0, r3
 800420a:	9302      	str	r3, [sp, #8]
 800420c:	f7fc f824 	bl	8000258 <__aeabi_uidivmod>
 8004210:	2200      	movs	r2, #0
 8004212:	4684      	mov	ip, r0
 8004214:	0010      	movs	r0, r2
 8004216:	002b      	movs	r3, r5
 8004218:	3b30      	subs	r3, #48	@ 0x30
 800421a:	2b09      	cmp	r3, #9
 800421c:	d811      	bhi.n	8004242 <_strtol_l.isra.0+0xc2>
 800421e:	001d      	movs	r5, r3
 8004220:	42ae      	cmp	r6, r5
 8004222:	dd1d      	ble.n	8004260 <_strtol_l.isra.0+0xe0>
 8004224:	1c53      	adds	r3, r2, #1
 8004226:	d009      	beq.n	800423c <_strtol_l.isra.0+0xbc>
 8004228:	2201      	movs	r2, #1
 800422a:	4252      	negs	r2, r2
 800422c:	4584      	cmp	ip, r0
 800422e:	d305      	bcc.n	800423c <_strtol_l.isra.0+0xbc>
 8004230:	d101      	bne.n	8004236 <_strtol_l.isra.0+0xb6>
 8004232:	42a9      	cmp	r1, r5
 8004234:	db11      	blt.n	800425a <_strtol_l.isra.0+0xda>
 8004236:	2201      	movs	r2, #1
 8004238:	4370      	muls	r0, r6
 800423a:	1828      	adds	r0, r5, r0
 800423c:	7825      	ldrb	r5, [r4, #0]
 800423e:	3401      	adds	r4, #1
 8004240:	e7e9      	b.n	8004216 <_strtol_l.isra.0+0x96>
 8004242:	002b      	movs	r3, r5
 8004244:	3b41      	subs	r3, #65	@ 0x41
 8004246:	2b19      	cmp	r3, #25
 8004248:	d801      	bhi.n	800424e <_strtol_l.isra.0+0xce>
 800424a:	3d37      	subs	r5, #55	@ 0x37
 800424c:	e7e8      	b.n	8004220 <_strtol_l.isra.0+0xa0>
 800424e:	002b      	movs	r3, r5
 8004250:	3b61      	subs	r3, #97	@ 0x61
 8004252:	2b19      	cmp	r3, #25
 8004254:	d804      	bhi.n	8004260 <_strtol_l.isra.0+0xe0>
 8004256:	3d57      	subs	r5, #87	@ 0x57
 8004258:	e7e2      	b.n	8004220 <_strtol_l.isra.0+0xa0>
 800425a:	2201      	movs	r2, #1
 800425c:	4252      	negs	r2, r2
 800425e:	e7ed      	b.n	800423c <_strtol_l.isra.0+0xbc>
 8004260:	1c53      	adds	r3, r2, #1
 8004262:	d108      	bne.n	8004276 <_strtol_l.isra.0+0xf6>
 8004264:	2322      	movs	r3, #34	@ 0x22
 8004266:	9a03      	ldr	r2, [sp, #12]
 8004268:	9802      	ldr	r0, [sp, #8]
 800426a:	6013      	str	r3, [r2, #0]
 800426c:	2f00      	cmp	r7, #0
 800426e:	d0b8      	beq.n	80041e2 <_strtol_l.isra.0+0x62>
 8004270:	1e63      	subs	r3, r4, #1
 8004272:	9301      	str	r3, [sp, #4]
 8004274:	e007      	b.n	8004286 <_strtol_l.isra.0+0x106>
 8004276:	9b00      	ldr	r3, [sp, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d000      	beq.n	800427e <_strtol_l.isra.0+0xfe>
 800427c:	4240      	negs	r0, r0
 800427e:	2f00      	cmp	r7, #0
 8004280:	d0af      	beq.n	80041e2 <_strtol_l.isra.0+0x62>
 8004282:	2a00      	cmp	r2, #0
 8004284:	d1f4      	bne.n	8004270 <_strtol_l.isra.0+0xf0>
 8004286:	9b01      	ldr	r3, [sp, #4]
 8004288:	603b      	str	r3, [r7, #0]
 800428a:	e7aa      	b.n	80041e2 <_strtol_l.isra.0+0x62>
 800428c:	08005191 	.word	0x08005191
 8004290:	7fffffff 	.word	0x7fffffff

08004294 <strtol>:
 8004294:	b510      	push	{r4, lr}
 8004296:	4c04      	ldr	r4, [pc, #16]	@ (80042a8 <strtol+0x14>)
 8004298:	0013      	movs	r3, r2
 800429a:	000a      	movs	r2, r1
 800429c:	0001      	movs	r1, r0
 800429e:	6820      	ldr	r0, [r4, #0]
 80042a0:	f7ff ff6e 	bl	8004180 <_strtol_l.isra.0>
 80042a4:	bd10      	pop	{r4, pc}
 80042a6:	46c0      	nop			@ (mov r8, r8)
 80042a8:	2000000c 	.word	0x2000000c

080042ac <_strtoul_l.isra.0>:
 80042ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ae:	001e      	movs	r6, r3
 80042b0:	4b3e      	ldr	r3, [pc, #248]	@ (80043ac <_strtoul_l.isra.0+0x100>)
 80042b2:	0017      	movs	r7, r2
 80042b4:	000c      	movs	r4, r1
 80042b6:	469c      	mov	ip, r3
 80042b8:	2208      	movs	r2, #8
 80042ba:	b085      	sub	sp, #20
 80042bc:	9003      	str	r0, [sp, #12]
 80042be:	9100      	str	r1, [sp, #0]
 80042c0:	0023      	movs	r3, r4
 80042c2:	4661      	mov	r1, ip
 80042c4:	781d      	ldrb	r5, [r3, #0]
 80042c6:	3401      	adds	r4, #1
 80042c8:	5d48      	ldrb	r0, [r1, r5]
 80042ca:	0001      	movs	r1, r0
 80042cc:	4011      	ands	r1, r2
 80042ce:	4210      	tst	r0, r2
 80042d0:	d1f6      	bne.n	80042c0 <_strtoul_l.isra.0+0x14>
 80042d2:	2d2d      	cmp	r5, #45	@ 0x2d
 80042d4:	d112      	bne.n	80042fc <_strtoul_l.isra.0+0x50>
 80042d6:	7825      	ldrb	r5, [r4, #0]
 80042d8:	1c9c      	adds	r4, r3, #2
 80042da:	2301      	movs	r3, #1
 80042dc:	9302      	str	r3, [sp, #8]
 80042de:	2210      	movs	r2, #16
 80042e0:	0033      	movs	r3, r6
 80042e2:	4393      	bics	r3, r2
 80042e4:	d116      	bne.n	8004314 <_strtoul_l.isra.0+0x68>
 80042e6:	2d30      	cmp	r5, #48	@ 0x30
 80042e8:	d10e      	bne.n	8004308 <_strtoul_l.isra.0+0x5c>
 80042ea:	2120      	movs	r1, #32
 80042ec:	7823      	ldrb	r3, [r4, #0]
 80042ee:	438b      	bics	r3, r1
 80042f0:	2b58      	cmp	r3, #88	@ 0x58
 80042f2:	d109      	bne.n	8004308 <_strtoul_l.isra.0+0x5c>
 80042f4:	7865      	ldrb	r5, [r4, #1]
 80042f6:	3402      	adds	r4, #2
 80042f8:	2610      	movs	r6, #16
 80042fa:	e00b      	b.n	8004314 <_strtoul_l.isra.0+0x68>
 80042fc:	9102      	str	r1, [sp, #8]
 80042fe:	2d2b      	cmp	r5, #43	@ 0x2b
 8004300:	d1ed      	bne.n	80042de <_strtoul_l.isra.0+0x32>
 8004302:	7825      	ldrb	r5, [r4, #0]
 8004304:	1c9c      	adds	r4, r3, #2
 8004306:	e7ea      	b.n	80042de <_strtoul_l.isra.0+0x32>
 8004308:	2e00      	cmp	r6, #0
 800430a:	d1f5      	bne.n	80042f8 <_strtoul_l.isra.0+0x4c>
 800430c:	360a      	adds	r6, #10
 800430e:	2d30      	cmp	r5, #48	@ 0x30
 8004310:	d100      	bne.n	8004314 <_strtoul_l.isra.0+0x68>
 8004312:	3e02      	subs	r6, #2
 8004314:	2001      	movs	r0, #1
 8004316:	0031      	movs	r1, r6
 8004318:	4240      	negs	r0, r0
 800431a:	f7fb ff17 	bl	800014c <__udivsi3>
 800431e:	9001      	str	r0, [sp, #4]
 8004320:	2001      	movs	r0, #1
 8004322:	0031      	movs	r1, r6
 8004324:	4240      	negs	r0, r0
 8004326:	f7fb ff97 	bl	8000258 <__aeabi_uidivmod>
 800432a:	2300      	movs	r3, #0
 800432c:	2201      	movs	r2, #1
 800432e:	0018      	movs	r0, r3
 8004330:	4694      	mov	ip, r2
 8004332:	002a      	movs	r2, r5
 8004334:	3a30      	subs	r2, #48	@ 0x30
 8004336:	2a09      	cmp	r2, #9
 8004338:	d812      	bhi.n	8004360 <_strtoul_l.isra.0+0xb4>
 800433a:	0015      	movs	r5, r2
 800433c:	42ae      	cmp	r6, r5
 800433e:	dd1e      	ble.n	800437e <_strtoul_l.isra.0+0xd2>
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	d00a      	beq.n	800435a <_strtoul_l.isra.0+0xae>
 8004344:	2301      	movs	r3, #1
 8004346:	9a01      	ldr	r2, [sp, #4]
 8004348:	425b      	negs	r3, r3
 800434a:	4282      	cmp	r2, r0
 800434c:	d305      	bcc.n	800435a <_strtoul_l.isra.0+0xae>
 800434e:	d101      	bne.n	8004354 <_strtoul_l.isra.0+0xa8>
 8004350:	42a9      	cmp	r1, r5
 8004352:	db11      	blt.n	8004378 <_strtoul_l.isra.0+0xcc>
 8004354:	4663      	mov	r3, ip
 8004356:	4370      	muls	r0, r6
 8004358:	1828      	adds	r0, r5, r0
 800435a:	7825      	ldrb	r5, [r4, #0]
 800435c:	3401      	adds	r4, #1
 800435e:	e7e8      	b.n	8004332 <_strtoul_l.isra.0+0x86>
 8004360:	002a      	movs	r2, r5
 8004362:	3a41      	subs	r2, #65	@ 0x41
 8004364:	2a19      	cmp	r2, #25
 8004366:	d801      	bhi.n	800436c <_strtoul_l.isra.0+0xc0>
 8004368:	3d37      	subs	r5, #55	@ 0x37
 800436a:	e7e7      	b.n	800433c <_strtoul_l.isra.0+0x90>
 800436c:	002a      	movs	r2, r5
 800436e:	3a61      	subs	r2, #97	@ 0x61
 8004370:	2a19      	cmp	r2, #25
 8004372:	d804      	bhi.n	800437e <_strtoul_l.isra.0+0xd2>
 8004374:	3d57      	subs	r5, #87	@ 0x57
 8004376:	e7e1      	b.n	800433c <_strtoul_l.isra.0+0x90>
 8004378:	2301      	movs	r3, #1
 800437a:	425b      	negs	r3, r3
 800437c:	e7ed      	b.n	800435a <_strtoul_l.isra.0+0xae>
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	d107      	bne.n	8004392 <_strtoul_l.isra.0+0xe6>
 8004382:	2222      	movs	r2, #34	@ 0x22
 8004384:	9903      	ldr	r1, [sp, #12]
 8004386:	0018      	movs	r0, r3
 8004388:	600a      	str	r2, [r1, #0]
 800438a:	2f00      	cmp	r7, #0
 800438c:	d109      	bne.n	80043a2 <_strtoul_l.isra.0+0xf6>
 800438e:	b005      	add	sp, #20
 8004390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004392:	9a02      	ldr	r2, [sp, #8]
 8004394:	2a00      	cmp	r2, #0
 8004396:	d000      	beq.n	800439a <_strtoul_l.isra.0+0xee>
 8004398:	4240      	negs	r0, r0
 800439a:	2f00      	cmp	r7, #0
 800439c:	d0f7      	beq.n	800438e <_strtoul_l.isra.0+0xe2>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <_strtoul_l.isra.0+0xfa>
 80043a2:	1e63      	subs	r3, r4, #1
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	9b00      	ldr	r3, [sp, #0]
 80043a8:	603b      	str	r3, [r7, #0]
 80043aa:	e7f0      	b.n	800438e <_strtoul_l.isra.0+0xe2>
 80043ac:	08005191 	.word	0x08005191

080043b0 <strtoul>:
 80043b0:	b510      	push	{r4, lr}
 80043b2:	4c04      	ldr	r4, [pc, #16]	@ (80043c4 <strtoul+0x14>)
 80043b4:	0013      	movs	r3, r2
 80043b6:	000a      	movs	r2, r1
 80043b8:	0001      	movs	r1, r0
 80043ba:	6820      	ldr	r0, [r4, #0]
 80043bc:	f7ff ff76 	bl	80042ac <_strtoul_l.isra.0>
 80043c0:	bd10      	pop	{r4, pc}
 80043c2:	46c0      	nop			@ (mov r8, r8)
 80043c4:	2000000c 	.word	0x2000000c

080043c8 <_strtoull_l.isra.0>:
 80043c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ca:	b08b      	sub	sp, #44	@ 0x2c
 80043cc:	9202      	str	r2, [sp, #8]
 80043ce:	001e      	movs	r6, r3
 80043d0:	000c      	movs	r4, r1
 80043d2:	2208      	movs	r2, #8
 80043d4:	4f4b      	ldr	r7, [pc, #300]	@ (8004504 <_strtoull_l.isra.0+0x13c>)
 80043d6:	9008      	str	r0, [sp, #32]
 80043d8:	9101      	str	r1, [sp, #4]
 80043da:	0023      	movs	r3, r4
 80043dc:	781d      	ldrb	r5, [r3, #0]
 80043de:	3401      	adds	r4, #1
 80043e0:	5d78      	ldrb	r0, [r7, r5]
 80043e2:	0001      	movs	r1, r0
 80043e4:	4011      	ands	r1, r2
 80043e6:	4210      	tst	r0, r2
 80043e8:	d1f7      	bne.n	80043da <_strtoull_l.isra.0+0x12>
 80043ea:	2d2d      	cmp	r5, #45	@ 0x2d
 80043ec:	d112      	bne.n	8004414 <_strtoull_l.isra.0+0x4c>
 80043ee:	7825      	ldrb	r5, [r4, #0]
 80043f0:	1c9c      	adds	r4, r3, #2
 80043f2:	2301      	movs	r3, #1
 80043f4:	9303      	str	r3, [sp, #12]
 80043f6:	2210      	movs	r2, #16
 80043f8:	0033      	movs	r3, r6
 80043fa:	4393      	bics	r3, r2
 80043fc:	d116      	bne.n	800442c <_strtoull_l.isra.0+0x64>
 80043fe:	2d30      	cmp	r5, #48	@ 0x30
 8004400:	d10e      	bne.n	8004420 <_strtoull_l.isra.0+0x58>
 8004402:	2120      	movs	r1, #32
 8004404:	7823      	ldrb	r3, [r4, #0]
 8004406:	438b      	bics	r3, r1
 8004408:	2b58      	cmp	r3, #88	@ 0x58
 800440a:	d109      	bne.n	8004420 <_strtoull_l.isra.0+0x58>
 800440c:	7865      	ldrb	r5, [r4, #1]
 800440e:	3402      	adds	r4, #2
 8004410:	2610      	movs	r6, #16
 8004412:	e00b      	b.n	800442c <_strtoull_l.isra.0+0x64>
 8004414:	9103      	str	r1, [sp, #12]
 8004416:	2d2b      	cmp	r5, #43	@ 0x2b
 8004418:	d1ed      	bne.n	80043f6 <_strtoull_l.isra.0+0x2e>
 800441a:	7825      	ldrb	r5, [r4, #0]
 800441c:	1c9c      	adds	r4, r3, #2
 800441e:	e7ea      	b.n	80043f6 <_strtoull_l.isra.0+0x2e>
 8004420:	2e00      	cmp	r6, #0
 8004422:	d1f5      	bne.n	8004410 <_strtoull_l.isra.0+0x48>
 8004424:	360a      	adds	r6, #10
 8004426:	2d30      	cmp	r5, #48	@ 0x30
 8004428:	d100      	bne.n	800442c <_strtoull_l.isra.0+0x64>
 800442a:	3e02      	subs	r6, #2
 800442c:	17f3      	asrs	r3, r6, #31
 800442e:	0032      	movs	r2, r6
 8004430:	2001      	movs	r0, #1
 8004432:	4240      	negs	r0, r0
 8004434:	17c1      	asrs	r1, r0, #31
 8004436:	9309      	str	r3, [sp, #36]	@ 0x24
 8004438:	f7fb ff2c 	bl	8000294 <__aeabi_uldivmod>
 800443c:	0032      	movs	r2, r6
 800443e:	9006      	str	r0, [sp, #24]
 8004440:	000f      	movs	r7, r1
 8004442:	17f3      	asrs	r3, r6, #31
 8004444:	2001      	movs	r0, #1
 8004446:	4240      	negs	r0, r0
 8004448:	17c1      	asrs	r1, r0, #31
 800444a:	f7fb ff23 	bl	8000294 <__aeabi_uldivmod>
 800444e:	2300      	movs	r3, #0
 8004450:	2000      	movs	r0, #0
 8004452:	2100      	movs	r1, #0
 8004454:	9207      	str	r2, [sp, #28]
 8004456:	002a      	movs	r2, r5
 8004458:	3a30      	subs	r2, #48	@ 0x30
 800445a:	2a09      	cmp	r2, #9
 800445c:	d823      	bhi.n	80044a6 <_strtoull_l.isra.0+0xde>
 800445e:	0015      	movs	r5, r2
 8004460:	42ae      	cmp	r6, r5
 8004462:	dd2f      	ble.n	80044c4 <_strtoull_l.isra.0+0xfc>
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	d01b      	beq.n	80044a0 <_strtoull_l.isra.0+0xd8>
 8004468:	42b9      	cmp	r1, r7
 800446a:	d828      	bhi.n	80044be <_strtoull_l.isra.0+0xf6>
 800446c:	d102      	bne.n	8004474 <_strtoull_l.isra.0+0xac>
 800446e:	9b06      	ldr	r3, [sp, #24]
 8004470:	4298      	cmp	r0, r3
 8004472:	d824      	bhi.n	80044be <_strtoull_l.isra.0+0xf6>
 8004474:	9b06      	ldr	r3, [sp, #24]
 8004476:	4283      	cmp	r3, r0
 8004478:	d104      	bne.n	8004484 <_strtoull_l.isra.0+0xbc>
 800447a:	428f      	cmp	r7, r1
 800447c:	d102      	bne.n	8004484 <_strtoull_l.isra.0+0xbc>
 800447e:	9b07      	ldr	r3, [sp, #28]
 8004480:	42ab      	cmp	r3, r5
 8004482:	db1c      	blt.n	80044be <_strtoull_l.isra.0+0xf6>
 8004484:	0002      	movs	r2, r0
 8004486:	000b      	movs	r3, r1
 8004488:	0030      	movs	r0, r6
 800448a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800448c:	f7fb ff22 	bl	80002d4 <__aeabi_lmul>
 8004490:	17eb      	asrs	r3, r5, #31
 8004492:	9504      	str	r5, [sp, #16]
 8004494:	9305      	str	r3, [sp, #20]
 8004496:	9a04      	ldr	r2, [sp, #16]
 8004498:	9b05      	ldr	r3, [sp, #20]
 800449a:	1880      	adds	r0, r0, r2
 800449c:	4159      	adcs	r1, r3
 800449e:	2301      	movs	r3, #1
 80044a0:	7825      	ldrb	r5, [r4, #0]
 80044a2:	3401      	adds	r4, #1
 80044a4:	e7d7      	b.n	8004456 <_strtoull_l.isra.0+0x8e>
 80044a6:	002a      	movs	r2, r5
 80044a8:	3a41      	subs	r2, #65	@ 0x41
 80044aa:	2a19      	cmp	r2, #25
 80044ac:	d801      	bhi.n	80044b2 <_strtoull_l.isra.0+0xea>
 80044ae:	3d37      	subs	r5, #55	@ 0x37
 80044b0:	e7d6      	b.n	8004460 <_strtoull_l.isra.0+0x98>
 80044b2:	002a      	movs	r2, r5
 80044b4:	3a61      	subs	r2, #97	@ 0x61
 80044b6:	2a19      	cmp	r2, #25
 80044b8:	d804      	bhi.n	80044c4 <_strtoull_l.isra.0+0xfc>
 80044ba:	3d57      	subs	r5, #87	@ 0x57
 80044bc:	e7d0      	b.n	8004460 <_strtoull_l.isra.0+0x98>
 80044be:	2301      	movs	r3, #1
 80044c0:	425b      	negs	r3, r3
 80044c2:	e7ed      	b.n	80044a0 <_strtoull_l.isra.0+0xd8>
 80044c4:	1c5a      	adds	r2, r3, #1
 80044c6:	d10a      	bne.n	80044de <_strtoull_l.isra.0+0x116>
 80044c8:	9a08      	ldr	r2, [sp, #32]
 80044ca:	3323      	adds	r3, #35	@ 0x23
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	9b02      	ldr	r3, [sp, #8]
 80044d0:	2001      	movs	r0, #1
 80044d2:	4240      	negs	r0, r0
 80044d4:	17c1      	asrs	r1, r0, #31
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10e      	bne.n	80044f8 <_strtoull_l.isra.0+0x130>
 80044da:	b00b      	add	sp, #44	@ 0x2c
 80044dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044de:	9a03      	ldr	r2, [sp, #12]
 80044e0:	2a00      	cmp	r2, #0
 80044e2:	d004      	beq.n	80044ee <_strtoull_l.isra.0+0x126>
 80044e4:	0005      	movs	r5, r0
 80044e6:	000e      	movs	r6, r1
 80044e8:	2100      	movs	r1, #0
 80044ea:	4268      	negs	r0, r5
 80044ec:	41b1      	sbcs	r1, r6
 80044ee:	9a02      	ldr	r2, [sp, #8]
 80044f0:	2a00      	cmp	r2, #0
 80044f2:	d0f2      	beq.n	80044da <_strtoull_l.isra.0+0x112>
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <_strtoull_l.isra.0+0x134>
 80044f8:	1e63      	subs	r3, r4, #1
 80044fa:	9301      	str	r3, [sp, #4]
 80044fc:	9b02      	ldr	r3, [sp, #8]
 80044fe:	9a01      	ldr	r2, [sp, #4]
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	e7ea      	b.n	80044da <_strtoull_l.isra.0+0x112>
 8004504:	08005191 	.word	0x08005191

08004508 <strtoull>:
 8004508:	b510      	push	{r4, lr}
 800450a:	4c04      	ldr	r4, [pc, #16]	@ (800451c <strtoull+0x14>)
 800450c:	0013      	movs	r3, r2
 800450e:	000a      	movs	r2, r1
 8004510:	0001      	movs	r1, r0
 8004512:	6820      	ldr	r0, [r4, #0]
 8004514:	f7ff ff58 	bl	80043c8 <_strtoull_l.isra.0>
 8004518:	bd10      	pop	{r4, pc}
 800451a:	46c0      	nop			@ (mov r8, r8)
 800451c:	2000000c 	.word	0x2000000c

08004520 <sniprintf>:
 8004520:	b40c      	push	{r2, r3}
 8004522:	b530      	push	{r4, r5, lr}
 8004524:	4b18      	ldr	r3, [pc, #96]	@ (8004588 <sniprintf+0x68>)
 8004526:	000c      	movs	r4, r1
 8004528:	681d      	ldr	r5, [r3, #0]
 800452a:	b09d      	sub	sp, #116	@ 0x74
 800452c:	2900      	cmp	r1, #0
 800452e:	da08      	bge.n	8004542 <sniprintf+0x22>
 8004530:	238b      	movs	r3, #139	@ 0x8b
 8004532:	2001      	movs	r0, #1
 8004534:	602b      	str	r3, [r5, #0]
 8004536:	4240      	negs	r0, r0
 8004538:	b01d      	add	sp, #116	@ 0x74
 800453a:	bc30      	pop	{r4, r5}
 800453c:	bc08      	pop	{r3}
 800453e:	b002      	add	sp, #8
 8004540:	4718      	bx	r3
 8004542:	2382      	movs	r3, #130	@ 0x82
 8004544:	466a      	mov	r2, sp
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	8293      	strh	r3, [r2, #20]
 800454a:	2300      	movs	r3, #0
 800454c:	9002      	str	r0, [sp, #8]
 800454e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004550:	9006      	str	r0, [sp, #24]
 8004552:	4299      	cmp	r1, r3
 8004554:	d000      	beq.n	8004558 <sniprintf+0x38>
 8004556:	1e4b      	subs	r3, r1, #1
 8004558:	9304      	str	r3, [sp, #16]
 800455a:	9307      	str	r3, [sp, #28]
 800455c:	2301      	movs	r3, #1
 800455e:	466a      	mov	r2, sp
 8004560:	425b      	negs	r3, r3
 8004562:	82d3      	strh	r3, [r2, #22]
 8004564:	0028      	movs	r0, r5
 8004566:	ab21      	add	r3, sp, #132	@ 0x84
 8004568:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800456a:	a902      	add	r1, sp, #8
 800456c:	9301      	str	r3, [sp, #4]
 800456e:	f000 fa21 	bl	80049b4 <_svfiprintf_r>
 8004572:	1c43      	adds	r3, r0, #1
 8004574:	da01      	bge.n	800457a <sniprintf+0x5a>
 8004576:	238b      	movs	r3, #139	@ 0x8b
 8004578:	602b      	str	r3, [r5, #0]
 800457a:	2c00      	cmp	r4, #0
 800457c:	d0dc      	beq.n	8004538 <sniprintf+0x18>
 800457e:	2200      	movs	r2, #0
 8004580:	9b02      	ldr	r3, [sp, #8]
 8004582:	701a      	strb	r2, [r3, #0]
 8004584:	e7d8      	b.n	8004538 <sniprintf+0x18>
 8004586:	46c0      	nop			@ (mov r8, r8)
 8004588:	2000000c 	.word	0x2000000c

0800458c <_vsniprintf_r>:
 800458c:	b530      	push	{r4, r5, lr}
 800458e:	0005      	movs	r5, r0
 8004590:	0014      	movs	r4, r2
 8004592:	0008      	movs	r0, r1
 8004594:	001a      	movs	r2, r3
 8004596:	b09b      	sub	sp, #108	@ 0x6c
 8004598:	2c00      	cmp	r4, #0
 800459a:	da05      	bge.n	80045a8 <_vsniprintf_r+0x1c>
 800459c:	238b      	movs	r3, #139	@ 0x8b
 800459e:	2001      	movs	r0, #1
 80045a0:	602b      	str	r3, [r5, #0]
 80045a2:	4240      	negs	r0, r0
 80045a4:	b01b      	add	sp, #108	@ 0x6c
 80045a6:	bd30      	pop	{r4, r5, pc}
 80045a8:	2382      	movs	r3, #130	@ 0x82
 80045aa:	4669      	mov	r1, sp
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	818b      	strh	r3, [r1, #12]
 80045b0:	2100      	movs	r1, #0
 80045b2:	9000      	str	r0, [sp, #0]
 80045b4:	9119      	str	r1, [sp, #100]	@ 0x64
 80045b6:	9004      	str	r0, [sp, #16]
 80045b8:	428c      	cmp	r4, r1
 80045ba:	d000      	beq.n	80045be <_vsniprintf_r+0x32>
 80045bc:	1e61      	subs	r1, r4, #1
 80045be:	2301      	movs	r3, #1
 80045c0:	9102      	str	r1, [sp, #8]
 80045c2:	9105      	str	r1, [sp, #20]
 80045c4:	4669      	mov	r1, sp
 80045c6:	425b      	negs	r3, r3
 80045c8:	81cb      	strh	r3, [r1, #14]
 80045ca:	0028      	movs	r0, r5
 80045cc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80045ce:	f000 f9f1 	bl	80049b4 <_svfiprintf_r>
 80045d2:	1c43      	adds	r3, r0, #1
 80045d4:	da01      	bge.n	80045da <_vsniprintf_r+0x4e>
 80045d6:	238b      	movs	r3, #139	@ 0x8b
 80045d8:	602b      	str	r3, [r5, #0]
 80045da:	2c00      	cmp	r4, #0
 80045dc:	d0e2      	beq.n	80045a4 <_vsniprintf_r+0x18>
 80045de:	2200      	movs	r2, #0
 80045e0:	9b00      	ldr	r3, [sp, #0]
 80045e2:	701a      	strb	r2, [r3, #0]
 80045e4:	e7de      	b.n	80045a4 <_vsniprintf_r+0x18>
	...

080045e8 <vsniprintf>:
 80045e8:	b513      	push	{r0, r1, r4, lr}
 80045ea:	4c04      	ldr	r4, [pc, #16]	@ (80045fc <vsniprintf+0x14>)
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	0013      	movs	r3, r2
 80045f0:	000a      	movs	r2, r1
 80045f2:	0001      	movs	r1, r0
 80045f4:	6820      	ldr	r0, [r4, #0]
 80045f6:	f7ff ffc9 	bl	800458c <_vsniprintf_r>
 80045fa:	bd16      	pop	{r1, r2, r4, pc}
 80045fc:	2000000c 	.word	0x2000000c

08004600 <memmove>:
 8004600:	b510      	push	{r4, lr}
 8004602:	4288      	cmp	r0, r1
 8004604:	d902      	bls.n	800460c <memmove+0xc>
 8004606:	188b      	adds	r3, r1, r2
 8004608:	4298      	cmp	r0, r3
 800460a:	d308      	bcc.n	800461e <memmove+0x1e>
 800460c:	2300      	movs	r3, #0
 800460e:	429a      	cmp	r2, r3
 8004610:	d007      	beq.n	8004622 <memmove+0x22>
 8004612:	5ccc      	ldrb	r4, [r1, r3]
 8004614:	54c4      	strb	r4, [r0, r3]
 8004616:	3301      	adds	r3, #1
 8004618:	e7f9      	b.n	800460e <memmove+0xe>
 800461a:	5c8b      	ldrb	r3, [r1, r2]
 800461c:	5483      	strb	r3, [r0, r2]
 800461e:	3a01      	subs	r2, #1
 8004620:	d2fb      	bcs.n	800461a <memmove+0x1a>
 8004622:	bd10      	pop	{r4, pc}

08004624 <memset>:
 8004624:	0003      	movs	r3, r0
 8004626:	1882      	adds	r2, r0, r2
 8004628:	4293      	cmp	r3, r2
 800462a:	d100      	bne.n	800462e <memset+0xa>
 800462c:	4770      	bx	lr
 800462e:	7019      	strb	r1, [r3, #0]
 8004630:	3301      	adds	r3, #1
 8004632:	e7f9      	b.n	8004628 <memset+0x4>

08004634 <strchr>:
 8004634:	b2c9      	uxtb	r1, r1
 8004636:	7803      	ldrb	r3, [r0, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d004      	beq.n	8004646 <strchr+0x12>
 800463c:	428b      	cmp	r3, r1
 800463e:	d100      	bne.n	8004642 <strchr+0xe>
 8004640:	4770      	bx	lr
 8004642:	3001      	adds	r0, #1
 8004644:	e7f7      	b.n	8004636 <strchr+0x2>
 8004646:	424b      	negs	r3, r1
 8004648:	4159      	adcs	r1, r3
 800464a:	4249      	negs	r1, r1
 800464c:	4008      	ands	r0, r1
 800464e:	e7f7      	b.n	8004640 <strchr+0xc>

08004650 <strncpy>:
 8004650:	0003      	movs	r3, r0
 8004652:	b530      	push	{r4, r5, lr}
 8004654:	001d      	movs	r5, r3
 8004656:	2a00      	cmp	r2, #0
 8004658:	d006      	beq.n	8004668 <strncpy+0x18>
 800465a:	780c      	ldrb	r4, [r1, #0]
 800465c:	3a01      	subs	r2, #1
 800465e:	3301      	adds	r3, #1
 8004660:	702c      	strb	r4, [r5, #0]
 8004662:	3101      	adds	r1, #1
 8004664:	2c00      	cmp	r4, #0
 8004666:	d1f5      	bne.n	8004654 <strncpy+0x4>
 8004668:	2100      	movs	r1, #0
 800466a:	189a      	adds	r2, r3, r2
 800466c:	4293      	cmp	r3, r2
 800466e:	d100      	bne.n	8004672 <strncpy+0x22>
 8004670:	bd30      	pop	{r4, r5, pc}
 8004672:	7019      	strb	r1, [r3, #0]
 8004674:	3301      	adds	r3, #1
 8004676:	e7f9      	b.n	800466c <strncpy+0x1c>

08004678 <strnlen>:
 8004678:	0003      	movs	r3, r0
 800467a:	1841      	adds	r1, r0, r1
 800467c:	428b      	cmp	r3, r1
 800467e:	d002      	beq.n	8004686 <strnlen+0xe>
 8004680:	781a      	ldrb	r2, [r3, #0]
 8004682:	2a00      	cmp	r2, #0
 8004684:	d101      	bne.n	800468a <strnlen+0x12>
 8004686:	1a18      	subs	r0, r3, r0
 8004688:	4770      	bx	lr
 800468a:	3301      	adds	r3, #1
 800468c:	e7f6      	b.n	800467c <strnlen+0x4>
	...

08004690 <__errno>:
 8004690:	4b01      	ldr	r3, [pc, #4]	@ (8004698 <__errno+0x8>)
 8004692:	6818      	ldr	r0, [r3, #0]
 8004694:	4770      	bx	lr
 8004696:	46c0      	nop			@ (mov r8, r8)
 8004698:	2000000c 	.word	0x2000000c

0800469c <__libc_init_array>:
 800469c:	b570      	push	{r4, r5, r6, lr}
 800469e:	2600      	movs	r6, #0
 80046a0:	4c0c      	ldr	r4, [pc, #48]	@ (80046d4 <__libc_init_array+0x38>)
 80046a2:	4d0d      	ldr	r5, [pc, #52]	@ (80046d8 <__libc_init_array+0x3c>)
 80046a4:	1b64      	subs	r4, r4, r5
 80046a6:	10a4      	asrs	r4, r4, #2
 80046a8:	42a6      	cmp	r6, r4
 80046aa:	d109      	bne.n	80046c0 <__libc_init_array+0x24>
 80046ac:	2600      	movs	r6, #0
 80046ae:	f000 fc51 	bl	8004f54 <_init>
 80046b2:	4c0a      	ldr	r4, [pc, #40]	@ (80046dc <__libc_init_array+0x40>)
 80046b4:	4d0a      	ldr	r5, [pc, #40]	@ (80046e0 <__libc_init_array+0x44>)
 80046b6:	1b64      	subs	r4, r4, r5
 80046b8:	10a4      	asrs	r4, r4, #2
 80046ba:	42a6      	cmp	r6, r4
 80046bc:	d105      	bne.n	80046ca <__libc_init_array+0x2e>
 80046be:	bd70      	pop	{r4, r5, r6, pc}
 80046c0:	00b3      	lsls	r3, r6, #2
 80046c2:	58eb      	ldr	r3, [r5, r3]
 80046c4:	4798      	blx	r3
 80046c6:	3601      	adds	r6, #1
 80046c8:	e7ee      	b.n	80046a8 <__libc_init_array+0xc>
 80046ca:	00b3      	lsls	r3, r6, #2
 80046cc:	58eb      	ldr	r3, [r5, r3]
 80046ce:	4798      	blx	r3
 80046d0:	3601      	adds	r6, #1
 80046d2:	e7f2      	b.n	80046ba <__libc_init_array+0x1e>
 80046d4:	0800529c 	.word	0x0800529c
 80046d8:	0800529c 	.word	0x0800529c
 80046dc:	080052a0 	.word	0x080052a0
 80046e0:	0800529c 	.word	0x0800529c

080046e4 <__retarget_lock_acquire_recursive>:
 80046e4:	4770      	bx	lr

080046e6 <__retarget_lock_release_recursive>:
 80046e6:	4770      	bx	lr

080046e8 <memcpy>:
 80046e8:	2300      	movs	r3, #0
 80046ea:	b510      	push	{r4, lr}
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d100      	bne.n	80046f2 <memcpy+0xa>
 80046f0:	bd10      	pop	{r4, pc}
 80046f2:	5ccc      	ldrb	r4, [r1, r3]
 80046f4:	54c4      	strb	r4, [r0, r3]
 80046f6:	3301      	adds	r3, #1
 80046f8:	e7f8      	b.n	80046ec <memcpy+0x4>
	...

080046fc <_free_r>:
 80046fc:	b570      	push	{r4, r5, r6, lr}
 80046fe:	0005      	movs	r5, r0
 8004700:	1e0c      	subs	r4, r1, #0
 8004702:	d010      	beq.n	8004726 <_free_r+0x2a>
 8004704:	3c04      	subs	r4, #4
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	da00      	bge.n	800470e <_free_r+0x12>
 800470c:	18e4      	adds	r4, r4, r3
 800470e:	0028      	movs	r0, r5
 8004710:	f000 f8e0 	bl	80048d4 <__malloc_lock>
 8004714:	4a1d      	ldr	r2, [pc, #116]	@ (800478c <_free_r+0x90>)
 8004716:	6813      	ldr	r3, [r2, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d105      	bne.n	8004728 <_free_r+0x2c>
 800471c:	6063      	str	r3, [r4, #4]
 800471e:	6014      	str	r4, [r2, #0]
 8004720:	0028      	movs	r0, r5
 8004722:	f000 f8df 	bl	80048e4 <__malloc_unlock>
 8004726:	bd70      	pop	{r4, r5, r6, pc}
 8004728:	42a3      	cmp	r3, r4
 800472a:	d908      	bls.n	800473e <_free_r+0x42>
 800472c:	6820      	ldr	r0, [r4, #0]
 800472e:	1821      	adds	r1, r4, r0
 8004730:	428b      	cmp	r3, r1
 8004732:	d1f3      	bne.n	800471c <_free_r+0x20>
 8004734:	6819      	ldr	r1, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	1809      	adds	r1, r1, r0
 800473a:	6021      	str	r1, [r4, #0]
 800473c:	e7ee      	b.n	800471c <_free_r+0x20>
 800473e:	001a      	movs	r2, r3
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <_free_r+0x4e>
 8004746:	42a3      	cmp	r3, r4
 8004748:	d9f9      	bls.n	800473e <_free_r+0x42>
 800474a:	6811      	ldr	r1, [r2, #0]
 800474c:	1850      	adds	r0, r2, r1
 800474e:	42a0      	cmp	r0, r4
 8004750:	d10b      	bne.n	800476a <_free_r+0x6e>
 8004752:	6820      	ldr	r0, [r4, #0]
 8004754:	1809      	adds	r1, r1, r0
 8004756:	1850      	adds	r0, r2, r1
 8004758:	6011      	str	r1, [r2, #0]
 800475a:	4283      	cmp	r3, r0
 800475c:	d1e0      	bne.n	8004720 <_free_r+0x24>
 800475e:	6818      	ldr	r0, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	1841      	adds	r1, r0, r1
 8004764:	6011      	str	r1, [r2, #0]
 8004766:	6053      	str	r3, [r2, #4]
 8004768:	e7da      	b.n	8004720 <_free_r+0x24>
 800476a:	42a0      	cmp	r0, r4
 800476c:	d902      	bls.n	8004774 <_free_r+0x78>
 800476e:	230c      	movs	r3, #12
 8004770:	602b      	str	r3, [r5, #0]
 8004772:	e7d5      	b.n	8004720 <_free_r+0x24>
 8004774:	6820      	ldr	r0, [r4, #0]
 8004776:	1821      	adds	r1, r4, r0
 8004778:	428b      	cmp	r3, r1
 800477a:	d103      	bne.n	8004784 <_free_r+0x88>
 800477c:	6819      	ldr	r1, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	1809      	adds	r1, r1, r0
 8004782:	6021      	str	r1, [r4, #0]
 8004784:	6063      	str	r3, [r4, #4]
 8004786:	6054      	str	r4, [r2, #4]
 8004788:	e7ca      	b.n	8004720 <_free_r+0x24>
 800478a:	46c0      	nop			@ (mov r8, r8)
 800478c:	20000564 	.word	0x20000564

08004790 <sbrk_aligned>:
 8004790:	b570      	push	{r4, r5, r6, lr}
 8004792:	4e0f      	ldr	r6, [pc, #60]	@ (80047d0 <sbrk_aligned+0x40>)
 8004794:	000d      	movs	r5, r1
 8004796:	6831      	ldr	r1, [r6, #0]
 8004798:	0004      	movs	r4, r0
 800479a:	2900      	cmp	r1, #0
 800479c:	d102      	bne.n	80047a4 <sbrk_aligned+0x14>
 800479e:	f000 fb83 	bl	8004ea8 <_sbrk_r>
 80047a2:	6030      	str	r0, [r6, #0]
 80047a4:	0029      	movs	r1, r5
 80047a6:	0020      	movs	r0, r4
 80047a8:	f000 fb7e 	bl	8004ea8 <_sbrk_r>
 80047ac:	1c43      	adds	r3, r0, #1
 80047ae:	d103      	bne.n	80047b8 <sbrk_aligned+0x28>
 80047b0:	2501      	movs	r5, #1
 80047b2:	426d      	negs	r5, r5
 80047b4:	0028      	movs	r0, r5
 80047b6:	bd70      	pop	{r4, r5, r6, pc}
 80047b8:	2303      	movs	r3, #3
 80047ba:	1cc5      	adds	r5, r0, #3
 80047bc:	439d      	bics	r5, r3
 80047be:	42a8      	cmp	r0, r5
 80047c0:	d0f8      	beq.n	80047b4 <sbrk_aligned+0x24>
 80047c2:	1a29      	subs	r1, r5, r0
 80047c4:	0020      	movs	r0, r4
 80047c6:	f000 fb6f 	bl	8004ea8 <_sbrk_r>
 80047ca:	3001      	adds	r0, #1
 80047cc:	d1f2      	bne.n	80047b4 <sbrk_aligned+0x24>
 80047ce:	e7ef      	b.n	80047b0 <sbrk_aligned+0x20>
 80047d0:	20000560 	.word	0x20000560

080047d4 <_malloc_r>:
 80047d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047d6:	2203      	movs	r2, #3
 80047d8:	1ccb      	adds	r3, r1, #3
 80047da:	4393      	bics	r3, r2
 80047dc:	3308      	adds	r3, #8
 80047de:	0005      	movs	r5, r0
 80047e0:	001f      	movs	r7, r3
 80047e2:	2b0c      	cmp	r3, #12
 80047e4:	d234      	bcs.n	8004850 <_malloc_r+0x7c>
 80047e6:	270c      	movs	r7, #12
 80047e8:	42b9      	cmp	r1, r7
 80047ea:	d833      	bhi.n	8004854 <_malloc_r+0x80>
 80047ec:	0028      	movs	r0, r5
 80047ee:	f000 f871 	bl	80048d4 <__malloc_lock>
 80047f2:	4e37      	ldr	r6, [pc, #220]	@ (80048d0 <_malloc_r+0xfc>)
 80047f4:	6833      	ldr	r3, [r6, #0]
 80047f6:	001c      	movs	r4, r3
 80047f8:	2c00      	cmp	r4, #0
 80047fa:	d12f      	bne.n	800485c <_malloc_r+0x88>
 80047fc:	0039      	movs	r1, r7
 80047fe:	0028      	movs	r0, r5
 8004800:	f7ff ffc6 	bl	8004790 <sbrk_aligned>
 8004804:	0004      	movs	r4, r0
 8004806:	1c43      	adds	r3, r0, #1
 8004808:	d15f      	bne.n	80048ca <_malloc_r+0xf6>
 800480a:	6834      	ldr	r4, [r6, #0]
 800480c:	9400      	str	r4, [sp, #0]
 800480e:	9b00      	ldr	r3, [sp, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d14a      	bne.n	80048aa <_malloc_r+0xd6>
 8004814:	2c00      	cmp	r4, #0
 8004816:	d052      	beq.n	80048be <_malloc_r+0xea>
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	0028      	movs	r0, r5
 800481c:	18e3      	adds	r3, r4, r3
 800481e:	9900      	ldr	r1, [sp, #0]
 8004820:	9301      	str	r3, [sp, #4]
 8004822:	f000 fb41 	bl	8004ea8 <_sbrk_r>
 8004826:	9b01      	ldr	r3, [sp, #4]
 8004828:	4283      	cmp	r3, r0
 800482a:	d148      	bne.n	80048be <_malloc_r+0xea>
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	0028      	movs	r0, r5
 8004830:	1aff      	subs	r7, r7, r3
 8004832:	0039      	movs	r1, r7
 8004834:	f7ff ffac 	bl	8004790 <sbrk_aligned>
 8004838:	3001      	adds	r0, #1
 800483a:	d040      	beq.n	80048be <_malloc_r+0xea>
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	19db      	adds	r3, r3, r7
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	6833      	ldr	r3, [r6, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	2a00      	cmp	r2, #0
 8004848:	d133      	bne.n	80048b2 <_malloc_r+0xde>
 800484a:	9b00      	ldr	r3, [sp, #0]
 800484c:	6033      	str	r3, [r6, #0]
 800484e:	e019      	b.n	8004884 <_malloc_r+0xb0>
 8004850:	2b00      	cmp	r3, #0
 8004852:	dac9      	bge.n	80047e8 <_malloc_r+0x14>
 8004854:	230c      	movs	r3, #12
 8004856:	602b      	str	r3, [r5, #0]
 8004858:	2000      	movs	r0, #0
 800485a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800485c:	6821      	ldr	r1, [r4, #0]
 800485e:	1bc9      	subs	r1, r1, r7
 8004860:	d420      	bmi.n	80048a4 <_malloc_r+0xd0>
 8004862:	290b      	cmp	r1, #11
 8004864:	d90a      	bls.n	800487c <_malloc_r+0xa8>
 8004866:	19e2      	adds	r2, r4, r7
 8004868:	6027      	str	r7, [r4, #0]
 800486a:	42a3      	cmp	r3, r4
 800486c:	d104      	bne.n	8004878 <_malloc_r+0xa4>
 800486e:	6032      	str	r2, [r6, #0]
 8004870:	6863      	ldr	r3, [r4, #4]
 8004872:	6011      	str	r1, [r2, #0]
 8004874:	6053      	str	r3, [r2, #4]
 8004876:	e005      	b.n	8004884 <_malloc_r+0xb0>
 8004878:	605a      	str	r2, [r3, #4]
 800487a:	e7f9      	b.n	8004870 <_malloc_r+0x9c>
 800487c:	6862      	ldr	r2, [r4, #4]
 800487e:	42a3      	cmp	r3, r4
 8004880:	d10e      	bne.n	80048a0 <_malloc_r+0xcc>
 8004882:	6032      	str	r2, [r6, #0]
 8004884:	0028      	movs	r0, r5
 8004886:	f000 f82d 	bl	80048e4 <__malloc_unlock>
 800488a:	0020      	movs	r0, r4
 800488c:	2207      	movs	r2, #7
 800488e:	300b      	adds	r0, #11
 8004890:	1d23      	adds	r3, r4, #4
 8004892:	4390      	bics	r0, r2
 8004894:	1ac2      	subs	r2, r0, r3
 8004896:	4298      	cmp	r0, r3
 8004898:	d0df      	beq.n	800485a <_malloc_r+0x86>
 800489a:	1a1b      	subs	r3, r3, r0
 800489c:	50a3      	str	r3, [r4, r2]
 800489e:	e7dc      	b.n	800485a <_malloc_r+0x86>
 80048a0:	605a      	str	r2, [r3, #4]
 80048a2:	e7ef      	b.n	8004884 <_malloc_r+0xb0>
 80048a4:	0023      	movs	r3, r4
 80048a6:	6864      	ldr	r4, [r4, #4]
 80048a8:	e7a6      	b.n	80047f8 <_malloc_r+0x24>
 80048aa:	9c00      	ldr	r4, [sp, #0]
 80048ac:	6863      	ldr	r3, [r4, #4]
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	e7ad      	b.n	800480e <_malloc_r+0x3a>
 80048b2:	001a      	movs	r2, r3
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	42a3      	cmp	r3, r4
 80048b8:	d1fb      	bne.n	80048b2 <_malloc_r+0xde>
 80048ba:	2300      	movs	r3, #0
 80048bc:	e7da      	b.n	8004874 <_malloc_r+0xa0>
 80048be:	230c      	movs	r3, #12
 80048c0:	0028      	movs	r0, r5
 80048c2:	602b      	str	r3, [r5, #0]
 80048c4:	f000 f80e 	bl	80048e4 <__malloc_unlock>
 80048c8:	e7c6      	b.n	8004858 <_malloc_r+0x84>
 80048ca:	6007      	str	r7, [r0, #0]
 80048cc:	e7da      	b.n	8004884 <_malloc_r+0xb0>
 80048ce:	46c0      	nop			@ (mov r8, r8)
 80048d0:	20000564 	.word	0x20000564

080048d4 <__malloc_lock>:
 80048d4:	b510      	push	{r4, lr}
 80048d6:	4802      	ldr	r0, [pc, #8]	@ (80048e0 <__malloc_lock+0xc>)
 80048d8:	f7ff ff04 	bl	80046e4 <__retarget_lock_acquire_recursive>
 80048dc:	bd10      	pop	{r4, pc}
 80048de:	46c0      	nop			@ (mov r8, r8)
 80048e0:	2000055c 	.word	0x2000055c

080048e4 <__malloc_unlock>:
 80048e4:	b510      	push	{r4, lr}
 80048e6:	4802      	ldr	r0, [pc, #8]	@ (80048f0 <__malloc_unlock+0xc>)
 80048e8:	f7ff fefd 	bl	80046e6 <__retarget_lock_release_recursive>
 80048ec:	bd10      	pop	{r4, pc}
 80048ee:	46c0      	nop			@ (mov r8, r8)
 80048f0:	2000055c 	.word	0x2000055c

080048f4 <__ssputs_r>:
 80048f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f6:	688e      	ldr	r6, [r1, #8]
 80048f8:	b085      	sub	sp, #20
 80048fa:	001f      	movs	r7, r3
 80048fc:	000c      	movs	r4, r1
 80048fe:	680b      	ldr	r3, [r1, #0]
 8004900:	9002      	str	r0, [sp, #8]
 8004902:	9203      	str	r2, [sp, #12]
 8004904:	42be      	cmp	r6, r7
 8004906:	d830      	bhi.n	800496a <__ssputs_r+0x76>
 8004908:	210c      	movs	r1, #12
 800490a:	5e62      	ldrsh	r2, [r4, r1]
 800490c:	2190      	movs	r1, #144	@ 0x90
 800490e:	00c9      	lsls	r1, r1, #3
 8004910:	420a      	tst	r2, r1
 8004912:	d028      	beq.n	8004966 <__ssputs_r+0x72>
 8004914:	2003      	movs	r0, #3
 8004916:	6921      	ldr	r1, [r4, #16]
 8004918:	1a5b      	subs	r3, r3, r1
 800491a:	9301      	str	r3, [sp, #4]
 800491c:	6963      	ldr	r3, [r4, #20]
 800491e:	4343      	muls	r3, r0
 8004920:	9801      	ldr	r0, [sp, #4]
 8004922:	0fdd      	lsrs	r5, r3, #31
 8004924:	18ed      	adds	r5, r5, r3
 8004926:	1c7b      	adds	r3, r7, #1
 8004928:	181b      	adds	r3, r3, r0
 800492a:	106d      	asrs	r5, r5, #1
 800492c:	42ab      	cmp	r3, r5
 800492e:	d900      	bls.n	8004932 <__ssputs_r+0x3e>
 8004930:	001d      	movs	r5, r3
 8004932:	0552      	lsls	r2, r2, #21
 8004934:	d528      	bpl.n	8004988 <__ssputs_r+0x94>
 8004936:	0029      	movs	r1, r5
 8004938:	9802      	ldr	r0, [sp, #8]
 800493a:	f7ff ff4b 	bl	80047d4 <_malloc_r>
 800493e:	1e06      	subs	r6, r0, #0
 8004940:	d02c      	beq.n	800499c <__ssputs_r+0xa8>
 8004942:	9a01      	ldr	r2, [sp, #4]
 8004944:	6921      	ldr	r1, [r4, #16]
 8004946:	f7ff fecf 	bl	80046e8 <memcpy>
 800494a:	89a2      	ldrh	r2, [r4, #12]
 800494c:	4b18      	ldr	r3, [pc, #96]	@ (80049b0 <__ssputs_r+0xbc>)
 800494e:	401a      	ands	r2, r3
 8004950:	2380      	movs	r3, #128	@ 0x80
 8004952:	4313      	orrs	r3, r2
 8004954:	81a3      	strh	r3, [r4, #12]
 8004956:	9b01      	ldr	r3, [sp, #4]
 8004958:	6126      	str	r6, [r4, #16]
 800495a:	18f6      	adds	r6, r6, r3
 800495c:	6026      	str	r6, [r4, #0]
 800495e:	003e      	movs	r6, r7
 8004960:	6165      	str	r5, [r4, #20]
 8004962:	1aed      	subs	r5, r5, r3
 8004964:	60a5      	str	r5, [r4, #8]
 8004966:	42be      	cmp	r6, r7
 8004968:	d900      	bls.n	800496c <__ssputs_r+0x78>
 800496a:	003e      	movs	r6, r7
 800496c:	0032      	movs	r2, r6
 800496e:	9903      	ldr	r1, [sp, #12]
 8004970:	6820      	ldr	r0, [r4, #0]
 8004972:	f7ff fe45 	bl	8004600 <memmove>
 8004976:	2000      	movs	r0, #0
 8004978:	68a3      	ldr	r3, [r4, #8]
 800497a:	1b9b      	subs	r3, r3, r6
 800497c:	60a3      	str	r3, [r4, #8]
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	199b      	adds	r3, r3, r6
 8004982:	6023      	str	r3, [r4, #0]
 8004984:	b005      	add	sp, #20
 8004986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004988:	002a      	movs	r2, r5
 800498a:	9802      	ldr	r0, [sp, #8]
 800498c:	f000 faa9 	bl	8004ee2 <_realloc_r>
 8004990:	1e06      	subs	r6, r0, #0
 8004992:	d1e0      	bne.n	8004956 <__ssputs_r+0x62>
 8004994:	6921      	ldr	r1, [r4, #16]
 8004996:	9802      	ldr	r0, [sp, #8]
 8004998:	f7ff feb0 	bl	80046fc <_free_r>
 800499c:	230c      	movs	r3, #12
 800499e:	2001      	movs	r0, #1
 80049a0:	9a02      	ldr	r2, [sp, #8]
 80049a2:	4240      	negs	r0, r0
 80049a4:	6013      	str	r3, [r2, #0]
 80049a6:	89a2      	ldrh	r2, [r4, #12]
 80049a8:	3334      	adds	r3, #52	@ 0x34
 80049aa:	4313      	orrs	r3, r2
 80049ac:	81a3      	strh	r3, [r4, #12]
 80049ae:	e7e9      	b.n	8004984 <__ssputs_r+0x90>
 80049b0:	fffffb7f 	.word	0xfffffb7f

080049b4 <_svfiprintf_r>:
 80049b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049b6:	b0a1      	sub	sp, #132	@ 0x84
 80049b8:	9003      	str	r0, [sp, #12]
 80049ba:	001d      	movs	r5, r3
 80049bc:	898b      	ldrh	r3, [r1, #12]
 80049be:	000f      	movs	r7, r1
 80049c0:	0016      	movs	r6, r2
 80049c2:	061b      	lsls	r3, r3, #24
 80049c4:	d511      	bpl.n	80049ea <_svfiprintf_r+0x36>
 80049c6:	690b      	ldr	r3, [r1, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10e      	bne.n	80049ea <_svfiprintf_r+0x36>
 80049cc:	2140      	movs	r1, #64	@ 0x40
 80049ce:	f7ff ff01 	bl	80047d4 <_malloc_r>
 80049d2:	6038      	str	r0, [r7, #0]
 80049d4:	6138      	str	r0, [r7, #16]
 80049d6:	2800      	cmp	r0, #0
 80049d8:	d105      	bne.n	80049e6 <_svfiprintf_r+0x32>
 80049da:	230c      	movs	r3, #12
 80049dc:	9a03      	ldr	r2, [sp, #12]
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	2001      	movs	r0, #1
 80049e2:	4240      	negs	r0, r0
 80049e4:	e0cf      	b.n	8004b86 <_svfiprintf_r+0x1d2>
 80049e6:	2340      	movs	r3, #64	@ 0x40
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	2300      	movs	r3, #0
 80049ec:	ac08      	add	r4, sp, #32
 80049ee:	6163      	str	r3, [r4, #20]
 80049f0:	3320      	adds	r3, #32
 80049f2:	7663      	strb	r3, [r4, #25]
 80049f4:	3310      	adds	r3, #16
 80049f6:	76a3      	strb	r3, [r4, #26]
 80049f8:	9507      	str	r5, [sp, #28]
 80049fa:	0035      	movs	r5, r6
 80049fc:	782b      	ldrb	r3, [r5, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <_svfiprintf_r+0x52>
 8004a02:	2b25      	cmp	r3, #37	@ 0x25
 8004a04:	d148      	bne.n	8004a98 <_svfiprintf_r+0xe4>
 8004a06:	1bab      	subs	r3, r5, r6
 8004a08:	9305      	str	r3, [sp, #20]
 8004a0a:	42b5      	cmp	r5, r6
 8004a0c:	d00b      	beq.n	8004a26 <_svfiprintf_r+0x72>
 8004a0e:	0032      	movs	r2, r6
 8004a10:	0039      	movs	r1, r7
 8004a12:	9803      	ldr	r0, [sp, #12]
 8004a14:	f7ff ff6e 	bl	80048f4 <__ssputs_r>
 8004a18:	3001      	adds	r0, #1
 8004a1a:	d100      	bne.n	8004a1e <_svfiprintf_r+0x6a>
 8004a1c:	e0ae      	b.n	8004b7c <_svfiprintf_r+0x1c8>
 8004a1e:	6963      	ldr	r3, [r4, #20]
 8004a20:	9a05      	ldr	r2, [sp, #20]
 8004a22:	189b      	adds	r3, r3, r2
 8004a24:	6163      	str	r3, [r4, #20]
 8004a26:	782b      	ldrb	r3, [r5, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d100      	bne.n	8004a2e <_svfiprintf_r+0x7a>
 8004a2c:	e0a6      	b.n	8004b7c <_svfiprintf_r+0x1c8>
 8004a2e:	2201      	movs	r2, #1
 8004a30:	2300      	movs	r3, #0
 8004a32:	4252      	negs	r2, r2
 8004a34:	6062      	str	r2, [r4, #4]
 8004a36:	a904      	add	r1, sp, #16
 8004a38:	3254      	adds	r2, #84	@ 0x54
 8004a3a:	1852      	adds	r2, r2, r1
 8004a3c:	1c6e      	adds	r6, r5, #1
 8004a3e:	6023      	str	r3, [r4, #0]
 8004a40:	60e3      	str	r3, [r4, #12]
 8004a42:	60a3      	str	r3, [r4, #8]
 8004a44:	7013      	strb	r3, [r2, #0]
 8004a46:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004a48:	4b54      	ldr	r3, [pc, #336]	@ (8004b9c <_svfiprintf_r+0x1e8>)
 8004a4a:	2205      	movs	r2, #5
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	7831      	ldrb	r1, [r6, #0]
 8004a50:	9305      	str	r3, [sp, #20]
 8004a52:	f000 fa3b 	bl	8004ecc <memchr>
 8004a56:	1c75      	adds	r5, r6, #1
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	d11f      	bne.n	8004a9c <_svfiprintf_r+0xe8>
 8004a5c:	6822      	ldr	r2, [r4, #0]
 8004a5e:	06d3      	lsls	r3, r2, #27
 8004a60:	d504      	bpl.n	8004a6c <_svfiprintf_r+0xb8>
 8004a62:	2353      	movs	r3, #83	@ 0x53
 8004a64:	a904      	add	r1, sp, #16
 8004a66:	185b      	adds	r3, r3, r1
 8004a68:	2120      	movs	r1, #32
 8004a6a:	7019      	strb	r1, [r3, #0]
 8004a6c:	0713      	lsls	r3, r2, #28
 8004a6e:	d504      	bpl.n	8004a7a <_svfiprintf_r+0xc6>
 8004a70:	2353      	movs	r3, #83	@ 0x53
 8004a72:	a904      	add	r1, sp, #16
 8004a74:	185b      	adds	r3, r3, r1
 8004a76:	212b      	movs	r1, #43	@ 0x2b
 8004a78:	7019      	strb	r1, [r3, #0]
 8004a7a:	7833      	ldrb	r3, [r6, #0]
 8004a7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a7e:	d016      	beq.n	8004aae <_svfiprintf_r+0xfa>
 8004a80:	0035      	movs	r5, r6
 8004a82:	2100      	movs	r1, #0
 8004a84:	200a      	movs	r0, #10
 8004a86:	68e3      	ldr	r3, [r4, #12]
 8004a88:	782a      	ldrb	r2, [r5, #0]
 8004a8a:	1c6e      	adds	r6, r5, #1
 8004a8c:	3a30      	subs	r2, #48	@ 0x30
 8004a8e:	2a09      	cmp	r2, #9
 8004a90:	d950      	bls.n	8004b34 <_svfiprintf_r+0x180>
 8004a92:	2900      	cmp	r1, #0
 8004a94:	d111      	bne.n	8004aba <_svfiprintf_r+0x106>
 8004a96:	e017      	b.n	8004ac8 <_svfiprintf_r+0x114>
 8004a98:	3501      	adds	r5, #1
 8004a9a:	e7af      	b.n	80049fc <_svfiprintf_r+0x48>
 8004a9c:	9b05      	ldr	r3, [sp, #20]
 8004a9e:	6822      	ldr	r2, [r4, #0]
 8004aa0:	1ac0      	subs	r0, r0, r3
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	4083      	lsls	r3, r0
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	002e      	movs	r6, r5
 8004aaa:	6023      	str	r3, [r4, #0]
 8004aac:	e7cc      	b.n	8004a48 <_svfiprintf_r+0x94>
 8004aae:	9b07      	ldr	r3, [sp, #28]
 8004ab0:	1d19      	adds	r1, r3, #4
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	9107      	str	r1, [sp, #28]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	db01      	blt.n	8004abe <_svfiprintf_r+0x10a>
 8004aba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004abc:	e004      	b.n	8004ac8 <_svfiprintf_r+0x114>
 8004abe:	425b      	negs	r3, r3
 8004ac0:	60e3      	str	r3, [r4, #12]
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	6023      	str	r3, [r4, #0]
 8004ac8:	782b      	ldrb	r3, [r5, #0]
 8004aca:	2b2e      	cmp	r3, #46	@ 0x2e
 8004acc:	d10c      	bne.n	8004ae8 <_svfiprintf_r+0x134>
 8004ace:	786b      	ldrb	r3, [r5, #1]
 8004ad0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ad2:	d134      	bne.n	8004b3e <_svfiprintf_r+0x18a>
 8004ad4:	9b07      	ldr	r3, [sp, #28]
 8004ad6:	3502      	adds	r5, #2
 8004ad8:	1d1a      	adds	r2, r3, #4
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	9207      	str	r2, [sp, #28]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	da01      	bge.n	8004ae6 <_svfiprintf_r+0x132>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	425b      	negs	r3, r3
 8004ae6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ae8:	4e2d      	ldr	r6, [pc, #180]	@ (8004ba0 <_svfiprintf_r+0x1ec>)
 8004aea:	2203      	movs	r2, #3
 8004aec:	0030      	movs	r0, r6
 8004aee:	7829      	ldrb	r1, [r5, #0]
 8004af0:	f000 f9ec 	bl	8004ecc <memchr>
 8004af4:	2800      	cmp	r0, #0
 8004af6:	d006      	beq.n	8004b06 <_svfiprintf_r+0x152>
 8004af8:	2340      	movs	r3, #64	@ 0x40
 8004afa:	1b80      	subs	r0, r0, r6
 8004afc:	4083      	lsls	r3, r0
 8004afe:	6822      	ldr	r2, [r4, #0]
 8004b00:	3501      	adds	r5, #1
 8004b02:	4313      	orrs	r3, r2
 8004b04:	6023      	str	r3, [r4, #0]
 8004b06:	7829      	ldrb	r1, [r5, #0]
 8004b08:	2206      	movs	r2, #6
 8004b0a:	4826      	ldr	r0, [pc, #152]	@ (8004ba4 <_svfiprintf_r+0x1f0>)
 8004b0c:	1c6e      	adds	r6, r5, #1
 8004b0e:	7621      	strb	r1, [r4, #24]
 8004b10:	f000 f9dc 	bl	8004ecc <memchr>
 8004b14:	2800      	cmp	r0, #0
 8004b16:	d038      	beq.n	8004b8a <_svfiprintf_r+0x1d6>
 8004b18:	4b23      	ldr	r3, [pc, #140]	@ (8004ba8 <_svfiprintf_r+0x1f4>)
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d122      	bne.n	8004b64 <_svfiprintf_r+0x1b0>
 8004b1e:	2207      	movs	r2, #7
 8004b20:	9b07      	ldr	r3, [sp, #28]
 8004b22:	3307      	adds	r3, #7
 8004b24:	4393      	bics	r3, r2
 8004b26:	3308      	adds	r3, #8
 8004b28:	9307      	str	r3, [sp, #28]
 8004b2a:	6963      	ldr	r3, [r4, #20]
 8004b2c:	9a04      	ldr	r2, [sp, #16]
 8004b2e:	189b      	adds	r3, r3, r2
 8004b30:	6163      	str	r3, [r4, #20]
 8004b32:	e762      	b.n	80049fa <_svfiprintf_r+0x46>
 8004b34:	4343      	muls	r3, r0
 8004b36:	0035      	movs	r5, r6
 8004b38:	2101      	movs	r1, #1
 8004b3a:	189b      	adds	r3, r3, r2
 8004b3c:	e7a4      	b.n	8004a88 <_svfiprintf_r+0xd4>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	200a      	movs	r0, #10
 8004b42:	0019      	movs	r1, r3
 8004b44:	3501      	adds	r5, #1
 8004b46:	6063      	str	r3, [r4, #4]
 8004b48:	782a      	ldrb	r2, [r5, #0]
 8004b4a:	1c6e      	adds	r6, r5, #1
 8004b4c:	3a30      	subs	r2, #48	@ 0x30
 8004b4e:	2a09      	cmp	r2, #9
 8004b50:	d903      	bls.n	8004b5a <_svfiprintf_r+0x1a6>
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0c8      	beq.n	8004ae8 <_svfiprintf_r+0x134>
 8004b56:	9109      	str	r1, [sp, #36]	@ 0x24
 8004b58:	e7c6      	b.n	8004ae8 <_svfiprintf_r+0x134>
 8004b5a:	4341      	muls	r1, r0
 8004b5c:	0035      	movs	r5, r6
 8004b5e:	2301      	movs	r3, #1
 8004b60:	1889      	adds	r1, r1, r2
 8004b62:	e7f1      	b.n	8004b48 <_svfiprintf_r+0x194>
 8004b64:	aa07      	add	r2, sp, #28
 8004b66:	9200      	str	r2, [sp, #0]
 8004b68:	0021      	movs	r1, r4
 8004b6a:	003a      	movs	r2, r7
 8004b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8004bac <_svfiprintf_r+0x1f8>)
 8004b6e:	9803      	ldr	r0, [sp, #12]
 8004b70:	e000      	b.n	8004b74 <_svfiprintf_r+0x1c0>
 8004b72:	bf00      	nop
 8004b74:	9004      	str	r0, [sp, #16]
 8004b76:	9b04      	ldr	r3, [sp, #16]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	d1d6      	bne.n	8004b2a <_svfiprintf_r+0x176>
 8004b7c:	89bb      	ldrh	r3, [r7, #12]
 8004b7e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004b80:	065b      	lsls	r3, r3, #25
 8004b82:	d500      	bpl.n	8004b86 <_svfiprintf_r+0x1d2>
 8004b84:	e72c      	b.n	80049e0 <_svfiprintf_r+0x2c>
 8004b86:	b021      	add	sp, #132	@ 0x84
 8004b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b8a:	aa07      	add	r2, sp, #28
 8004b8c:	9200      	str	r2, [sp, #0]
 8004b8e:	0021      	movs	r1, r4
 8004b90:	003a      	movs	r2, r7
 8004b92:	4b06      	ldr	r3, [pc, #24]	@ (8004bac <_svfiprintf_r+0x1f8>)
 8004b94:	9803      	ldr	r0, [sp, #12]
 8004b96:	f000 f87b 	bl	8004c90 <_printf_i>
 8004b9a:	e7eb      	b.n	8004b74 <_svfiprintf_r+0x1c0>
 8004b9c:	080050a1 	.word	0x080050a1
 8004ba0:	080050a7 	.word	0x080050a7
 8004ba4:	080050ab 	.word	0x080050ab
 8004ba8:	00000000 	.word	0x00000000
 8004bac:	080048f5 	.word	0x080048f5

08004bb0 <_printf_common>:
 8004bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bb2:	0016      	movs	r6, r2
 8004bb4:	9301      	str	r3, [sp, #4]
 8004bb6:	688a      	ldr	r2, [r1, #8]
 8004bb8:	690b      	ldr	r3, [r1, #16]
 8004bba:	000c      	movs	r4, r1
 8004bbc:	9000      	str	r0, [sp, #0]
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	da00      	bge.n	8004bc4 <_printf_common+0x14>
 8004bc2:	0013      	movs	r3, r2
 8004bc4:	0022      	movs	r2, r4
 8004bc6:	6033      	str	r3, [r6, #0]
 8004bc8:	3243      	adds	r2, #67	@ 0x43
 8004bca:	7812      	ldrb	r2, [r2, #0]
 8004bcc:	2a00      	cmp	r2, #0
 8004bce:	d001      	beq.n	8004bd4 <_printf_common+0x24>
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	6033      	str	r3, [r6, #0]
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	069b      	lsls	r3, r3, #26
 8004bd8:	d502      	bpl.n	8004be0 <_printf_common+0x30>
 8004bda:	6833      	ldr	r3, [r6, #0]
 8004bdc:	3302      	adds	r3, #2
 8004bde:	6033      	str	r3, [r6, #0]
 8004be0:	6822      	ldr	r2, [r4, #0]
 8004be2:	2306      	movs	r3, #6
 8004be4:	0015      	movs	r5, r2
 8004be6:	401d      	ands	r5, r3
 8004be8:	421a      	tst	r2, r3
 8004bea:	d027      	beq.n	8004c3c <_printf_common+0x8c>
 8004bec:	0023      	movs	r3, r4
 8004bee:	3343      	adds	r3, #67	@ 0x43
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	1e5a      	subs	r2, r3, #1
 8004bf4:	4193      	sbcs	r3, r2
 8004bf6:	6822      	ldr	r2, [r4, #0]
 8004bf8:	0692      	lsls	r2, r2, #26
 8004bfa:	d430      	bmi.n	8004c5e <_printf_common+0xae>
 8004bfc:	0022      	movs	r2, r4
 8004bfe:	9901      	ldr	r1, [sp, #4]
 8004c00:	9800      	ldr	r0, [sp, #0]
 8004c02:	9d08      	ldr	r5, [sp, #32]
 8004c04:	3243      	adds	r2, #67	@ 0x43
 8004c06:	47a8      	blx	r5
 8004c08:	3001      	adds	r0, #1
 8004c0a:	d025      	beq.n	8004c58 <_printf_common+0xa8>
 8004c0c:	2206      	movs	r2, #6
 8004c0e:	6823      	ldr	r3, [r4, #0]
 8004c10:	2500      	movs	r5, #0
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d105      	bne.n	8004c24 <_printf_common+0x74>
 8004c18:	6833      	ldr	r3, [r6, #0]
 8004c1a:	68e5      	ldr	r5, [r4, #12]
 8004c1c:	1aed      	subs	r5, r5, r3
 8004c1e:	43eb      	mvns	r3, r5
 8004c20:	17db      	asrs	r3, r3, #31
 8004c22:	401d      	ands	r5, r3
 8004c24:	68a3      	ldr	r3, [r4, #8]
 8004c26:	6922      	ldr	r2, [r4, #16]
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	dd01      	ble.n	8004c30 <_printf_common+0x80>
 8004c2c:	1a9b      	subs	r3, r3, r2
 8004c2e:	18ed      	adds	r5, r5, r3
 8004c30:	2600      	movs	r6, #0
 8004c32:	42b5      	cmp	r5, r6
 8004c34:	d120      	bne.n	8004c78 <_printf_common+0xc8>
 8004c36:	2000      	movs	r0, #0
 8004c38:	e010      	b.n	8004c5c <_printf_common+0xac>
 8004c3a:	3501      	adds	r5, #1
 8004c3c:	68e3      	ldr	r3, [r4, #12]
 8004c3e:	6832      	ldr	r2, [r6, #0]
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	42ab      	cmp	r3, r5
 8004c44:	ddd2      	ble.n	8004bec <_printf_common+0x3c>
 8004c46:	0022      	movs	r2, r4
 8004c48:	2301      	movs	r3, #1
 8004c4a:	9901      	ldr	r1, [sp, #4]
 8004c4c:	9800      	ldr	r0, [sp, #0]
 8004c4e:	9f08      	ldr	r7, [sp, #32]
 8004c50:	3219      	adds	r2, #25
 8004c52:	47b8      	blx	r7
 8004c54:	3001      	adds	r0, #1
 8004c56:	d1f0      	bne.n	8004c3a <_printf_common+0x8a>
 8004c58:	2001      	movs	r0, #1
 8004c5a:	4240      	negs	r0, r0
 8004c5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c5e:	2030      	movs	r0, #48	@ 0x30
 8004c60:	18e1      	adds	r1, r4, r3
 8004c62:	3143      	adds	r1, #67	@ 0x43
 8004c64:	7008      	strb	r0, [r1, #0]
 8004c66:	0021      	movs	r1, r4
 8004c68:	1c5a      	adds	r2, r3, #1
 8004c6a:	3145      	adds	r1, #69	@ 0x45
 8004c6c:	7809      	ldrb	r1, [r1, #0]
 8004c6e:	18a2      	adds	r2, r4, r2
 8004c70:	3243      	adds	r2, #67	@ 0x43
 8004c72:	3302      	adds	r3, #2
 8004c74:	7011      	strb	r1, [r2, #0]
 8004c76:	e7c1      	b.n	8004bfc <_printf_common+0x4c>
 8004c78:	0022      	movs	r2, r4
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	9901      	ldr	r1, [sp, #4]
 8004c7e:	9800      	ldr	r0, [sp, #0]
 8004c80:	9f08      	ldr	r7, [sp, #32]
 8004c82:	321a      	adds	r2, #26
 8004c84:	47b8      	blx	r7
 8004c86:	3001      	adds	r0, #1
 8004c88:	d0e6      	beq.n	8004c58 <_printf_common+0xa8>
 8004c8a:	3601      	adds	r6, #1
 8004c8c:	e7d1      	b.n	8004c32 <_printf_common+0x82>
	...

08004c90 <_printf_i>:
 8004c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c92:	b08b      	sub	sp, #44	@ 0x2c
 8004c94:	9206      	str	r2, [sp, #24]
 8004c96:	000a      	movs	r2, r1
 8004c98:	3243      	adds	r2, #67	@ 0x43
 8004c9a:	9307      	str	r3, [sp, #28]
 8004c9c:	9005      	str	r0, [sp, #20]
 8004c9e:	9203      	str	r2, [sp, #12]
 8004ca0:	7e0a      	ldrb	r2, [r1, #24]
 8004ca2:	000c      	movs	r4, r1
 8004ca4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004ca6:	2a78      	cmp	r2, #120	@ 0x78
 8004ca8:	d809      	bhi.n	8004cbe <_printf_i+0x2e>
 8004caa:	2a62      	cmp	r2, #98	@ 0x62
 8004cac:	d80b      	bhi.n	8004cc6 <_printf_i+0x36>
 8004cae:	2a00      	cmp	r2, #0
 8004cb0:	d100      	bne.n	8004cb4 <_printf_i+0x24>
 8004cb2:	e0ba      	b.n	8004e2a <_printf_i+0x19a>
 8004cb4:	497a      	ldr	r1, [pc, #488]	@ (8004ea0 <_printf_i+0x210>)
 8004cb6:	9104      	str	r1, [sp, #16]
 8004cb8:	2a58      	cmp	r2, #88	@ 0x58
 8004cba:	d100      	bne.n	8004cbe <_printf_i+0x2e>
 8004cbc:	e08e      	b.n	8004ddc <_printf_i+0x14c>
 8004cbe:	0025      	movs	r5, r4
 8004cc0:	3542      	adds	r5, #66	@ 0x42
 8004cc2:	702a      	strb	r2, [r5, #0]
 8004cc4:	e022      	b.n	8004d0c <_printf_i+0x7c>
 8004cc6:	0010      	movs	r0, r2
 8004cc8:	3863      	subs	r0, #99	@ 0x63
 8004cca:	2815      	cmp	r0, #21
 8004ccc:	d8f7      	bhi.n	8004cbe <_printf_i+0x2e>
 8004cce:	f7fb fa33 	bl	8000138 <__gnu_thumb1_case_shi>
 8004cd2:	0016      	.short	0x0016
 8004cd4:	fff6001f 	.word	0xfff6001f
 8004cd8:	fff6fff6 	.word	0xfff6fff6
 8004cdc:	001ffff6 	.word	0x001ffff6
 8004ce0:	fff6fff6 	.word	0xfff6fff6
 8004ce4:	fff6fff6 	.word	0xfff6fff6
 8004ce8:	0036009f 	.word	0x0036009f
 8004cec:	fff6007e 	.word	0xfff6007e
 8004cf0:	00b0fff6 	.word	0x00b0fff6
 8004cf4:	0036fff6 	.word	0x0036fff6
 8004cf8:	fff6fff6 	.word	0xfff6fff6
 8004cfc:	0082      	.short	0x0082
 8004cfe:	0025      	movs	r5, r4
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	3542      	adds	r5, #66	@ 0x42
 8004d04:	1d11      	adds	r1, r2, #4
 8004d06:	6019      	str	r1, [r3, #0]
 8004d08:	6813      	ldr	r3, [r2, #0]
 8004d0a:	702b      	strb	r3, [r5, #0]
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e09e      	b.n	8004e4e <_printf_i+0x1be>
 8004d10:	6818      	ldr	r0, [r3, #0]
 8004d12:	6809      	ldr	r1, [r1, #0]
 8004d14:	1d02      	adds	r2, r0, #4
 8004d16:	060d      	lsls	r5, r1, #24
 8004d18:	d50b      	bpl.n	8004d32 <_printf_i+0xa2>
 8004d1a:	6806      	ldr	r6, [r0, #0]
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	2e00      	cmp	r6, #0
 8004d20:	da03      	bge.n	8004d2a <_printf_i+0x9a>
 8004d22:	232d      	movs	r3, #45	@ 0x2d
 8004d24:	9a03      	ldr	r2, [sp, #12]
 8004d26:	4276      	negs	r6, r6
 8004d28:	7013      	strb	r3, [r2, #0]
 8004d2a:	4b5d      	ldr	r3, [pc, #372]	@ (8004ea0 <_printf_i+0x210>)
 8004d2c:	270a      	movs	r7, #10
 8004d2e:	9304      	str	r3, [sp, #16]
 8004d30:	e018      	b.n	8004d64 <_printf_i+0xd4>
 8004d32:	6806      	ldr	r6, [r0, #0]
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	0649      	lsls	r1, r1, #25
 8004d38:	d5f1      	bpl.n	8004d1e <_printf_i+0x8e>
 8004d3a:	b236      	sxth	r6, r6
 8004d3c:	e7ef      	b.n	8004d1e <_printf_i+0x8e>
 8004d3e:	6808      	ldr	r0, [r1, #0]
 8004d40:	6819      	ldr	r1, [r3, #0]
 8004d42:	c940      	ldmia	r1!, {r6}
 8004d44:	0605      	lsls	r5, r0, #24
 8004d46:	d402      	bmi.n	8004d4e <_printf_i+0xbe>
 8004d48:	0640      	lsls	r0, r0, #25
 8004d4a:	d500      	bpl.n	8004d4e <_printf_i+0xbe>
 8004d4c:	b2b6      	uxth	r6, r6
 8004d4e:	6019      	str	r1, [r3, #0]
 8004d50:	4b53      	ldr	r3, [pc, #332]	@ (8004ea0 <_printf_i+0x210>)
 8004d52:	270a      	movs	r7, #10
 8004d54:	9304      	str	r3, [sp, #16]
 8004d56:	2a6f      	cmp	r2, #111	@ 0x6f
 8004d58:	d100      	bne.n	8004d5c <_printf_i+0xcc>
 8004d5a:	3f02      	subs	r7, #2
 8004d5c:	0023      	movs	r3, r4
 8004d5e:	2200      	movs	r2, #0
 8004d60:	3343      	adds	r3, #67	@ 0x43
 8004d62:	701a      	strb	r2, [r3, #0]
 8004d64:	6863      	ldr	r3, [r4, #4]
 8004d66:	60a3      	str	r3, [r4, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	db06      	blt.n	8004d7a <_printf_i+0xea>
 8004d6c:	2104      	movs	r1, #4
 8004d6e:	6822      	ldr	r2, [r4, #0]
 8004d70:	9d03      	ldr	r5, [sp, #12]
 8004d72:	438a      	bics	r2, r1
 8004d74:	6022      	str	r2, [r4, #0]
 8004d76:	4333      	orrs	r3, r6
 8004d78:	d00c      	beq.n	8004d94 <_printf_i+0x104>
 8004d7a:	9d03      	ldr	r5, [sp, #12]
 8004d7c:	0030      	movs	r0, r6
 8004d7e:	0039      	movs	r1, r7
 8004d80:	f7fb fa6a 	bl	8000258 <__aeabi_uidivmod>
 8004d84:	9b04      	ldr	r3, [sp, #16]
 8004d86:	3d01      	subs	r5, #1
 8004d88:	5c5b      	ldrb	r3, [r3, r1]
 8004d8a:	702b      	strb	r3, [r5, #0]
 8004d8c:	0033      	movs	r3, r6
 8004d8e:	0006      	movs	r6, r0
 8004d90:	429f      	cmp	r7, r3
 8004d92:	d9f3      	bls.n	8004d7c <_printf_i+0xec>
 8004d94:	2f08      	cmp	r7, #8
 8004d96:	d109      	bne.n	8004dac <_printf_i+0x11c>
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	07db      	lsls	r3, r3, #31
 8004d9c:	d506      	bpl.n	8004dac <_printf_i+0x11c>
 8004d9e:	6862      	ldr	r2, [r4, #4]
 8004da0:	6923      	ldr	r3, [r4, #16]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	dc02      	bgt.n	8004dac <_printf_i+0x11c>
 8004da6:	2330      	movs	r3, #48	@ 0x30
 8004da8:	3d01      	subs	r5, #1
 8004daa:	702b      	strb	r3, [r5, #0]
 8004dac:	9b03      	ldr	r3, [sp, #12]
 8004dae:	1b5b      	subs	r3, r3, r5
 8004db0:	6123      	str	r3, [r4, #16]
 8004db2:	9b07      	ldr	r3, [sp, #28]
 8004db4:	0021      	movs	r1, r4
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	9805      	ldr	r0, [sp, #20]
 8004dba:	9b06      	ldr	r3, [sp, #24]
 8004dbc:	aa09      	add	r2, sp, #36	@ 0x24
 8004dbe:	f7ff fef7 	bl	8004bb0 <_printf_common>
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	d148      	bne.n	8004e58 <_printf_i+0x1c8>
 8004dc6:	2001      	movs	r0, #1
 8004dc8:	4240      	negs	r0, r0
 8004dca:	b00b      	add	sp, #44	@ 0x2c
 8004dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dce:	2220      	movs	r2, #32
 8004dd0:	6809      	ldr	r1, [r1, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	6022      	str	r2, [r4, #0]
 8004dd6:	2278      	movs	r2, #120	@ 0x78
 8004dd8:	4932      	ldr	r1, [pc, #200]	@ (8004ea4 <_printf_i+0x214>)
 8004dda:	9104      	str	r1, [sp, #16]
 8004ddc:	0021      	movs	r1, r4
 8004dde:	3145      	adds	r1, #69	@ 0x45
 8004de0:	700a      	strb	r2, [r1, #0]
 8004de2:	6819      	ldr	r1, [r3, #0]
 8004de4:	6822      	ldr	r2, [r4, #0]
 8004de6:	c940      	ldmia	r1!, {r6}
 8004de8:	0610      	lsls	r0, r2, #24
 8004dea:	d402      	bmi.n	8004df2 <_printf_i+0x162>
 8004dec:	0650      	lsls	r0, r2, #25
 8004dee:	d500      	bpl.n	8004df2 <_printf_i+0x162>
 8004df0:	b2b6      	uxth	r6, r6
 8004df2:	6019      	str	r1, [r3, #0]
 8004df4:	07d3      	lsls	r3, r2, #31
 8004df6:	d502      	bpl.n	8004dfe <_printf_i+0x16e>
 8004df8:	2320      	movs	r3, #32
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	6023      	str	r3, [r4, #0]
 8004dfe:	2e00      	cmp	r6, #0
 8004e00:	d001      	beq.n	8004e06 <_printf_i+0x176>
 8004e02:	2710      	movs	r7, #16
 8004e04:	e7aa      	b.n	8004d5c <_printf_i+0xcc>
 8004e06:	2220      	movs	r2, #32
 8004e08:	6823      	ldr	r3, [r4, #0]
 8004e0a:	4393      	bics	r3, r2
 8004e0c:	6023      	str	r3, [r4, #0]
 8004e0e:	e7f8      	b.n	8004e02 <_printf_i+0x172>
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	680d      	ldr	r5, [r1, #0]
 8004e14:	1d10      	adds	r0, r2, #4
 8004e16:	6949      	ldr	r1, [r1, #20]
 8004e18:	6018      	str	r0, [r3, #0]
 8004e1a:	6813      	ldr	r3, [r2, #0]
 8004e1c:	062e      	lsls	r6, r5, #24
 8004e1e:	d501      	bpl.n	8004e24 <_printf_i+0x194>
 8004e20:	6019      	str	r1, [r3, #0]
 8004e22:	e002      	b.n	8004e2a <_printf_i+0x19a>
 8004e24:	066d      	lsls	r5, r5, #25
 8004e26:	d5fb      	bpl.n	8004e20 <_printf_i+0x190>
 8004e28:	8019      	strh	r1, [r3, #0]
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	9d03      	ldr	r5, [sp, #12]
 8004e2e:	6123      	str	r3, [r4, #16]
 8004e30:	e7bf      	b.n	8004db2 <_printf_i+0x122>
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	1d11      	adds	r1, r2, #4
 8004e36:	6019      	str	r1, [r3, #0]
 8004e38:	6815      	ldr	r5, [r2, #0]
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	0028      	movs	r0, r5
 8004e3e:	6862      	ldr	r2, [r4, #4]
 8004e40:	f000 f844 	bl	8004ecc <memchr>
 8004e44:	2800      	cmp	r0, #0
 8004e46:	d001      	beq.n	8004e4c <_printf_i+0x1bc>
 8004e48:	1b40      	subs	r0, r0, r5
 8004e4a:	6060      	str	r0, [r4, #4]
 8004e4c:	6863      	ldr	r3, [r4, #4]
 8004e4e:	6123      	str	r3, [r4, #16]
 8004e50:	2300      	movs	r3, #0
 8004e52:	9a03      	ldr	r2, [sp, #12]
 8004e54:	7013      	strb	r3, [r2, #0]
 8004e56:	e7ac      	b.n	8004db2 <_printf_i+0x122>
 8004e58:	002a      	movs	r2, r5
 8004e5a:	6923      	ldr	r3, [r4, #16]
 8004e5c:	9906      	ldr	r1, [sp, #24]
 8004e5e:	9805      	ldr	r0, [sp, #20]
 8004e60:	9d07      	ldr	r5, [sp, #28]
 8004e62:	47a8      	blx	r5
 8004e64:	3001      	adds	r0, #1
 8004e66:	d0ae      	beq.n	8004dc6 <_printf_i+0x136>
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	079b      	lsls	r3, r3, #30
 8004e6c:	d415      	bmi.n	8004e9a <_printf_i+0x20a>
 8004e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e70:	68e0      	ldr	r0, [r4, #12]
 8004e72:	4298      	cmp	r0, r3
 8004e74:	daa9      	bge.n	8004dca <_printf_i+0x13a>
 8004e76:	0018      	movs	r0, r3
 8004e78:	e7a7      	b.n	8004dca <_printf_i+0x13a>
 8004e7a:	0022      	movs	r2, r4
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	9906      	ldr	r1, [sp, #24]
 8004e80:	9805      	ldr	r0, [sp, #20]
 8004e82:	9e07      	ldr	r6, [sp, #28]
 8004e84:	3219      	adds	r2, #25
 8004e86:	47b0      	blx	r6
 8004e88:	3001      	adds	r0, #1
 8004e8a:	d09c      	beq.n	8004dc6 <_printf_i+0x136>
 8004e8c:	3501      	adds	r5, #1
 8004e8e:	68e3      	ldr	r3, [r4, #12]
 8004e90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e92:	1a9b      	subs	r3, r3, r2
 8004e94:	42ab      	cmp	r3, r5
 8004e96:	dcf0      	bgt.n	8004e7a <_printf_i+0x1ea>
 8004e98:	e7e9      	b.n	8004e6e <_printf_i+0x1de>
 8004e9a:	2500      	movs	r5, #0
 8004e9c:	e7f7      	b.n	8004e8e <_printf_i+0x1fe>
 8004e9e:	46c0      	nop			@ (mov r8, r8)
 8004ea0:	080050b2 	.word	0x080050b2
 8004ea4:	080050c3 	.word	0x080050c3

08004ea8 <_sbrk_r>:
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	b570      	push	{r4, r5, r6, lr}
 8004eac:	4d06      	ldr	r5, [pc, #24]	@ (8004ec8 <_sbrk_r+0x20>)
 8004eae:	0004      	movs	r4, r0
 8004eb0:	0008      	movs	r0, r1
 8004eb2:	602b      	str	r3, [r5, #0]
 8004eb4:	f7fc fc44 	bl	8001740 <_sbrk>
 8004eb8:	1c43      	adds	r3, r0, #1
 8004eba:	d103      	bne.n	8004ec4 <_sbrk_r+0x1c>
 8004ebc:	682b      	ldr	r3, [r5, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d000      	beq.n	8004ec4 <_sbrk_r+0x1c>
 8004ec2:	6023      	str	r3, [r4, #0]
 8004ec4:	bd70      	pop	{r4, r5, r6, pc}
 8004ec6:	46c0      	nop			@ (mov r8, r8)
 8004ec8:	20000558 	.word	0x20000558

08004ecc <memchr>:
 8004ecc:	b2c9      	uxtb	r1, r1
 8004ece:	1882      	adds	r2, r0, r2
 8004ed0:	4290      	cmp	r0, r2
 8004ed2:	d101      	bne.n	8004ed8 <memchr+0xc>
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	4770      	bx	lr
 8004ed8:	7803      	ldrb	r3, [r0, #0]
 8004eda:	428b      	cmp	r3, r1
 8004edc:	d0fb      	beq.n	8004ed6 <memchr+0xa>
 8004ede:	3001      	adds	r0, #1
 8004ee0:	e7f6      	b.n	8004ed0 <memchr+0x4>

08004ee2 <_realloc_r>:
 8004ee2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ee4:	0006      	movs	r6, r0
 8004ee6:	000c      	movs	r4, r1
 8004ee8:	0015      	movs	r5, r2
 8004eea:	2900      	cmp	r1, #0
 8004eec:	d105      	bne.n	8004efa <_realloc_r+0x18>
 8004eee:	0011      	movs	r1, r2
 8004ef0:	f7ff fc70 	bl	80047d4 <_malloc_r>
 8004ef4:	0004      	movs	r4, r0
 8004ef6:	0020      	movs	r0, r4
 8004ef8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004efa:	2a00      	cmp	r2, #0
 8004efc:	d103      	bne.n	8004f06 <_realloc_r+0x24>
 8004efe:	f7ff fbfd 	bl	80046fc <_free_r>
 8004f02:	002c      	movs	r4, r5
 8004f04:	e7f7      	b.n	8004ef6 <_realloc_r+0x14>
 8004f06:	f000 f81c 	bl	8004f42 <_malloc_usable_size_r>
 8004f0a:	0007      	movs	r7, r0
 8004f0c:	4285      	cmp	r5, r0
 8004f0e:	d802      	bhi.n	8004f16 <_realloc_r+0x34>
 8004f10:	0843      	lsrs	r3, r0, #1
 8004f12:	42ab      	cmp	r3, r5
 8004f14:	d3ef      	bcc.n	8004ef6 <_realloc_r+0x14>
 8004f16:	0029      	movs	r1, r5
 8004f18:	0030      	movs	r0, r6
 8004f1a:	f7ff fc5b 	bl	80047d4 <_malloc_r>
 8004f1e:	9001      	str	r0, [sp, #4]
 8004f20:	2800      	cmp	r0, #0
 8004f22:	d101      	bne.n	8004f28 <_realloc_r+0x46>
 8004f24:	9c01      	ldr	r4, [sp, #4]
 8004f26:	e7e6      	b.n	8004ef6 <_realloc_r+0x14>
 8004f28:	002a      	movs	r2, r5
 8004f2a:	42bd      	cmp	r5, r7
 8004f2c:	d900      	bls.n	8004f30 <_realloc_r+0x4e>
 8004f2e:	003a      	movs	r2, r7
 8004f30:	0021      	movs	r1, r4
 8004f32:	9801      	ldr	r0, [sp, #4]
 8004f34:	f7ff fbd8 	bl	80046e8 <memcpy>
 8004f38:	0021      	movs	r1, r4
 8004f3a:	0030      	movs	r0, r6
 8004f3c:	f7ff fbde 	bl	80046fc <_free_r>
 8004f40:	e7f0      	b.n	8004f24 <_realloc_r+0x42>

08004f42 <_malloc_usable_size_r>:
 8004f42:	1f0b      	subs	r3, r1, #4
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	1f18      	subs	r0, r3, #4
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	da01      	bge.n	8004f50 <_malloc_usable_size_r+0xe>
 8004f4c:	580b      	ldr	r3, [r1, r0]
 8004f4e:	18c0      	adds	r0, r0, r3
 8004f50:	4770      	bx	lr
	...

08004f54 <_init>:
 8004f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f56:	46c0      	nop			@ (mov r8, r8)
 8004f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f5a:	bc08      	pop	{r3}
 8004f5c:	469e      	mov	lr, r3
 8004f5e:	4770      	bx	lr

08004f60 <_fini>:
 8004f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f62:	46c0      	nop			@ (mov r8, r8)
 8004f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f66:	bc08      	pop	{r3}
 8004f68:	469e      	mov	lr, r3
 8004f6a:	4770      	bx	lr
