
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004778  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08004830  08004830  00005830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004954  08004954  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004954  08004954  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004954  08004954  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004954  08004954  00005954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004958  08004958  00005958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800495c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000000c  08004968  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08004968  000061c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012dc9  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002717  00000000  00000000  00018dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  0001b518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d60  00000000  00000000  0001c5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f24  00000000  00000000  0001d358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015539  00000000  00000000  0003327c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c913  00000000  00000000  000487b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d50c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d54  00000000  00000000  000d510c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000d8e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004818 	.word	0x08004818

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08004818 	.word	0x08004818

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <is_index_out_of_bound>:
// Typical bitmap declaration for those function : uint8_t bitmap[BITMAP_SIZE] = {0};

/*
 * Bitmap Check if the index is out of bound
 */
uint8_t is_index_out_of_bound(int index) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	// 0 to 63
	return (index < 0 || index >= BITMAP_SIZE);
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	2b00      	cmp	r3, #0
 8000224:	db02      	blt.n	800022c <is_index_out_of_bound+0x14>
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2b3f      	cmp	r3, #63	@ 0x3f
 800022a:	dd01      	ble.n	8000230 <is_index_out_of_bound+0x18>
 800022c:	2301      	movs	r3, #1
 800022e:	e000      	b.n	8000232 <is_index_out_of_bound+0x1a>
 8000230:	2300      	movs	r3, #0
 8000232:	b2db      	uxtb	r3, r3
}
 8000234:	0018      	movs	r0, r3
 8000236:	46bd      	mov	sp, r7
 8000238:	b002      	add	sp, #8
 800023a:	bd80      	pop	{r7, pc}

0800023c <bitmap_set_bit>:

/*
 * Bitmap set a bit value
 */
void bitmap_set_bit(uint64_t *bitmap, int index) {
 800023c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800023e:	b085      	sub	sp, #20
 8000240:	af00      	add	r7, sp, #0
 8000242:	60f8      	str	r0, [r7, #12]
 8000244:	60b9      	str	r1, [r7, #8]
	if(is_index_out_of_bound(index)) return;
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	0018      	movs	r0, r3
 800024a:	f7ff ffe5 	bl	8000218 <is_index_out_of_bound>
 800024e:	1e03      	subs	r3, r0, #0
 8000250:	d124      	bne.n	800029c <bitmap_set_bit+0x60>
    *bitmap |= (1ULL << index);
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	68b9      	ldr	r1, [r7, #8]
 800025a:	3920      	subs	r1, #32
 800025c:	2900      	cmp	r1, #0
 800025e:	db03      	blt.n	8000268 <bitmap_set_bit+0x2c>
 8000260:	2001      	movs	r0, #1
 8000262:	4088      	lsls	r0, r1
 8000264:	0005      	movs	r5, r0
 8000266:	e00a      	b.n	800027e <bitmap_set_bit+0x42>
 8000268:	68b9      	ldr	r1, [r7, #8]
 800026a:	2020      	movs	r0, #32
 800026c:	1a41      	subs	r1, r0, r1
 800026e:	2001      	movs	r0, #1
 8000270:	40c8      	lsrs	r0, r1
 8000272:	0001      	movs	r1, r0
 8000274:	2600      	movs	r6, #0
 8000276:	68b8      	ldr	r0, [r7, #8]
 8000278:	4086      	lsls	r6, r0
 800027a:	0035      	movs	r5, r6
 800027c:	430d      	orrs	r5, r1
 800027e:	2001      	movs	r0, #1
 8000280:	68b9      	ldr	r1, [r7, #8]
 8000282:	4088      	lsls	r0, r1
 8000284:	0004      	movs	r4, r0
 8000286:	0011      	movs	r1, r2
 8000288:	4321      	orrs	r1, r4
 800028a:	6039      	str	r1, [r7, #0]
 800028c:	432b      	orrs	r3, r5
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	6839      	ldr	r1, [r7, #0]
 8000294:	687a      	ldr	r2, [r7, #4]
 8000296:	6019      	str	r1, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
 800029a:	e000      	b.n	800029e <bitmap_set_bit+0x62>
	if(is_index_out_of_bound(index)) return;
 800029c:	46c0      	nop			@ (mov r8, r8)
}
 800029e:	46bd      	mov	sp, r7
 80002a0:	b005      	add	sp, #20
 80002a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002a4 <bitmap_clear_bit>:

/*
 * Bitmap clear a bit value
 */
void bitmap_clear_bit(uint64_t *bitmap, int index) {
 80002a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002a6:	b087      	sub	sp, #28
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6178      	str	r0, [r7, #20]
 80002ac:	6139      	str	r1, [r7, #16]
	if(is_index_out_of_bound(index)) return;
 80002ae:	693b      	ldr	r3, [r7, #16]
 80002b0:	0018      	movs	r0, r3
 80002b2:	f7ff ffb1 	bl	8000218 <is_index_out_of_bound>
 80002b6:	1e03      	subs	r3, r0, #0
 80002b8:	d12b      	bne.n	8000312 <bitmap_clear_bit+0x6e>
	*bitmap &= ~(1ULL << index);
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	685b      	ldr	r3, [r3, #4]
 80002c0:	6939      	ldr	r1, [r7, #16]
 80002c2:	3920      	subs	r1, #32
 80002c4:	2900      	cmp	r1, #0
 80002c6:	db03      	blt.n	80002d0 <bitmap_clear_bit+0x2c>
 80002c8:	2001      	movs	r0, #1
 80002ca:	4088      	lsls	r0, r1
 80002cc:	0005      	movs	r5, r0
 80002ce:	e00a      	b.n	80002e6 <bitmap_clear_bit+0x42>
 80002d0:	6939      	ldr	r1, [r7, #16]
 80002d2:	2020      	movs	r0, #32
 80002d4:	1a41      	subs	r1, r0, r1
 80002d6:	2001      	movs	r0, #1
 80002d8:	40c8      	lsrs	r0, r1
 80002da:	0001      	movs	r1, r0
 80002dc:	2600      	movs	r6, #0
 80002de:	6938      	ldr	r0, [r7, #16]
 80002e0:	4086      	lsls	r6, r0
 80002e2:	0035      	movs	r5, r6
 80002e4:	430d      	orrs	r5, r1
 80002e6:	2001      	movs	r0, #1
 80002e8:	6939      	ldr	r1, [r7, #16]
 80002ea:	4088      	lsls	r0, r1
 80002ec:	0004      	movs	r4, r0
 80002ee:	43e1      	mvns	r1, r4
 80002f0:	60b9      	str	r1, [r7, #8]
 80002f2:	43e9      	mvns	r1, r5
 80002f4:	60f9      	str	r1, [r7, #12]
 80002f6:	68bc      	ldr	r4, [r7, #8]
 80002f8:	68fd      	ldr	r5, [r7, #12]
 80002fa:	0021      	movs	r1, r4
 80002fc:	4011      	ands	r1, r2
 80002fe:	6039      	str	r1, [r7, #0]
 8000300:	0029      	movs	r1, r5
 8000302:	4019      	ands	r1, r3
 8000304:	6079      	str	r1, [r7, #4]
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	6839      	ldr	r1, [r7, #0]
 800030a:	687a      	ldr	r2, [r7, #4]
 800030c:	6019      	str	r1, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	e000      	b.n	8000314 <bitmap_clear_bit+0x70>
	if(is_index_out_of_bound(index)) return;
 8000312:	46c0      	nop			@ (mov r8, r8)
}
 8000314:	46bd      	mov	sp, r7
 8000316:	b007      	add	sp, #28
 8000318:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800031a <bitmap_get_bit>:

/*
 * Bitmap get a bit value
 */
int bitmap_get_bit(uint64_t bitmap, int index) {
 800031a:	b5b0      	push	{r4, r5, r7, lr}
 800031c:	b084      	sub	sp, #16
 800031e:	af00      	add	r7, sp, #0
 8000320:	60b8      	str	r0, [r7, #8]
 8000322:	60f9      	str	r1, [r7, #12]
 8000324:	607a      	str	r2, [r7, #4]
	if(is_index_out_of_bound(index)) return -1;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	0018      	movs	r0, r3
 800032a:	f7ff ff75 	bl	8000218 <is_index_out_of_bound>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d002      	beq.n	8000338 <bitmap_get_bit+0x1e>
 8000332:	2301      	movs	r3, #1
 8000334:	425b      	negs	r3, r3
 8000336:	e019      	b.n	800036c <bitmap_get_bit+0x52>
	return (bitmap >> index) & 1;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	3b20      	subs	r3, #32
 800033c:	2b00      	cmp	r3, #0
 800033e:	db03      	blt.n	8000348 <bitmap_get_bit+0x2e>
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	40da      	lsrs	r2, r3
 8000344:	0014      	movs	r4, r2
 8000346:	e00a      	b.n	800035e <bitmap_get_bit+0x44>
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2220      	movs	r2, #32
 800034c:	1ad3      	subs	r3, r2, r3
 800034e:	68fa      	ldr	r2, [r7, #12]
 8000350:	409a      	lsls	r2, r3
 8000352:	0013      	movs	r3, r2
 8000354:	68b9      	ldr	r1, [r7, #8]
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	40d1      	lsrs	r1, r2
 800035a:	000c      	movs	r4, r1
 800035c:	431c      	orrs	r4, r3
 800035e:	68fa      	ldr	r2, [r7, #12]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	40da      	lsrs	r2, r3
 8000364:	0015      	movs	r5, r2
 8000366:	0022      	movs	r2, r4
 8000368:	2301      	movs	r3, #1
 800036a:	4013      	ands	r3, r2
}
 800036c:	0018      	movs	r0, r3
 800036e:	46bd      	mov	sp, r7
 8000370:	b004      	add	sp, #16
 8000372:	bdb0      	pop	{r4, r5, r7, pc}

08000374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000376:	4c3b      	ldr	r4, [pc, #236]	@ (8000464 <main+0xf0>)
 8000378:	44a5      	add	sp, r4
 800037a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint64_t  board_bitmap = 0;
 800037c:	2200      	movs	r2, #0
 800037e:	2300      	movs	r3, #0
 8000380:	4939      	ldr	r1, [pc, #228]	@ (8000468 <main+0xf4>)
 8000382:	1879      	adds	r1, r7, r1
 8000384:	600a      	str	r2, [r1, #0]
 8000386:	604b      	str	r3, [r1, #4]
  uint16_t  pwm_data[LED_BUFFER_SIZE] = {0};
 8000388:	4b38      	ldr	r3, [pc, #224]	@ (800046c <main+0xf8>)
 800038a:	4c39      	ldr	r4, [pc, #228]	@ (8000470 <main+0xfc>)
 800038c:	191b      	adds	r3, r3, r4
 800038e:	19db      	adds	r3, r3, r7
 8000390:	0018      	movs	r0, r3
 8000392:	4b38      	ldr	r3, [pc, #224]	@ (8000474 <main+0x100>)
 8000394:	001a      	movs	r2, r3
 8000396:	2100      	movs	r1, #0
 8000398:	f004 fa12 	bl	80047c0 <memset>
  ColorName colors[LED_NUMBER] = {0};
 800039c:	4b36      	ldr	r3, [pc, #216]	@ (8000478 <main+0x104>)
 800039e:	191b      	adds	r3, r3, r4
 80003a0:	19db      	adds	r3, r3, r7
 80003a2:	0018      	movs	r0, r3
 80003a4:	2340      	movs	r3, #64	@ 0x40
 80003a6:	001a      	movs	r2, r3
 80003a8:	2100      	movs	r1, #0
 80003aa:	f004 fa09 	bl	80047c0 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ae:	f000 fe61 	bl	8001074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b2:	f000 f869 	bl	8000488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b6:	f000 f9d9 	bl	800076c <MX_GPIO_Init>
  MX_DMA_Init();
 80003ba:	f000 f9b9 	bl	8000730 <MX_DMA_Init>
  MX_I2C1_Init();
 80003be:	f000 f8bd 	bl	800053c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80003c2:	f000 f981 	bl	80006c8 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 80003c6:	f000 f8f9 	bl	80005bc <MX_TIM17_Init>

  /* USER CODE BEGIN 2 */
  UART_Flush(&huart2);
 80003ca:	4b2c      	ldr	r3, [pc, #176]	@ (800047c <main+0x108>)
 80003cc:	0018      	movs	r0, r3
 80003ce:	f000 fa95 	bl	80008fc <UART_Flush>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// Reading the state of every reed sensors
	read_full_board(&board_bitmap);
 80003d2:	4b25      	ldr	r3, [pc, #148]	@ (8000468 <main+0xf4>)
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	0018      	movs	r0, r3
 80003d8:	f000 fb86 	bl	8000ae8 <read_full_board>
	// For all the LED's
	for(uint8_t i = 0; i < LED_NUMBER; ++i){
 80003dc:	4b28      	ldr	r3, [pc, #160]	@ (8000480 <main+0x10c>)
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	2200      	movs	r2, #0
 80003e2:	701a      	strb	r2, [r3, #0]
 80003e4:	e02c      	b.n	8000440 <main+0xcc>
		// Convert the reed index to the led index, because they aren't not connected the same way (see schematic)
		uint8_t led_index = convert_reed_index_to_led_index(i);
 80003e6:	4d27      	ldr	r5, [pc, #156]	@ (8000484 <main+0x110>)
 80003e8:	197c      	adds	r4, r7, r5
 80003ea:	4e25      	ldr	r6, [pc, #148]	@ (8000480 <main+0x10c>)
 80003ec:	19bb      	adds	r3, r7, r6
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	0018      	movs	r0, r3
 80003f2:	f000 fbd3 	bl	8000b9c <convert_reed_index_to_led_index>
 80003f6:	0003      	movs	r3, r0
 80003f8:	7023      	strb	r3, [r4, #0]
		// Take the bitmap value from the current index
		if(bitmap_get_bit(board_bitmap, i)) {
 80003fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000468 <main+0xf4>)
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	6818      	ldr	r0, [r3, #0]
 8000400:	6859      	ldr	r1, [r3, #4]
 8000402:	19bb      	adds	r3, r7, r6
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	001a      	movs	r2, r3
 8000408:	f7ff ff87 	bl	800031a <bitmap_get_bit>
 800040c:	1e03      	subs	r3, r0, #0
 800040e:	d008      	beq.n	8000422 <main+0xae>
			// if the sensor is closed, led will be green
			colors[led_index] = GREEN;
 8000410:	197b      	adds	r3, r7, r5
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	4a18      	ldr	r2, [pc, #96]	@ (8000478 <main+0x104>)
 8000416:	4916      	ldr	r1, [pc, #88]	@ (8000470 <main+0xfc>)
 8000418:	1852      	adds	r2, r2, r1
 800041a:	19d2      	adds	r2, r2, r7
 800041c:	2101      	movs	r1, #1
 800041e:	54d1      	strb	r1, [r2, r3]
 8000420:	e008      	b.n	8000434 <main+0xc0>
		} else {
			// If the sensor is open, led will be red
			colors[led_index] = RED;
 8000422:	4b18      	ldr	r3, [pc, #96]	@ (8000484 <main+0x110>)
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	4a13      	ldr	r2, [pc, #76]	@ (8000478 <main+0x104>)
 800042a:	4911      	ldr	r1, [pc, #68]	@ (8000470 <main+0xfc>)
 800042c:	1852      	adds	r2, r2, r1
 800042e:	19d2      	adds	r2, r2, r7
 8000430:	2100      	movs	r1, #0
 8000432:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < LED_NUMBER; ++i){
 8000434:	4a12      	ldr	r2, [pc, #72]	@ (8000480 <main+0x10c>)
 8000436:	18bb      	adds	r3, r7, r2
 8000438:	18ba      	adds	r2, r7, r2
 800043a:	7812      	ldrb	r2, [r2, #0]
 800043c:	3201      	adds	r2, #1
 800043e:	701a      	strb	r2, [r3, #0]
 8000440:	4b0f      	ldr	r3, [pc, #60]	@ (8000480 <main+0x10c>)
 8000442:	18fb      	adds	r3, r7, r3
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b3f      	cmp	r3, #63	@ 0x3f
 8000448:	d9cd      	bls.n	80003e6 <main+0x72>
		}
	}
	// Prepare data for DMA
	rgb_update_buffer(pwm_data, colors);
 800044a:	1d3a      	adds	r2, r7, #4
 800044c:	2444      	movs	r4, #68	@ 0x44
 800044e:	193b      	adds	r3, r7, r4
 8000450:	0011      	movs	r1, r2
 8000452:	0018      	movs	r0, r3
 8000454:	f000 fbca 	bl	8000bec <rgb_update_buffer>
	HAL_TIM_PWM_Send_To_DMA(pwm_data);
 8000458:	193b      	adds	r3, r7, r4
 800045a:	0018      	movs	r0, r3
 800045c:	f000 fa16 	bl	800088c <HAL_TIM_PWM_Send_To_DMA>
	read_full_board(&board_bitmap);
 8000460:	e7b7      	b.n	80003d2 <main+0x5e>
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	fffff344 	.word	0xfffff344
 8000468:	00000ca8 	.word	0x00000ca8
 800046c:	fffff38c 	.word	0xfffff38c
 8000470:	00000cb8 	.word	0x00000cb8
 8000474:	00000c64 	.word	0x00000c64
 8000478:	fffff34c 	.word	0xfffff34c
 800047c:	20000128 	.word	0x20000128
 8000480:	00000cb7 	.word	0x00000cb7
 8000484:	00000cb6 	.word	0x00000cb6

08000488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000488:	b590      	push	{r4, r7, lr}
 800048a:	b093      	sub	sp, #76	@ 0x4c
 800048c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048e:	2414      	movs	r4, #20
 8000490:	193b      	adds	r3, r7, r4
 8000492:	0018      	movs	r0, r3
 8000494:	2334      	movs	r3, #52	@ 0x34
 8000496:	001a      	movs	r2, r3
 8000498:	2100      	movs	r1, #0
 800049a:	f004 f991 	bl	80047c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	0018      	movs	r0, r3
 80004a2:	2310      	movs	r3, #16
 80004a4:	001a      	movs	r2, r3
 80004a6:	2100      	movs	r1, #0
 80004a8:	f004 f98a 	bl	80047c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ac:	2380      	movs	r3, #128	@ 0x80
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	0018      	movs	r0, r3
 80004b2:	f001 fcdb 	bl	8001e6c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2202      	movs	r2, #2
 80004ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2280      	movs	r2, #128	@ 0x80
 80004c0:	0052      	lsls	r2, r2, #1
 80004c2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004c4:	0021      	movs	r1, r4
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2240      	movs	r2, #64	@ 0x40
 80004d0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2202      	movs	r2, #2
 80004d6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2202      	movs	r2, #2
 80004dc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2200      	movs	r2, #0
 80004e2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2208      	movs	r2, #8
 80004e8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	2280      	movs	r2, #128	@ 0x80
 80004ee:	0292      	lsls	r2, r2, #10
 80004f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	22c0      	movs	r2, #192	@ 0xc0
 80004f6:	05d2      	lsls	r2, r2, #23
 80004f8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 fd01 	bl	8001f04 <HAL_RCC_OscConfig>
 8000502:	1e03      	subs	r3, r0, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000506:	f000 fb6b 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2207      	movs	r2, #7
 800050e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2202      	movs	r2, #2
 8000514:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	2101      	movs	r1, #1
 8000526:	0018      	movs	r0, r3
 8000528:	f001 fffc 	bl	8002524 <HAL_RCC_ClockConfig>
 800052c:	1e03      	subs	r3, r0, #0
 800052e:	d001      	beq.n	8000534 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000530:	f000 fb56 	bl	8000be0 <Error_Handler>
  }
}
 8000534:	46c0      	nop			@ (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b013      	add	sp, #76	@ 0x4c
 800053a:	bd90      	pop	{r4, r7, pc}

0800053c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000540:	4b1b      	ldr	r3, [pc, #108]	@ (80005b0 <MX_I2C1_Init+0x74>)
 8000542:	4a1c      	ldr	r2, [pc, #112]	@ (80005b4 <MX_I2C1_Init+0x78>)
 8000544:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8000546:	4b1a      	ldr	r3, [pc, #104]	@ (80005b0 <MX_I2C1_Init+0x74>)
 8000548:	4a1b      	ldr	r2, [pc, #108]	@ (80005b8 <MX_I2C1_Init+0x7c>)
 800054a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800054c:	4b18      	ldr	r3, [pc, #96]	@ (80005b0 <MX_I2C1_Init+0x74>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000552:	4b17      	ldr	r3, [pc, #92]	@ (80005b0 <MX_I2C1_Init+0x74>)
 8000554:	2201      	movs	r2, #1
 8000556:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000558:	4b15      	ldr	r3, [pc, #84]	@ (80005b0 <MX_I2C1_Init+0x74>)
 800055a:	2200      	movs	r2, #0
 800055c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800055e:	4b14      	ldr	r3, [pc, #80]	@ (80005b0 <MX_I2C1_Init+0x74>)
 8000560:	2200      	movs	r2, #0
 8000562:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000564:	4b12      	ldr	r3, [pc, #72]	@ (80005b0 <MX_I2C1_Init+0x74>)
 8000566:	2200      	movs	r2, #0
 8000568:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800056a:	4b11      	ldr	r3, [pc, #68]	@ (80005b0 <MX_I2C1_Init+0x74>)
 800056c:	2200      	movs	r2, #0
 800056e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000570:	4b0f      	ldr	r3, [pc, #60]	@ (80005b0 <MX_I2C1_Init+0x74>)
 8000572:	2200      	movs	r2, #0
 8000574:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000576:	4b0e      	ldr	r3, [pc, #56]	@ (80005b0 <MX_I2C1_Init+0x74>)
 8000578:	0018      	movs	r0, r3
 800057a:	f001 fb39 	bl	8001bf0 <HAL_I2C_Init>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d001      	beq.n	8000586 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000582:	f000 fb2d 	bl	8000be0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000586:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <MX_I2C1_Init+0x74>)
 8000588:	2100      	movs	r1, #0
 800058a:	0018      	movs	r0, r3
 800058c:	f001 fbd6 	bl	8001d3c <HAL_I2CEx_ConfigAnalogFilter>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000594:	f000 fb24 	bl	8000be0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000598:	4b05      	ldr	r3, [pc, #20]	@ (80005b0 <MX_I2C1_Init+0x74>)
 800059a:	2100      	movs	r1, #0
 800059c:	0018      	movs	r0, r3
 800059e:	f001 fc19 	bl	8001dd4 <HAL_I2CEx_ConfigDigitalFilter>
 80005a2:	1e03      	subs	r3, r0, #0
 80005a4:	d001      	beq.n	80005aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005a6:	f000 fb1b 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005aa:	46c0      	nop			@ (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	2000002c 	.word	0x2000002c
 80005b4:	40005400 	.word	0x40005400
 80005b8:	00b07cb4 	.word	0x00b07cb4

080005bc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	@ 0x50
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80005c2:	2334      	movs	r3, #52	@ 0x34
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	0018      	movs	r0, r3
 80005c8:	231c      	movs	r3, #28
 80005ca:	001a      	movs	r2, r3
 80005cc:	2100      	movs	r1, #0
 80005ce:	f004 f8f7 	bl	80047c0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005d2:	003b      	movs	r3, r7
 80005d4:	0018      	movs	r0, r3
 80005d6:	2334      	movs	r3, #52	@ 0x34
 80005d8:	001a      	movs	r2, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	f004 f8f0 	bl	80047c0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80005e0:	4b37      	ldr	r3, [pc, #220]	@ (80006c0 <MX_TIM17_Init+0x104>)
 80005e2:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <MX_TIM17_Init+0x108>)
 80005e4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80005e6:	4b36      	ldr	r3, [pc, #216]	@ (80006c0 <MX_TIM17_Init+0x104>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ec:	4b34      	ldr	r3, [pc, #208]	@ (80006c0 <MX_TIM17_Init+0x104>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 39;
 80005f2:	4b33      	ldr	r3, [pc, #204]	@ (80006c0 <MX_TIM17_Init+0x104>)
 80005f4:	2227      	movs	r2, #39	@ 0x27
 80005f6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f8:	4b31      	ldr	r3, [pc, #196]	@ (80006c0 <MX_TIM17_Init+0x104>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80005fe:	4b30      	ldr	r3, [pc, #192]	@ (80006c0 <MX_TIM17_Init+0x104>)
 8000600:	2200      	movs	r2, #0
 8000602:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000604:	4b2e      	ldr	r3, [pc, #184]	@ (80006c0 <MX_TIM17_Init+0x104>)
 8000606:	2200      	movs	r2, #0
 8000608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800060a:	4b2d      	ldr	r3, [pc, #180]	@ (80006c0 <MX_TIM17_Init+0x104>)
 800060c:	0018      	movs	r0, r3
 800060e:	f002 fa59 	bl	8002ac4 <HAL_TIM_Base_Init>
 8000612:	1e03      	subs	r3, r0, #0
 8000614:	d001      	beq.n	800061a <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8000616:	f000 fae3 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800061a:	4b29      	ldr	r3, [pc, #164]	@ (80006c0 <MX_TIM17_Init+0x104>)
 800061c:	0018      	movs	r0, r3
 800061e:	f002 faa9 	bl	8002b74 <HAL_TIM_PWM_Init>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8000626:	f000 fadb 	bl	8000be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800062a:	2134      	movs	r1, #52	@ 0x34
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2260      	movs	r2, #96	@ 0x60
 8000630:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2200      	movs	r2, #0
 8000636:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000656:	1879      	adds	r1, r7, r1
 8000658:	4b19      	ldr	r3, [pc, #100]	@ (80006c0 <MX_TIM17_Init+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	0018      	movs	r0, r3
 800065e:	f002 fec9 	bl	80033f4 <HAL_TIM_PWM_ConfigChannel>
 8000662:	1e03      	subs	r3, r0, #0
 8000664:	d001      	beq.n	800066a <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8000666:	f000 fabb 	bl	8000be0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800066a:	003b      	movs	r3, r7
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000670:	003b      	movs	r3, r7
 8000672:	2200      	movs	r2, #0
 8000674:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000676:	003b      	movs	r3, r7
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800067c:	003b      	movs	r3, r7
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000682:	003b      	movs	r3, r7
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000688:	003b      	movs	r3, r7
 800068a:	2280      	movs	r2, #128	@ 0x80
 800068c:	0192      	lsls	r2, r2, #6
 800068e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000690:	003b      	movs	r3, r7
 8000692:	2200      	movs	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000696:	003b      	movs	r3, r7
 8000698:	2200      	movs	r2, #0
 800069a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800069c:	003a      	movs	r2, r7
 800069e:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <MX_TIM17_Init+0x104>)
 80006a0:	0011      	movs	r1, r2
 80006a2:	0018      	movs	r0, r3
 80006a4:	f003 fbe4 	bl	8003e70 <HAL_TIMEx_ConfigBreakDeadTime>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 80006ac:	f000 fa98 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80006b0:	4b03      	ldr	r3, [pc, #12]	@ (80006c0 <MX_TIM17_Init+0x104>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 fbf6 	bl	8000ea4 <HAL_TIM_MspPostInit>

}
 80006b8:	46c0      	nop			@ (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b014      	add	sp, #80	@ 0x50
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000080 	.word	0x20000080
 80006c4:	40014800 	.word	0x40014800

080006c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006cc:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <MX_USART2_UART_Init+0x60>)
 80006ce:	4a17      	ldr	r2, [pc, #92]	@ (800072c <MX_USART2_UART_Init+0x64>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d2:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <MX_USART2_UART_Init+0x60>)
 80006d4:	22e1      	movs	r2, #225	@ 0xe1
 80006d6:	0252      	lsls	r2, r2, #9
 80006d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <MX_USART2_UART_Init+0x60>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_USART2_UART_Init+0x60>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <MX_USART2_UART_Init+0x60>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <MX_USART2_UART_Init+0x60>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80006f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <MX_USART2_UART_Init+0x60>)
 80006f4:	22c0      	movs	r2, #192	@ 0xc0
 80006f6:	0092      	lsls	r2, r2, #2
 80006f8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <MX_USART2_UART_Init+0x60>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000700:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_USART2_UART_Init+0x60>)
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <MX_USART2_UART_Init+0x60>)
 8000708:	2200      	movs	r2, #0
 800070a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_USART2_UART_Init+0x60>)
 800070e:	2200      	movs	r2, #0
 8000710:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000712:	4b05      	ldr	r3, [pc, #20]	@ (8000728 <MX_USART2_UART_Init+0x60>)
 8000714:	0018      	movs	r0, r3
 8000716:	f003 fc5f 	bl	8003fd8 <HAL_UART_Init>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800071e:	f000 fa5f 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000128 	.word	0x20000128
 800072c:	40004400 	.word	0x40004400

08000730 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000736:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_DMA_Init+0x38>)
 8000738:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800073a:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <MX_DMA_Init+0x38>)
 800073c:	2101      	movs	r1, #1
 800073e:	430a      	orrs	r2, r1
 8000740:	639a      	str	r2, [r3, #56]	@ 0x38
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_DMA_Init+0x38>)
 8000744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000746:	2201      	movs	r2, #1
 8000748:	4013      	ands	r3, r2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	2009      	movs	r0, #9
 8000754:	f000 fdc0 	bl	80012d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000758:	2009      	movs	r0, #9
 800075a:	f000 fdd2 	bl	8001302 <HAL_NVIC_EnableIRQ>

}
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b002      	add	sp, #8
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	40021000 	.word	0x40021000

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b089      	sub	sp, #36	@ 0x24
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	240c      	movs	r4, #12
 8000774:	193b      	adds	r3, r7, r4
 8000776:	0018      	movs	r0, r3
 8000778:	2314      	movs	r3, #20
 800077a:	001a      	movs	r2, r3
 800077c:	2100      	movs	r1, #0
 800077e:	f004 f81f 	bl	80047c0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b3e      	ldr	r3, [pc, #248]	@ (800087c <MX_GPIO_Init+0x110>)
 8000784:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000786:	4b3d      	ldr	r3, [pc, #244]	@ (800087c <MX_GPIO_Init+0x110>)
 8000788:	2102      	movs	r1, #2
 800078a:	430a      	orrs	r2, r1
 800078c:	635a      	str	r2, [r3, #52]	@ 0x34
 800078e:	4b3b      	ldr	r3, [pc, #236]	@ (800087c <MX_GPIO_Init+0x110>)
 8000790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000792:	2202      	movs	r2, #2
 8000794:	4013      	ands	r3, r2
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	4b38      	ldr	r3, [pc, #224]	@ (800087c <MX_GPIO_Init+0x110>)
 800079c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800079e:	4b37      	ldr	r3, [pc, #220]	@ (800087c <MX_GPIO_Init+0x110>)
 80007a0:	2104      	movs	r1, #4
 80007a2:	430a      	orrs	r2, r1
 80007a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80007a6:	4b35      	ldr	r3, [pc, #212]	@ (800087c <MX_GPIO_Init+0x110>)
 80007a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007aa:	2204      	movs	r2, #4
 80007ac:	4013      	ands	r3, r2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	4b32      	ldr	r3, [pc, #200]	@ (800087c <MX_GPIO_Init+0x110>)
 80007b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007b6:	4b31      	ldr	r3, [pc, #196]	@ (800087c <MX_GPIO_Init+0x110>)
 80007b8:	2101      	movs	r1, #1
 80007ba:	430a      	orrs	r2, r1
 80007bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80007be:	4b2f      	ldr	r3, [pc, #188]	@ (800087c <MX_GPIO_Init+0x110>)
 80007c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007c2:	2201      	movs	r2, #1
 80007c4:	4013      	ands	r3, r2
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80007ca:	2380      	movs	r3, #128	@ 0x80
 80007cc:	021b      	lsls	r3, r3, #8
 80007ce:	482c      	ldr	r0, [pc, #176]	@ (8000880 <MX_GPIO_Init+0x114>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	0019      	movs	r1, r3
 80007d4:	f001 f9ef 	bl	8001bb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 80007d8:	492a      	ldr	r1, [pc, #168]	@ (8000884 <MX_GPIO_Init+0x118>)
 80007da:	23a0      	movs	r3, #160	@ 0xa0
 80007dc:	05db      	lsls	r3, r3, #23
 80007de:	2200      	movs	r2, #0
 80007e0:	0018      	movs	r0, r3
 80007e2:	f001 f9e8 	bl	8001bb6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	2280      	movs	r2, #128	@ 0x80
 80007ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	2200      	movs	r2, #0
 80007f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	4a23      	ldr	r2, [pc, #140]	@ (8000888 <MX_GPIO_Init+0x11c>)
 80007fc:	0019      	movs	r1, r3
 80007fe:	0010      	movs	r0, r2
 8000800:	f001 f858 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000804:	0021      	movs	r1, r4
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2280      	movs	r2, #128	@ 0x80
 800080a:	0212      	lsls	r2, r2, #8
 800080c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	000c      	movs	r4, r1
 8000810:	193b      	adds	r3, r7, r4
 8000812:	2201      	movs	r2, #1
 8000814:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	193b      	adds	r3, r7, r4
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	193b      	adds	r3, r7, r4
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000822:	193b      	adds	r3, r7, r4
 8000824:	4a16      	ldr	r2, [pc, #88]	@ (8000880 <MX_GPIO_Init+0x114>)
 8000826:	0019      	movs	r1, r3
 8000828:	0010      	movs	r0, r2
 800082a:	f001 f843 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 800082e:	193b      	adds	r3, r7, r4
 8000830:	4a14      	ldr	r2, [pc, #80]	@ (8000884 <MX_GPIO_Init+0x118>)
 8000832:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	193b      	adds	r3, r7, r4
 8000836:	2201      	movs	r2, #1
 8000838:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	193b      	adds	r3, r7, r4
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	193b      	adds	r3, r7, r4
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000846:	193a      	adds	r2, r7, r4
 8000848:	23a0      	movs	r3, #160	@ 0xa0
 800084a:	05db      	lsls	r3, r3, #23
 800084c:	0011      	movs	r1, r2
 800084e:	0018      	movs	r0, r3
 8000850:	f001 f830 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000854:	193b      	adds	r3, r7, r4
 8000856:	2201      	movs	r2, #1
 8000858:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085a:	193b      	adds	r3, r7, r4
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000860:	193b      	adds	r3, r7, r4
 8000862:	2202      	movs	r2, #2
 8000864:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000866:	193b      	adds	r3, r7, r4
 8000868:	4a07      	ldr	r2, [pc, #28]	@ (8000888 <MX_GPIO_Init+0x11c>)
 800086a:	0019      	movs	r1, r3
 800086c:	0010      	movs	r0, r2
 800086e:	f001 f821 	bl	80018b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	b009      	add	sp, #36	@ 0x24
 8000878:	bd90      	pop	{r4, r7, pc}
 800087a:	46c0      	nop			@ (mov r8, r8)
 800087c:	40021000 	.word	0x40021000
 8000880:	50000800 	.word	0x50000800
 8000884:	00001870 	.word	0x00001870
 8000888:	50000400 	.word	0x50000400

0800088c <HAL_TIM_PWM_Send_To_DMA>:
/* USER CODE BEGIN 4 */
/*
 * Start sending data
 */
void HAL_TIM_PWM_Send_To_DMA(uint16_t *pwm_data)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
    ws2812_transfer_complete = 0;
 8000894:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <HAL_TIM_PWM_Send_To_DMA+0x30>)
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t*)pwm_data, LED_BUFFER_SIZE);
 800089a:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <HAL_TIM_PWM_Send_To_DMA+0x34>)
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	4809      	ldr	r0, [pc, #36]	@ (80008c4 <HAL_TIM_PWM_Send_To_DMA+0x38>)
 80008a0:	2100      	movs	r1, #0
 80008a2:	f002 f9c7 	bl	8002c34 <HAL_TIM_PWM_Start_DMA>

    while(!ws2812_transfer_complete) {}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	4b04      	ldr	r3, [pc, #16]	@ (80008bc <HAL_TIM_PWM_Send_To_DMA+0x30>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d0fa      	beq.n	80008a8 <HAL_TIM_PWM_Send_To_DMA+0x1c>
}
 80008b2:	46c0      	nop			@ (mov r8, r8)
 80008b4:	46c0      	nop			@ (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b002      	add	sp, #8
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000028 	.word	0x20000028
 80008c0:	00000632 	.word	0x00000632
 80008c4:	20000080 	.word	0x20000080

080008c8 <HAL_TIM_PWM_PulseFinishedCallback>:

/*
 * DMA Callback
 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM17)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a07      	ldr	r2, [pc, #28]	@ (80008f4 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d107      	bne.n	80008ea <HAL_TIM_PWM_PulseFinishedCallback+0x22>
    {
        HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2100      	movs	r1, #0
 80008de:	0018      	movs	r0, r3
 80008e0:	f002 fb96 	bl	8003010 <HAL_TIM_PWM_Stop_DMA>
        ws2812_transfer_complete = 1;
 80008e4:	4b04      	ldr	r3, [pc, #16]	@ (80008f8 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]
    }
}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b002      	add	sp, #8
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			@ (mov r8, r8)
 80008f4:	40014800 	.word	0x40014800
 80008f8:	20000028 	.word	0x20000028

080008fc <UART_Flush>:

/*
 * Flush the TX UART
 */
void UART_Flush(UART_HandleTypeDef *huart)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
    // Vider le registre RX tant qu’il reste des données
    __HAL_UART_FLUSH_DRREGISTER(huart);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	699a      	ldr	r2, [r3, #24]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2108      	movs	r1, #8
 8000910:	430a      	orrs	r2, r1
 8000912:	619a      	str	r2, [r3, #24]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	699a      	ldr	r2, [r3, #24]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2110      	movs	r1, #16
 8000920:	430a      	orrs	r2, r1
 8000922:	619a      	str	r2, [r3, #24]

    // Effacer les flags d’erreur éventuels (Overrun, Framing, Noise, Parity)
    __HAL_UART_CLEAR_OREFLAG(huart);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2208      	movs	r2, #8
 800092a:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(huart);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2202      	movs	r2, #2
 8000932:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_NEFLAG(huart);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2204      	movs	r2, #4
 800093a:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_PEFLAG(huart);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2201      	movs	r2, #1
 8000942:	621a      	str	r2, [r3, #32]

    // Attendre que la transmission en cours (TX) soit terminée
    while(__HAL_UART_GET_FLAG(huart, UART_FLAG_TC) == RESET);
 8000944:	46c0      	nop			@ (mov r8, r8)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	69db      	ldr	r3, [r3, #28]
 800094c:	2240      	movs	r2, #64	@ 0x40
 800094e:	4013      	ands	r3, r2
 8000950:	2b40      	cmp	r3, #64	@ 0x40
 8000952:	d1f8      	bne.n	8000946 <UART_Flush+0x4a>

}
 8000954:	46c0      	nop			@ (mov r8, r8)
 8000956:	46c0      	nop			@ (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b002      	add	sp, #8
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <set_gpio_column>:

/* Set the GPIO column for the decoder
 * Return : void
 */
void set_gpio_column(uint8_t column) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	0002      	movs	r2, r0
 8000968:	1dfb      	adds	r3, r7, #7
 800096a:	701a      	strb	r2, [r3, #0]

	uint8_t mask = 1;
 800096c:	230f      	movs	r3, #15
 800096e:	18fb      	adds	r3, r7, r3
 8000970:	2201      	movs	r2, #1
 8000972:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = COL0; i < PIN_NUMBER_FOR_COLUMN + COL0; ++i) {
 8000974:	230e      	movs	r3, #14
 8000976:	18fb      	adds	r3, r7, r3
 8000978:	2203      	movs	r2, #3
 800097a:	701a      	strb	r2, [r3, #0]
 800097c:	e037      	b.n	80009ee <set_gpio_column+0x8e>
		if(column & mask) {
 800097e:	1dfb      	adds	r3, r7, #7
 8000980:	220f      	movs	r2, #15
 8000982:	18ba      	adds	r2, r7, r2
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	7812      	ldrb	r2, [r2, #0]
 8000988:	4013      	ands	r3, r2
 800098a:	b2db      	uxtb	r3, r3
 800098c:	2b00      	cmp	r3, #0
 800098e:	d011      	beq.n	80009b4 <set_gpio_column+0x54>
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_SET);
 8000990:	210e      	movs	r1, #14
 8000992:	187b      	adds	r3, r7, r1
 8000994:	781a      	ldrb	r2, [r3, #0]
 8000996:	4b1b      	ldr	r3, [pc, #108]	@ (8000a04 <set_gpio_column+0xa4>)
 8000998:	00d2      	lsls	r2, r2, #3
 800099a:	58d0      	ldr	r0, [r2, r3]
 800099c:	187b      	adds	r3, r7, r1
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4a18      	ldr	r2, [pc, #96]	@ (8000a04 <set_gpio_column+0xa4>)
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	18d3      	adds	r3, r2, r3
 80009a6:	3304      	adds	r3, #4
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	2201      	movs	r2, #1
 80009ac:	0019      	movs	r1, r3
 80009ae:	f001 f902 	bl	8001bb6 <HAL_GPIO_WritePin>
 80009b2:	e010      	b.n	80009d6 <set_gpio_column+0x76>
		} else {
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_RESET);
 80009b4:	210e      	movs	r1, #14
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	781a      	ldrb	r2, [r3, #0]
 80009ba:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <set_gpio_column+0xa4>)
 80009bc:	00d2      	lsls	r2, r2, #3
 80009be:	58d0      	ldr	r0, [r2, r3]
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4a0f      	ldr	r2, [pc, #60]	@ (8000a04 <set_gpio_column+0xa4>)
 80009c6:	00db      	lsls	r3, r3, #3
 80009c8:	18d3      	adds	r3, r2, r3
 80009ca:	3304      	adds	r3, #4
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	2200      	movs	r2, #0
 80009d0:	0019      	movs	r1, r3
 80009d2:	f001 f8f0 	bl	8001bb6 <HAL_GPIO_WritePin>
		}
		mask *= 2;
 80009d6:	230f      	movs	r3, #15
 80009d8:	18fa      	adds	r2, r7, r3
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	18db      	adds	r3, r3, r3
 80009e0:	7013      	strb	r3, [r2, #0]
	for(uint8_t i = COL0; i < PIN_NUMBER_FOR_COLUMN + COL0; ++i) {
 80009e2:	220e      	movs	r2, #14
 80009e4:	18bb      	adds	r3, r7, r2
 80009e6:	18ba      	adds	r2, r7, r2
 80009e8:	7812      	ldrb	r2, [r2, #0]
 80009ea:	3201      	adds	r2, #1
 80009ec:	701a      	strb	r2, [r3, #0]
 80009ee:	230e      	movs	r3, #14
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b05      	cmp	r3, #5
 80009f6:	d9c2      	bls.n	800097e <set_gpio_column+0x1e>
	}
}
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	46c0      	nop			@ (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b004      	add	sp, #16
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	08004830 	.word	0x08004830

08000a08 <set_gpio_line>:

/* Set the GPIO line for the decoder
 * Return void
 */
void set_gpio_line(uint8_t line) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	0002      	movs	r2, r0
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	701a      	strb	r2, [r3, #0]

	uint8_t mask = 1;
 8000a14:	230f      	movs	r3, #15
 8000a16:	18fb      	adds	r3, r7, r3
 8000a18:	2201      	movs	r2, #1
 8000a1a:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = ROW0; i < PIN_NUMBER_FOR_LINE; ++i) {
 8000a1c:	230e      	movs	r3, #14
 8000a1e:	18fb      	adds	r3, r7, r3
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
 8000a24:	e037      	b.n	8000a96 <set_gpio_line+0x8e>
		if(line & mask) {
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	220f      	movs	r2, #15
 8000a2a:	18ba      	adds	r2, r7, r2
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	7812      	ldrb	r2, [r2, #0]
 8000a30:	4013      	ands	r3, r2
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d011      	beq.n	8000a5c <set_gpio_line+0x54>
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_SET);
 8000a38:	210e      	movs	r1, #14
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	781a      	ldrb	r2, [r3, #0]
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000aac <set_gpio_line+0xa4>)
 8000a40:	00d2      	lsls	r2, r2, #3
 8000a42:	58d0      	ldr	r0, [r2, r3]
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4a18      	ldr	r2, [pc, #96]	@ (8000aac <set_gpio_line+0xa4>)
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	18d3      	adds	r3, r2, r3
 8000a4e:	3304      	adds	r3, #4
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	2201      	movs	r2, #1
 8000a54:	0019      	movs	r1, r3
 8000a56:	f001 f8ae 	bl	8001bb6 <HAL_GPIO_WritePin>
 8000a5a:	e010      	b.n	8000a7e <set_gpio_line+0x76>
		} else {
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_RESET);
 8000a5c:	210e      	movs	r1, #14
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	781a      	ldrb	r2, [r3, #0]
 8000a62:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <set_gpio_line+0xa4>)
 8000a64:	00d2      	lsls	r2, r2, #3
 8000a66:	58d0      	ldr	r0, [r2, r3]
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000aac <set_gpio_line+0xa4>)
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	18d3      	adds	r3, r2, r3
 8000a72:	3304      	adds	r3, #4
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	2200      	movs	r2, #0
 8000a78:	0019      	movs	r1, r3
 8000a7a:	f001 f89c 	bl	8001bb6 <HAL_GPIO_WritePin>
		}
		mask *= 2;
 8000a7e:	230f      	movs	r3, #15
 8000a80:	18fa      	adds	r2, r7, r3
 8000a82:	18fb      	adds	r3, r7, r3
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	18db      	adds	r3, r3, r3
 8000a88:	7013      	strb	r3, [r2, #0]
	for(uint8_t i = ROW0; i < PIN_NUMBER_FOR_LINE; ++i) {
 8000a8a:	220e      	movs	r2, #14
 8000a8c:	18bb      	adds	r3, r7, r2
 8000a8e:	18ba      	adds	r2, r7, r2
 8000a90:	7812      	ldrb	r2, [r2, #0]
 8000a92:	3201      	adds	r2, #1
 8000a94:	701a      	strb	r2, [r3, #0]
 8000a96:	230e      	movs	r3, #14
 8000a98:	18fb      	adds	r3, r7, r3
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d9c2      	bls.n	8000a26 <set_gpio_line+0x1e>
	}
}
 8000aa0:	46c0      	nop			@ (mov r8, r8)
 8000aa2:	46c0      	nop			@ (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	b004      	add	sp, #16
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	08004830 	.word	0x08004830

08000ab0 <read_reed_value>:

/* This function read one reed sensor, depending on the selected square
 * Return the : ON or OFF
 */
uint8_t read_reed_value(Square square) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	8018      	strh	r0, [r3, #0]

	// Set the value with the decodeur
	set_gpio_column(square.column);
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f7ff ff4e 	bl	8000960 <set_gpio_column>
	set_gpio_line(square.line);
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	785b      	ldrb	r3, [r3, #1]
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f7ff ff9d 	bl	8000a08 <set_gpio_line>

	// Get the value on the READ pin (see schematics)
	return HAL_GPIO_ReadPin(gpio_pins[READ].port, gpio_pins[READ].pin);
 8000ace:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <read_reed_value+0x34>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	0011      	movs	r1, r2
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f001 f851 	bl	8001b7c <HAL_GPIO_ReadPin>
 8000ada:	0003      	movs	r3, r0
}
 8000adc:	0018      	movs	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b002      	add	sp, #8
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	50000400 	.word	0x50000400

08000ae8 <read_full_board>:

/* This method will fill the bitmap depending on the reeds sensors states
 * Return : void
 */
void read_full_board(uint64_t *board_bitmap) {
 8000ae8:	b5b0      	push	{r4, r5, r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]

	Square square = {0, 0};
 8000af0:	210c      	movs	r1, #12
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2200      	movs	r2, #0
 8000afc:	705a      	strb	r2, [r3, #1]
	// For all the board's squares
	for(uint8_t line = 0; line < BOARD_WIDTH; ++line) {
 8000afe:	230f      	movs	r3, #15
 8000b00:	18fb      	adds	r3, r7, r3
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
 8000b06:	e03f      	b.n	8000b88 <read_full_board+0xa0>
		for(uint8_t column = 0; column < BOARD_HEIGHT; ++column) {
 8000b08:	230e      	movs	r3, #14
 8000b0a:	18fb      	adds	r3, r7, r3
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
 8000b10:	e02f      	b.n	8000b72 <read_full_board+0x8a>
			// Init square (each column and lines)
			square.column = column;
 8000b12:	210c      	movs	r1, #12
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	240e      	movs	r4, #14
 8000b18:	193a      	adds	r2, r7, r4
 8000b1a:	7812      	ldrb	r2, [r2, #0]
 8000b1c:	701a      	strb	r2, [r3, #0]
			square.line = line;
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	250f      	movs	r5, #15
 8000b22:	197a      	adds	r2, r7, r5
 8000b24:	7812      	ldrb	r2, [r2, #0]
 8000b26:	705a      	strb	r2, [r3, #1]
			// If the reed sensor is closed, the bit is set
			if(read_reed_value(square)) {
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	f7ff ffc0 	bl	8000ab0 <read_reed_value>
 8000b30:	1e03      	subs	r3, r0, #0
 8000b32:	d00b      	beq.n	8000b4c <read_full_board+0x64>
				bitmap_set_bit(board_bitmap, line * BOARD_WIDTH + column);
 8000b34:	197b      	adds	r3, r7, r5
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	00da      	lsls	r2, r3, #3
 8000b3a:	193b      	adds	r3, r7, r4
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	18d2      	adds	r2, r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	0011      	movs	r1, r2
 8000b44:	0018      	movs	r0, r3
 8000b46:	f7ff fb79 	bl	800023c <bitmap_set_bit>
 8000b4a:	e00c      	b.n	8000b66 <read_full_board+0x7e>
			} else {
				// If the reed sensor is open, the bit is clear
				bitmap_clear_bit(board_bitmap, line * BOARD_WIDTH + column);
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	18fb      	adds	r3, r7, r3
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	00da      	lsls	r2, r3, #3
 8000b54:	230e      	movs	r3, #14
 8000b56:	18fb      	adds	r3, r7, r3
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	18d2      	adds	r2, r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	0011      	movs	r1, r2
 8000b60:	0018      	movs	r0, r3
 8000b62:	f7ff fb9f 	bl	80002a4 <bitmap_clear_bit>
		for(uint8_t column = 0; column < BOARD_HEIGHT; ++column) {
 8000b66:	220e      	movs	r2, #14
 8000b68:	18bb      	adds	r3, r7, r2
 8000b6a:	18ba      	adds	r2, r7, r2
 8000b6c:	7812      	ldrb	r2, [r2, #0]
 8000b6e:	3201      	adds	r2, #1
 8000b70:	701a      	strb	r2, [r3, #0]
 8000b72:	230e      	movs	r3, #14
 8000b74:	18fb      	adds	r3, r7, r3
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b07      	cmp	r3, #7
 8000b7a:	d9ca      	bls.n	8000b12 <read_full_board+0x2a>
	for(uint8_t line = 0; line < BOARD_WIDTH; ++line) {
 8000b7c:	220f      	movs	r2, #15
 8000b7e:	18bb      	adds	r3, r7, r2
 8000b80:	18ba      	adds	r2, r7, r2
 8000b82:	7812      	ldrb	r2, [r2, #0]
 8000b84:	3201      	adds	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
 8000b88:	230f      	movs	r3, #15
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b07      	cmp	r3, #7
 8000b90:	d9ba      	bls.n	8000b08 <read_full_board+0x20>
			}

		}
	}
}
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	46c0      	nop			@ (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b004      	add	sp, #16
 8000b9a:	bdb0      	pop	{r4, r5, r7, pc}

08000b9c <convert_reed_index_to_led_index>:

/* Convert reed index to led index
 * Return the led index corresponding to the reed triggered
 */
uint8_t convert_reed_index_to_led_index(uint8_t reed_index) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	0002      	movs	r2, r0
 8000ba4:	1dfb      	adds	r3, r7, #7
 8000ba6:	701a      	strb	r2, [r3, #0]
	if((reed_index / 8) % 2 == 0) {
 8000ba8:	1dfb      	adds	r3, r7, #7
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	08db      	lsrs	r3, r3, #3
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d102      	bne.n	8000bc0 <convert_reed_index_to_led_index+0x24>
		return reed_index;
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	e00b      	b.n	8000bd8 <convert_reed_index_to_led_index+0x3c>
	} else {
		// The magical formule to get the led index
		return (16 * (uint8_t)(reed_index / 8)) + 7 - reed_index;
 8000bc0:	1dfb      	adds	r3, r7, #7
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	08db      	lsrs	r3, r3, #3
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	011b      	lsls	r3, r3, #4
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	1dfb      	adds	r3, r7, #7
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	3307      	adds	r3, #7
 8000bd6:	b2db      	uxtb	r3, r3
	}
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b002      	add	sp, #8
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	46c0      	nop			@ (mov r8, r8)
 8000bea:	e7fd      	b.n	8000be8 <Error_Handler+0x8>

08000bec <rgb_update_buffer>:
#include "rgb_led.h"

// -------------------------------------------------------------------
// Fill the buffer PWM depending on the table "colors"
// -------------------------------------------------------------------
void rgb_update_buffer(uint16_t *pwm_data, ColorName *colors) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
    for(int led = 0; led < LED_NUMBER; led++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	e057      	b.n	8000cac <rgb_update_buffer+0xc0>
    {
        uint32_t color = ((uint32_t)colors_values[colors[led]].r << 16) |  // R
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	683a      	ldr	r2, [r7, #0]
 8000c00:	18d3      	adds	r3, r2, r3
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	0019      	movs	r1, r3
 8000c06:	4a36      	ldr	r2, [pc, #216]	@ (8000ce0 <rgb_update_buffer+0xf4>)
 8000c08:	000b      	movs	r3, r1
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	185b      	adds	r3, r3, r1
 8000c0e:	5c9b      	ldrb	r3, [r3, r2]
 8000c10:	041a      	lsls	r2, r3, #16
        				 ((uint32_t)colors_values[colors[led]].g << 8) |  // G
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	6839      	ldr	r1, [r7, #0]
 8000c16:	18cb      	adds	r3, r1, r3
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	4930      	ldr	r1, [pc, #192]	@ (8000ce0 <rgb_update_buffer+0xf4>)
 8000c1e:	0003      	movs	r3, r0
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	181b      	adds	r3, r3, r0
 8000c24:	18cb      	adds	r3, r1, r3
 8000c26:	3301      	adds	r3, #1
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	021b      	lsls	r3, r3, #8
        uint32_t color = ((uint32_t)colors_values[colors[led]].r << 16) |  // R
 8000c2c:	431a      	orrs	r2, r3
                         ((uint32_t)colors_values[colors[led]].b << 0);  // R
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	6839      	ldr	r1, [r7, #0]
 8000c32:	18cb      	adds	r3, r1, r3
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	0018      	movs	r0, r3
 8000c38:	4929      	ldr	r1, [pc, #164]	@ (8000ce0 <rgb_update_buffer+0xf4>)
 8000c3a:	0003      	movs	r3, r0
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	181b      	adds	r3, r3, r0
 8000c40:	18cb      	adds	r3, r1, r3
 8000c42:	3302      	adds	r3, #2
 8000c44:	781b      	ldrb	r3, [r3, #0]
        uint32_t color = ((uint32_t)colors_values[colors[led]].r << 16) |  // R
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60bb      	str	r3, [r7, #8]
        for(int i = 0; i < 24; i++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	e027      	b.n	8000ca0 <rgb_update_buffer+0xb4>
        {
            if(color & (1 << (23-i)))
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	2217      	movs	r2, #23
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2201      	movs	r2, #1
 8000c58:	409a      	lsls	r2, r3
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	001a      	movs	r2, r3
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	4013      	ands	r3, r2
 8000c62:	d00d      	beq.n	8000c80 <rgb_update_buffer+0x94>
            	pwm_data[led*24 + i] = HIGH_DUTY;
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	0013      	movs	r3, r2
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	189b      	adds	r3, r3, r2
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	001a      	movs	r2, r3
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	18d3      	adds	r3, r2, r3
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	18d3      	adds	r3, r2, r3
 8000c7a:	221a      	movs	r2, #26
 8000c7c:	801a      	strh	r2, [r3, #0]
 8000c7e:	e00c      	b.n	8000c9a <rgb_update_buffer+0xae>
            else
            	pwm_data[led*24 + i] = LOW_DUTY;
 8000c80:	697a      	ldr	r2, [r7, #20]
 8000c82:	0013      	movs	r3, r2
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	189b      	adds	r3, r3, r2
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	001a      	movs	r2, r3
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	18d3      	adds	r3, r2, r3
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	18d3      	adds	r3, r2, r3
 8000c96:	220d      	movs	r2, #13
 8000c98:	801a      	strh	r2, [r3, #0]
        for(int i = 0; i < 24; i++)
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	2b17      	cmp	r3, #23
 8000ca4:	ddd4      	ble.n	8000c50 <rgb_update_buffer+0x64>
    for(int led = 0; led < LED_NUMBER; led++)
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	2b3f      	cmp	r3, #63	@ 0x3f
 8000cb0:	dda4      	ble.n	8000bfc <rgb_update_buffer+0x10>
        }
    }

    // Ajoute les zéros pour le reset (>50µs)
    for(int i = 24*LED_NUMBER; i < LED_BUFFER_SIZE; i++)
 8000cb2:	23c0      	movs	r3, #192	@ 0xc0
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	e008      	b.n	8000ccc <rgb_update_buffer+0xe0>
    {
    	pwm_data[i] = 0;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	18d3      	adds	r3, r2, r3
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	801a      	strh	r2, [r3, #0]
    for(int i = 24*LED_NUMBER; i < LED_BUFFER_SIZE; i++)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4a05      	ldr	r2, [pc, #20]	@ (8000ce4 <rgb_update_buffer+0xf8>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	ddf2      	ble.n	8000cba <rgb_update_buffer+0xce>
    }
}
 8000cd4:	46c0      	nop			@ (mov r8, r8)
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b006      	add	sp, #24
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	08004870 	.word	0x08004870
 8000ce4:	00000631 	.word	0x00000631

08000ce8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <HAL_MspInit+0x44>)
 8000cf0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d2c <HAL_MspInit+0x44>)
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <HAL_MspInit+0x44>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4013      	ands	r3, r2
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <HAL_MspInit+0x44>)
 8000d08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d0a:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <HAL_MspInit+0x44>)
 8000d0c:	2180      	movs	r1, #128	@ 0x80
 8000d0e:	0549      	lsls	r1, r1, #21
 8000d10:	430a      	orrs	r2, r1
 8000d12:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d14:	4b05      	ldr	r3, [pc, #20]	@ (8000d2c <HAL_MspInit+0x44>)
 8000d16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d18:	2380      	movs	r3, #128	@ 0x80
 8000d1a:	055b      	lsls	r3, r3, #21
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	40021000 	.word	0x40021000

08000d30 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b091      	sub	sp, #68	@ 0x44
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	232c      	movs	r3, #44	@ 0x2c
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	2314      	movs	r3, #20
 8000d40:	001a      	movs	r2, r3
 8000d42:	2100      	movs	r1, #0
 8000d44:	f003 fd3c 	bl	80047c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d48:	2414      	movs	r4, #20
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	2318      	movs	r3, #24
 8000d50:	001a      	movs	r2, r3
 8000d52:	2100      	movs	r1, #0
 8000d54:	f003 fd34 	bl	80047c0 <memset>
  if(hi2c->Instance==I2C1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a22      	ldr	r2, [pc, #136]	@ (8000de8 <HAL_I2C_MspInit+0xb8>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d13e      	bne.n	8000de0 <HAL_I2C_MspInit+0xb0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d62:	193b      	adds	r3, r7, r4
 8000d64:	2220      	movs	r2, #32
 8000d66:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d68:	193b      	adds	r3, r7, r4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	0018      	movs	r0, r3
 8000d72:	f001 fd81 	bl	8002878 <HAL_RCCEx_PeriphCLKConfig>
 8000d76:	1e03      	subs	r3, r0, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d7a:	f7ff ff31 	bl	8000be0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dec <HAL_I2C_MspInit+0xbc>)
 8000d80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d82:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <HAL_I2C_MspInit+0xbc>)
 8000d84:	2102      	movs	r1, #2
 8000d86:	430a      	orrs	r2, r1
 8000d88:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d8a:	4b18      	ldr	r3, [pc, #96]	@ (8000dec <HAL_I2C_MspInit+0xbc>)
 8000d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d8e:	2202      	movs	r2, #2
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 8000d96:	212c      	movs	r1, #44	@ 0x2c
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2290      	movs	r2, #144	@ 0x90
 8000d9c:	0092      	lsls	r2, r2, #2
 8000d9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2212      	movs	r2, #18
 8000da4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	2206      	movs	r2, #6
 8000db6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	4a0d      	ldr	r2, [pc, #52]	@ (8000df0 <HAL_I2C_MspInit+0xc0>)
 8000dbc:	0019      	movs	r1, r3
 8000dbe:	0010      	movs	r0, r2
 8000dc0:	f000 fd78 	bl	80018b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dc4:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <HAL_I2C_MspInit+0xbc>)
 8000dc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dc8:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <HAL_I2C_MspInit+0xbc>)
 8000dca:	2180      	movs	r1, #128	@ 0x80
 8000dcc:	0389      	lsls	r1, r1, #14
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dd2:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <HAL_I2C_MspInit+0xbc>)
 8000dd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dd6:	2380      	movs	r3, #128	@ 0x80
 8000dd8:	039b      	lsls	r3, r3, #14
 8000dda:	4013      	ands	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000de0:	46c0      	nop			@ (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b011      	add	sp, #68	@ 0x44
 8000de6:	bd90      	pop	{r4, r7, pc}
 8000de8:	40005400 	.word	0x40005400
 8000dec:	40021000 	.word	0x40021000
 8000df0:	50000400 	.word	0x50000400

08000df4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a24      	ldr	r2, [pc, #144]	@ (8000e94 <HAL_TIM_Base_MspInit+0xa0>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d141      	bne.n	8000e8a <HAL_TIM_Base_MspInit+0x96>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000e06:	4b24      	ldr	r3, [pc, #144]	@ (8000e98 <HAL_TIM_Base_MspInit+0xa4>)
 8000e08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e0a:	4b23      	ldr	r3, [pc, #140]	@ (8000e98 <HAL_TIM_Base_MspInit+0xa4>)
 8000e0c:	2180      	movs	r1, #128	@ 0x80
 8000e0e:	02c9      	lsls	r1, r1, #11
 8000e10:	430a      	orrs	r2, r1
 8000e12:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e14:	4b20      	ldr	r3, [pc, #128]	@ (8000e98 <HAL_TIM_Base_MspInit+0xa4>)
 8000e16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e18:	2380      	movs	r3, #128	@ 0x80
 8000e1a:	02db      	lsls	r3, r3, #11
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]

    /* TIM17 DMA Init */
    /* TIM17_CH1 Init */
    hdma_tim17_ch1.Instance = DMA1_Channel1;
 8000e22:	4b1e      	ldr	r3, [pc, #120]	@ (8000e9c <HAL_TIM_Base_MspInit+0xa8>)
 8000e24:	4a1e      	ldr	r2, [pc, #120]	@ (8000ea0 <HAL_TIM_Base_MspInit+0xac>)
 8000e26:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
 8000e28:	4b1c      	ldr	r3, [pc, #112]	@ (8000e9c <HAL_TIM_Base_MspInit+0xa8>)
 8000e2a:	222f      	movs	r2, #47	@ 0x2f
 8000e2c:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e9c <HAL_TIM_Base_MspInit+0xa8>)
 8000e30:	2210      	movs	r2, #16
 8000e32:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e34:	4b19      	ldr	r3, [pc, #100]	@ (8000e9c <HAL_TIM_Base_MspInit+0xa8>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000e3a:	4b18      	ldr	r3, [pc, #96]	@ (8000e9c <HAL_TIM_Base_MspInit+0xa8>)
 8000e3c:	2280      	movs	r2, #128	@ 0x80
 8000e3e:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e40:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <HAL_TIM_Base_MspInit+0xa8>)
 8000e42:	2280      	movs	r2, #128	@ 0x80
 8000e44:	0052      	lsls	r2, r2, #1
 8000e46:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e48:	4b14      	ldr	r3, [pc, #80]	@ (8000e9c <HAL_TIM_Base_MspInit+0xa8>)
 8000e4a:	2280      	movs	r2, #128	@ 0x80
 8000e4c:	00d2      	lsls	r2, r2, #3
 8000e4e:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1.Init.Mode = DMA_NORMAL;
 8000e50:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <HAL_TIM_Base_MspInit+0xa8>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000e56:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <HAL_TIM_Base_MspInit+0xa8>)
 8000e58:	2280      	movs	r2, #128	@ 0x80
 8000e5a:	0152      	lsls	r2, r2, #5
 8000e5c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e9c <HAL_TIM_Base_MspInit+0xa8>)
 8000e60:	0018      	movs	r0, r3
 8000e62:	f000 fa6b 	bl	800133c <HAL_DMA_Init>
 8000e66:	1e03      	subs	r3, r0, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_TIM_Base_MspInit+0x7a>
    {
      Error_Handler();
 8000e6a:	f7ff feb9 	bl	8000be0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <HAL_TIM_Base_MspInit+0xa8>)
 8000e72:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e74:	4b09      	ldr	r3, [pc, #36]	@ (8000e9c <HAL_TIM_Base_MspInit+0xa8>)
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	629a      	str	r2, [r3, #40]	@ 0x28

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2016      	movs	r0, #22
 8000e80:	f000 fa2a 	bl	80012d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000e84:	2016      	movs	r0, #22
 8000e86:	f000 fa3c 	bl	8001302 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b004      	add	sp, #16
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	40014800 	.word	0x40014800
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	200000cc 	.word	0x200000cc
 8000ea0:	40020008 	.word	0x40020008

08000ea4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b089      	sub	sp, #36	@ 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	240c      	movs	r4, #12
 8000eae:	193b      	adds	r3, r7, r4
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	2314      	movs	r3, #20
 8000eb4:	001a      	movs	r2, r3
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	f003 fc82 	bl	80047c0 <memset>
  if(htim->Instance==TIM17)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a14      	ldr	r2, [pc, #80]	@ (8000f14 <HAL_TIM_MspPostInit+0x70>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d122      	bne.n	8000f0c <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	4b14      	ldr	r3, [pc, #80]	@ (8000f18 <HAL_TIM_MspPostInit+0x74>)
 8000ec8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000eca:	4b13      	ldr	r3, [pc, #76]	@ (8000f18 <HAL_TIM_MspPostInit+0x74>)
 8000ecc:	2101      	movs	r1, #1
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ed2:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <HAL_TIM_MspPostInit+0x74>)
 8000ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ede:	0021      	movs	r1, r4
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2280      	movs	r2, #128	@ 0x80
 8000ee4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2202      	movs	r2, #2
 8000eea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	2205      	movs	r2, #5
 8000efc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	187a      	adds	r2, r7, r1
 8000f00:	23a0      	movs	r3, #160	@ 0xa0
 8000f02:	05db      	lsls	r3, r3, #23
 8000f04:	0011      	movs	r1, r2
 8000f06:	0018      	movs	r0, r3
 8000f08:	f000 fcd4 	bl	80018b4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000f0c:	46c0      	nop			@ (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b009      	add	sp, #36	@ 0x24
 8000f12:	bd90      	pop	{r4, r7, pc}
 8000f14:	40014800 	.word	0x40014800
 8000f18:	40021000 	.word	0x40021000

08000f1c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b08b      	sub	sp, #44	@ 0x2c
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	2414      	movs	r4, #20
 8000f26:	193b      	adds	r3, r7, r4
 8000f28:	0018      	movs	r0, r3
 8000f2a:	2314      	movs	r3, #20
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	f003 fc46 	bl	80047c0 <memset>
  if(huart->Instance==USART2)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa8 <HAL_UART_MspInit+0x8c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d130      	bne.n	8000fa0 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fac <HAL_UART_MspInit+0x90>)
 8000f40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f42:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <HAL_UART_MspInit+0x90>)
 8000f44:	2180      	movs	r1, #128	@ 0x80
 8000f46:	0289      	lsls	r1, r1, #10
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f4c:	4b17      	ldr	r3, [pc, #92]	@ (8000fac <HAL_UART_MspInit+0x90>)
 8000f4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f50:	2380      	movs	r3, #128	@ 0x80
 8000f52:	029b      	lsls	r3, r3, #10
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <HAL_UART_MspInit+0x90>)
 8000f5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f5e:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <HAL_UART_MspInit+0x90>)
 8000f60:	2101      	movs	r1, #1
 8000f62:	430a      	orrs	r2, r1
 8000f64:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f66:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <HAL_UART_MspInit+0x90>)
 8000f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000f72:	0021      	movs	r1, r4
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	220f      	movs	r2, #15
 8000f78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	2201      	movs	r2, #1
 8000f90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	187a      	adds	r2, r7, r1
 8000f94:	23a0      	movs	r3, #160	@ 0xa0
 8000f96:	05db      	lsls	r3, r3, #23
 8000f98:	0011      	movs	r1, r2
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f000 fc8a 	bl	80018b4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000fa0:	46c0      	nop			@ (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b00b      	add	sp, #44	@ 0x2c
 8000fa6:	bd90      	pop	{r4, r7, pc}
 8000fa8:	40004400 	.word	0x40004400
 8000fac:	40021000 	.word	0x40021000

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb4:	46c0      	nop			@ (mov r8, r8)
 8000fb6:	e7fd      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbc:	46c0      	nop			@ (mov r8, r8)
 8000fbe:	e7fd      	b.n	8000fbc <HardFault_Handler+0x4>

08000fc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fc4:	46c0      	nop			@ (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fce:	46c0      	nop			@ (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd8:	f000 f8b6 	bl	8001148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fdc:	46c0      	nop			@ (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1);
 8000fe8:	4b03      	ldr	r3, [pc, #12]	@ (8000ff8 <DMA1_Channel1_IRQHandler+0x14>)
 8000fea:	0018      	movs	r0, r3
 8000fec:	f000 fb20 	bl	8001630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ff0:	46c0      	nop			@ (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			@ (mov r8, r8)
 8000ff8:	200000cc 	.word	0x200000cc

08000ffc <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001000:	4b03      	ldr	r3, [pc, #12]	@ (8001010 <TIM17_IRQHandler+0x14>)
 8001002:	0018      	movs	r0, r3
 8001004:	f002 f8ee 	bl	80031e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001008:	46c0      	nop			@ (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	46c0      	nop			@ (mov r8, r8)
 8001010:	20000080 	.word	0x20000080

08001014 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	46c0      	nop			@ (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001020:	480d      	ldr	r0, [pc, #52]	@ (8001058 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001022:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001024:	f7ff fff6 	bl	8001014 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001028:	480c      	ldr	r0, [pc, #48]	@ (800105c <LoopForever+0x6>)
  ldr r1, =_edata
 800102a:	490d      	ldr	r1, [pc, #52]	@ (8001060 <LoopForever+0xa>)
  ldr r2, =_sidata
 800102c:	4a0d      	ldr	r2, [pc, #52]	@ (8001064 <LoopForever+0xe>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0a      	ldr	r2, [pc, #40]	@ (8001068 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001040:	4c0a      	ldr	r4, [pc, #40]	@ (800106c <LoopForever+0x16>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800104e:	f003 fbbf 	bl	80047d0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001052:	f7ff f98f 	bl	8000374 <main>

08001056 <LoopForever>:

LoopForever:
  b LoopForever
 8001056:	e7fe      	b.n	8001056 <LoopForever>
  ldr   r0, =_estack
 8001058:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001060:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001064:	0800495c 	.word	0x0800495c
  ldr r2, =_sbss
 8001068:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800106c:	200001c0 	.word	0x200001c0

08001070 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001070:	e7fe      	b.n	8001070 <ADC1_IRQHandler>
	...

08001074 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001080:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <HAL_Init+0x3c>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <HAL_Init+0x3c>)
 8001086:	2180      	movs	r1, #128	@ 0x80
 8001088:	0049      	lsls	r1, r1, #1
 800108a:	430a      	orrs	r2, r1
 800108c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800108e:	2003      	movs	r0, #3
 8001090:	f000 f810 	bl	80010b4 <HAL_InitTick>
 8001094:	1e03      	subs	r3, r0, #0
 8001096:	d003      	beq.n	80010a0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001098:	1dfb      	adds	r3, r7, #7
 800109a:	2201      	movs	r2, #1
 800109c:	701a      	strb	r2, [r3, #0]
 800109e:	e001      	b.n	80010a4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80010a0:	f7ff fe22 	bl	8000ce8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010a4:	1dfb      	adds	r3, r7, #7
 80010a6:	781b      	ldrb	r3, [r3, #0]
}
 80010a8:	0018      	movs	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b002      	add	sp, #8
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40022000 	.word	0x40022000

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010bc:	230f      	movs	r3, #15
 80010be:	18fb      	adds	r3, r7, r3
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80010c4:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <HAL_InitTick+0x88>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d02b      	beq.n	8001124 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80010cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001140 <HAL_InitTick+0x8c>)
 80010ce:	681c      	ldr	r4, [r3, #0]
 80010d0:	4b1a      	ldr	r3, [pc, #104]	@ (800113c <HAL_InitTick+0x88>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	0019      	movs	r1, r3
 80010d6:	23fa      	movs	r3, #250	@ 0xfa
 80010d8:	0098      	lsls	r0, r3, #2
 80010da:	f7ff f811 	bl	8000100 <__udivsi3>
 80010de:	0003      	movs	r3, r0
 80010e0:	0019      	movs	r1, r3
 80010e2:	0020      	movs	r0, r4
 80010e4:	f7ff f80c 	bl	8000100 <__udivsi3>
 80010e8:	0003      	movs	r3, r0
 80010ea:	0018      	movs	r0, r3
 80010ec:	f000 f919 	bl	8001322 <HAL_SYSTICK_Config>
 80010f0:	1e03      	subs	r3, r0, #0
 80010f2:	d112      	bne.n	800111a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	d80a      	bhi.n	8001110 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	2301      	movs	r3, #1
 80010fe:	425b      	negs	r3, r3
 8001100:	2200      	movs	r2, #0
 8001102:	0018      	movs	r0, r3
 8001104:	f000 f8e8 	bl	80012d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001108:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <HAL_InitTick+0x90>)
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	e00d      	b.n	800112c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001110:	230f      	movs	r3, #15
 8001112:	18fb      	adds	r3, r7, r3
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
 8001118:	e008      	b.n	800112c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800111a:	230f      	movs	r3, #15
 800111c:	18fb      	adds	r3, r7, r3
 800111e:	2201      	movs	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
 8001122:	e003      	b.n	800112c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001124:	230f      	movs	r3, #15
 8001126:	18fb      	adds	r3, r7, r3
 8001128:	2201      	movs	r2, #1
 800112a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800112c:	230f      	movs	r3, #15
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	781b      	ldrb	r3, [r3, #0]
}
 8001132:	0018      	movs	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	b005      	add	sp, #20
 8001138:	bd90      	pop	{r4, r7, pc}
 800113a:	46c0      	nop			@ (mov r8, r8)
 800113c:	20000008 	.word	0x20000008
 8001140:	20000000 	.word	0x20000000
 8001144:	20000004 	.word	0x20000004

08001148 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800114c:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <HAL_IncTick+0x1c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	001a      	movs	r2, r3
 8001152:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <HAL_IncTick+0x20>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	18d2      	adds	r2, r2, r3
 8001158:	4b03      	ldr	r3, [pc, #12]	@ (8001168 <HAL_IncTick+0x20>)
 800115a:	601a      	str	r2, [r3, #0]
}
 800115c:	46c0      	nop			@ (mov r8, r8)
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	46c0      	nop			@ (mov r8, r8)
 8001164:	20000008 	.word	0x20000008
 8001168:	200001bc 	.word	0x200001bc

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b02      	ldr	r3, [pc, #8]	@ (800117c <HAL_GetTick+0x10>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	0018      	movs	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	200001bc 	.word	0x200001bc

08001180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	0002      	movs	r2, r0
 8001188:	1dfb      	adds	r3, r7, #7
 800118a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800118c:	1dfb      	adds	r3, r7, #7
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b7f      	cmp	r3, #127	@ 0x7f
 8001192:	d809      	bhi.n	80011a8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001194:	1dfb      	adds	r3, r7, #7
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	001a      	movs	r2, r3
 800119a:	231f      	movs	r3, #31
 800119c:	401a      	ands	r2, r3
 800119e:	4b04      	ldr	r3, [pc, #16]	@ (80011b0 <__NVIC_EnableIRQ+0x30>)
 80011a0:	2101      	movs	r1, #1
 80011a2:	4091      	lsls	r1, r2
 80011a4:	000a      	movs	r2, r1
 80011a6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80011a8:	46c0      	nop			@ (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b002      	add	sp, #8
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	e000e100 	.word	0xe000e100

080011b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	0002      	movs	r2, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	1dfb      	adds	r3, r7, #7
 80011c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011c2:	1dfb      	adds	r3, r7, #7
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80011c8:	d828      	bhi.n	800121c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001288 <__NVIC_SetPriority+0xd4>)
 80011cc:	1dfb      	adds	r3, r7, #7
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b25b      	sxtb	r3, r3
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	33c0      	adds	r3, #192	@ 0xc0
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	589b      	ldr	r3, [r3, r2]
 80011da:	1dfa      	adds	r2, r7, #7
 80011dc:	7812      	ldrb	r2, [r2, #0]
 80011de:	0011      	movs	r1, r2
 80011e0:	2203      	movs	r2, #3
 80011e2:	400a      	ands	r2, r1
 80011e4:	00d2      	lsls	r2, r2, #3
 80011e6:	21ff      	movs	r1, #255	@ 0xff
 80011e8:	4091      	lsls	r1, r2
 80011ea:	000a      	movs	r2, r1
 80011ec:	43d2      	mvns	r2, r2
 80011ee:	401a      	ands	r2, r3
 80011f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	019b      	lsls	r3, r3, #6
 80011f6:	22ff      	movs	r2, #255	@ 0xff
 80011f8:	401a      	ands	r2, r3
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	0018      	movs	r0, r3
 8001200:	2303      	movs	r3, #3
 8001202:	4003      	ands	r3, r0
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001208:	481f      	ldr	r0, [pc, #124]	@ (8001288 <__NVIC_SetPriority+0xd4>)
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	b25b      	sxtb	r3, r3
 8001210:	089b      	lsrs	r3, r3, #2
 8001212:	430a      	orrs	r2, r1
 8001214:	33c0      	adds	r3, #192	@ 0xc0
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800121a:	e031      	b.n	8001280 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800121c:	4a1b      	ldr	r2, [pc, #108]	@ (800128c <__NVIC_SetPriority+0xd8>)
 800121e:	1dfb      	adds	r3, r7, #7
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	0019      	movs	r1, r3
 8001224:	230f      	movs	r3, #15
 8001226:	400b      	ands	r3, r1
 8001228:	3b08      	subs	r3, #8
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	3306      	adds	r3, #6
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	18d3      	adds	r3, r2, r3
 8001232:	3304      	adds	r3, #4
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	1dfa      	adds	r2, r7, #7
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	0011      	movs	r1, r2
 800123c:	2203      	movs	r2, #3
 800123e:	400a      	ands	r2, r1
 8001240:	00d2      	lsls	r2, r2, #3
 8001242:	21ff      	movs	r1, #255	@ 0xff
 8001244:	4091      	lsls	r1, r2
 8001246:	000a      	movs	r2, r1
 8001248:	43d2      	mvns	r2, r2
 800124a:	401a      	ands	r2, r3
 800124c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	019b      	lsls	r3, r3, #6
 8001252:	22ff      	movs	r2, #255	@ 0xff
 8001254:	401a      	ands	r2, r3
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	0018      	movs	r0, r3
 800125c:	2303      	movs	r3, #3
 800125e:	4003      	ands	r3, r0
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001264:	4809      	ldr	r0, [pc, #36]	@ (800128c <__NVIC_SetPriority+0xd8>)
 8001266:	1dfb      	adds	r3, r7, #7
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	001c      	movs	r4, r3
 800126c:	230f      	movs	r3, #15
 800126e:	4023      	ands	r3, r4
 8001270:	3b08      	subs	r3, #8
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	430a      	orrs	r2, r1
 8001276:	3306      	adds	r3, #6
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	18c3      	adds	r3, r0, r3
 800127c:	3304      	adds	r3, #4
 800127e:	601a      	str	r2, [r3, #0]
}
 8001280:	46c0      	nop			@ (mov r8, r8)
 8001282:	46bd      	mov	sp, r7
 8001284:	b003      	add	sp, #12
 8001286:	bd90      	pop	{r4, r7, pc}
 8001288:	e000e100 	.word	0xe000e100
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	1e5a      	subs	r2, r3, #1
 800129c:	2380      	movs	r3, #128	@ 0x80
 800129e:	045b      	lsls	r3, r3, #17
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d301      	bcc.n	80012a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a4:	2301      	movs	r3, #1
 80012a6:	e010      	b.n	80012ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a8:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <SysTick_Config+0x44>)
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	3a01      	subs	r2, #1
 80012ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b0:	2301      	movs	r3, #1
 80012b2:	425b      	negs	r3, r3
 80012b4:	2103      	movs	r1, #3
 80012b6:	0018      	movs	r0, r3
 80012b8:	f7ff ff7c 	bl	80011b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012bc:	4b05      	ldr	r3, [pc, #20]	@ (80012d4 <SysTick_Config+0x44>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c2:	4b04      	ldr	r3, [pc, #16]	@ (80012d4 <SysTick_Config+0x44>)
 80012c4:	2207      	movs	r2, #7
 80012c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	0018      	movs	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b002      	add	sp, #8
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	46c0      	nop			@ (mov r8, r8)
 80012d4:	e000e010 	.word	0xe000e010

080012d8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	210f      	movs	r1, #15
 80012e4:	187b      	adds	r3, r7, r1
 80012e6:	1c02      	adds	r2, r0, #0
 80012e8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b25b      	sxtb	r3, r3
 80012f2:	0011      	movs	r1, r2
 80012f4:	0018      	movs	r0, r3
 80012f6:	f7ff ff5d 	bl	80011b4 <__NVIC_SetPriority>
}
 80012fa:	46c0      	nop			@ (mov r8, r8)
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b004      	add	sp, #16
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	0002      	movs	r2, r0
 800130a:	1dfb      	adds	r3, r7, #7
 800130c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800130e:	1dfb      	adds	r3, r7, #7
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b25b      	sxtb	r3, r3
 8001314:	0018      	movs	r0, r3
 8001316:	f7ff ff33 	bl	8001180 <__NVIC_EnableIRQ>
}
 800131a:	46c0      	nop			@ (mov r8, r8)
 800131c:	46bd      	mov	sp, r7
 800131e:	b002      	add	sp, #8
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	0018      	movs	r0, r3
 800132e:	f7ff ffaf 	bl	8001290 <SysTick_Config>
 8001332:	0003      	movs	r3, r0
}
 8001334:	0018      	movs	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	b002      	add	sp, #8
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e077      	b.n	800143e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a3d      	ldr	r2, [pc, #244]	@ (8001448 <HAL_DMA_Init+0x10c>)
 8001354:	4694      	mov	ip, r2
 8001356:	4463      	add	r3, ip
 8001358:	2114      	movs	r1, #20
 800135a:	0018      	movs	r0, r3
 800135c:	f7fe fed0 	bl	8000100 <__udivsi3>
 8001360:	0003      	movs	r3, r0
 8001362:	009a      	lsls	r2, r3, #2
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2225      	movs	r2, #37	@ 0x25
 800136c:	2102      	movs	r1, #2
 800136e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4934      	ldr	r1, [pc, #208]	@ (800144c <HAL_DMA_Init+0x110>)
 800137c:	400a      	ands	r2, r1
 800137e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6819      	ldr	r1, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	431a      	orrs	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	431a      	orrs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	431a      	orrs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	431a      	orrs	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	0018      	movs	r0, r3
 80013ba:	f000 fa2b 	bl	8001814 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	2380      	movs	r3, #128	@ 0x80
 80013c4:	01db      	lsls	r3, r3, #7
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d102      	bne.n	80013d0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d8:	213f      	movs	r1, #63	@ 0x3f
 80013da:	400a      	ands	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80013e6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d011      	beq.n	8001414 <HAL_DMA_Init+0xd8>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b04      	cmp	r3, #4
 80013f6:	d80d      	bhi.n	8001414 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	0018      	movs	r0, r3
 80013fc:	f000 fa36 	bl	800186c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	e008      	b.n	8001426 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2225      	movs	r2, #37	@ 0x25
 8001430:	2101      	movs	r1, #1
 8001432:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2224      	movs	r2, #36	@ 0x24
 8001438:	2100      	movs	r1, #0
 800143a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	0018      	movs	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	b002      	add	sp, #8
 8001444:	bd80      	pop	{r7, pc}
 8001446:	46c0      	nop			@ (mov r8, r8)
 8001448:	bffdfff8 	.word	0xbffdfff8
 800144c:	ffff800f 	.word	0xffff800f

08001450 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
 800145c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800145e:	2317      	movs	r3, #23
 8001460:	18fb      	adds	r3, r7, r3
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2224      	movs	r2, #36	@ 0x24
 800146a:	5c9b      	ldrb	r3, [r3, r2]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d101      	bne.n	8001474 <HAL_DMA_Start_IT+0x24>
 8001470:	2302      	movs	r3, #2
 8001472:	e06f      	b.n	8001554 <HAL_DMA_Start_IT+0x104>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2224      	movs	r2, #36	@ 0x24
 8001478:	2101      	movs	r1, #1
 800147a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2225      	movs	r2, #37	@ 0x25
 8001480:	5c9b      	ldrb	r3, [r3, r2]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b01      	cmp	r3, #1
 8001486:	d157      	bne.n	8001538 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2225      	movs	r2, #37	@ 0x25
 800148c:	2102      	movs	r1, #2
 800148e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2200      	movs	r2, #0
 8001494:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2101      	movs	r1, #1
 80014a2:	438a      	bics	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	68b9      	ldr	r1, [r7, #8]
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 f971 	bl	8001794 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d008      	beq.n	80014cc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	210e      	movs	r1, #14
 80014c6:	430a      	orrs	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	e00f      	b.n	80014ec <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2104      	movs	r1, #4
 80014d8:	438a      	bics	r2, r1
 80014da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	210a      	movs	r1, #10
 80014e8:	430a      	orrs	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	2380      	movs	r3, #128	@ 0x80
 80014f4:	025b      	lsls	r3, r3, #9
 80014f6:	4013      	ands	r3, r2
 80014f8:	d008      	beq.n	800150c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001504:	2180      	movs	r1, #128	@ 0x80
 8001506:	0049      	lsls	r1, r1, #1
 8001508:	430a      	orrs	r2, r1
 800150a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001510:	2b00      	cmp	r3, #0
 8001512:	d008      	beq.n	8001526 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800151e:	2180      	movs	r1, #128	@ 0x80
 8001520:	0049      	lsls	r1, r1, #1
 8001522:	430a      	orrs	r2, r1
 8001524:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2101      	movs	r1, #1
 8001532:	430a      	orrs	r2, r1
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	e00a      	b.n	800154e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2280      	movs	r2, #128	@ 0x80
 800153c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2224      	movs	r2, #36	@ 0x24
 8001542:	2100      	movs	r1, #0
 8001544:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001546:	2317      	movs	r3, #23
 8001548:	18fb      	adds	r3, r7, r3
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800154e:	2317      	movs	r3, #23
 8001550:	18fb      	adds	r3, r7, r3
 8001552:	781b      	ldrb	r3, [r3, #0]
}
 8001554:	0018      	movs	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	b006      	add	sp, #24
 800155a:	bd80      	pop	{r7, pc}

0800155c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001564:	210f      	movs	r1, #15
 8001566:	187b      	adds	r3, r7, r1
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2225      	movs	r2, #37	@ 0x25
 8001570:	5c9b      	ldrb	r3, [r3, r2]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d006      	beq.n	8001586 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2204      	movs	r2, #4
 800157c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800157e:	187b      	adds	r3, r7, r1
 8001580:	2201      	movs	r2, #1
 8001582:	701a      	strb	r2, [r3, #0]
 8001584:	e049      	b.n	800161a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	210e      	movs	r1, #14
 8001592:	438a      	bics	r2, r1
 8001594:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2101      	movs	r1, #1
 80015a2:	438a      	bics	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b0:	491d      	ldr	r1, [pc, #116]	@ (8001628 <HAL_DMA_Abort_IT+0xcc>)
 80015b2:	400a      	ands	r2, r1
 80015b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80015b6:	4b1d      	ldr	r3, [pc, #116]	@ (800162c <HAL_DMA_Abort_IT+0xd0>)
 80015b8:	6859      	ldr	r1, [r3, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	221c      	movs	r2, #28
 80015c0:	4013      	ands	r3, r2
 80015c2:	2201      	movs	r2, #1
 80015c4:	409a      	lsls	r2, r3
 80015c6:	4b19      	ldr	r3, [pc, #100]	@ (800162c <HAL_DMA_Abort_IT+0xd0>)
 80015c8:	430a      	orrs	r2, r1
 80015ca:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80015d4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00c      	beq.n	80015f8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015e8:	490f      	ldr	r1, [pc, #60]	@ (8001628 <HAL_DMA_Abort_IT+0xcc>)
 80015ea:	400a      	ands	r2, r1
 80015ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80015f6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2225      	movs	r2, #37	@ 0x25
 80015fc:	2101      	movs	r1, #1
 80015fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2224      	movs	r2, #36	@ 0x24
 8001604:	2100      	movs	r1, #0
 8001606:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800160c:	2b00      	cmp	r3, #0
 800160e:	d004      	beq.n	800161a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	0010      	movs	r0, r2
 8001618:	4798      	blx	r3
    }
  }
  return status;
 800161a:	230f      	movs	r3, #15
 800161c:	18fb      	adds	r3, r7, r3
 800161e:	781b      	ldrb	r3, [r3, #0]
}
 8001620:	0018      	movs	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	b004      	add	sp, #16
 8001626:	bd80      	pop	{r7, pc}
 8001628:	fffffeff 	.word	0xfffffeff
 800162c:	40020000 	.word	0x40020000

08001630 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001638:	4b55      	ldr	r3, [pc, #340]	@ (8001790 <HAL_DMA_IRQHandler+0x160>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	221c      	movs	r2, #28
 800164c:	4013      	ands	r3, r2
 800164e:	2204      	movs	r2, #4
 8001650:	409a      	lsls	r2, r3
 8001652:	0013      	movs	r3, r2
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	4013      	ands	r3, r2
 8001658:	d027      	beq.n	80016aa <HAL_DMA_IRQHandler+0x7a>
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	2204      	movs	r2, #4
 800165e:	4013      	ands	r3, r2
 8001660:	d023      	beq.n	80016aa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2220      	movs	r2, #32
 800166a:	4013      	ands	r3, r2
 800166c:	d107      	bne.n	800167e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2104      	movs	r1, #4
 800167a:	438a      	bics	r2, r1
 800167c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800167e:	4b44      	ldr	r3, [pc, #272]	@ (8001790 <HAL_DMA_IRQHandler+0x160>)
 8001680:	6859      	ldr	r1, [r3, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	221c      	movs	r2, #28
 8001688:	4013      	ands	r3, r2
 800168a:	2204      	movs	r2, #4
 800168c:	409a      	lsls	r2, r3
 800168e:	4b40      	ldr	r3, [pc, #256]	@ (8001790 <HAL_DMA_IRQHandler+0x160>)
 8001690:	430a      	orrs	r2, r1
 8001692:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001698:	2b00      	cmp	r3, #0
 800169a:	d100      	bne.n	800169e <HAL_DMA_IRQHandler+0x6e>
 800169c:	e073      	b.n	8001786 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	0010      	movs	r0, r2
 80016a6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80016a8:	e06d      	b.n	8001786 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	221c      	movs	r2, #28
 80016b0:	4013      	ands	r3, r2
 80016b2:	2202      	movs	r2, #2
 80016b4:	409a      	lsls	r2, r3
 80016b6:	0013      	movs	r3, r2
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	4013      	ands	r3, r2
 80016bc:	d02e      	beq.n	800171c <HAL_DMA_IRQHandler+0xec>
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	2202      	movs	r2, #2
 80016c2:	4013      	ands	r3, r2
 80016c4:	d02a      	beq.n	800171c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2220      	movs	r2, #32
 80016ce:	4013      	ands	r3, r2
 80016d0:	d10b      	bne.n	80016ea <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	210a      	movs	r1, #10
 80016de:	438a      	bics	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2225      	movs	r2, #37	@ 0x25
 80016e6:	2101      	movs	r1, #1
 80016e8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80016ea:	4b29      	ldr	r3, [pc, #164]	@ (8001790 <HAL_DMA_IRQHandler+0x160>)
 80016ec:	6859      	ldr	r1, [r3, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f2:	221c      	movs	r2, #28
 80016f4:	4013      	ands	r3, r2
 80016f6:	2202      	movs	r2, #2
 80016f8:	409a      	lsls	r2, r3
 80016fa:	4b25      	ldr	r3, [pc, #148]	@ (8001790 <HAL_DMA_IRQHandler+0x160>)
 80016fc:	430a      	orrs	r2, r1
 80016fe:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2224      	movs	r2, #36	@ 0x24
 8001704:	2100      	movs	r1, #0
 8001706:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800170c:	2b00      	cmp	r3, #0
 800170e:	d03a      	beq.n	8001786 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	0010      	movs	r0, r2
 8001718:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800171a:	e034      	b.n	8001786 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001720:	221c      	movs	r2, #28
 8001722:	4013      	ands	r3, r2
 8001724:	2208      	movs	r2, #8
 8001726:	409a      	lsls	r2, r3
 8001728:	0013      	movs	r3, r2
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	4013      	ands	r3, r2
 800172e:	d02b      	beq.n	8001788 <HAL_DMA_IRQHandler+0x158>
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2208      	movs	r2, #8
 8001734:	4013      	ands	r3, r2
 8001736:	d027      	beq.n	8001788 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	210e      	movs	r1, #14
 8001744:	438a      	bics	r2, r1
 8001746:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001748:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <HAL_DMA_IRQHandler+0x160>)
 800174a:	6859      	ldr	r1, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001750:	221c      	movs	r2, #28
 8001752:	4013      	ands	r3, r2
 8001754:	2201      	movs	r2, #1
 8001756:	409a      	lsls	r2, r3
 8001758:	4b0d      	ldr	r3, [pc, #52]	@ (8001790 <HAL_DMA_IRQHandler+0x160>)
 800175a:	430a      	orrs	r2, r1
 800175c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2225      	movs	r2, #37	@ 0x25
 8001768:	2101      	movs	r1, #1
 800176a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2224      	movs	r2, #36	@ 0x24
 8001770:	2100      	movs	r1, #0
 8001772:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	0010      	movs	r0, r2
 8001784:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001786:	46c0      	nop			@ (mov r8, r8)
 8001788:	46c0      	nop			@ (mov r8, r8)
}
 800178a:	46bd      	mov	sp, r7
 800178c:	b004      	add	sp, #16
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40020000 	.word	0x40020000

08001794 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80017aa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d004      	beq.n	80017be <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80017bc:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80017be:	4b14      	ldr	r3, [pc, #80]	@ (8001810 <DMA_SetConfig+0x7c>)
 80017c0:	6859      	ldr	r1, [r3, #4]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	221c      	movs	r2, #28
 80017c8:	4013      	ands	r3, r2
 80017ca:	2201      	movs	r2, #1
 80017cc:	409a      	lsls	r2, r3
 80017ce:	4b10      	ldr	r3, [pc, #64]	@ (8001810 <DMA_SetConfig+0x7c>)
 80017d0:	430a      	orrs	r2, r1
 80017d2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b10      	cmp	r3, #16
 80017e2:	d108      	bne.n	80017f6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68ba      	ldr	r2, [r7, #8]
 80017f2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017f4:	e007      	b.n	8001806 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	60da      	str	r2, [r3, #12]
}
 8001806:	46c0      	nop			@ (mov r8, r8)
 8001808:	46bd      	mov	sp, r7
 800180a:	b004      	add	sp, #16
 800180c:	bd80      	pop	{r7, pc}
 800180e:	46c0      	nop			@ (mov r8, r8)
 8001810:	40020000 	.word	0x40020000

08001814 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	089b      	lsrs	r3, r3, #2
 8001822:	4a10      	ldr	r2, [pc, #64]	@ (8001864 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001824:	4694      	mov	ip, r2
 8001826:	4463      	add	r3, ip
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	001a      	movs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	001a      	movs	r2, r3
 8001836:	23ff      	movs	r3, #255	@ 0xff
 8001838:	4013      	ands	r3, r2
 800183a:	3b08      	subs	r3, #8
 800183c:	2114      	movs	r1, #20
 800183e:	0018      	movs	r0, r3
 8001840:	f7fe fc5e 	bl	8000100 <__udivsi3>
 8001844:	0003      	movs	r3, r0
 8001846:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a07      	ldr	r2, [pc, #28]	@ (8001868 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800184c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	221f      	movs	r2, #31
 8001852:	4013      	ands	r3, r2
 8001854:	2201      	movs	r2, #1
 8001856:	409a      	lsls	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800185c:	46c0      	nop			@ (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	b004      	add	sp, #16
 8001862:	bd80      	pop	{r7, pc}
 8001864:	10008200 	.word	0x10008200
 8001868:	40020880 	.word	0x40020880

0800186c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	223f      	movs	r2, #63	@ 0x3f
 800187a:	4013      	ands	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4a0a      	ldr	r2, [pc, #40]	@ (80018ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001882:	4694      	mov	ip, r2
 8001884:	4463      	add	r3, ip
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	001a      	movs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a07      	ldr	r2, [pc, #28]	@ (80018b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001892:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3b01      	subs	r3, #1
 8001898:	2203      	movs	r2, #3
 800189a:	4013      	ands	r3, r2
 800189c:	2201      	movs	r2, #1
 800189e:	409a      	lsls	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80018a4:	46c0      	nop			@ (mov r8, r8)
 80018a6:	46bd      	mov	sp, r7
 80018a8:	b004      	add	sp, #16
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	1000823f 	.word	0x1000823f
 80018b0:	40020940 	.word	0x40020940

080018b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c2:	e147      	b.n	8001b54 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2101      	movs	r1, #1
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	4091      	lsls	r1, r2
 80018ce:	000a      	movs	r2, r1
 80018d0:	4013      	ands	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d100      	bne.n	80018dc <HAL_GPIO_Init+0x28>
 80018da:	e138      	b.n	8001b4e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2203      	movs	r2, #3
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d005      	beq.n	80018f4 <HAL_GPIO_Init+0x40>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2203      	movs	r2, #3
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d130      	bne.n	8001956 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	409a      	lsls	r2, r3
 8001902:	0013      	movs	r3, r2
 8001904:	43da      	mvns	r2, r3
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	409a      	lsls	r2, r3
 8001916:	0013      	movs	r3, r2
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800192a:	2201      	movs	r2, #1
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	409a      	lsls	r2, r3
 8001930:	0013      	movs	r3, r2
 8001932:	43da      	mvns	r2, r3
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	091b      	lsrs	r3, r3, #4
 8001940:	2201      	movs	r2, #1
 8001942:	401a      	ands	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	409a      	lsls	r2, r3
 8001948:	0013      	movs	r3, r2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2203      	movs	r2, #3
 800195c:	4013      	ands	r3, r2
 800195e:	2b03      	cmp	r3, #3
 8001960:	d017      	beq.n	8001992 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	2203      	movs	r2, #3
 800196e:	409a      	lsls	r2, r3
 8001970:	0013      	movs	r3, r2
 8001972:	43da      	mvns	r2, r3
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	409a      	lsls	r2, r3
 8001984:	0013      	movs	r3, r2
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2203      	movs	r2, #3
 8001998:	4013      	ands	r3, r2
 800199a:	2b02      	cmp	r3, #2
 800199c:	d123      	bne.n	80019e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	08da      	lsrs	r2, r3, #3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3208      	adds	r2, #8
 80019a6:	0092      	lsls	r2, r2, #2
 80019a8:	58d3      	ldr	r3, [r2, r3]
 80019aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2207      	movs	r2, #7
 80019b0:	4013      	ands	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	220f      	movs	r2, #15
 80019b6:	409a      	lsls	r2, r3
 80019b8:	0013      	movs	r3, r2
 80019ba:	43da      	mvns	r2, r3
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	691a      	ldr	r2, [r3, #16]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2107      	movs	r1, #7
 80019ca:	400b      	ands	r3, r1
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	409a      	lsls	r2, r3
 80019d0:	0013      	movs	r3, r2
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	08da      	lsrs	r2, r3, #3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3208      	adds	r2, #8
 80019e0:	0092      	lsls	r2, r2, #2
 80019e2:	6939      	ldr	r1, [r7, #16]
 80019e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	2203      	movs	r2, #3
 80019f2:	409a      	lsls	r2, r3
 80019f4:	0013      	movs	r3, r2
 80019f6:	43da      	mvns	r2, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2203      	movs	r2, #3
 8001a04:	401a      	ands	r2, r3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	0013      	movs	r3, r2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	23c0      	movs	r3, #192	@ 0xc0
 8001a20:	029b      	lsls	r3, r3, #10
 8001a22:	4013      	ands	r3, r2
 8001a24:	d100      	bne.n	8001a28 <HAL_GPIO_Init+0x174>
 8001a26:	e092      	b.n	8001b4e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001a28:	4a50      	ldr	r2, [pc, #320]	@ (8001b6c <HAL_GPIO_Init+0x2b8>)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	089b      	lsrs	r3, r3, #2
 8001a2e:	3318      	adds	r3, #24
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	589b      	ldr	r3, [r3, r2]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2203      	movs	r2, #3
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	220f      	movs	r2, #15
 8001a40:	409a      	lsls	r2, r3
 8001a42:	0013      	movs	r3, r2
 8001a44:	43da      	mvns	r2, r3
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	23a0      	movs	r3, #160	@ 0xa0
 8001a50:	05db      	lsls	r3, r3, #23
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d013      	beq.n	8001a7e <HAL_GPIO_Init+0x1ca>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a45      	ldr	r2, [pc, #276]	@ (8001b70 <HAL_GPIO_Init+0x2bc>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d00d      	beq.n	8001a7a <HAL_GPIO_Init+0x1c6>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a44      	ldr	r2, [pc, #272]	@ (8001b74 <HAL_GPIO_Init+0x2c0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d007      	beq.n	8001a76 <HAL_GPIO_Init+0x1c2>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a43      	ldr	r2, [pc, #268]	@ (8001b78 <HAL_GPIO_Init+0x2c4>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d101      	bne.n	8001a72 <HAL_GPIO_Init+0x1be>
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e006      	b.n	8001a80 <HAL_GPIO_Init+0x1cc>
 8001a72:	2305      	movs	r3, #5
 8001a74:	e004      	b.n	8001a80 <HAL_GPIO_Init+0x1cc>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e002      	b.n	8001a80 <HAL_GPIO_Init+0x1cc>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <HAL_GPIO_Init+0x1cc>
 8001a7e:	2300      	movs	r3, #0
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	2103      	movs	r1, #3
 8001a84:	400a      	ands	r2, r1
 8001a86:	00d2      	lsls	r2, r2, #3
 8001a88:	4093      	lsls	r3, r2
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001a90:	4936      	ldr	r1, [pc, #216]	@ (8001b6c <HAL_GPIO_Init+0x2b8>)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	089b      	lsrs	r3, r3, #2
 8001a96:	3318      	adds	r3, #24
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a9e:	4b33      	ldr	r3, [pc, #204]	@ (8001b6c <HAL_GPIO_Init+0x2b8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	2380      	movs	r3, #128	@ 0x80
 8001ab4:	035b      	lsls	r3, r3, #13
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b6c <HAL_GPIO_Init+0x2b8>)
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001ac8:	4b28      	ldr	r3, [pc, #160]	@ (8001b6c <HAL_GPIO_Init+0x2b8>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	43da      	mvns	r2, r3
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	2380      	movs	r3, #128	@ 0x80
 8001ade:	039b      	lsls	r3, r3, #14
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aec:	4b1f      	ldr	r3, [pc, #124]	@ (8001b6c <HAL_GPIO_Init+0x2b8>)
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001af2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b6c <HAL_GPIO_Init+0x2b8>)
 8001af4:	2384      	movs	r3, #132	@ 0x84
 8001af6:	58d3      	ldr	r3, [r2, r3]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	43da      	mvns	r2, r3
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	2380      	movs	r3, #128	@ 0x80
 8001b0a:	029b      	lsls	r3, r3, #10
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b18:	4914      	ldr	r1, [pc, #80]	@ (8001b6c <HAL_GPIO_Init+0x2b8>)
 8001b1a:	2284      	movs	r2, #132	@ 0x84
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001b20:	4a12      	ldr	r2, [pc, #72]	@ (8001b6c <HAL_GPIO_Init+0x2b8>)
 8001b22:	2380      	movs	r3, #128	@ 0x80
 8001b24:	58d3      	ldr	r3, [r2, r3]
 8001b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	2380      	movs	r3, #128	@ 0x80
 8001b38:	025b      	lsls	r3, r3, #9
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b46:	4909      	ldr	r1, [pc, #36]	@ (8001b6c <HAL_GPIO_Init+0x2b8>)
 8001b48:	2280      	movs	r2, #128	@ 0x80
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	3301      	adds	r3, #1
 8001b52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	40da      	lsrs	r2, r3
 8001b5c:	1e13      	subs	r3, r2, #0
 8001b5e:	d000      	beq.n	8001b62 <HAL_GPIO_Init+0x2ae>
 8001b60:	e6b0      	b.n	80018c4 <HAL_GPIO_Init+0x10>
  }
}
 8001b62:	46c0      	nop			@ (mov r8, r8)
 8001b64:	46c0      	nop			@ (mov r8, r8)
 8001b66:	46bd      	mov	sp, r7
 8001b68:	b006      	add	sp, #24
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021800 	.word	0x40021800
 8001b70:	50000400 	.word	0x50000400
 8001b74:	50000800 	.word	0x50000800
 8001b78:	50000c00 	.word	0x50000c00

08001b7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	000a      	movs	r2, r1
 8001b86:	1cbb      	adds	r3, r7, #2
 8001b88:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	1cba      	adds	r2, r7, #2
 8001b90:	8812      	ldrh	r2, [r2, #0]
 8001b92:	4013      	ands	r3, r2
 8001b94:	d004      	beq.n	8001ba0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001b96:	230f      	movs	r3, #15
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	701a      	strb	r2, [r3, #0]
 8001b9e:	e003      	b.n	8001ba8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ba0:	230f      	movs	r3, #15
 8001ba2:	18fb      	adds	r3, r7, r3
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001ba8:	230f      	movs	r3, #15
 8001baa:	18fb      	adds	r3, r7, r3
 8001bac:	781b      	ldrb	r3, [r3, #0]
}
 8001bae:	0018      	movs	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b004      	add	sp, #16
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	0008      	movs	r0, r1
 8001bc0:	0011      	movs	r1, r2
 8001bc2:	1cbb      	adds	r3, r7, #2
 8001bc4:	1c02      	adds	r2, r0, #0
 8001bc6:	801a      	strh	r2, [r3, #0]
 8001bc8:	1c7b      	adds	r3, r7, #1
 8001bca:	1c0a      	adds	r2, r1, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bce:	1c7b      	adds	r3, r7, #1
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d004      	beq.n	8001be0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bd6:	1cbb      	adds	r3, r7, #2
 8001bd8:	881a      	ldrh	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bde:	e003      	b.n	8001be8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001be0:	1cbb      	adds	r3, r7, #2
 8001be2:	881a      	ldrh	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001be8:	46c0      	nop			@ (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b002      	add	sp, #8
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e08f      	b.n	8001d22 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2241      	movs	r2, #65	@ 0x41
 8001c06:	5c9b      	ldrb	r3, [r3, r2]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d107      	bne.n	8001c1e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2240      	movs	r2, #64	@ 0x40
 8001c12:	2100      	movs	r1, #0
 8001c14:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f7ff f889 	bl	8000d30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2241      	movs	r2, #65	@ 0x41
 8001c22:	2124      	movs	r1, #36	@ 0x24
 8001c24:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2101      	movs	r1, #1
 8001c32:	438a      	bics	r2, r1
 8001c34:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	493b      	ldr	r1, [pc, #236]	@ (8001d2c <HAL_I2C_Init+0x13c>)
 8001c40:	400a      	ands	r2, r1
 8001c42:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4938      	ldr	r1, [pc, #224]	@ (8001d30 <HAL_I2C_Init+0x140>)
 8001c50:	400a      	ands	r2, r1
 8001c52:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d108      	bne.n	8001c6e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2180      	movs	r1, #128	@ 0x80
 8001c66:	0209      	lsls	r1, r1, #8
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	e007      	b.n	8001c7e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2184      	movs	r1, #132	@ 0x84
 8001c78:	0209      	lsls	r1, r1, #8
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d109      	bne.n	8001c9a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2180      	movs	r1, #128	@ 0x80
 8001c92:	0109      	lsls	r1, r1, #4
 8001c94:	430a      	orrs	r2, r1
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	e007      	b.n	8001caa <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4923      	ldr	r1, [pc, #140]	@ (8001d34 <HAL_I2C_Init+0x144>)
 8001ca6:	400a      	ands	r2, r1
 8001ca8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4920      	ldr	r1, [pc, #128]	@ (8001d38 <HAL_I2C_Init+0x148>)
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	491a      	ldr	r1, [pc, #104]	@ (8001d30 <HAL_I2C_Init+0x140>)
 8001cc6:	400a      	ands	r2, r1
 8001cc8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691a      	ldr	r2, [r3, #16]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69d9      	ldr	r1, [r3, #28]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1a      	ldr	r2, [r3, #32]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2101      	movs	r1, #1
 8001d00:	430a      	orrs	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2241      	movs	r2, #65	@ 0x41
 8001d0e:	2120      	movs	r1, #32
 8001d10:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2242      	movs	r2, #66	@ 0x42
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	0018      	movs	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	b002      	add	sp, #8
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	46c0      	nop			@ (mov r8, r8)
 8001d2c:	f0ffffff 	.word	0xf0ffffff
 8001d30:	ffff7fff 	.word	0xffff7fff
 8001d34:	fffff7ff 	.word	0xfffff7ff
 8001d38:	02008000 	.word	0x02008000

08001d3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2241      	movs	r2, #65	@ 0x41
 8001d4a:	5c9b      	ldrb	r3, [r3, r2]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b20      	cmp	r3, #32
 8001d50:	d138      	bne.n	8001dc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2240      	movs	r2, #64	@ 0x40
 8001d56:	5c9b      	ldrb	r3, [r3, r2]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e032      	b.n	8001dc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2240      	movs	r2, #64	@ 0x40
 8001d64:	2101      	movs	r1, #1
 8001d66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2241      	movs	r2, #65	@ 0x41
 8001d6c:	2124      	movs	r1, #36	@ 0x24
 8001d6e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	438a      	bics	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4911      	ldr	r1, [pc, #68]	@ (8001dd0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6819      	ldr	r1, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2101      	movs	r1, #1
 8001dac:	430a      	orrs	r2, r1
 8001dae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2241      	movs	r2, #65	@ 0x41
 8001db4:	2120      	movs	r1, #32
 8001db6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2240      	movs	r2, #64	@ 0x40
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	e000      	b.n	8001dc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001dc4:	2302      	movs	r3, #2
  }
}
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b002      	add	sp, #8
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			@ (mov r8, r8)
 8001dd0:	ffffefff 	.word	0xffffefff

08001dd4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2241      	movs	r2, #65	@ 0x41
 8001de2:	5c9b      	ldrb	r3, [r3, r2]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b20      	cmp	r3, #32
 8001de8:	d139      	bne.n	8001e5e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2240      	movs	r2, #64	@ 0x40
 8001dee:	5c9b      	ldrb	r3, [r3, r2]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e033      	b.n	8001e60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2240      	movs	r2, #64	@ 0x40
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2241      	movs	r2, #65	@ 0x41
 8001e04:	2124      	movs	r1, #36	@ 0x24
 8001e06:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2101      	movs	r1, #1
 8001e14:	438a      	bics	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4a11      	ldr	r2, [pc, #68]	@ (8001e68 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	021b      	lsls	r3, r3, #8
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2101      	movs	r1, #1
 8001e46:	430a      	orrs	r2, r1
 8001e48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2241      	movs	r2, #65	@ 0x41
 8001e4e:	2120      	movs	r1, #32
 8001e50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2240      	movs	r2, #64	@ 0x40
 8001e56:	2100      	movs	r1, #0
 8001e58:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	e000      	b.n	8001e60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e5e:	2302      	movs	r3, #2
  }
}
 8001e60:	0018      	movs	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	b004      	add	sp, #16
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	fffff0ff 	.word	0xfffff0ff

08001e6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001e74:	4b19      	ldr	r3, [pc, #100]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a19      	ldr	r2, [pc, #100]	@ (8001ee0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	0019      	movs	r1, r3
 8001e7e:	4b17      	ldr	r3, [pc, #92]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	2380      	movs	r3, #128	@ 0x80
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d11f      	bne.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001e90:	4b14      	ldr	r3, [pc, #80]	@ (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	0013      	movs	r3, r2
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	189b      	adds	r3, r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4912      	ldr	r1, [pc, #72]	@ (8001ee8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f7fe f92e 	bl	8000100 <__udivsi3>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eaa:	e008      	b.n	8001ebe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	e001      	b.n	8001ebe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e009      	b.n	8001ed2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ebe:	4b07      	ldr	r3, [pc, #28]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	2380      	movs	r3, #128	@ 0x80
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	2380      	movs	r3, #128	@ 0x80
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d0ed      	beq.n	8001eac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b004      	add	sp, #16
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	46c0      	nop			@ (mov r8, r8)
 8001edc:	40007000 	.word	0x40007000
 8001ee0:	fffff9ff 	.word	0xfffff9ff
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	000f4240 	.word	0x000f4240

08001eec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001ef0:	4b03      	ldr	r3, [pc, #12]	@ (8001f00 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	23e0      	movs	r3, #224	@ 0xe0
 8001ef6:	01db      	lsls	r3, r3, #7
 8001ef8:	4013      	ands	r3, r2
}
 8001efa:	0018      	movs	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000

08001f04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e2f3      	b.n	80024fe <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d100      	bne.n	8001f22 <HAL_RCC_OscConfig+0x1e>
 8001f20:	e07c      	b.n	800201c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f22:	4bc3      	ldr	r3, [pc, #780]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2238      	movs	r2, #56	@ 0x38
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f2c:	4bc0      	ldr	r3, [pc, #768]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	2203      	movs	r2, #3
 8001f32:	4013      	ands	r3, r2
 8001f34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	2b10      	cmp	r3, #16
 8001f3a:	d102      	bne.n	8001f42 <HAL_RCC_OscConfig+0x3e>
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d002      	beq.n	8001f48 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d10b      	bne.n	8001f60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f48:	4bb9      	ldr	r3, [pc, #740]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	2380      	movs	r3, #128	@ 0x80
 8001f4e:	029b      	lsls	r3, r3, #10
 8001f50:	4013      	ands	r3, r2
 8001f52:	d062      	beq.n	800201a <HAL_RCC_OscConfig+0x116>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d15e      	bne.n	800201a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e2ce      	b.n	80024fe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	2380      	movs	r3, #128	@ 0x80
 8001f66:	025b      	lsls	r3, r3, #9
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d107      	bne.n	8001f7c <HAL_RCC_OscConfig+0x78>
 8001f6c:	4bb0      	ldr	r3, [pc, #704]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4baf      	ldr	r3, [pc, #700]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001f72:	2180      	movs	r1, #128	@ 0x80
 8001f74:	0249      	lsls	r1, r1, #9
 8001f76:	430a      	orrs	r2, r1
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	e020      	b.n	8001fbe <HAL_RCC_OscConfig+0xba>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	23a0      	movs	r3, #160	@ 0xa0
 8001f82:	02db      	lsls	r3, r3, #11
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d10e      	bne.n	8001fa6 <HAL_RCC_OscConfig+0xa2>
 8001f88:	4ba9      	ldr	r3, [pc, #676]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4ba8      	ldr	r3, [pc, #672]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001f8e:	2180      	movs	r1, #128	@ 0x80
 8001f90:	02c9      	lsls	r1, r1, #11
 8001f92:	430a      	orrs	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	4ba6      	ldr	r3, [pc, #664]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	4ba5      	ldr	r3, [pc, #660]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001f9c:	2180      	movs	r1, #128	@ 0x80
 8001f9e:	0249      	lsls	r1, r1, #9
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	e00b      	b.n	8001fbe <HAL_RCC_OscConfig+0xba>
 8001fa6:	4ba2      	ldr	r3, [pc, #648]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	4ba1      	ldr	r3, [pc, #644]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001fac:	49a1      	ldr	r1, [pc, #644]	@ (8002234 <HAL_RCC_OscConfig+0x330>)
 8001fae:	400a      	ands	r2, r1
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	4b9f      	ldr	r3, [pc, #636]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	4b9e      	ldr	r3, [pc, #632]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001fb8:	499f      	ldr	r1, [pc, #636]	@ (8002238 <HAL_RCC_OscConfig+0x334>)
 8001fba:	400a      	ands	r2, r1
 8001fbc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d014      	beq.n	8001ff0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc6:	f7ff f8d1 	bl	800116c <HAL_GetTick>
 8001fca:	0003      	movs	r3, r0
 8001fcc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd0:	f7ff f8cc 	bl	800116c <HAL_GetTick>
 8001fd4:	0002      	movs	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b64      	cmp	r3, #100	@ 0x64
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e28d      	b.n	80024fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fe2:	4b93      	ldr	r3, [pc, #588]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	2380      	movs	r3, #128	@ 0x80
 8001fe8:	029b      	lsls	r3, r3, #10
 8001fea:	4013      	ands	r3, r2
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0xcc>
 8001fee:	e015      	b.n	800201c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff0:	f7ff f8bc 	bl	800116c <HAL_GetTick>
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ffa:	f7ff f8b7 	bl	800116c <HAL_GetTick>
 8001ffe:	0002      	movs	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b64      	cmp	r3, #100	@ 0x64
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e278      	b.n	80024fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800200c:	4b88      	ldr	r3, [pc, #544]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	2380      	movs	r3, #128	@ 0x80
 8002012:	029b      	lsls	r3, r3, #10
 8002014:	4013      	ands	r3, r2
 8002016:	d1f0      	bne.n	8001ffa <HAL_RCC_OscConfig+0xf6>
 8002018:	e000      	b.n	800201c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2202      	movs	r2, #2
 8002022:	4013      	ands	r3, r2
 8002024:	d100      	bne.n	8002028 <HAL_RCC_OscConfig+0x124>
 8002026:	e099      	b.n	800215c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002028:	4b81      	ldr	r3, [pc, #516]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2238      	movs	r2, #56	@ 0x38
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002032:	4b7f      	ldr	r3, [pc, #508]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2203      	movs	r2, #3
 8002038:	4013      	ands	r3, r2
 800203a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2b10      	cmp	r3, #16
 8002040:	d102      	bne.n	8002048 <HAL_RCC_OscConfig+0x144>
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2b02      	cmp	r3, #2
 8002046:	d002      	beq.n	800204e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d135      	bne.n	80020ba <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800204e:	4b78      	ldr	r3, [pc, #480]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	2380      	movs	r3, #128	@ 0x80
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4013      	ands	r3, r2
 8002058:	d005      	beq.n	8002066 <HAL_RCC_OscConfig+0x162>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e24b      	b.n	80024fe <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002066:	4b72      	ldr	r3, [pc, #456]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4a74      	ldr	r2, [pc, #464]	@ (800223c <HAL_RCC_OscConfig+0x338>)
 800206c:	4013      	ands	r3, r2
 800206e:	0019      	movs	r1, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	021a      	lsls	r2, r3, #8
 8002076:	4b6e      	ldr	r3, [pc, #440]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002078:	430a      	orrs	r2, r1
 800207a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d112      	bne.n	80020a8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002082:	4b6b      	ldr	r3, [pc, #428]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a6e      	ldr	r2, [pc, #440]	@ (8002240 <HAL_RCC_OscConfig+0x33c>)
 8002088:	4013      	ands	r3, r2
 800208a:	0019      	movs	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	4b67      	ldr	r3, [pc, #412]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002092:	430a      	orrs	r2, r1
 8002094:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002096:	4b66      	ldr	r3, [pc, #408]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	0adb      	lsrs	r3, r3, #11
 800209c:	2207      	movs	r2, #7
 800209e:	4013      	ands	r3, r2
 80020a0:	4a68      	ldr	r2, [pc, #416]	@ (8002244 <HAL_RCC_OscConfig+0x340>)
 80020a2:	40da      	lsrs	r2, r3
 80020a4:	4b68      	ldr	r3, [pc, #416]	@ (8002248 <HAL_RCC_OscConfig+0x344>)
 80020a6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020a8:	4b68      	ldr	r3, [pc, #416]	@ (800224c <HAL_RCC_OscConfig+0x348>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	0018      	movs	r0, r3
 80020ae:	f7ff f801 	bl	80010b4 <HAL_InitTick>
 80020b2:	1e03      	subs	r3, r0, #0
 80020b4:	d051      	beq.n	800215a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e221      	b.n	80024fe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d030      	beq.n	8002124 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80020c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a5e      	ldr	r2, [pc, #376]	@ (8002240 <HAL_RCC_OscConfig+0x33c>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	0019      	movs	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	4b57      	ldr	r3, [pc, #348]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 80020d2:	430a      	orrs	r2, r1
 80020d4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80020d6:	4b56      	ldr	r3, [pc, #344]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	4b55      	ldr	r3, [pc, #340]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 80020dc:	2180      	movs	r1, #128	@ 0x80
 80020de:	0049      	lsls	r1, r1, #1
 80020e0:	430a      	orrs	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e4:	f7ff f842 	bl	800116c <HAL_GetTick>
 80020e8:	0003      	movs	r3, r0
 80020ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ee:	f7ff f83d 	bl	800116c <HAL_GetTick>
 80020f2:	0002      	movs	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e1fe      	b.n	80024fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002100:	4b4b      	ldr	r3, [pc, #300]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	2380      	movs	r3, #128	@ 0x80
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4013      	ands	r3, r2
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210c:	4b48      	ldr	r3, [pc, #288]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4a4a      	ldr	r2, [pc, #296]	@ (800223c <HAL_RCC_OscConfig+0x338>)
 8002112:	4013      	ands	r3, r2
 8002114:	0019      	movs	r1, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	021a      	lsls	r2, r3, #8
 800211c:	4b44      	ldr	r3, [pc, #272]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 800211e:	430a      	orrs	r2, r1
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	e01b      	b.n	800215c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002124:	4b42      	ldr	r3, [pc, #264]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b41      	ldr	r3, [pc, #260]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 800212a:	4949      	ldr	r1, [pc, #292]	@ (8002250 <HAL_RCC_OscConfig+0x34c>)
 800212c:	400a      	ands	r2, r1
 800212e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002130:	f7ff f81c 	bl	800116c <HAL_GetTick>
 8002134:	0003      	movs	r3, r0
 8002136:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800213a:	f7ff f817 	bl	800116c <HAL_GetTick>
 800213e:	0002      	movs	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e1d8      	b.n	80024fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800214c:	4b38      	ldr	r3, [pc, #224]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	2380      	movs	r3, #128	@ 0x80
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4013      	ands	r3, r2
 8002156:	d1f0      	bne.n	800213a <HAL_RCC_OscConfig+0x236>
 8002158:	e000      	b.n	800215c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800215a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2208      	movs	r2, #8
 8002162:	4013      	ands	r3, r2
 8002164:	d047      	beq.n	80021f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002166:	4b32      	ldr	r3, [pc, #200]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2238      	movs	r2, #56	@ 0x38
 800216c:	4013      	ands	r3, r2
 800216e:	2b18      	cmp	r3, #24
 8002170:	d10a      	bne.n	8002188 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002172:	4b2f      	ldr	r3, [pc, #188]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002176:	2202      	movs	r2, #2
 8002178:	4013      	ands	r3, r2
 800217a:	d03c      	beq.n	80021f6 <HAL_RCC_OscConfig+0x2f2>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d138      	bne.n	80021f6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e1ba      	b.n	80024fe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d019      	beq.n	80021c4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002190:	4b27      	ldr	r3, [pc, #156]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002192:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002194:	4b26      	ldr	r3, [pc, #152]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002196:	2101      	movs	r1, #1
 8002198:	430a      	orrs	r2, r1
 800219a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7fe ffe6 	bl	800116c <HAL_GetTick>
 80021a0:	0003      	movs	r3, r0
 80021a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a6:	f7fe ffe1 	bl	800116c <HAL_GetTick>
 80021aa:	0002      	movs	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e1a2      	b.n	80024fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 80021ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021bc:	2202      	movs	r2, #2
 80021be:	4013      	ands	r3, r2
 80021c0:	d0f1      	beq.n	80021a6 <HAL_RCC_OscConfig+0x2a2>
 80021c2:	e018      	b.n	80021f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80021c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 80021c6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80021c8:	4b19      	ldr	r3, [pc, #100]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 80021ca:	2101      	movs	r1, #1
 80021cc:	438a      	bics	r2, r1
 80021ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7fe ffcc 	bl	800116c <HAL_GetTick>
 80021d4:	0003      	movs	r3, r0
 80021d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021da:	f7fe ffc7 	bl	800116c <HAL_GetTick>
 80021de:	0002      	movs	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e188      	b.n	80024fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021ec:	4b10      	ldr	r3, [pc, #64]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 80021ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021f0:	2202      	movs	r2, #2
 80021f2:	4013      	ands	r3, r2
 80021f4:	d1f1      	bne.n	80021da <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2204      	movs	r2, #4
 80021fc:	4013      	ands	r3, r2
 80021fe:	d100      	bne.n	8002202 <HAL_RCC_OscConfig+0x2fe>
 8002200:	e0c6      	b.n	8002390 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002202:	231f      	movs	r3, #31
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800220a:	4b09      	ldr	r3, [pc, #36]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2238      	movs	r2, #56	@ 0x38
 8002210:	4013      	ands	r3, r2
 8002212:	2b20      	cmp	r3, #32
 8002214:	d11e      	bne.n	8002254 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002216:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800221a:	2202      	movs	r2, #2
 800221c:	4013      	ands	r3, r2
 800221e:	d100      	bne.n	8002222 <HAL_RCC_OscConfig+0x31e>
 8002220:	e0b6      	b.n	8002390 <HAL_RCC_OscConfig+0x48c>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d000      	beq.n	800222c <HAL_RCC_OscConfig+0x328>
 800222a:	e0b1      	b.n	8002390 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e166      	b.n	80024fe <HAL_RCC_OscConfig+0x5fa>
 8002230:	40021000 	.word	0x40021000
 8002234:	fffeffff 	.word	0xfffeffff
 8002238:	fffbffff 	.word	0xfffbffff
 800223c:	ffff80ff 	.word	0xffff80ff
 8002240:	ffffc7ff 	.word	0xffffc7ff
 8002244:	00f42400 	.word	0x00f42400
 8002248:	20000000 	.word	0x20000000
 800224c:	20000004 	.word	0x20000004
 8002250:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002254:	4bac      	ldr	r3, [pc, #688]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 8002256:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002258:	2380      	movs	r3, #128	@ 0x80
 800225a:	055b      	lsls	r3, r3, #21
 800225c:	4013      	ands	r3, r2
 800225e:	d101      	bne.n	8002264 <HAL_RCC_OscConfig+0x360>
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <HAL_RCC_OscConfig+0x362>
 8002264:	2300      	movs	r3, #0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d011      	beq.n	800228e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800226a:	4ba7      	ldr	r3, [pc, #668]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 800226c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800226e:	4ba6      	ldr	r3, [pc, #664]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 8002270:	2180      	movs	r1, #128	@ 0x80
 8002272:	0549      	lsls	r1, r1, #21
 8002274:	430a      	orrs	r2, r1
 8002276:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002278:	4ba3      	ldr	r3, [pc, #652]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 800227a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800227c:	2380      	movs	r3, #128	@ 0x80
 800227e:	055b      	lsls	r3, r3, #21
 8002280:	4013      	ands	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002286:	231f      	movs	r3, #31
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	2201      	movs	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800228e:	4b9f      	ldr	r3, [pc, #636]	@ (800250c <HAL_RCC_OscConfig+0x608>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	2380      	movs	r3, #128	@ 0x80
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4013      	ands	r3, r2
 8002298:	d11a      	bne.n	80022d0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800229a:	4b9c      	ldr	r3, [pc, #624]	@ (800250c <HAL_RCC_OscConfig+0x608>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	4b9b      	ldr	r3, [pc, #620]	@ (800250c <HAL_RCC_OscConfig+0x608>)
 80022a0:	2180      	movs	r1, #128	@ 0x80
 80022a2:	0049      	lsls	r1, r1, #1
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80022a8:	f7fe ff60 	bl	800116c <HAL_GetTick>
 80022ac:	0003      	movs	r3, r0
 80022ae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b2:	f7fe ff5b 	bl	800116c <HAL_GetTick>
 80022b6:	0002      	movs	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e11c      	b.n	80024fe <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022c4:	4b91      	ldr	r3, [pc, #580]	@ (800250c <HAL_RCC_OscConfig+0x608>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2380      	movs	r3, #128	@ 0x80
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4013      	ands	r3, r2
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x3e2>
 80022d8:	4b8b      	ldr	r3, [pc, #556]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 80022da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022dc:	4b8a      	ldr	r3, [pc, #552]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 80022de:	2101      	movs	r1, #1
 80022e0:	430a      	orrs	r2, r1
 80022e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022e4:	e01c      	b.n	8002320 <HAL_RCC_OscConfig+0x41c>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b05      	cmp	r3, #5
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0x404>
 80022ee:	4b86      	ldr	r3, [pc, #536]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 80022f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022f2:	4b85      	ldr	r3, [pc, #532]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 80022f4:	2104      	movs	r1, #4
 80022f6:	430a      	orrs	r2, r1
 80022f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022fa:	4b83      	ldr	r3, [pc, #524]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 80022fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022fe:	4b82      	ldr	r3, [pc, #520]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 8002300:	2101      	movs	r1, #1
 8002302:	430a      	orrs	r2, r1
 8002304:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002306:	e00b      	b.n	8002320 <HAL_RCC_OscConfig+0x41c>
 8002308:	4b7f      	ldr	r3, [pc, #508]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 800230a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800230c:	4b7e      	ldr	r3, [pc, #504]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 800230e:	2101      	movs	r1, #1
 8002310:	438a      	bics	r2, r1
 8002312:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002314:	4b7c      	ldr	r3, [pc, #496]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 8002316:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002318:	4b7b      	ldr	r3, [pc, #492]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 800231a:	2104      	movs	r1, #4
 800231c:	438a      	bics	r2, r1
 800231e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d014      	beq.n	8002352 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7fe ff20 	bl	800116c <HAL_GetTick>
 800232c:	0003      	movs	r3, r0
 800232e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002330:	e009      	b.n	8002346 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002332:	f7fe ff1b 	bl	800116c <HAL_GetTick>
 8002336:	0002      	movs	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	4a74      	ldr	r2, [pc, #464]	@ (8002510 <HAL_RCC_OscConfig+0x60c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e0db      	b.n	80024fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002346:	4b70      	ldr	r3, [pc, #448]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 8002348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800234a:	2202      	movs	r2, #2
 800234c:	4013      	ands	r3, r2
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0x42e>
 8002350:	e013      	b.n	800237a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002352:	f7fe ff0b 	bl	800116c <HAL_GetTick>
 8002356:	0003      	movs	r3, r0
 8002358:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800235a:	e009      	b.n	8002370 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235c:	f7fe ff06 	bl	800116c <HAL_GetTick>
 8002360:	0002      	movs	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	4a6a      	ldr	r2, [pc, #424]	@ (8002510 <HAL_RCC_OscConfig+0x60c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e0c6      	b.n	80024fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002370:	4b65      	ldr	r3, [pc, #404]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 8002372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002374:	2202      	movs	r2, #2
 8002376:	4013      	ands	r3, r2
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800237a:	231f      	movs	r3, #31
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d105      	bne.n	8002390 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002384:	4b60      	ldr	r3, [pc, #384]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 8002386:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002388:	4b5f      	ldr	r3, [pc, #380]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 800238a:	4962      	ldr	r1, [pc, #392]	@ (8002514 <HAL_RCC_OscConfig+0x610>)
 800238c:	400a      	ands	r2, r1
 800238e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d100      	bne.n	800239a <HAL_RCC_OscConfig+0x496>
 8002398:	e0b0      	b.n	80024fc <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800239a:	4b5b      	ldr	r3, [pc, #364]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2238      	movs	r2, #56	@ 0x38
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b10      	cmp	r3, #16
 80023a4:	d100      	bne.n	80023a8 <HAL_RCC_OscConfig+0x4a4>
 80023a6:	e078      	b.n	800249a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d153      	bne.n	8002458 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b0:	4b55      	ldr	r3, [pc, #340]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4b54      	ldr	r3, [pc, #336]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 80023b6:	4958      	ldr	r1, [pc, #352]	@ (8002518 <HAL_RCC_OscConfig+0x614>)
 80023b8:	400a      	ands	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023bc:	f7fe fed6 	bl	800116c <HAL_GetTick>
 80023c0:	0003      	movs	r3, r0
 80023c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c6:	f7fe fed1 	bl	800116c <HAL_GetTick>
 80023ca:	0002      	movs	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e092      	b.n	80024fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	2380      	movs	r3, #128	@ 0x80
 80023de:	049b      	lsls	r3, r3, #18
 80023e0:	4013      	ands	r3, r2
 80023e2:	d1f0      	bne.n	80023c6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023e4:	4b48      	ldr	r3, [pc, #288]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4a4c      	ldr	r2, [pc, #304]	@ (800251c <HAL_RCC_OscConfig+0x618>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	0019      	movs	r1, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1a      	ldr	r2, [r3, #32]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023fc:	021b      	lsls	r3, r3, #8
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	431a      	orrs	r2, r3
 800240c:	4b3e      	ldr	r3, [pc, #248]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 800240e:	430a      	orrs	r2, r1
 8002410:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002412:	4b3d      	ldr	r3, [pc, #244]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	4b3c      	ldr	r3, [pc, #240]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 8002418:	2180      	movs	r1, #128	@ 0x80
 800241a:	0449      	lsls	r1, r1, #17
 800241c:	430a      	orrs	r2, r1
 800241e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002420:	4b39      	ldr	r3, [pc, #228]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	4b38      	ldr	r3, [pc, #224]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 8002426:	2180      	movs	r1, #128	@ 0x80
 8002428:	0549      	lsls	r1, r1, #21
 800242a:	430a      	orrs	r2, r1
 800242c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242e:	f7fe fe9d 	bl	800116c <HAL_GetTick>
 8002432:	0003      	movs	r3, r0
 8002434:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002438:	f7fe fe98 	bl	800116c <HAL_GetTick>
 800243c:	0002      	movs	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e059      	b.n	80024fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800244a:	4b2f      	ldr	r3, [pc, #188]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	2380      	movs	r3, #128	@ 0x80
 8002450:	049b      	lsls	r3, r3, #18
 8002452:	4013      	ands	r3, r2
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0x534>
 8002456:	e051      	b.n	80024fc <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002458:	4b2b      	ldr	r3, [pc, #172]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b2a      	ldr	r3, [pc, #168]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 800245e:	492e      	ldr	r1, [pc, #184]	@ (8002518 <HAL_RCC_OscConfig+0x614>)
 8002460:	400a      	ands	r2, r1
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe fe82 	bl	800116c <HAL_GetTick>
 8002468:	0003      	movs	r3, r0
 800246a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246e:	f7fe fe7d 	bl	800116c <HAL_GetTick>
 8002472:	0002      	movs	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e03e      	b.n	80024fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002480:	4b21      	ldr	r3, [pc, #132]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	2380      	movs	r3, #128	@ 0x80
 8002486:	049b      	lsls	r3, r3, #18
 8002488:	4013      	ands	r3, r2
 800248a:	d1f0      	bne.n	800246e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800248c:	4b1e      	ldr	r3, [pc, #120]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	4b1d      	ldr	r3, [pc, #116]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 8002492:	4923      	ldr	r1, [pc, #140]	@ (8002520 <HAL_RCC_OscConfig+0x61c>)
 8002494:	400a      	ands	r2, r1
 8002496:	60da      	str	r2, [r3, #12]
 8002498:	e030      	b.n	80024fc <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e02b      	b.n	80024fe <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80024a6:	4b18      	ldr	r3, [pc, #96]	@ (8002508 <HAL_RCC_OscConfig+0x604>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2203      	movs	r2, #3
 80024b0:	401a      	ands	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d11e      	bne.n	80024f8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2270      	movs	r2, #112	@ 0x70
 80024be:	401a      	ands	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d117      	bne.n	80024f8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	23fe      	movs	r3, #254	@ 0xfe
 80024cc:	01db      	lsls	r3, r3, #7
 80024ce:	401a      	ands	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d10e      	bne.n	80024f8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	23f8      	movs	r3, #248	@ 0xf8
 80024de:	039b      	lsls	r3, r3, #14
 80024e0:	401a      	ands	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d106      	bne.n	80024f8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	0f5b      	lsrs	r3, r3, #29
 80024ee:	075a      	lsls	r2, r3, #29
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	0018      	movs	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	b008      	add	sp, #32
 8002504:	bd80      	pop	{r7, pc}
 8002506:	46c0      	nop			@ (mov r8, r8)
 8002508:	40021000 	.word	0x40021000
 800250c:	40007000 	.word	0x40007000
 8002510:	00001388 	.word	0x00001388
 8002514:	efffffff 	.word	0xefffffff
 8002518:	feffffff 	.word	0xfeffffff
 800251c:	1fc1808c 	.word	0x1fc1808c
 8002520:	effefffc 	.word	0xeffefffc

08002524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0e9      	b.n	800270c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002538:	4b76      	ldr	r3, [pc, #472]	@ (8002714 <HAL_RCC_ClockConfig+0x1f0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2207      	movs	r2, #7
 800253e:	4013      	ands	r3, r2
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d91e      	bls.n	8002584 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b73      	ldr	r3, [pc, #460]	@ (8002714 <HAL_RCC_ClockConfig+0x1f0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2207      	movs	r2, #7
 800254c:	4393      	bics	r3, r2
 800254e:	0019      	movs	r1, r3
 8002550:	4b70      	ldr	r3, [pc, #448]	@ (8002714 <HAL_RCC_ClockConfig+0x1f0>)
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002558:	f7fe fe08 	bl	800116c <HAL_GetTick>
 800255c:	0003      	movs	r3, r0
 800255e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002560:	e009      	b.n	8002576 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002562:	f7fe fe03 	bl	800116c <HAL_GetTick>
 8002566:	0002      	movs	r2, r0
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	4a6a      	ldr	r2, [pc, #424]	@ (8002718 <HAL_RCC_ClockConfig+0x1f4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e0ca      	b.n	800270c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002576:	4b67      	ldr	r3, [pc, #412]	@ (8002714 <HAL_RCC_ClockConfig+0x1f0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2207      	movs	r2, #7
 800257c:	4013      	ands	r3, r2
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d1ee      	bne.n	8002562 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2202      	movs	r2, #2
 800258a:	4013      	ands	r3, r2
 800258c:	d015      	beq.n	80025ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2204      	movs	r2, #4
 8002594:	4013      	ands	r3, r2
 8002596:	d006      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002598:	4b60      	ldr	r3, [pc, #384]	@ (800271c <HAL_RCC_ClockConfig+0x1f8>)
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	4b5f      	ldr	r3, [pc, #380]	@ (800271c <HAL_RCC_ClockConfig+0x1f8>)
 800259e:	21e0      	movs	r1, #224	@ 0xe0
 80025a0:	01c9      	lsls	r1, r1, #7
 80025a2:	430a      	orrs	r2, r1
 80025a4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a6:	4b5d      	ldr	r3, [pc, #372]	@ (800271c <HAL_RCC_ClockConfig+0x1f8>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	4a5d      	ldr	r2, [pc, #372]	@ (8002720 <HAL_RCC_ClockConfig+0x1fc>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	0019      	movs	r1, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	4b59      	ldr	r3, [pc, #356]	@ (800271c <HAL_RCC_ClockConfig+0x1f8>)
 80025b6:	430a      	orrs	r2, r1
 80025b8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2201      	movs	r2, #1
 80025c0:	4013      	ands	r3, r2
 80025c2:	d057      	beq.n	8002674 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d107      	bne.n	80025dc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025cc:	4b53      	ldr	r3, [pc, #332]	@ (800271c <HAL_RCC_ClockConfig+0x1f8>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	2380      	movs	r3, #128	@ 0x80
 80025d2:	029b      	lsls	r3, r3, #10
 80025d4:	4013      	ands	r3, r2
 80025d6:	d12b      	bne.n	8002630 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e097      	b.n	800270c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d107      	bne.n	80025f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025e4:	4b4d      	ldr	r3, [pc, #308]	@ (800271c <HAL_RCC_ClockConfig+0x1f8>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	2380      	movs	r3, #128	@ 0x80
 80025ea:	049b      	lsls	r3, r3, #18
 80025ec:	4013      	ands	r3, r2
 80025ee:	d11f      	bne.n	8002630 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e08b      	b.n	800270c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d107      	bne.n	800260c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025fc:	4b47      	ldr	r3, [pc, #284]	@ (800271c <HAL_RCC_ClockConfig+0x1f8>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	2380      	movs	r3, #128	@ 0x80
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4013      	ands	r3, r2
 8002606:	d113      	bne.n	8002630 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e07f      	b.n	800270c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b03      	cmp	r3, #3
 8002612:	d106      	bne.n	8002622 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002614:	4b41      	ldr	r3, [pc, #260]	@ (800271c <HAL_RCC_ClockConfig+0x1f8>)
 8002616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002618:	2202      	movs	r2, #2
 800261a:	4013      	ands	r3, r2
 800261c:	d108      	bne.n	8002630 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e074      	b.n	800270c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002622:	4b3e      	ldr	r3, [pc, #248]	@ (800271c <HAL_RCC_ClockConfig+0x1f8>)
 8002624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002626:	2202      	movs	r2, #2
 8002628:	4013      	ands	r3, r2
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e06d      	b.n	800270c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002630:	4b3a      	ldr	r3, [pc, #232]	@ (800271c <HAL_RCC_ClockConfig+0x1f8>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2207      	movs	r2, #7
 8002636:	4393      	bics	r3, r2
 8002638:	0019      	movs	r1, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	4b37      	ldr	r3, [pc, #220]	@ (800271c <HAL_RCC_ClockConfig+0x1f8>)
 8002640:	430a      	orrs	r2, r1
 8002642:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002644:	f7fe fd92 	bl	800116c <HAL_GetTick>
 8002648:	0003      	movs	r3, r0
 800264a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264c:	e009      	b.n	8002662 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264e:	f7fe fd8d 	bl	800116c <HAL_GetTick>
 8002652:	0002      	movs	r2, r0
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	4a2f      	ldr	r2, [pc, #188]	@ (8002718 <HAL_RCC_ClockConfig+0x1f4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e054      	b.n	800270c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002662:	4b2e      	ldr	r3, [pc, #184]	@ (800271c <HAL_RCC_ClockConfig+0x1f8>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2238      	movs	r2, #56	@ 0x38
 8002668:	401a      	ands	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	429a      	cmp	r2, r3
 8002672:	d1ec      	bne.n	800264e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002674:	4b27      	ldr	r3, [pc, #156]	@ (8002714 <HAL_RCC_ClockConfig+0x1f0>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2207      	movs	r2, #7
 800267a:	4013      	ands	r3, r2
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d21e      	bcs.n	80026c0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002682:	4b24      	ldr	r3, [pc, #144]	@ (8002714 <HAL_RCC_ClockConfig+0x1f0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2207      	movs	r2, #7
 8002688:	4393      	bics	r3, r2
 800268a:	0019      	movs	r1, r3
 800268c:	4b21      	ldr	r3, [pc, #132]	@ (8002714 <HAL_RCC_ClockConfig+0x1f0>)
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002694:	f7fe fd6a 	bl	800116c <HAL_GetTick>
 8002698:	0003      	movs	r3, r0
 800269a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800269c:	e009      	b.n	80026b2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800269e:	f7fe fd65 	bl	800116c <HAL_GetTick>
 80026a2:	0002      	movs	r2, r0
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002718 <HAL_RCC_ClockConfig+0x1f4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e02c      	b.n	800270c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026b2:	4b18      	ldr	r3, [pc, #96]	@ (8002714 <HAL_RCC_ClockConfig+0x1f0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2207      	movs	r2, #7
 80026b8:	4013      	ands	r3, r2
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d1ee      	bne.n	800269e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2204      	movs	r2, #4
 80026c6:	4013      	ands	r3, r2
 80026c8:	d009      	beq.n	80026de <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026ca:	4b14      	ldr	r3, [pc, #80]	@ (800271c <HAL_RCC_ClockConfig+0x1f8>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	4a15      	ldr	r2, [pc, #84]	@ (8002724 <HAL_RCC_ClockConfig+0x200>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	0019      	movs	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	4b10      	ldr	r3, [pc, #64]	@ (800271c <HAL_RCC_ClockConfig+0x1f8>)
 80026da:	430a      	orrs	r2, r1
 80026dc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80026de:	f000 f829 	bl	8002734 <HAL_RCC_GetSysClockFreq>
 80026e2:	0001      	movs	r1, r0
 80026e4:	4b0d      	ldr	r3, [pc, #52]	@ (800271c <HAL_RCC_ClockConfig+0x1f8>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	0a1b      	lsrs	r3, r3, #8
 80026ea:	220f      	movs	r2, #15
 80026ec:	401a      	ands	r2, r3
 80026ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002728 <HAL_RCC_ClockConfig+0x204>)
 80026f0:	0092      	lsls	r2, r2, #2
 80026f2:	58d3      	ldr	r3, [r2, r3]
 80026f4:	221f      	movs	r2, #31
 80026f6:	4013      	ands	r3, r2
 80026f8:	000a      	movs	r2, r1
 80026fa:	40da      	lsrs	r2, r3
 80026fc:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <HAL_RCC_ClockConfig+0x208>)
 80026fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002700:	4b0b      	ldr	r3, [pc, #44]	@ (8002730 <HAL_RCC_ClockConfig+0x20c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	0018      	movs	r0, r3
 8002706:	f7fe fcd5 	bl	80010b4 <HAL_InitTick>
 800270a:	0003      	movs	r3, r0
}
 800270c:	0018      	movs	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	b004      	add	sp, #16
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40022000 	.word	0x40022000
 8002718:	00001388 	.word	0x00001388
 800271c:	40021000 	.word	0x40021000
 8002720:	fffff0ff 	.word	0xfffff0ff
 8002724:	ffff8fff 	.word	0xffff8fff
 8002728:	08004888 	.word	0x08004888
 800272c:	20000000 	.word	0x20000000
 8002730:	20000004 	.word	0x20000004

08002734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800273a:	4b3c      	ldr	r3, [pc, #240]	@ (800282c <HAL_RCC_GetSysClockFreq+0xf8>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2238      	movs	r2, #56	@ 0x38
 8002740:	4013      	ands	r3, r2
 8002742:	d10f      	bne.n	8002764 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002744:	4b39      	ldr	r3, [pc, #228]	@ (800282c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	0adb      	lsrs	r3, r3, #11
 800274a:	2207      	movs	r2, #7
 800274c:	4013      	ands	r3, r2
 800274e:	2201      	movs	r2, #1
 8002750:	409a      	lsls	r2, r3
 8002752:	0013      	movs	r3, r2
 8002754:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002756:	6839      	ldr	r1, [r7, #0]
 8002758:	4835      	ldr	r0, [pc, #212]	@ (8002830 <HAL_RCC_GetSysClockFreq+0xfc>)
 800275a:	f7fd fcd1 	bl	8000100 <__udivsi3>
 800275e:	0003      	movs	r3, r0
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	e05d      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002764:	4b31      	ldr	r3, [pc, #196]	@ (800282c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2238      	movs	r2, #56	@ 0x38
 800276a:	4013      	ands	r3, r2
 800276c:	2b08      	cmp	r3, #8
 800276e:	d102      	bne.n	8002776 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002770:	4b30      	ldr	r3, [pc, #192]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x100>)
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	e054      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002776:	4b2d      	ldr	r3, [pc, #180]	@ (800282c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2238      	movs	r2, #56	@ 0x38
 800277c:	4013      	ands	r3, r2
 800277e:	2b10      	cmp	r3, #16
 8002780:	d138      	bne.n	80027f4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002782:	4b2a      	ldr	r3, [pc, #168]	@ (800282c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2203      	movs	r2, #3
 8002788:	4013      	ands	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800278c:	4b27      	ldr	r3, [pc, #156]	@ (800282c <HAL_RCC_GetSysClockFreq+0xf8>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	091b      	lsrs	r3, r3, #4
 8002792:	2207      	movs	r2, #7
 8002794:	4013      	ands	r3, r2
 8002796:	3301      	adds	r3, #1
 8002798:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d10d      	bne.n	80027bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	4824      	ldr	r0, [pc, #144]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x100>)
 80027a4:	f7fd fcac 	bl	8000100 <__udivsi3>
 80027a8:	0003      	movs	r3, r0
 80027aa:	0019      	movs	r1, r3
 80027ac:	4b1f      	ldr	r3, [pc, #124]	@ (800282c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	227f      	movs	r2, #127	@ 0x7f
 80027b4:	4013      	ands	r3, r2
 80027b6:	434b      	muls	r3, r1
 80027b8:	617b      	str	r3, [r7, #20]
        break;
 80027ba:	e00d      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	481c      	ldr	r0, [pc, #112]	@ (8002830 <HAL_RCC_GetSysClockFreq+0xfc>)
 80027c0:	f7fd fc9e 	bl	8000100 <__udivsi3>
 80027c4:	0003      	movs	r3, r0
 80027c6:	0019      	movs	r1, r3
 80027c8:	4b18      	ldr	r3, [pc, #96]	@ (800282c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	227f      	movs	r2, #127	@ 0x7f
 80027d0:	4013      	ands	r3, r2
 80027d2:	434b      	muls	r3, r1
 80027d4:	617b      	str	r3, [r7, #20]
        break;
 80027d6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80027d8:	4b14      	ldr	r3, [pc, #80]	@ (800282c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	0f5b      	lsrs	r3, r3, #29
 80027de:	2207      	movs	r2, #7
 80027e0:	4013      	ands	r3, r2
 80027e2:	3301      	adds	r3, #1
 80027e4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	6978      	ldr	r0, [r7, #20]
 80027ea:	f7fd fc89 	bl	8000100 <__udivsi3>
 80027ee:	0003      	movs	r3, r0
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	e015      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80027f4:	4b0d      	ldr	r3, [pc, #52]	@ (800282c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2238      	movs	r2, #56	@ 0x38
 80027fa:	4013      	ands	r3, r2
 80027fc:	2b20      	cmp	r3, #32
 80027fe:	d103      	bne.n	8002808 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002800:	2380      	movs	r3, #128	@ 0x80
 8002802:	021b      	lsls	r3, r3, #8
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	e00b      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002808:	4b08      	ldr	r3, [pc, #32]	@ (800282c <HAL_RCC_GetSysClockFreq+0xf8>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2238      	movs	r2, #56	@ 0x38
 800280e:	4013      	ands	r3, r2
 8002810:	2b18      	cmp	r3, #24
 8002812:	d103      	bne.n	800281c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002814:	23fa      	movs	r3, #250	@ 0xfa
 8002816:	01db      	lsls	r3, r3, #7
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	e001      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002820:	693b      	ldr	r3, [r7, #16]
}
 8002822:	0018      	movs	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	b006      	add	sp, #24
 8002828:	bd80      	pop	{r7, pc}
 800282a:	46c0      	nop			@ (mov r8, r8)
 800282c:	40021000 	.word	0x40021000
 8002830:	00f42400 	.word	0x00f42400
 8002834:	007a1200 	.word	0x007a1200

08002838 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800283c:	4b02      	ldr	r3, [pc, #8]	@ (8002848 <HAL_RCC_GetHCLKFreq+0x10>)
 800283e:	681b      	ldr	r3, [r3, #0]
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	46c0      	nop			@ (mov r8, r8)
 8002848:	20000000 	.word	0x20000000

0800284c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800284c:	b5b0      	push	{r4, r5, r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002850:	f7ff fff2 	bl	8002838 <HAL_RCC_GetHCLKFreq>
 8002854:	0004      	movs	r4, r0
 8002856:	f7ff fb49 	bl	8001eec <LL_RCC_GetAPB1Prescaler>
 800285a:	0003      	movs	r3, r0
 800285c:	0b1a      	lsrs	r2, r3, #12
 800285e:	4b05      	ldr	r3, [pc, #20]	@ (8002874 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002860:	0092      	lsls	r2, r2, #2
 8002862:	58d3      	ldr	r3, [r2, r3]
 8002864:	221f      	movs	r2, #31
 8002866:	4013      	ands	r3, r2
 8002868:	40dc      	lsrs	r4, r3
 800286a:	0023      	movs	r3, r4
}
 800286c:	0018      	movs	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	bdb0      	pop	{r4, r5, r7, pc}
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	080048c8 	.word	0x080048c8

08002878 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002880:	2313      	movs	r3, #19
 8002882:	18fb      	adds	r3, r7, r3
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002888:	2312      	movs	r3, #18
 800288a:	18fb      	adds	r3, r7, r3
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	2380      	movs	r3, #128	@ 0x80
 8002896:	029b      	lsls	r3, r3, #10
 8002898:	4013      	ands	r3, r2
 800289a:	d100      	bne.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800289c:	e0a3      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800289e:	2011      	movs	r0, #17
 80028a0:	183b      	adds	r3, r7, r0
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a6:	4b7f      	ldr	r3, [pc, #508]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028aa:	2380      	movs	r3, #128	@ 0x80
 80028ac:	055b      	lsls	r3, r3, #21
 80028ae:	4013      	ands	r3, r2
 80028b0:	d110      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b2:	4b7c      	ldr	r3, [pc, #496]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028b6:	4b7b      	ldr	r3, [pc, #492]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028b8:	2180      	movs	r1, #128	@ 0x80
 80028ba:	0549      	lsls	r1, r1, #21
 80028bc:	430a      	orrs	r2, r1
 80028be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80028c0:	4b78      	ldr	r3, [pc, #480]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028c4:	2380      	movs	r3, #128	@ 0x80
 80028c6:	055b      	lsls	r3, r3, #21
 80028c8:	4013      	ands	r3, r2
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ce:	183b      	adds	r3, r7, r0
 80028d0:	2201      	movs	r2, #1
 80028d2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028d4:	4b74      	ldr	r3, [pc, #464]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4b73      	ldr	r3, [pc, #460]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028da:	2180      	movs	r1, #128	@ 0x80
 80028dc:	0049      	lsls	r1, r1, #1
 80028de:	430a      	orrs	r2, r1
 80028e0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028e2:	f7fe fc43 	bl	800116c <HAL_GetTick>
 80028e6:	0003      	movs	r3, r0
 80028e8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028ea:	e00b      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ec:	f7fe fc3e 	bl	800116c <HAL_GetTick>
 80028f0:	0002      	movs	r2, r0
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d904      	bls.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80028fa:	2313      	movs	r3, #19
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	2203      	movs	r2, #3
 8002900:	701a      	strb	r2, [r3, #0]
        break;
 8002902:	e005      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002904:	4b68      	ldr	r3, [pc, #416]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	2380      	movs	r3, #128	@ 0x80
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4013      	ands	r3, r2
 800290e:	d0ed      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002910:	2313      	movs	r3, #19
 8002912:	18fb      	adds	r3, r7, r3
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d154      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800291a:	4b62      	ldr	r3, [pc, #392]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800291c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800291e:	23c0      	movs	r3, #192	@ 0xc0
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4013      	ands	r3, r2
 8002924:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d019      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	429a      	cmp	r2, r3
 8002934:	d014      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002936:	4b5b      	ldr	r3, [pc, #364]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293a:	4a5c      	ldr	r2, [pc, #368]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800293c:	4013      	ands	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002940:	4b58      	ldr	r3, [pc, #352]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002942:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002944:	4b57      	ldr	r3, [pc, #348]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002946:	2180      	movs	r1, #128	@ 0x80
 8002948:	0249      	lsls	r1, r1, #9
 800294a:	430a      	orrs	r2, r1
 800294c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800294e:	4b55      	ldr	r3, [pc, #340]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002950:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002952:	4b54      	ldr	r3, [pc, #336]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002954:	4956      	ldr	r1, [pc, #344]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002956:	400a      	ands	r2, r1
 8002958:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800295a:	4b52      	ldr	r3, [pc, #328]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	2201      	movs	r2, #1
 8002964:	4013      	ands	r3, r2
 8002966:	d016      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002968:	f7fe fc00 	bl	800116c <HAL_GetTick>
 800296c:	0003      	movs	r3, r0
 800296e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002970:	e00c      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002972:	f7fe fbfb 	bl	800116c <HAL_GetTick>
 8002976:	0002      	movs	r2, r0
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	4a4d      	ldr	r2, [pc, #308]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d904      	bls.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002982:	2313      	movs	r3, #19
 8002984:	18fb      	adds	r3, r7, r3
 8002986:	2203      	movs	r2, #3
 8002988:	701a      	strb	r2, [r3, #0]
            break;
 800298a:	e004      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800298c:	4b45      	ldr	r3, [pc, #276]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800298e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002990:	2202      	movs	r2, #2
 8002992:	4013      	ands	r3, r2
 8002994:	d0ed      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002996:	2313      	movs	r3, #19
 8002998:	18fb      	adds	r3, r7, r3
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10a      	bne.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029a0:	4b40      	ldr	r3, [pc, #256]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a4:	4a41      	ldr	r2, [pc, #260]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	0019      	movs	r1, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695a      	ldr	r2, [r3, #20]
 80029ae:	4b3d      	ldr	r3, [pc, #244]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029b0:	430a      	orrs	r2, r1
 80029b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029b4:	e00c      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029b6:	2312      	movs	r3, #18
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	2213      	movs	r2, #19
 80029bc:	18ba      	adds	r2, r7, r2
 80029be:	7812      	ldrb	r2, [r2, #0]
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	e005      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c4:	2312      	movs	r3, #18
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	2213      	movs	r2, #19
 80029ca:	18ba      	adds	r2, r7, r2
 80029cc:	7812      	ldrb	r2, [r2, #0]
 80029ce:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029d0:	2311      	movs	r3, #17
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d105      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029da:	4b32      	ldr	r3, [pc, #200]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029de:	4b31      	ldr	r3, [pc, #196]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029e0:	4935      	ldr	r1, [pc, #212]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029e2:	400a      	ands	r2, r1
 80029e4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2201      	movs	r2, #1
 80029ec:	4013      	ands	r3, r2
 80029ee:	d009      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029f0:	4b2c      	ldr	r3, [pc, #176]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f4:	2203      	movs	r2, #3
 80029f6:	4393      	bics	r3, r2
 80029f8:	0019      	movs	r1, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	4b29      	ldr	r3, [pc, #164]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a00:	430a      	orrs	r2, r1
 8002a02:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d009      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a0e:	4b25      	ldr	r3, [pc, #148]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a12:	4a2a      	ldr	r2, [pc, #168]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	0019      	movs	r1, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	4b21      	ldr	r3, [pc, #132]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	2380      	movs	r3, #128	@ 0x80
 8002a28:	01db      	lsls	r3, r3, #7
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d015      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	0899      	lsrs	r1, r3, #2
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691a      	ldr	r2, [r3, #16]
 8002a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	2380      	movs	r3, #128	@ 0x80
 8002a46:	05db      	lsls	r3, r3, #23
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d106      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a4c:	4b15      	ldr	r3, [pc, #84]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	4b14      	ldr	r3, [pc, #80]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a52:	2180      	movs	r1, #128	@ 0x80
 8002a54:	0249      	lsls	r1, r1, #9
 8002a56:	430a      	orrs	r2, r1
 8002a58:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	2380      	movs	r3, #128	@ 0x80
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	4013      	ands	r3, r2
 8002a64:	d016      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002a66:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6a:	4a15      	ldr	r2, [pc, #84]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	0019      	movs	r1, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a76:	430a      	orrs	r2, r1
 8002a78:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	2380      	movs	r3, #128	@ 0x80
 8002a80:	01db      	lsls	r3, r3, #7
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d106      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a86:	4b07      	ldr	r3, [pc, #28]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	4b06      	ldr	r3, [pc, #24]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a8c:	2180      	movs	r1, #128	@ 0x80
 8002a8e:	0249      	lsls	r1, r1, #9
 8002a90:	430a      	orrs	r2, r1
 8002a92:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002a94:	2312      	movs	r3, #18
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	781b      	ldrb	r3, [r3, #0]
}
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	b006      	add	sp, #24
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	46c0      	nop			@ (mov r8, r8)
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40007000 	.word	0x40007000
 8002aac:	fffffcff 	.word	0xfffffcff
 8002ab0:	fffeffff 	.word	0xfffeffff
 8002ab4:	00001388 	.word	0x00001388
 8002ab8:	efffffff 	.word	0xefffffff
 8002abc:	ffffcfff 	.word	0xffffcfff
 8002ac0:	ffff3fff 	.word	0xffff3fff

08002ac4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e04a      	b.n	8002b6c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	223d      	movs	r2, #61	@ 0x3d
 8002ada:	5c9b      	ldrb	r3, [r3, r2]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d107      	bne.n	8002af2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	223c      	movs	r2, #60	@ 0x3c
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	0018      	movs	r0, r3
 8002aee:	f7fe f981 	bl	8000df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	223d      	movs	r2, #61	@ 0x3d
 8002af6:	2102      	movs	r1, #2
 8002af8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3304      	adds	r3, #4
 8002b02:	0019      	movs	r1, r3
 8002b04:	0010      	movs	r0, r2
 8002b06:	f000 fe79 	bl	80037fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2248      	movs	r2, #72	@ 0x48
 8002b0e:	2101      	movs	r1, #1
 8002b10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	223e      	movs	r2, #62	@ 0x3e
 8002b16:	2101      	movs	r1, #1
 8002b18:	5499      	strb	r1, [r3, r2]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	223f      	movs	r2, #63	@ 0x3f
 8002b1e:	2101      	movs	r1, #1
 8002b20:	5499      	strb	r1, [r3, r2]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2240      	movs	r2, #64	@ 0x40
 8002b26:	2101      	movs	r1, #1
 8002b28:	5499      	strb	r1, [r3, r2]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2241      	movs	r2, #65	@ 0x41
 8002b2e:	2101      	movs	r1, #1
 8002b30:	5499      	strb	r1, [r3, r2]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2242      	movs	r2, #66	@ 0x42
 8002b36:	2101      	movs	r1, #1
 8002b38:	5499      	strb	r1, [r3, r2]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2243      	movs	r2, #67	@ 0x43
 8002b3e:	2101      	movs	r1, #1
 8002b40:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2244      	movs	r2, #68	@ 0x44
 8002b46:	2101      	movs	r1, #1
 8002b48:	5499      	strb	r1, [r3, r2]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2245      	movs	r2, #69	@ 0x45
 8002b4e:	2101      	movs	r1, #1
 8002b50:	5499      	strb	r1, [r3, r2]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2246      	movs	r2, #70	@ 0x46
 8002b56:	2101      	movs	r1, #1
 8002b58:	5499      	strb	r1, [r3, r2]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2247      	movs	r2, #71	@ 0x47
 8002b5e:	2101      	movs	r1, #1
 8002b60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	223d      	movs	r2, #61	@ 0x3d
 8002b66:	2101      	movs	r1, #1
 8002b68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b002      	add	sp, #8
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e04a      	b.n	8002c1c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	223d      	movs	r2, #61	@ 0x3d
 8002b8a:	5c9b      	ldrb	r3, [r3, r2]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d107      	bne.n	8002ba2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	223c      	movs	r2, #60	@ 0x3c
 8002b96:	2100      	movs	r1, #0
 8002b98:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f000 f841 	bl	8002c24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	223d      	movs	r2, #61	@ 0x3d
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	0019      	movs	r1, r3
 8002bb4:	0010      	movs	r0, r2
 8002bb6:	f000 fe21 	bl	80037fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2248      	movs	r2, #72	@ 0x48
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	223e      	movs	r2, #62	@ 0x3e
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	5499      	strb	r1, [r3, r2]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	223f      	movs	r2, #63	@ 0x3f
 8002bce:	2101      	movs	r1, #1
 8002bd0:	5499      	strb	r1, [r3, r2]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2240      	movs	r2, #64	@ 0x40
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	5499      	strb	r1, [r3, r2]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2241      	movs	r2, #65	@ 0x41
 8002bde:	2101      	movs	r1, #1
 8002be0:	5499      	strb	r1, [r3, r2]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2242      	movs	r2, #66	@ 0x42
 8002be6:	2101      	movs	r1, #1
 8002be8:	5499      	strb	r1, [r3, r2]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2243      	movs	r2, #67	@ 0x43
 8002bee:	2101      	movs	r1, #1
 8002bf0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2244      	movs	r2, #68	@ 0x44
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	5499      	strb	r1, [r3, r2]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2245      	movs	r2, #69	@ 0x45
 8002bfe:	2101      	movs	r1, #1
 8002c00:	5499      	strb	r1, [r3, r2]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2246      	movs	r2, #70	@ 0x46
 8002c06:	2101      	movs	r1, #1
 8002c08:	5499      	strb	r1, [r3, r2]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2247      	movs	r2, #71	@ 0x47
 8002c0e:	2101      	movs	r1, #1
 8002c10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	223d      	movs	r2, #61	@ 0x3d
 8002c16:	2101      	movs	r1, #1
 8002c18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	b002      	add	sp, #8
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c2c:	46c0      	nop			@ (mov r8, r8)
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b002      	add	sp, #8
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
 8002c40:	001a      	movs	r2, r3
 8002c42:	1cbb      	adds	r3, r7, #2
 8002c44:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c46:	2317      	movs	r3, #23
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d108      	bne.n	8002c66 <HAL_TIM_PWM_Start_DMA+0x32>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	223e      	movs	r2, #62	@ 0x3e
 8002c58:	5c9b      	ldrb	r3, [r3, r2]
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	3b02      	subs	r3, #2
 8002c5e:	425a      	negs	r2, r3
 8002c60:	4153      	adcs	r3, r2
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	e037      	b.n	8002cd6 <HAL_TIM_PWM_Start_DMA+0xa2>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d108      	bne.n	8002c7e <HAL_TIM_PWM_Start_DMA+0x4a>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	223f      	movs	r2, #63	@ 0x3f
 8002c70:	5c9b      	ldrb	r3, [r3, r2]
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	3b02      	subs	r3, #2
 8002c76:	425a      	negs	r2, r3
 8002c78:	4153      	adcs	r3, r2
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	e02b      	b.n	8002cd6 <HAL_TIM_PWM_Start_DMA+0xa2>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d108      	bne.n	8002c96 <HAL_TIM_PWM_Start_DMA+0x62>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2240      	movs	r2, #64	@ 0x40
 8002c88:	5c9b      	ldrb	r3, [r3, r2]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	3b02      	subs	r3, #2
 8002c8e:	425a      	negs	r2, r3
 8002c90:	4153      	adcs	r3, r2
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	e01f      	b.n	8002cd6 <HAL_TIM_PWM_Start_DMA+0xa2>
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b0c      	cmp	r3, #12
 8002c9a:	d108      	bne.n	8002cae <HAL_TIM_PWM_Start_DMA+0x7a>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2241      	movs	r2, #65	@ 0x41
 8002ca0:	5c9b      	ldrb	r3, [r3, r2]
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	3b02      	subs	r3, #2
 8002ca6:	425a      	negs	r2, r3
 8002ca8:	4153      	adcs	r3, r2
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	e013      	b.n	8002cd6 <HAL_TIM_PWM_Start_DMA+0xa2>
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b10      	cmp	r3, #16
 8002cb2:	d108      	bne.n	8002cc6 <HAL_TIM_PWM_Start_DMA+0x92>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2242      	movs	r2, #66	@ 0x42
 8002cb8:	5c9b      	ldrb	r3, [r3, r2]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	3b02      	subs	r3, #2
 8002cbe:	425a      	negs	r2, r3
 8002cc0:	4153      	adcs	r3, r2
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	e007      	b.n	8002cd6 <HAL_TIM_PWM_Start_DMA+0xa2>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2243      	movs	r2, #67	@ 0x43
 8002cca:	5c9b      	ldrb	r3, [r3, r2]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	3b02      	subs	r3, #2
 8002cd0:	425a      	negs	r2, r3
 8002cd2:	4153      	adcs	r3, r2
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e183      	b.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d108      	bne.n	8002cf6 <HAL_TIM_PWM_Start_DMA+0xc2>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	223e      	movs	r2, #62	@ 0x3e
 8002ce8:	5c9b      	ldrb	r3, [r3, r2]
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	3b01      	subs	r3, #1
 8002cee:	425a      	negs	r2, r3
 8002cf0:	4153      	adcs	r3, r2
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	e037      	b.n	8002d66 <HAL_TIM_PWM_Start_DMA+0x132>
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d108      	bne.n	8002d0e <HAL_TIM_PWM_Start_DMA+0xda>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	223f      	movs	r2, #63	@ 0x3f
 8002d00:	5c9b      	ldrb	r3, [r3, r2]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	3b01      	subs	r3, #1
 8002d06:	425a      	negs	r2, r3
 8002d08:	4153      	adcs	r3, r2
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	e02b      	b.n	8002d66 <HAL_TIM_PWM_Start_DMA+0x132>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d108      	bne.n	8002d26 <HAL_TIM_PWM_Start_DMA+0xf2>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2240      	movs	r2, #64	@ 0x40
 8002d18:	5c9b      	ldrb	r3, [r3, r2]
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	425a      	negs	r2, r3
 8002d20:	4153      	adcs	r3, r2
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	e01f      	b.n	8002d66 <HAL_TIM_PWM_Start_DMA+0x132>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b0c      	cmp	r3, #12
 8002d2a:	d108      	bne.n	8002d3e <HAL_TIM_PWM_Start_DMA+0x10a>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2241      	movs	r2, #65	@ 0x41
 8002d30:	5c9b      	ldrb	r3, [r3, r2]
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	3b01      	subs	r3, #1
 8002d36:	425a      	negs	r2, r3
 8002d38:	4153      	adcs	r3, r2
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	e013      	b.n	8002d66 <HAL_TIM_PWM_Start_DMA+0x132>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b10      	cmp	r3, #16
 8002d42:	d108      	bne.n	8002d56 <HAL_TIM_PWM_Start_DMA+0x122>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2242      	movs	r2, #66	@ 0x42
 8002d48:	5c9b      	ldrb	r3, [r3, r2]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	425a      	negs	r2, r3
 8002d50:	4153      	adcs	r3, r2
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	e007      	b.n	8002d66 <HAL_TIM_PWM_Start_DMA+0x132>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2243      	movs	r2, #67	@ 0x43
 8002d5a:	5c9b      	ldrb	r3, [r3, r2]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	425a      	negs	r2, r3
 8002d62:	4153      	adcs	r3, r2
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d035      	beq.n	8002dd6 <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_TIM_PWM_Start_DMA+0x144>
 8002d70:	1cbb      	adds	r3, r7, #2
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e134      	b.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d104      	bne.n	8002d8c <HAL_TIM_PWM_Start_DMA+0x158>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	223e      	movs	r2, #62	@ 0x3e
 8002d86:	2102      	movs	r1, #2
 8002d88:	5499      	strb	r1, [r3, r2]
 8002d8a:	e026      	b.n	8002dda <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d104      	bne.n	8002d9c <HAL_TIM_PWM_Start_DMA+0x168>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	223f      	movs	r2, #63	@ 0x3f
 8002d96:	2102      	movs	r1, #2
 8002d98:	5499      	strb	r1, [r3, r2]
 8002d9a:	e01e      	b.n	8002dda <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d104      	bne.n	8002dac <HAL_TIM_PWM_Start_DMA+0x178>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2240      	movs	r2, #64	@ 0x40
 8002da6:	2102      	movs	r1, #2
 8002da8:	5499      	strb	r1, [r3, r2]
 8002daa:	e016      	b.n	8002dda <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b0c      	cmp	r3, #12
 8002db0:	d104      	bne.n	8002dbc <HAL_TIM_PWM_Start_DMA+0x188>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2241      	movs	r2, #65	@ 0x41
 8002db6:	2102      	movs	r1, #2
 8002db8:	5499      	strb	r1, [r3, r2]
 8002dba:	e00e      	b.n	8002dda <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b10      	cmp	r3, #16
 8002dc0:	d104      	bne.n	8002dcc <HAL_TIM_PWM_Start_DMA+0x198>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2242      	movs	r2, #66	@ 0x42
 8002dc6:	2102      	movs	r1, #2
 8002dc8:	5499      	strb	r1, [r3, r2]
 8002dca:	e006      	b.n	8002dda <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2243      	movs	r2, #67	@ 0x43
 8002dd0:	2102      	movs	r1, #2
 8002dd2:	5499      	strb	r1, [r3, r2]
 8002dd4:	e001      	b.n	8002dda <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e105      	b.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b0c      	cmp	r3, #12
 8002dde:	d100      	bne.n	8002de2 <HAL_TIM_PWM_Start_DMA+0x1ae>
 8002de0:	e080      	b.n	8002ee4 <HAL_TIM_PWM_Start_DMA+0x2b0>
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b0c      	cmp	r3, #12
 8002de6:	d900      	bls.n	8002dea <HAL_TIM_PWM_Start_DMA+0x1b6>
 8002de8:	e0a1      	b.n	8002f2e <HAL_TIM_PWM_Start_DMA+0x2fa>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d054      	beq.n	8002e9a <HAL_TIM_PWM_Start_DMA+0x266>
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	d900      	bls.n	8002df8 <HAL_TIM_PWM_Start_DMA+0x1c4>
 8002df6:	e09a      	b.n	8002f2e <HAL_TIM_PWM_Start_DMA+0x2fa>
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_TIM_PWM_Start_DMA+0x1d2>
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d025      	beq.n	8002e50 <HAL_TIM_PWM_Start_DMA+0x21c>
 8002e04:	e093      	b.n	8002f2e <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	4a79      	ldr	r2, [pc, #484]	@ (8002ff0 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e12:	4a78      	ldr	r2, [pc, #480]	@ (8002ff4 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002e14:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1a:	4a77      	ldr	r2, [pc, #476]	@ (8002ff8 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002e1c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3334      	adds	r3, #52	@ 0x34
 8002e2a:	001a      	movs	r2, r3
 8002e2c:	1cbb      	adds	r3, r7, #2
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	f7fe fb0e 	bl	8001450 <HAL_DMA_Start_IT>
 8002e34:	1e03      	subs	r3, r0, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0d4      	b.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2180      	movs	r1, #128	@ 0x80
 8002e48:	0089      	lsls	r1, r1, #2
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	60da      	str	r2, [r3, #12]
      break;
 8002e4e:	e073      	b.n	8002f38 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e54:	4a66      	ldr	r2, [pc, #408]	@ (8002ff0 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002e56:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5c:	4a65      	ldr	r2, [pc, #404]	@ (8002ff4 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002e5e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e64:	4a64      	ldr	r2, [pc, #400]	@ (8002ff8 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002e66:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3338      	adds	r3, #56	@ 0x38
 8002e74:	001a      	movs	r2, r3
 8002e76:	1cbb      	adds	r3, r7, #2
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	f7fe fae9 	bl	8001450 <HAL_DMA_Start_IT>
 8002e7e:	1e03      	subs	r3, r0, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e0af      	b.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2180      	movs	r1, #128	@ 0x80
 8002e92:	00c9      	lsls	r1, r1, #3
 8002e94:	430a      	orrs	r2, r1
 8002e96:	60da      	str	r2, [r3, #12]
      break;
 8002e98:	e04e      	b.n	8002f38 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9e:	4a54      	ldr	r2, [pc, #336]	@ (8002ff0 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002ea0:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea6:	4a53      	ldr	r2, [pc, #332]	@ (8002ff4 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002ea8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eae:	4a52      	ldr	r2, [pc, #328]	@ (8002ff8 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002eb0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	333c      	adds	r3, #60	@ 0x3c
 8002ebe:	001a      	movs	r2, r3
 8002ec0:	1cbb      	adds	r3, r7, #2
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	f7fe fac4 	bl	8001450 <HAL_DMA_Start_IT>
 8002ec8:	1e03      	subs	r3, r0, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e08a      	b.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2180      	movs	r1, #128	@ 0x80
 8002edc:	0109      	lsls	r1, r1, #4
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	60da      	str	r2, [r3, #12]
      break;
 8002ee2:	e029      	b.n	8002f38 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee8:	4a41      	ldr	r2, [pc, #260]	@ (8002ff0 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002eea:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef0:	4a40      	ldr	r2, [pc, #256]	@ (8002ff4 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002ef2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef8:	4a3f      	ldr	r2, [pc, #252]	@ (8002ff8 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002efa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	3340      	adds	r3, #64	@ 0x40
 8002f08:	001a      	movs	r2, r3
 8002f0a:	1cbb      	adds	r3, r7, #2
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	f7fe fa9f 	bl	8001450 <HAL_DMA_Start_IT>
 8002f12:	1e03      	subs	r3, r0, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e065      	b.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2180      	movs	r1, #128	@ 0x80
 8002f26:	0149      	lsls	r1, r1, #5
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	60da      	str	r2, [r3, #12]
      break;
 8002f2c:	e004      	b.n	8002f38 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8002f2e:	2317      	movs	r3, #23
 8002f30:	18fb      	adds	r3, r7, r3
 8002f32:	2201      	movs	r2, #1
 8002f34:	701a      	strb	r2, [r3, #0]
      break;
 8002f36:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002f38:	2317      	movs	r3, #23
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d14e      	bne.n	8002fe0 <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68b9      	ldr	r1, [r7, #8]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f000 ff6c 	bl	8003e28 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a29      	ldr	r2, [pc, #164]	@ (8002ffc <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d009      	beq.n	8002f6e <HAL_TIM_PWM_Start_DMA+0x33a>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a28      	ldr	r2, [pc, #160]	@ (8003000 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d004      	beq.n	8002f6e <HAL_TIM_PWM_Start_DMA+0x33a>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a26      	ldr	r2, [pc, #152]	@ (8003004 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d101      	bne.n	8002f72 <HAL_TIM_PWM_Start_DMA+0x33e>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <HAL_TIM_PWM_Start_DMA+0x340>
 8002f72:	2300      	movs	r3, #0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2180      	movs	r1, #128	@ 0x80
 8002f84:	0209      	lsls	r1, r1, #8
 8002f86:	430a      	orrs	r2, r1
 8002f88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8002ffc <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d004      	beq.n	8002f9e <HAL_TIM_PWM_Start_DMA+0x36a>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a1b      	ldr	r2, [pc, #108]	@ (8003008 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d116      	bne.n	8002fcc <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	4a19      	ldr	r2, [pc, #100]	@ (800300c <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	2b06      	cmp	r3, #6
 8002fae:	d016      	beq.n	8002fde <HAL_TIM_PWM_Start_DMA+0x3aa>
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	2380      	movs	r3, #128	@ 0x80
 8002fb4:	025b      	lsls	r3, r3, #9
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d011      	beq.n	8002fde <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fca:	e008      	b.n	8002fde <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	e000      	b.n	8002fe0 <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fde:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8002fe0:	2317      	movs	r3, #23
 8002fe2:	18fb      	adds	r3, r7, r3
 8002fe4:	781b      	ldrb	r3, [r3, #0]
}
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	b006      	add	sp, #24
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	46c0      	nop			@ (mov r8, r8)
 8002ff0:	080036e9 	.word	0x080036e9
 8002ff4:	08003793 	.word	0x08003793
 8002ff8:	08003655 	.word	0x08003655
 8002ffc:	40012c00 	.word	0x40012c00
 8003000:	40014400 	.word	0x40014400
 8003004:	40014800 	.word	0x40014800
 8003008:	40000400 	.word	0x40000400
 800300c:	00010007 	.word	0x00010007

08003010 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800301a:	230f      	movs	r3, #15
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	2200      	movs	r2, #0
 8003020:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b0c      	cmp	r3, #12
 8003026:	d039      	beq.n	800309c <HAL_TIM_PWM_Stop_DMA+0x8c>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2b0c      	cmp	r3, #12
 800302c:	d844      	bhi.n	80030b8 <HAL_TIM_PWM_Stop_DMA+0xa8>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b08      	cmp	r3, #8
 8003032:	d025      	beq.n	8003080 <HAL_TIM_PWM_Stop_DMA+0x70>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2b08      	cmp	r3, #8
 8003038:	d83e      	bhi.n	80030b8 <HAL_TIM_PWM_Stop_DMA+0xa8>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_TIM_PWM_Stop_DMA+0x38>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	2b04      	cmp	r3, #4
 8003044:	d00e      	beq.n	8003064 <HAL_TIM_PWM_Stop_DMA+0x54>
 8003046:	e037      	b.n	80030b8 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	495a      	ldr	r1, [pc, #360]	@ (80031bc <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8003054:	400a      	ands	r2, r1
 8003056:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305c:	0018      	movs	r0, r3
 800305e:	f7fe fa7d 	bl	800155c <HAL_DMA_Abort_IT>
      break;
 8003062:	e02e      	b.n	80030c2 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4954      	ldr	r1, [pc, #336]	@ (80031c0 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8003070:	400a      	ands	r2, r1
 8003072:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003078:	0018      	movs	r0, r3
 800307a:	f7fe fa6f 	bl	800155c <HAL_DMA_Abort_IT>
      break;
 800307e:	e020      	b.n	80030c2 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	494e      	ldr	r1, [pc, #312]	@ (80031c4 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 800308c:	400a      	ands	r2, r1
 800308e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003094:	0018      	movs	r0, r3
 8003096:	f7fe fa61 	bl	800155c <HAL_DMA_Abort_IT>
      break;
 800309a:	e012      	b.n	80030c2 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4948      	ldr	r1, [pc, #288]	@ (80031c8 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 80030a8:	400a      	ands	r2, r1
 80030aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b0:	0018      	movs	r0, r3
 80030b2:	f7fe fa53 	bl	800155c <HAL_DMA_Abort_IT>
      break;
 80030b6:	e004      	b.n	80030c2 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 80030b8:	230f      	movs	r3, #15
 80030ba:	18fb      	adds	r3, r7, r3
 80030bc:	2201      	movs	r2, #1
 80030be:	701a      	strb	r2, [r3, #0]
      break;
 80030c0:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80030c2:	230f      	movs	r3, #15
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d000      	beq.n	80030ce <HAL_TIM_PWM_Stop_DMA+0xbe>
 80030cc:	e06e      	b.n	80031ac <HAL_TIM_PWM_Stop_DMA+0x19c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6839      	ldr	r1, [r7, #0]
 80030d4:	2200      	movs	r2, #0
 80030d6:	0018      	movs	r0, r3
 80030d8:	f000 fea6 	bl	8003e28 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a3a      	ldr	r2, [pc, #232]	@ (80031cc <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d009      	beq.n	80030fa <HAL_TIM_PWM_Stop_DMA+0xea>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a39      	ldr	r2, [pc, #228]	@ (80031d0 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d004      	beq.n	80030fa <HAL_TIM_PWM_Stop_DMA+0xea>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a37      	ldr	r2, [pc, #220]	@ (80031d4 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d101      	bne.n	80030fe <HAL_TIM_PWM_Stop_DMA+0xee>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_TIM_PWM_Stop_DMA+0xf0>
 80030fe:	2300      	movs	r3, #0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d013      	beq.n	800312c <HAL_TIM_PWM_Stop_DMA+0x11c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	4a33      	ldr	r2, [pc, #204]	@ (80031d8 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 800310c:	4013      	ands	r3, r2
 800310e:	d10d      	bne.n	800312c <HAL_TIM_PWM_Stop_DMA+0x11c>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	4a31      	ldr	r2, [pc, #196]	@ (80031dc <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8003118:	4013      	ands	r3, r2
 800311a:	d107      	bne.n	800312c <HAL_TIM_PWM_Stop_DMA+0x11c>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	492e      	ldr	r1, [pc, #184]	@ (80031e0 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8003128:	400a      	ands	r2, r1
 800312a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	4a29      	ldr	r2, [pc, #164]	@ (80031d8 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8003134:	4013      	ands	r3, r2
 8003136:	d10d      	bne.n	8003154 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	4a27      	ldr	r2, [pc, #156]	@ (80031dc <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8003140:	4013      	ands	r3, r2
 8003142:	d107      	bne.n	8003154 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2101      	movs	r1, #1
 8003150:	438a      	bics	r2, r1
 8003152:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d104      	bne.n	8003164 <HAL_TIM_PWM_Stop_DMA+0x154>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	223e      	movs	r2, #62	@ 0x3e
 800315e:	2101      	movs	r1, #1
 8003160:	5499      	strb	r1, [r3, r2]
 8003162:	e023      	b.n	80031ac <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	2b04      	cmp	r3, #4
 8003168:	d104      	bne.n	8003174 <HAL_TIM_PWM_Stop_DMA+0x164>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	223f      	movs	r2, #63	@ 0x3f
 800316e:	2101      	movs	r1, #1
 8003170:	5499      	strb	r1, [r3, r2]
 8003172:	e01b      	b.n	80031ac <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2b08      	cmp	r3, #8
 8003178:	d104      	bne.n	8003184 <HAL_TIM_PWM_Stop_DMA+0x174>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2240      	movs	r2, #64	@ 0x40
 800317e:	2101      	movs	r1, #1
 8003180:	5499      	strb	r1, [r3, r2]
 8003182:	e013      	b.n	80031ac <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	2b0c      	cmp	r3, #12
 8003188:	d104      	bne.n	8003194 <HAL_TIM_PWM_Stop_DMA+0x184>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2241      	movs	r2, #65	@ 0x41
 800318e:	2101      	movs	r1, #1
 8003190:	5499      	strb	r1, [r3, r2]
 8003192:	e00b      	b.n	80031ac <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	2b10      	cmp	r3, #16
 8003198:	d104      	bne.n	80031a4 <HAL_TIM_PWM_Stop_DMA+0x194>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2242      	movs	r2, #66	@ 0x42
 800319e:	2101      	movs	r1, #1
 80031a0:	5499      	strb	r1, [r3, r2]
 80031a2:	e003      	b.n	80031ac <HAL_TIM_PWM_Stop_DMA+0x19c>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2243      	movs	r2, #67	@ 0x43
 80031a8:	2101      	movs	r1, #1
 80031aa:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80031ac:	230f      	movs	r3, #15
 80031ae:	18fb      	adds	r3, r7, r3
 80031b0:	781b      	ldrb	r3, [r3, #0]
}
 80031b2:	0018      	movs	r0, r3
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b004      	add	sp, #16
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	46c0      	nop			@ (mov r8, r8)
 80031bc:	fffffdff 	.word	0xfffffdff
 80031c0:	fffffbff 	.word	0xfffffbff
 80031c4:	fffff7ff 	.word	0xfffff7ff
 80031c8:	ffffefff 	.word	0xffffefff
 80031cc:	40012c00 	.word	0x40012c00
 80031d0:	40014400 	.word	0x40014400
 80031d4:	40014800 	.word	0x40014800
 80031d8:	00001111 	.word	0x00001111
 80031dc:	00000444 	.word	0x00000444
 80031e0:	ffff7fff 	.word	0xffff7fff

080031e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2202      	movs	r2, #2
 8003200:	4013      	ands	r3, r2
 8003202:	d021      	beq.n	8003248 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2202      	movs	r2, #2
 8003208:	4013      	ands	r3, r2
 800320a:	d01d      	beq.n	8003248 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2203      	movs	r2, #3
 8003212:	4252      	negs	r2, r2
 8003214:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	2203      	movs	r2, #3
 8003224:	4013      	ands	r3, r2
 8003226:	d004      	beq.n	8003232 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	0018      	movs	r0, r3
 800322c:	f000 f9f2 	bl	8003614 <HAL_TIM_IC_CaptureCallback>
 8003230:	e007      	b.n	8003242 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	0018      	movs	r0, r3
 8003236:	f000 f9e5 	bl	8003604 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	0018      	movs	r0, r3
 800323e:	f7fd fb43 	bl	80008c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2204      	movs	r2, #4
 800324c:	4013      	ands	r3, r2
 800324e:	d022      	beq.n	8003296 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2204      	movs	r2, #4
 8003254:	4013      	ands	r3, r2
 8003256:	d01e      	beq.n	8003296 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2205      	movs	r2, #5
 800325e:	4252      	negs	r2, r2
 8003260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2202      	movs	r2, #2
 8003266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699a      	ldr	r2, [r3, #24]
 800326e:	23c0      	movs	r3, #192	@ 0xc0
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4013      	ands	r3, r2
 8003274:	d004      	beq.n	8003280 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	0018      	movs	r0, r3
 800327a:	f000 f9cb 	bl	8003614 <HAL_TIM_IC_CaptureCallback>
 800327e:	e007      	b.n	8003290 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	0018      	movs	r0, r3
 8003284:	f000 f9be 	bl	8003604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	0018      	movs	r0, r3
 800328c:	f7fd fb1c 	bl	80008c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2208      	movs	r2, #8
 800329a:	4013      	ands	r3, r2
 800329c:	d021      	beq.n	80032e2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2208      	movs	r2, #8
 80032a2:	4013      	ands	r3, r2
 80032a4:	d01d      	beq.n	80032e2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2209      	movs	r2, #9
 80032ac:	4252      	negs	r2, r2
 80032ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2204      	movs	r2, #4
 80032b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	2203      	movs	r2, #3
 80032be:	4013      	ands	r3, r2
 80032c0:	d004      	beq.n	80032cc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	0018      	movs	r0, r3
 80032c6:	f000 f9a5 	bl	8003614 <HAL_TIM_IC_CaptureCallback>
 80032ca:	e007      	b.n	80032dc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	0018      	movs	r0, r3
 80032d0:	f000 f998 	bl	8003604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	0018      	movs	r0, r3
 80032d8:	f7fd faf6 	bl	80008c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2210      	movs	r2, #16
 80032e6:	4013      	ands	r3, r2
 80032e8:	d022      	beq.n	8003330 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2210      	movs	r2, #16
 80032ee:	4013      	ands	r3, r2
 80032f0:	d01e      	beq.n	8003330 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2211      	movs	r2, #17
 80032f8:	4252      	negs	r2, r2
 80032fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2208      	movs	r2, #8
 8003300:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	69da      	ldr	r2, [r3, #28]
 8003308:	23c0      	movs	r3, #192	@ 0xc0
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4013      	ands	r3, r2
 800330e:	d004      	beq.n	800331a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	0018      	movs	r0, r3
 8003314:	f000 f97e 	bl	8003614 <HAL_TIM_IC_CaptureCallback>
 8003318:	e007      	b.n	800332a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	0018      	movs	r0, r3
 800331e:	f000 f971 	bl	8003604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	0018      	movs	r0, r3
 8003326:	f7fd facf 	bl	80008c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2201      	movs	r2, #1
 8003334:	4013      	ands	r3, r2
 8003336:	d00c      	beq.n	8003352 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	4013      	ands	r3, r2
 800333e:	d008      	beq.n	8003352 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2202      	movs	r2, #2
 8003346:	4252      	negs	r2, r2
 8003348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	0018      	movs	r0, r3
 800334e:	f000 f951 	bl	80035f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2280      	movs	r2, #128	@ 0x80
 8003356:	4013      	ands	r3, r2
 8003358:	d104      	bne.n	8003364 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	2380      	movs	r3, #128	@ 0x80
 800335e:	019b      	lsls	r3, r3, #6
 8003360:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003362:	d00b      	beq.n	800337c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2280      	movs	r2, #128	@ 0x80
 8003368:	4013      	ands	r3, r2
 800336a:	d007      	beq.n	800337c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a1e      	ldr	r2, [pc, #120]	@ (80033ec <HAL_TIM_IRQHandler+0x208>)
 8003372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	0018      	movs	r0, r3
 8003378:	f000 fe1e 	bl	8003fb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	2380      	movs	r3, #128	@ 0x80
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	4013      	ands	r3, r2
 8003384:	d00b      	beq.n	800339e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2280      	movs	r2, #128	@ 0x80
 800338a:	4013      	ands	r3, r2
 800338c:	d007      	beq.n	800339e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a17      	ldr	r2, [pc, #92]	@ (80033f0 <HAL_TIM_IRQHandler+0x20c>)
 8003394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	0018      	movs	r0, r3
 800339a:	f000 fe15 	bl	8003fc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2240      	movs	r2, #64	@ 0x40
 80033a2:	4013      	ands	r3, r2
 80033a4:	d00c      	beq.n	80033c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2240      	movs	r2, #64	@ 0x40
 80033aa:	4013      	ands	r3, r2
 80033ac:	d008      	beq.n	80033c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2241      	movs	r2, #65	@ 0x41
 80033b4:	4252      	negs	r2, r2
 80033b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	0018      	movs	r0, r3
 80033bc:	f000 f93a 	bl	8003634 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2220      	movs	r2, #32
 80033c4:	4013      	ands	r3, r2
 80033c6:	d00c      	beq.n	80033e2 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2220      	movs	r2, #32
 80033cc:	4013      	ands	r3, r2
 80033ce:	d008      	beq.n	80033e2 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2221      	movs	r2, #33	@ 0x21
 80033d6:	4252      	negs	r2, r2
 80033d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	0018      	movs	r0, r3
 80033de:	f000 fde3 	bl	8003fa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033e2:	46c0      	nop			@ (mov r8, r8)
 80033e4:	46bd      	mov	sp, r7
 80033e6:	b004      	add	sp, #16
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	46c0      	nop			@ (mov r8, r8)
 80033ec:	ffffdf7f 	.word	0xffffdf7f
 80033f0:	fffffeff 	.word	0xfffffeff

080033f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003400:	2317      	movs	r3, #23
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	2200      	movs	r2, #0
 8003406:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	223c      	movs	r2, #60	@ 0x3c
 800340c:	5c9b      	ldrb	r3, [r3, r2]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003412:	2302      	movs	r3, #2
 8003414:	e0e5      	b.n	80035e2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	223c      	movs	r2, #60	@ 0x3c
 800341a:	2101      	movs	r1, #1
 800341c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b14      	cmp	r3, #20
 8003422:	d900      	bls.n	8003426 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003424:	e0d1      	b.n	80035ca <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	009a      	lsls	r2, r3, #2
 800342a:	4b70      	ldr	r3, [pc, #448]	@ (80035ec <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800342c:	18d3      	adds	r3, r2, r3
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	0011      	movs	r1, r2
 800343a:	0018      	movs	r0, r3
 800343c:	f000 fa58 	bl	80038f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699a      	ldr	r2, [r3, #24]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2108      	movs	r1, #8
 800344c:	430a      	orrs	r2, r1
 800344e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699a      	ldr	r2, [r3, #24]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2104      	movs	r1, #4
 800345c:	438a      	bics	r2, r1
 800345e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6999      	ldr	r1, [r3, #24]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	691a      	ldr	r2, [r3, #16]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	619a      	str	r2, [r3, #24]
      break;
 8003472:	e0af      	b.n	80035d4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	0011      	movs	r1, r2
 800347c:	0018      	movs	r0, r3
 800347e:	f000 fab7 	bl	80039f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	699a      	ldr	r2, [r3, #24]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2180      	movs	r1, #128	@ 0x80
 800348e:	0109      	lsls	r1, r1, #4
 8003490:	430a      	orrs	r2, r1
 8003492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699a      	ldr	r2, [r3, #24]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4954      	ldr	r1, [pc, #336]	@ (80035f0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80034a0:	400a      	ands	r2, r1
 80034a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6999      	ldr	r1, [r3, #24]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	021a      	lsls	r2, r3, #8
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	619a      	str	r2, [r3, #24]
      break;
 80034b8:	e08c      	b.n	80035d4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	0011      	movs	r1, r2
 80034c2:	0018      	movs	r0, r3
 80034c4:	f000 fb12 	bl	8003aec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	69da      	ldr	r2, [r3, #28]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2108      	movs	r1, #8
 80034d4:	430a      	orrs	r2, r1
 80034d6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	69da      	ldr	r2, [r3, #28]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2104      	movs	r1, #4
 80034e4:	438a      	bics	r2, r1
 80034e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	69d9      	ldr	r1, [r3, #28]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	691a      	ldr	r2, [r3, #16]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	61da      	str	r2, [r3, #28]
      break;
 80034fa:	e06b      	b.n	80035d4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	0011      	movs	r1, r2
 8003504:	0018      	movs	r0, r3
 8003506:	f000 fb73 	bl	8003bf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69da      	ldr	r2, [r3, #28]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2180      	movs	r1, #128	@ 0x80
 8003516:	0109      	lsls	r1, r1, #4
 8003518:	430a      	orrs	r2, r1
 800351a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69da      	ldr	r2, [r3, #28]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4932      	ldr	r1, [pc, #200]	@ (80035f0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003528:	400a      	ands	r2, r1
 800352a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	69d9      	ldr	r1, [r3, #28]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	021a      	lsls	r2, r3, #8
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	61da      	str	r2, [r3, #28]
      break;
 8003540:	e048      	b.n	80035d4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	0011      	movs	r1, r2
 800354a:	0018      	movs	r0, r3
 800354c:	f000 fbb4 	bl	8003cb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2108      	movs	r1, #8
 800355c:	430a      	orrs	r2, r1
 800355e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2104      	movs	r1, #4
 800356c:	438a      	bics	r2, r1
 800356e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	691a      	ldr	r2, [r3, #16]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003582:	e027      	b.n	80035d4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	0011      	movs	r1, r2
 800358c:	0018      	movs	r0, r3
 800358e:	f000 fbed 	bl	8003d6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2180      	movs	r1, #128	@ 0x80
 800359e:	0109      	lsls	r1, r1, #4
 80035a0:	430a      	orrs	r2, r1
 80035a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4910      	ldr	r1, [pc, #64]	@ (80035f0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80035b0:	400a      	ands	r2, r1
 80035b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	021a      	lsls	r2, r3, #8
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80035c8:	e004      	b.n	80035d4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80035ca:	2317      	movs	r3, #23
 80035cc:	18fb      	adds	r3, r7, r3
 80035ce:	2201      	movs	r2, #1
 80035d0:	701a      	strb	r2, [r3, #0]
      break;
 80035d2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	223c      	movs	r2, #60	@ 0x3c
 80035d8:	2100      	movs	r1, #0
 80035da:	5499      	strb	r1, [r3, r2]

  return status;
 80035dc:	2317      	movs	r3, #23
 80035de:	18fb      	adds	r3, r7, r3
 80035e0:	781b      	ldrb	r3, [r3, #0]
}
 80035e2:	0018      	movs	r0, r3
 80035e4:	46bd      	mov	sp, r7
 80035e6:	b006      	add	sp, #24
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	080048e8 	.word	0x080048e8
 80035f0:	fffffbff 	.word	0xfffffbff

080035f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80035fc:	46c0      	nop			@ (mov r8, r8)
 80035fe:	46bd      	mov	sp, r7
 8003600:	b002      	add	sp, #8
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800360c:	46c0      	nop			@ (mov r8, r8)
 800360e:	46bd      	mov	sp, r7
 8003610:	b002      	add	sp, #8
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800361c:	46c0      	nop			@ (mov r8, r8)
 800361e:	46bd      	mov	sp, r7
 8003620:	b002      	add	sp, #8
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800362c:	46c0      	nop			@ (mov r8, r8)
 800362e:	46bd      	mov	sp, r7
 8003630:	b002      	add	sp, #8
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800363c:	46c0      	nop			@ (mov r8, r8)
 800363e:	46bd      	mov	sp, r7
 8003640:	b002      	add	sp, #8
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800364c:	46c0      	nop			@ (mov r8, r8)
 800364e:	46bd      	mov	sp, r7
 8003650:	b002      	add	sp, #8
 8003652:	bd80      	pop	{r7, pc}

08003654 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003660:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	429a      	cmp	r2, r3
 800366a:	d107      	bne.n	800367c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2201      	movs	r2, #1
 8003670:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	223e      	movs	r2, #62	@ 0x3e
 8003676:	2101      	movs	r1, #1
 8003678:	5499      	strb	r1, [r3, r2]
 800367a:	e02a      	b.n	80036d2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	429a      	cmp	r2, r3
 8003684:	d107      	bne.n	8003696 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2202      	movs	r2, #2
 800368a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	223f      	movs	r2, #63	@ 0x3f
 8003690:	2101      	movs	r1, #1
 8003692:	5499      	strb	r1, [r3, r2]
 8003694:	e01d      	b.n	80036d2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	429a      	cmp	r2, r3
 800369e:	d107      	bne.n	80036b0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2204      	movs	r2, #4
 80036a4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2240      	movs	r2, #64	@ 0x40
 80036aa:	2101      	movs	r1, #1
 80036ac:	5499      	strb	r1, [r3, r2]
 80036ae:	e010      	b.n	80036d2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d107      	bne.n	80036ca <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2208      	movs	r2, #8
 80036be:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2241      	movs	r2, #65	@ 0x41
 80036c4:	2101      	movs	r1, #1
 80036c6:	5499      	strb	r1, [r3, r2]
 80036c8:	e003      	b.n	80036d2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	223d      	movs	r2, #61	@ 0x3d
 80036ce:	2101      	movs	r1, #1
 80036d0:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	0018      	movs	r0, r3
 80036d6:	f7ff ffb5 	bl	8003644 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	771a      	strb	r2, [r3, #28]
}
 80036e0:	46c0      	nop			@ (mov r8, r8)
 80036e2:	46bd      	mov	sp, r7
 80036e4:	b004      	add	sp, #16
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d10b      	bne.n	8003718 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2201      	movs	r2, #1
 8003704:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d136      	bne.n	800377c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	223e      	movs	r2, #62	@ 0x3e
 8003712:	2101      	movs	r1, #1
 8003714:	5499      	strb	r1, [r3, r2]
 8003716:	e031      	b.n	800377c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	429a      	cmp	r2, r3
 8003720:	d10b      	bne.n	800373a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2202      	movs	r2, #2
 8003726:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d125      	bne.n	800377c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	223f      	movs	r2, #63	@ 0x3f
 8003734:	2101      	movs	r1, #1
 8003736:	5499      	strb	r1, [r3, r2]
 8003738:	e020      	b.n	800377c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	429a      	cmp	r2, r3
 8003742:	d10b      	bne.n	800375c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2204      	movs	r2, #4
 8003748:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d114      	bne.n	800377c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2240      	movs	r2, #64	@ 0x40
 8003756:	2101      	movs	r1, #1
 8003758:	5499      	strb	r1, [r3, r2]
 800375a:	e00f      	b.n	800377c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	429a      	cmp	r2, r3
 8003764:	d10a      	bne.n	800377c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2208      	movs	r2, #8
 800376a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d103      	bne.n	800377c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2241      	movs	r2, #65	@ 0x41
 8003778:	2101      	movs	r1, #1
 800377a:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	0018      	movs	r0, r3
 8003780:	f7fd f8a2 	bl	80008c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	771a      	strb	r2, [r3, #28]
}
 800378a:	46c0      	nop			@ (mov r8, r8)
 800378c:	46bd      	mov	sp, r7
 800378e:	b004      	add	sp, #16
 8003790:	bd80      	pop	{r7, pc}

08003792 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d103      	bne.n	80037b2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2201      	movs	r2, #1
 80037ae:	771a      	strb	r2, [r3, #28]
 80037b0:	e019      	b.n	80037e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d103      	bne.n	80037c4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2202      	movs	r2, #2
 80037c0:	771a      	strb	r2, [r3, #28]
 80037c2:	e010      	b.n	80037e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d103      	bne.n	80037d6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2204      	movs	r2, #4
 80037d2:	771a      	strb	r2, [r3, #28]
 80037d4:	e007      	b.n	80037e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d102      	bne.n	80037e6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2208      	movs	r2, #8
 80037e4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7ff ff1b 	bl	8003624 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	771a      	strb	r2, [r3, #28]
}
 80037f4:	46c0      	nop			@ (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b004      	add	sp, #16
 80037fa:	bd80      	pop	{r7, pc}

080037fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a32      	ldr	r2, [pc, #200]	@ (80038d8 <TIM_Base_SetConfig+0xdc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d003      	beq.n	800381c <TIM_Base_SetConfig+0x20>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a31      	ldr	r2, [pc, #196]	@ (80038dc <TIM_Base_SetConfig+0xe0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d108      	bne.n	800382e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2270      	movs	r2, #112	@ 0x70
 8003820:	4393      	bics	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a29      	ldr	r2, [pc, #164]	@ (80038d8 <TIM_Base_SetConfig+0xdc>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d00f      	beq.n	8003856 <TIM_Base_SetConfig+0x5a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a28      	ldr	r2, [pc, #160]	@ (80038dc <TIM_Base_SetConfig+0xe0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00b      	beq.n	8003856 <TIM_Base_SetConfig+0x5a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a27      	ldr	r2, [pc, #156]	@ (80038e0 <TIM_Base_SetConfig+0xe4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d007      	beq.n	8003856 <TIM_Base_SetConfig+0x5a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a26      	ldr	r2, [pc, #152]	@ (80038e4 <TIM_Base_SetConfig+0xe8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d003      	beq.n	8003856 <TIM_Base_SetConfig+0x5a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a25      	ldr	r2, [pc, #148]	@ (80038e8 <TIM_Base_SetConfig+0xec>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d108      	bne.n	8003868 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4a24      	ldr	r2, [pc, #144]	@ (80038ec <TIM_Base_SetConfig+0xf0>)
 800385a:	4013      	ands	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	4313      	orrs	r3, r2
 8003866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2280      	movs	r2, #128	@ 0x80
 800386c:	4393      	bics	r3, r2
 800386e:	001a      	movs	r2, r3
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a11      	ldr	r2, [pc, #68]	@ (80038d8 <TIM_Base_SetConfig+0xdc>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d007      	beq.n	80038a6 <TIM_Base_SetConfig+0xaa>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a12      	ldr	r2, [pc, #72]	@ (80038e4 <TIM_Base_SetConfig+0xe8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d003      	beq.n	80038a6 <TIM_Base_SetConfig+0xaa>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a11      	ldr	r2, [pc, #68]	@ (80038e8 <TIM_Base_SetConfig+0xec>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d103      	bne.n	80038ae <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	2201      	movs	r2, #1
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d106      	bne.n	80038ce <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	2201      	movs	r2, #1
 80038c6:	4393      	bics	r3, r2
 80038c8:	001a      	movs	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	611a      	str	r2, [r3, #16]
  }
}
 80038ce:	46c0      	nop			@ (mov r8, r8)
 80038d0:	46bd      	mov	sp, r7
 80038d2:	b004      	add	sp, #16
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	46c0      	nop			@ (mov r8, r8)
 80038d8:	40012c00 	.word	0x40012c00
 80038dc:	40000400 	.word	0x40000400
 80038e0:	40002000 	.word	0x40002000
 80038e4:	40014400 	.word	0x40014400
 80038e8:	40014800 	.word	0x40014800
 80038ec:	fffffcff 	.word	0xfffffcff

080038f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	2201      	movs	r2, #1
 8003906:	4393      	bics	r3, r2
 8003908:	001a      	movs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4a2e      	ldr	r2, [pc, #184]	@ (80039d8 <TIM_OC1_SetConfig+0xe8>)
 800391e:	4013      	ands	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2203      	movs	r2, #3
 8003926:	4393      	bics	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4313      	orrs	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	2202      	movs	r2, #2
 8003938:	4393      	bics	r3, r2
 800393a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	4313      	orrs	r3, r2
 8003944:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a24      	ldr	r2, [pc, #144]	@ (80039dc <TIM_OC1_SetConfig+0xec>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d007      	beq.n	800395e <TIM_OC1_SetConfig+0x6e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a23      	ldr	r2, [pc, #140]	@ (80039e0 <TIM_OC1_SetConfig+0xf0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d003      	beq.n	800395e <TIM_OC1_SetConfig+0x6e>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a22      	ldr	r2, [pc, #136]	@ (80039e4 <TIM_OC1_SetConfig+0xf4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d10c      	bne.n	8003978 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2208      	movs	r2, #8
 8003962:	4393      	bics	r3, r2
 8003964:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2204      	movs	r2, #4
 8003974:	4393      	bics	r3, r2
 8003976:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a18      	ldr	r2, [pc, #96]	@ (80039dc <TIM_OC1_SetConfig+0xec>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d007      	beq.n	8003990 <TIM_OC1_SetConfig+0xa0>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a17      	ldr	r2, [pc, #92]	@ (80039e0 <TIM_OC1_SetConfig+0xf0>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d003      	beq.n	8003990 <TIM_OC1_SetConfig+0xa0>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a16      	ldr	r2, [pc, #88]	@ (80039e4 <TIM_OC1_SetConfig+0xf4>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d111      	bne.n	80039b4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	4a15      	ldr	r2, [pc, #84]	@ (80039e8 <TIM_OC1_SetConfig+0xf8>)
 8003994:	4013      	ands	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	4a14      	ldr	r2, [pc, #80]	@ (80039ec <TIM_OC1_SetConfig+0xfc>)
 800399c:	4013      	ands	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	621a      	str	r2, [r3, #32]
}
 80039ce:	46c0      	nop			@ (mov r8, r8)
 80039d0:	46bd      	mov	sp, r7
 80039d2:	b006      	add	sp, #24
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	46c0      	nop			@ (mov r8, r8)
 80039d8:	fffeff8f 	.word	0xfffeff8f
 80039dc:	40012c00 	.word	0x40012c00
 80039e0:	40014400 	.word	0x40014400
 80039e4:	40014800 	.word	0x40014800
 80039e8:	fffffeff 	.word	0xfffffeff
 80039ec:	fffffdff 	.word	0xfffffdff

080039f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	2210      	movs	r2, #16
 8003a06:	4393      	bics	r3, r2
 8003a08:	001a      	movs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4a2c      	ldr	r2, [pc, #176]	@ (8003ad0 <TIM_OC2_SetConfig+0xe0>)
 8003a1e:	4013      	ands	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4a2b      	ldr	r2, [pc, #172]	@ (8003ad4 <TIM_OC2_SetConfig+0xe4>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	021b      	lsls	r3, r3, #8
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	4393      	bics	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a22      	ldr	r2, [pc, #136]	@ (8003ad8 <TIM_OC2_SetConfig+0xe8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d10d      	bne.n	8003a6e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2280      	movs	r2, #128	@ 0x80
 8003a56:	4393      	bics	r3, r2
 8003a58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2240      	movs	r2, #64	@ 0x40
 8003a6a:	4393      	bics	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a19      	ldr	r2, [pc, #100]	@ (8003ad8 <TIM_OC2_SetConfig+0xe8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d007      	beq.n	8003a86 <TIM_OC2_SetConfig+0x96>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a18      	ldr	r2, [pc, #96]	@ (8003adc <TIM_OC2_SetConfig+0xec>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d003      	beq.n	8003a86 <TIM_OC2_SetConfig+0x96>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a17      	ldr	r2, [pc, #92]	@ (8003ae0 <TIM_OC2_SetConfig+0xf0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d113      	bne.n	8003aae <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	4a16      	ldr	r2, [pc, #88]	@ (8003ae4 <TIM_OC2_SetConfig+0xf4>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	4a15      	ldr	r2, [pc, #84]	@ (8003ae8 <TIM_OC2_SetConfig+0xf8>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	621a      	str	r2, [r3, #32]
}
 8003ac8:	46c0      	nop			@ (mov r8, r8)
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b006      	add	sp, #24
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	feff8fff 	.word	0xfeff8fff
 8003ad4:	fffffcff 	.word	0xfffffcff
 8003ad8:	40012c00 	.word	0x40012c00
 8003adc:	40014400 	.word	0x40014400
 8003ae0:	40014800 	.word	0x40014800
 8003ae4:	fffffbff 	.word	0xfffffbff
 8003ae8:	fffff7ff 	.word	0xfffff7ff

08003aec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	4a31      	ldr	r2, [pc, #196]	@ (8003bc8 <TIM_OC3_SetConfig+0xdc>)
 8003b02:	401a      	ands	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4a2d      	ldr	r2, [pc, #180]	@ (8003bcc <TIM_OC3_SetConfig+0xe0>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2203      	movs	r2, #3
 8003b20:	4393      	bics	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	4a27      	ldr	r2, [pc, #156]	@ (8003bd0 <TIM_OC3_SetConfig+0xe4>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	021b      	lsls	r3, r3, #8
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a23      	ldr	r2, [pc, #140]	@ (8003bd4 <TIM_OC3_SetConfig+0xe8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d10d      	bne.n	8003b66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	4a22      	ldr	r2, [pc, #136]	@ (8003bd8 <TIM_OC3_SetConfig+0xec>)
 8003b4e:	4013      	ands	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	021b      	lsls	r3, r3, #8
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	4a1e      	ldr	r2, [pc, #120]	@ (8003bdc <TIM_OC3_SetConfig+0xf0>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a1a      	ldr	r2, [pc, #104]	@ (8003bd4 <TIM_OC3_SetConfig+0xe8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d007      	beq.n	8003b7e <TIM_OC3_SetConfig+0x92>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a1b      	ldr	r2, [pc, #108]	@ (8003be0 <TIM_OC3_SetConfig+0xf4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d003      	beq.n	8003b7e <TIM_OC3_SetConfig+0x92>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a1a      	ldr	r2, [pc, #104]	@ (8003be4 <TIM_OC3_SetConfig+0xf8>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d113      	bne.n	8003ba6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4a19      	ldr	r2, [pc, #100]	@ (8003be8 <TIM_OC3_SetConfig+0xfc>)
 8003b82:	4013      	ands	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4a18      	ldr	r2, [pc, #96]	@ (8003bec <TIM_OC3_SetConfig+0x100>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	621a      	str	r2, [r3, #32]
}
 8003bc0:	46c0      	nop			@ (mov r8, r8)
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	b006      	add	sp, #24
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	fffffeff 	.word	0xfffffeff
 8003bcc:	fffeff8f 	.word	0xfffeff8f
 8003bd0:	fffffdff 	.word	0xfffffdff
 8003bd4:	40012c00 	.word	0x40012c00
 8003bd8:	fffff7ff 	.word	0xfffff7ff
 8003bdc:	fffffbff 	.word	0xfffffbff
 8003be0:	40014400 	.word	0x40014400
 8003be4:	40014800 	.word	0x40014800
 8003be8:	ffffefff 	.word	0xffffefff
 8003bec:	ffffdfff 	.word	0xffffdfff

08003bf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	4a24      	ldr	r2, [pc, #144]	@ (8003c98 <TIM_OC4_SetConfig+0xa8>)
 8003c06:	401a      	ands	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4a20      	ldr	r2, [pc, #128]	@ (8003c9c <TIM_OC4_SetConfig+0xac>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4a1f      	ldr	r2, [pc, #124]	@ (8003ca0 <TIM_OC4_SetConfig+0xb0>)
 8003c24:	4013      	ands	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	021b      	lsls	r3, r3, #8
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4a1b      	ldr	r2, [pc, #108]	@ (8003ca4 <TIM_OC4_SetConfig+0xb4>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	031b      	lsls	r3, r3, #12
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a17      	ldr	r2, [pc, #92]	@ (8003ca8 <TIM_OC4_SetConfig+0xb8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d007      	beq.n	8003c60 <TIM_OC4_SetConfig+0x70>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a16      	ldr	r2, [pc, #88]	@ (8003cac <TIM_OC4_SetConfig+0xbc>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d003      	beq.n	8003c60 <TIM_OC4_SetConfig+0x70>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a15      	ldr	r2, [pc, #84]	@ (8003cb0 <TIM_OC4_SetConfig+0xc0>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d109      	bne.n	8003c74 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	4a14      	ldr	r2, [pc, #80]	@ (8003cb4 <TIM_OC4_SetConfig+0xc4>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	019b      	lsls	r3, r3, #6
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	621a      	str	r2, [r3, #32]
}
 8003c8e:	46c0      	nop			@ (mov r8, r8)
 8003c90:	46bd      	mov	sp, r7
 8003c92:	b006      	add	sp, #24
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	46c0      	nop			@ (mov r8, r8)
 8003c98:	ffffefff 	.word	0xffffefff
 8003c9c:	feff8fff 	.word	0xfeff8fff
 8003ca0:	fffffcff 	.word	0xfffffcff
 8003ca4:	ffffdfff 	.word	0xffffdfff
 8003ca8:	40012c00 	.word	0x40012c00
 8003cac:	40014400 	.word	0x40014400
 8003cb0:	40014800 	.word	0x40014800
 8003cb4:	ffffbfff 	.word	0xffffbfff

08003cb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	4a21      	ldr	r2, [pc, #132]	@ (8003d54 <TIM_OC5_SetConfig+0x9c>)
 8003cce:	401a      	ands	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4a1d      	ldr	r2, [pc, #116]	@ (8003d58 <TIM_OC5_SetConfig+0xa0>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	4a19      	ldr	r2, [pc, #100]	@ (8003d5c <TIM_OC5_SetConfig+0xa4>)
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	041b      	lsls	r3, r3, #16
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a15      	ldr	r2, [pc, #84]	@ (8003d60 <TIM_OC5_SetConfig+0xa8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d007      	beq.n	8003d1e <TIM_OC5_SetConfig+0x66>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a14      	ldr	r2, [pc, #80]	@ (8003d64 <TIM_OC5_SetConfig+0xac>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d003      	beq.n	8003d1e <TIM_OC5_SetConfig+0x66>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a13      	ldr	r2, [pc, #76]	@ (8003d68 <TIM_OC5_SetConfig+0xb0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d109      	bne.n	8003d32 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	4a0c      	ldr	r2, [pc, #48]	@ (8003d54 <TIM_OC5_SetConfig+0x9c>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	021b      	lsls	r3, r3, #8
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	621a      	str	r2, [r3, #32]
}
 8003d4c:	46c0      	nop			@ (mov r8, r8)
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	b006      	add	sp, #24
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	fffeffff 	.word	0xfffeffff
 8003d58:	fffeff8f 	.word	0xfffeff8f
 8003d5c:	fffdffff 	.word	0xfffdffff
 8003d60:	40012c00 	.word	0x40012c00
 8003d64:	40014400 	.word	0x40014400
 8003d68:	40014800 	.word	0x40014800

08003d6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	4a22      	ldr	r2, [pc, #136]	@ (8003e0c <TIM_OC6_SetConfig+0xa0>)
 8003d82:	401a      	ands	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4a1e      	ldr	r2, [pc, #120]	@ (8003e10 <TIM_OC6_SetConfig+0xa4>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	021b      	lsls	r3, r3, #8
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4a1a      	ldr	r2, [pc, #104]	@ (8003e14 <TIM_OC6_SetConfig+0xa8>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	051b      	lsls	r3, r3, #20
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a16      	ldr	r2, [pc, #88]	@ (8003e18 <TIM_OC6_SetConfig+0xac>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d007      	beq.n	8003dd4 <TIM_OC6_SetConfig+0x68>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a15      	ldr	r2, [pc, #84]	@ (8003e1c <TIM_OC6_SetConfig+0xb0>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d003      	beq.n	8003dd4 <TIM_OC6_SetConfig+0x68>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a14      	ldr	r2, [pc, #80]	@ (8003e20 <TIM_OC6_SetConfig+0xb4>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d109      	bne.n	8003de8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	4a13      	ldr	r2, [pc, #76]	@ (8003e24 <TIM_OC6_SetConfig+0xb8>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	029b      	lsls	r3, r3, #10
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	621a      	str	r2, [r3, #32]
}
 8003e02:	46c0      	nop			@ (mov r8, r8)
 8003e04:	46bd      	mov	sp, r7
 8003e06:	b006      	add	sp, #24
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	46c0      	nop			@ (mov r8, r8)
 8003e0c:	ffefffff 	.word	0xffefffff
 8003e10:	feff8fff 	.word	0xfeff8fff
 8003e14:	ffdfffff 	.word	0xffdfffff
 8003e18:	40012c00 	.word	0x40012c00
 8003e1c:	40014400 	.word	0x40014400
 8003e20:	40014800 	.word	0x40014800
 8003e24:	fffbffff 	.word	0xfffbffff

08003e28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	221f      	movs	r2, #31
 8003e38:	4013      	ands	r3, r2
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	0013      	movs	r3, r2
 8003e40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	43d2      	mvns	r2, r2
 8003e4a:	401a      	ands	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a1a      	ldr	r2, [r3, #32]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	211f      	movs	r1, #31
 8003e58:	400b      	ands	r3, r1
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	4099      	lsls	r1, r3
 8003e5e:	000b      	movs	r3, r1
 8003e60:	431a      	orrs	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	621a      	str	r2, [r3, #32]
}
 8003e66:	46c0      	nop			@ (mov r8, r8)
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	b006      	add	sp, #24
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	223c      	movs	r2, #60	@ 0x3c
 8003e82:	5c9b      	ldrb	r3, [r3, r2]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e06f      	b.n	8003f6c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	223c      	movs	r2, #60	@ 0x3c
 8003e90:	2101      	movs	r1, #1
 8003e92:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	22ff      	movs	r2, #255	@ 0xff
 8003e98:	4393      	bics	r3, r2
 8003e9a:	001a      	movs	r2, r3
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4a33      	ldr	r2, [pc, #204]	@ (8003f74 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003ea8:	401a      	ands	r2, r3
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4a30      	ldr	r2, [pc, #192]	@ (8003f78 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003eb6:	401a      	ands	r2, r3
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4a2e      	ldr	r2, [pc, #184]	@ (8003f7c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003ec4:	401a      	ands	r2, r3
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4a2b      	ldr	r2, [pc, #172]	@ (8003f80 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003ed2:	401a      	ands	r2, r3
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4a29      	ldr	r2, [pc, #164]	@ (8003f84 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003ee0:	401a      	ands	r2, r3
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4a26      	ldr	r2, [pc, #152]	@ (8003f88 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003eee:	401a      	ands	r2, r3
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4a24      	ldr	r2, [pc, #144]	@ (8003f8c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003efc:	401a      	ands	r2, r3
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	041b      	lsls	r3, r3, #16
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4a21      	ldr	r2, [pc, #132]	@ (8003f90 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003f0c:	401a      	ands	r2, r3
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003f94 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d11c      	bne.n	8003f5a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4a1d      	ldr	r2, [pc, #116]	@ (8003f98 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003f24:	401a      	ands	r2, r3
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2a:	051b      	lsls	r3, r3, #20
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4a1a      	ldr	r2, [pc, #104]	@ (8003f9c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003f34:	401a      	ands	r2, r3
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4a17      	ldr	r2, [pc, #92]	@ (8003fa0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003f42:	401a      	ands	r2, r3
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4a15      	ldr	r2, [pc, #84]	@ (8003fa4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003f50:	401a      	ands	r2, r3
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	223c      	movs	r2, #60	@ 0x3c
 8003f66:	2100      	movs	r1, #0
 8003f68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b004      	add	sp, #16
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	fffffcff 	.word	0xfffffcff
 8003f78:	fffffbff 	.word	0xfffffbff
 8003f7c:	fffff7ff 	.word	0xfffff7ff
 8003f80:	ffffefff 	.word	0xffffefff
 8003f84:	ffffdfff 	.word	0xffffdfff
 8003f88:	ffffbfff 	.word	0xffffbfff
 8003f8c:	fff0ffff 	.word	0xfff0ffff
 8003f90:	efffffff 	.word	0xefffffff
 8003f94:	40012c00 	.word	0x40012c00
 8003f98:	ff0fffff 	.word	0xff0fffff
 8003f9c:	feffffff 	.word	0xfeffffff
 8003fa0:	fdffffff 	.word	0xfdffffff
 8003fa4:	dfffffff 	.word	0xdfffffff

08003fa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fb0:	46c0      	nop			@ (mov r8, r8)
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b002      	add	sp, #8
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fc0:	46c0      	nop			@ (mov r8, r8)
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	b002      	add	sp, #8
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003fd0:	46c0      	nop			@ (mov r8, r8)
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	b002      	add	sp, #8
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e046      	b.n	8004078 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2288      	movs	r2, #136	@ 0x88
 8003fee:	589b      	ldr	r3, [r3, r2]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d107      	bne.n	8004004 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2284      	movs	r2, #132	@ 0x84
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	0018      	movs	r0, r3
 8004000:	f7fc ff8c 	bl	8000f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2288      	movs	r2, #136	@ 0x88
 8004008:	2124      	movs	r1, #36	@ 0x24
 800400a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2101      	movs	r1, #1
 8004018:	438a      	bics	r2, r1
 800401a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	0018      	movs	r0, r3
 8004028:	f000 f996 	bl	8004358 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	0018      	movs	r0, r3
 8004030:	f000 f828 	bl	8004084 <UART_SetConfig>
 8004034:	0003      	movs	r3, r0
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e01c      	b.n	8004078 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	490d      	ldr	r1, [pc, #52]	@ (8004080 <HAL_UART_Init+0xa8>)
 800404a:	400a      	ands	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	212a      	movs	r1, #42	@ 0x2a
 800405a:	438a      	bics	r2, r1
 800405c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2101      	movs	r1, #1
 800406a:	430a      	orrs	r2, r1
 800406c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	0018      	movs	r0, r3
 8004072:	f000 fa25 	bl	80044c0 <UART_CheckIdleState>
 8004076:	0003      	movs	r3, r0
}
 8004078:	0018      	movs	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	b002      	add	sp, #8
 800407e:	bd80      	pop	{r7, pc}
 8004080:	ffffb7ff 	.word	0xffffb7ff

08004084 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800408c:	231a      	movs	r3, #26
 800408e:	18fb      	adds	r3, r7, r3
 8004090:	2200      	movs	r2, #0
 8004092:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	431a      	orrs	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4aa1      	ldr	r2, [pc, #644]	@ (8004338 <UART_SetConfig+0x2b4>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	0019      	movs	r1, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	430a      	orrs	r2, r1
 80040c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	4a9c      	ldr	r2, [pc, #624]	@ (800433c <UART_SetConfig+0x2b8>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	0019      	movs	r1, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	4a93      	ldr	r2, [pc, #588]	@ (8004340 <UART_SetConfig+0x2bc>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	0019      	movs	r1, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	69fa      	ldr	r2, [r7, #28]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004106:	220f      	movs	r2, #15
 8004108:	4393      	bics	r3, r2
 800410a:	0019      	movs	r1, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a89      	ldr	r2, [pc, #548]	@ (8004344 <UART_SetConfig+0x2c0>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d127      	bne.n	8004172 <UART_SetConfig+0xee>
 8004122:	4b89      	ldr	r3, [pc, #548]	@ (8004348 <UART_SetConfig+0x2c4>)
 8004124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004126:	2203      	movs	r2, #3
 8004128:	4013      	ands	r3, r2
 800412a:	2b03      	cmp	r3, #3
 800412c:	d017      	beq.n	800415e <UART_SetConfig+0xda>
 800412e:	d81b      	bhi.n	8004168 <UART_SetConfig+0xe4>
 8004130:	2b02      	cmp	r3, #2
 8004132:	d00a      	beq.n	800414a <UART_SetConfig+0xc6>
 8004134:	d818      	bhi.n	8004168 <UART_SetConfig+0xe4>
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <UART_SetConfig+0xbc>
 800413a:	2b01      	cmp	r3, #1
 800413c:	d00a      	beq.n	8004154 <UART_SetConfig+0xd0>
 800413e:	e013      	b.n	8004168 <UART_SetConfig+0xe4>
 8004140:	231b      	movs	r3, #27
 8004142:	18fb      	adds	r3, r7, r3
 8004144:	2200      	movs	r2, #0
 8004146:	701a      	strb	r2, [r3, #0]
 8004148:	e021      	b.n	800418e <UART_SetConfig+0x10a>
 800414a:	231b      	movs	r3, #27
 800414c:	18fb      	adds	r3, r7, r3
 800414e:	2202      	movs	r2, #2
 8004150:	701a      	strb	r2, [r3, #0]
 8004152:	e01c      	b.n	800418e <UART_SetConfig+0x10a>
 8004154:	231b      	movs	r3, #27
 8004156:	18fb      	adds	r3, r7, r3
 8004158:	2204      	movs	r2, #4
 800415a:	701a      	strb	r2, [r3, #0]
 800415c:	e017      	b.n	800418e <UART_SetConfig+0x10a>
 800415e:	231b      	movs	r3, #27
 8004160:	18fb      	adds	r3, r7, r3
 8004162:	2208      	movs	r2, #8
 8004164:	701a      	strb	r2, [r3, #0]
 8004166:	e012      	b.n	800418e <UART_SetConfig+0x10a>
 8004168:	231b      	movs	r3, #27
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	2210      	movs	r2, #16
 800416e:	701a      	strb	r2, [r3, #0]
 8004170:	e00d      	b.n	800418e <UART_SetConfig+0x10a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a75      	ldr	r2, [pc, #468]	@ (800434c <UART_SetConfig+0x2c8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d104      	bne.n	8004186 <UART_SetConfig+0x102>
 800417c:	231b      	movs	r3, #27
 800417e:	18fb      	adds	r3, r7, r3
 8004180:	2200      	movs	r2, #0
 8004182:	701a      	strb	r2, [r3, #0]
 8004184:	e003      	b.n	800418e <UART_SetConfig+0x10a>
 8004186:	231b      	movs	r3, #27
 8004188:	18fb      	adds	r3, r7, r3
 800418a:	2210      	movs	r2, #16
 800418c:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69da      	ldr	r2, [r3, #28]
 8004192:	2380      	movs	r3, #128	@ 0x80
 8004194:	021b      	lsls	r3, r3, #8
 8004196:	429a      	cmp	r2, r3
 8004198:	d000      	beq.n	800419c <UART_SetConfig+0x118>
 800419a:	e065      	b.n	8004268 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 800419c:	231b      	movs	r3, #27
 800419e:	18fb      	adds	r3, r7, r3
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	d015      	beq.n	80041d2 <UART_SetConfig+0x14e>
 80041a6:	dc18      	bgt.n	80041da <UART_SetConfig+0x156>
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d00d      	beq.n	80041c8 <UART_SetConfig+0x144>
 80041ac:	dc15      	bgt.n	80041da <UART_SetConfig+0x156>
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <UART_SetConfig+0x134>
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d005      	beq.n	80041c2 <UART_SetConfig+0x13e>
 80041b6:	e010      	b.n	80041da <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041b8:	f7fe fb48 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 80041bc:	0003      	movs	r3, r0
 80041be:	617b      	str	r3, [r7, #20]
        break;
 80041c0:	e012      	b.n	80041e8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041c2:	4b63      	ldr	r3, [pc, #396]	@ (8004350 <UART_SetConfig+0x2cc>)
 80041c4:	617b      	str	r3, [r7, #20]
        break;
 80041c6:	e00f      	b.n	80041e8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041c8:	f7fe fab4 	bl	8002734 <HAL_RCC_GetSysClockFreq>
 80041cc:	0003      	movs	r3, r0
 80041ce:	617b      	str	r3, [r7, #20]
        break;
 80041d0:	e00a      	b.n	80041e8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041d2:	2380      	movs	r3, #128	@ 0x80
 80041d4:	021b      	lsls	r3, r3, #8
 80041d6:	617b      	str	r3, [r7, #20]
        break;
 80041d8:	e006      	b.n	80041e8 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80041de:	231a      	movs	r3, #26
 80041e0:	18fb      	adds	r3, r7, r3
 80041e2:	2201      	movs	r2, #1
 80041e4:	701a      	strb	r2, [r3, #0]
        break;
 80041e6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d100      	bne.n	80041f0 <UART_SetConfig+0x16c>
 80041ee:	e08d      	b.n	800430c <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041f4:	4b57      	ldr	r3, [pc, #348]	@ (8004354 <UART_SetConfig+0x2d0>)
 80041f6:	0052      	lsls	r2, r2, #1
 80041f8:	5ad3      	ldrh	r3, [r2, r3]
 80041fa:	0019      	movs	r1, r3
 80041fc:	6978      	ldr	r0, [r7, #20]
 80041fe:	f7fb ff7f 	bl	8000100 <__udivsi3>
 8004202:	0003      	movs	r3, r0
 8004204:	005a      	lsls	r2, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	085b      	lsrs	r3, r3, #1
 800420c:	18d2      	adds	r2, r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	0019      	movs	r1, r3
 8004214:	0010      	movs	r0, r2
 8004216:	f7fb ff73 	bl	8000100 <__udivsi3>
 800421a:	0003      	movs	r3, r0
 800421c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b0f      	cmp	r3, #15
 8004222:	d91c      	bls.n	800425e <UART_SetConfig+0x1da>
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	2380      	movs	r3, #128	@ 0x80
 8004228:	025b      	lsls	r3, r3, #9
 800422a:	429a      	cmp	r2, r3
 800422c:	d217      	bcs.n	800425e <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	b29a      	uxth	r2, r3
 8004232:	200e      	movs	r0, #14
 8004234:	183b      	adds	r3, r7, r0
 8004236:	210f      	movs	r1, #15
 8004238:	438a      	bics	r2, r1
 800423a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	085b      	lsrs	r3, r3, #1
 8004240:	b29b      	uxth	r3, r3
 8004242:	2207      	movs	r2, #7
 8004244:	4013      	ands	r3, r2
 8004246:	b299      	uxth	r1, r3
 8004248:	183b      	adds	r3, r7, r0
 800424a:	183a      	adds	r2, r7, r0
 800424c:	8812      	ldrh	r2, [r2, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	183a      	adds	r2, r7, r0
 8004258:	8812      	ldrh	r2, [r2, #0]
 800425a:	60da      	str	r2, [r3, #12]
 800425c:	e056      	b.n	800430c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800425e:	231a      	movs	r3, #26
 8004260:	18fb      	adds	r3, r7, r3
 8004262:	2201      	movs	r2, #1
 8004264:	701a      	strb	r2, [r3, #0]
 8004266:	e051      	b.n	800430c <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004268:	231b      	movs	r3, #27
 800426a:	18fb      	adds	r3, r7, r3
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b08      	cmp	r3, #8
 8004270:	d015      	beq.n	800429e <UART_SetConfig+0x21a>
 8004272:	dc18      	bgt.n	80042a6 <UART_SetConfig+0x222>
 8004274:	2b04      	cmp	r3, #4
 8004276:	d00d      	beq.n	8004294 <UART_SetConfig+0x210>
 8004278:	dc15      	bgt.n	80042a6 <UART_SetConfig+0x222>
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <UART_SetConfig+0x200>
 800427e:	2b02      	cmp	r3, #2
 8004280:	d005      	beq.n	800428e <UART_SetConfig+0x20a>
 8004282:	e010      	b.n	80042a6 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004284:	f7fe fae2 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 8004288:	0003      	movs	r3, r0
 800428a:	617b      	str	r3, [r7, #20]
        break;
 800428c:	e012      	b.n	80042b4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800428e:	4b30      	ldr	r3, [pc, #192]	@ (8004350 <UART_SetConfig+0x2cc>)
 8004290:	617b      	str	r3, [r7, #20]
        break;
 8004292:	e00f      	b.n	80042b4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004294:	f7fe fa4e 	bl	8002734 <HAL_RCC_GetSysClockFreq>
 8004298:	0003      	movs	r3, r0
 800429a:	617b      	str	r3, [r7, #20]
        break;
 800429c:	e00a      	b.n	80042b4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800429e:	2380      	movs	r3, #128	@ 0x80
 80042a0:	021b      	lsls	r3, r3, #8
 80042a2:	617b      	str	r3, [r7, #20]
        break;
 80042a4:	e006      	b.n	80042b4 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80042aa:	231a      	movs	r3, #26
 80042ac:	18fb      	adds	r3, r7, r3
 80042ae:	2201      	movs	r2, #1
 80042b0:	701a      	strb	r2, [r3, #0]
        break;
 80042b2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d028      	beq.n	800430c <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042be:	4b25      	ldr	r3, [pc, #148]	@ (8004354 <UART_SetConfig+0x2d0>)
 80042c0:	0052      	lsls	r2, r2, #1
 80042c2:	5ad3      	ldrh	r3, [r2, r3]
 80042c4:	0019      	movs	r1, r3
 80042c6:	6978      	ldr	r0, [r7, #20]
 80042c8:	f7fb ff1a 	bl	8000100 <__udivsi3>
 80042cc:	0003      	movs	r3, r0
 80042ce:	001a      	movs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	085b      	lsrs	r3, r3, #1
 80042d6:	18d2      	adds	r2, r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	0019      	movs	r1, r3
 80042de:	0010      	movs	r0, r2
 80042e0:	f7fb ff0e 	bl	8000100 <__udivsi3>
 80042e4:	0003      	movs	r3, r0
 80042e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	2b0f      	cmp	r3, #15
 80042ec:	d90a      	bls.n	8004304 <UART_SetConfig+0x280>
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	2380      	movs	r3, #128	@ 0x80
 80042f2:	025b      	lsls	r3, r3, #9
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d205      	bcs.n	8004304 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60da      	str	r2, [r3, #12]
 8004302:	e003      	b.n	800430c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004304:	231a      	movs	r3, #26
 8004306:	18fb      	adds	r3, r7, r3
 8004308:	2201      	movs	r2, #1
 800430a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	226a      	movs	r2, #106	@ 0x6a
 8004310:	2101      	movs	r1, #1
 8004312:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2268      	movs	r2, #104	@ 0x68
 8004318:	2101      	movs	r1, #1
 800431a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004328:	231a      	movs	r3, #26
 800432a:	18fb      	adds	r3, r7, r3
 800432c:	781b      	ldrb	r3, [r3, #0]
}
 800432e:	0018      	movs	r0, r3
 8004330:	46bd      	mov	sp, r7
 8004332:	b008      	add	sp, #32
 8004334:	bd80      	pop	{r7, pc}
 8004336:	46c0      	nop			@ (mov r8, r8)
 8004338:	cfff69f3 	.word	0xcfff69f3
 800433c:	ffffcfff 	.word	0xffffcfff
 8004340:	11fff4ff 	.word	0x11fff4ff
 8004344:	40013800 	.word	0x40013800
 8004348:	40021000 	.word	0x40021000
 800434c:	40004400 	.word	0x40004400
 8004350:	00f42400 	.word	0x00f42400
 8004354:	0800493c 	.word	0x0800493c

08004358 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004364:	2208      	movs	r2, #8
 8004366:	4013      	ands	r3, r2
 8004368:	d00b      	beq.n	8004382 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	4a4a      	ldr	r2, [pc, #296]	@ (800449c <UART_AdvFeatureConfig+0x144>)
 8004372:	4013      	ands	r3, r2
 8004374:	0019      	movs	r1, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004386:	2201      	movs	r2, #1
 8004388:	4013      	ands	r3, r2
 800438a:	d00b      	beq.n	80043a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	4a43      	ldr	r2, [pc, #268]	@ (80044a0 <UART_AdvFeatureConfig+0x148>)
 8004394:	4013      	ands	r3, r2
 8004396:	0019      	movs	r1, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a8:	2202      	movs	r2, #2
 80043aa:	4013      	ands	r3, r2
 80043ac:	d00b      	beq.n	80043c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	4a3b      	ldr	r2, [pc, #236]	@ (80044a4 <UART_AdvFeatureConfig+0x14c>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	0019      	movs	r1, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ca:	2204      	movs	r2, #4
 80043cc:	4013      	ands	r3, r2
 80043ce:	d00b      	beq.n	80043e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4a34      	ldr	r2, [pc, #208]	@ (80044a8 <UART_AdvFeatureConfig+0x150>)
 80043d8:	4013      	ands	r3, r2
 80043da:	0019      	movs	r1, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ec:	2210      	movs	r2, #16
 80043ee:	4013      	ands	r3, r2
 80043f0:	d00b      	beq.n	800440a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	4a2c      	ldr	r2, [pc, #176]	@ (80044ac <UART_AdvFeatureConfig+0x154>)
 80043fa:	4013      	ands	r3, r2
 80043fc:	0019      	movs	r1, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800440e:	2220      	movs	r2, #32
 8004410:	4013      	ands	r3, r2
 8004412:	d00b      	beq.n	800442c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	4a25      	ldr	r2, [pc, #148]	@ (80044b0 <UART_AdvFeatureConfig+0x158>)
 800441c:	4013      	ands	r3, r2
 800441e:	0019      	movs	r1, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004430:	2240      	movs	r2, #64	@ 0x40
 8004432:	4013      	ands	r3, r2
 8004434:	d01d      	beq.n	8004472 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	4a1d      	ldr	r2, [pc, #116]	@ (80044b4 <UART_AdvFeatureConfig+0x15c>)
 800443e:	4013      	ands	r3, r2
 8004440:	0019      	movs	r1, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004452:	2380      	movs	r3, #128	@ 0x80
 8004454:	035b      	lsls	r3, r3, #13
 8004456:	429a      	cmp	r2, r3
 8004458:	d10b      	bne.n	8004472 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	4a15      	ldr	r2, [pc, #84]	@ (80044b8 <UART_AdvFeatureConfig+0x160>)
 8004462:	4013      	ands	r3, r2
 8004464:	0019      	movs	r1, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004476:	2280      	movs	r2, #128	@ 0x80
 8004478:	4013      	ands	r3, r2
 800447a:	d00b      	beq.n	8004494 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	4a0e      	ldr	r2, [pc, #56]	@ (80044bc <UART_AdvFeatureConfig+0x164>)
 8004484:	4013      	ands	r3, r2
 8004486:	0019      	movs	r1, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	605a      	str	r2, [r3, #4]
  }
}
 8004494:	46c0      	nop			@ (mov r8, r8)
 8004496:	46bd      	mov	sp, r7
 8004498:	b002      	add	sp, #8
 800449a:	bd80      	pop	{r7, pc}
 800449c:	ffff7fff 	.word	0xffff7fff
 80044a0:	fffdffff 	.word	0xfffdffff
 80044a4:	fffeffff 	.word	0xfffeffff
 80044a8:	fffbffff 	.word	0xfffbffff
 80044ac:	ffffefff 	.word	0xffffefff
 80044b0:	ffffdfff 	.word	0xffffdfff
 80044b4:	ffefffff 	.word	0xffefffff
 80044b8:	ff9fffff 	.word	0xff9fffff
 80044bc:	fff7ffff 	.word	0xfff7ffff

080044c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b092      	sub	sp, #72	@ 0x48
 80044c4:	af02      	add	r7, sp, #8
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2290      	movs	r2, #144	@ 0x90
 80044cc:	2100      	movs	r1, #0
 80044ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044d0:	f7fc fe4c 	bl	800116c <HAL_GetTick>
 80044d4:	0003      	movs	r3, r0
 80044d6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2208      	movs	r2, #8
 80044e0:	4013      	ands	r3, r2
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d12d      	bne.n	8004542 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044e8:	2280      	movs	r2, #128	@ 0x80
 80044ea:	0391      	lsls	r1, r2, #14
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	4a47      	ldr	r2, [pc, #284]	@ (800460c <UART_CheckIdleState+0x14c>)
 80044f0:	9200      	str	r2, [sp, #0]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f000 f88e 	bl	8004614 <UART_WaitOnFlagUntilTimeout>
 80044f8:	1e03      	subs	r3, r0, #0
 80044fa:	d022      	beq.n	8004542 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004500:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004504:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004506:	2301      	movs	r3, #1
 8004508:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800450a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800450c:	f383 8810 	msr	PRIMASK, r3
}
 8004510:	46c0      	nop			@ (mov r8, r8)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2180      	movs	r1, #128	@ 0x80
 800451e:	438a      	bics	r2, r1
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004524:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004528:	f383 8810 	msr	PRIMASK, r3
}
 800452c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2288      	movs	r2, #136	@ 0x88
 8004532:	2120      	movs	r1, #32
 8004534:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2284      	movs	r2, #132	@ 0x84
 800453a:	2100      	movs	r1, #0
 800453c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e060      	b.n	8004604 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2204      	movs	r2, #4
 800454a:	4013      	ands	r3, r2
 800454c:	2b04      	cmp	r3, #4
 800454e:	d146      	bne.n	80045de <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004552:	2280      	movs	r2, #128	@ 0x80
 8004554:	03d1      	lsls	r1, r2, #15
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	4a2c      	ldr	r2, [pc, #176]	@ (800460c <UART_CheckIdleState+0x14c>)
 800455a:	9200      	str	r2, [sp, #0]
 800455c:	2200      	movs	r2, #0
 800455e:	f000 f859 	bl	8004614 <UART_WaitOnFlagUntilTimeout>
 8004562:	1e03      	subs	r3, r0, #0
 8004564:	d03b      	beq.n	80045de <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004566:	f3ef 8310 	mrs	r3, PRIMASK
 800456a:	60fb      	str	r3, [r7, #12]
  return(result);
 800456c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800456e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004570:	2301      	movs	r3, #1
 8004572:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f383 8810 	msr	PRIMASK, r3
}
 800457a:	46c0      	nop			@ (mov r8, r8)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4922      	ldr	r1, [pc, #136]	@ (8004610 <UART_CheckIdleState+0x150>)
 8004588:	400a      	ands	r2, r1
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800458e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f383 8810 	msr	PRIMASK, r3
}
 8004596:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004598:	f3ef 8310 	mrs	r3, PRIMASK
 800459c:	61bb      	str	r3, [r7, #24]
  return(result);
 800459e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80045a2:	2301      	movs	r3, #1
 80045a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	f383 8810 	msr	PRIMASK, r3
}
 80045ac:	46c0      	nop			@ (mov r8, r8)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2101      	movs	r1, #1
 80045ba:	438a      	bics	r2, r1
 80045bc:	609a      	str	r2, [r3, #8]
 80045be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	f383 8810 	msr	PRIMASK, r3
}
 80045c8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	228c      	movs	r2, #140	@ 0x8c
 80045ce:	2120      	movs	r1, #32
 80045d0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2284      	movs	r2, #132	@ 0x84
 80045d6:	2100      	movs	r1, #0
 80045d8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e012      	b.n	8004604 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2288      	movs	r2, #136	@ 0x88
 80045e2:	2120      	movs	r1, #32
 80045e4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	228c      	movs	r2, #140	@ 0x8c
 80045ea:	2120      	movs	r1, #32
 80045ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2284      	movs	r2, #132	@ 0x84
 80045fe:	2100      	movs	r1, #0
 8004600:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	0018      	movs	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	b010      	add	sp, #64	@ 0x40
 800460a:	bd80      	pop	{r7, pc}
 800460c:	01ffffff 	.word	0x01ffffff
 8004610:	fffffedf 	.word	0xfffffedf

08004614 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	603b      	str	r3, [r7, #0]
 8004620:	1dfb      	adds	r3, r7, #7
 8004622:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004624:	e051      	b.n	80046ca <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	3301      	adds	r3, #1
 800462a:	d04e      	beq.n	80046ca <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800462c:	f7fc fd9e 	bl	800116c <HAL_GetTick>
 8004630:	0002      	movs	r2, r0
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	429a      	cmp	r2, r3
 800463a:	d302      	bcc.n	8004642 <UART_WaitOnFlagUntilTimeout+0x2e>
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e051      	b.n	80046ea <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2204      	movs	r2, #4
 800464e:	4013      	ands	r3, r2
 8004650:	d03b      	beq.n	80046ca <UART_WaitOnFlagUntilTimeout+0xb6>
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2b80      	cmp	r3, #128	@ 0x80
 8004656:	d038      	beq.n	80046ca <UART_WaitOnFlagUntilTimeout+0xb6>
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b40      	cmp	r3, #64	@ 0x40
 800465c:	d035      	beq.n	80046ca <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	2208      	movs	r2, #8
 8004666:	4013      	ands	r3, r2
 8004668:	2b08      	cmp	r3, #8
 800466a:	d111      	bne.n	8004690 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2208      	movs	r2, #8
 8004672:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	0018      	movs	r0, r3
 8004678:	f000 f83c 	bl	80046f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2290      	movs	r2, #144	@ 0x90
 8004680:	2108      	movs	r1, #8
 8004682:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2284      	movs	r2, #132	@ 0x84
 8004688:	2100      	movs	r1, #0
 800468a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e02c      	b.n	80046ea <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	69da      	ldr	r2, [r3, #28]
 8004696:	2380      	movs	r3, #128	@ 0x80
 8004698:	011b      	lsls	r3, r3, #4
 800469a:	401a      	ands	r2, r3
 800469c:	2380      	movs	r3, #128	@ 0x80
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d112      	bne.n	80046ca <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2280      	movs	r2, #128	@ 0x80
 80046aa:	0112      	lsls	r2, r2, #4
 80046ac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	0018      	movs	r0, r3
 80046b2:	f000 f81f 	bl	80046f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2290      	movs	r2, #144	@ 0x90
 80046ba:	2120      	movs	r1, #32
 80046bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2284      	movs	r2, #132	@ 0x84
 80046c2:	2100      	movs	r1, #0
 80046c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e00f      	b.n	80046ea <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	4013      	ands	r3, r2
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	425a      	negs	r2, r3
 80046da:	4153      	adcs	r3, r2
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	001a      	movs	r2, r3
 80046e0:	1dfb      	adds	r3, r7, #7
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d09e      	beq.n	8004626 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	0018      	movs	r0, r3
 80046ec:	46bd      	mov	sp, r7
 80046ee:	b004      	add	sp, #16
 80046f0:	bd80      	pop	{r7, pc}
	...

080046f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08e      	sub	sp, #56	@ 0x38
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004700:	617b      	str	r3, [r7, #20]
  return(result);
 8004702:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004704:	637b      	str	r3, [r7, #52]	@ 0x34
 8004706:	2301      	movs	r3, #1
 8004708:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	f383 8810 	msr	PRIMASK, r3
}
 8004710:	46c0      	nop			@ (mov r8, r8)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4926      	ldr	r1, [pc, #152]	@ (80047b8 <UART_EndRxTransfer+0xc4>)
 800471e:	400a      	ands	r2, r1
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004724:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	f383 8810 	msr	PRIMASK, r3
}
 800472c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800472e:	f3ef 8310 	mrs	r3, PRIMASK
 8004732:	623b      	str	r3, [r7, #32]
  return(result);
 8004734:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004736:	633b      	str	r3, [r7, #48]	@ 0x30
 8004738:	2301      	movs	r3, #1
 800473a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800473c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473e:	f383 8810 	msr	PRIMASK, r3
}
 8004742:	46c0      	nop			@ (mov r8, r8)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	491b      	ldr	r1, [pc, #108]	@ (80047bc <UART_EndRxTransfer+0xc8>)
 8004750:	400a      	ands	r2, r1
 8004752:	609a      	str	r2, [r3, #8]
 8004754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004756:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475a:	f383 8810 	msr	PRIMASK, r3
}
 800475e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004764:	2b01      	cmp	r3, #1
 8004766:	d118      	bne.n	800479a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004768:	f3ef 8310 	mrs	r3, PRIMASK
 800476c:	60bb      	str	r3, [r7, #8]
  return(result);
 800476e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004770:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004772:	2301      	movs	r3, #1
 8004774:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f383 8810 	msr	PRIMASK, r3
}
 800477c:	46c0      	nop			@ (mov r8, r8)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2110      	movs	r1, #16
 800478a:	438a      	bics	r2, r1
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004790:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f383 8810 	msr	PRIMASK, r3
}
 8004798:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	228c      	movs	r2, #140	@ 0x8c
 800479e:	2120      	movs	r1, #32
 80047a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80047ae:	46c0      	nop			@ (mov r8, r8)
 80047b0:	46bd      	mov	sp, r7
 80047b2:	b00e      	add	sp, #56	@ 0x38
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	46c0      	nop			@ (mov r8, r8)
 80047b8:	fffffedf 	.word	0xfffffedf
 80047bc:	effffffe 	.word	0xeffffffe

080047c0 <memset>:
 80047c0:	0003      	movs	r3, r0
 80047c2:	1882      	adds	r2, r0, r2
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d100      	bne.n	80047ca <memset+0xa>
 80047c8:	4770      	bx	lr
 80047ca:	7019      	strb	r1, [r3, #0]
 80047cc:	3301      	adds	r3, #1
 80047ce:	e7f9      	b.n	80047c4 <memset+0x4>

080047d0 <__libc_init_array>:
 80047d0:	b570      	push	{r4, r5, r6, lr}
 80047d2:	2600      	movs	r6, #0
 80047d4:	4c0c      	ldr	r4, [pc, #48]	@ (8004808 <__libc_init_array+0x38>)
 80047d6:	4d0d      	ldr	r5, [pc, #52]	@ (800480c <__libc_init_array+0x3c>)
 80047d8:	1b64      	subs	r4, r4, r5
 80047da:	10a4      	asrs	r4, r4, #2
 80047dc:	42a6      	cmp	r6, r4
 80047de:	d109      	bne.n	80047f4 <__libc_init_array+0x24>
 80047e0:	2600      	movs	r6, #0
 80047e2:	f000 f819 	bl	8004818 <_init>
 80047e6:	4c0a      	ldr	r4, [pc, #40]	@ (8004810 <__libc_init_array+0x40>)
 80047e8:	4d0a      	ldr	r5, [pc, #40]	@ (8004814 <__libc_init_array+0x44>)
 80047ea:	1b64      	subs	r4, r4, r5
 80047ec:	10a4      	asrs	r4, r4, #2
 80047ee:	42a6      	cmp	r6, r4
 80047f0:	d105      	bne.n	80047fe <__libc_init_array+0x2e>
 80047f2:	bd70      	pop	{r4, r5, r6, pc}
 80047f4:	00b3      	lsls	r3, r6, #2
 80047f6:	58eb      	ldr	r3, [r5, r3]
 80047f8:	4798      	blx	r3
 80047fa:	3601      	adds	r6, #1
 80047fc:	e7ee      	b.n	80047dc <__libc_init_array+0xc>
 80047fe:	00b3      	lsls	r3, r6, #2
 8004800:	58eb      	ldr	r3, [r5, r3]
 8004802:	4798      	blx	r3
 8004804:	3601      	adds	r6, #1
 8004806:	e7f2      	b.n	80047ee <__libc_init_array+0x1e>
 8004808:	08004954 	.word	0x08004954
 800480c:	08004954 	.word	0x08004954
 8004810:	08004958 	.word	0x08004958
 8004814:	08004954 	.word	0x08004954

08004818 <_init>:
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	46c0      	nop			@ (mov r8, r8)
 800481c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481e:	bc08      	pop	{r3}
 8004820:	469e      	mov	lr, r3
 8004822:	4770      	bx	lr

08004824 <_fini>:
 8004824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004826:	46c0      	nop			@ (mov r8, r8)
 8004828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800482a:	bc08      	pop	{r3}
 800482c:	469e      	mov	lr, r3
 800482e:	4770      	bx	lr
