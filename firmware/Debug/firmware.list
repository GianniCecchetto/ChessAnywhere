
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004770  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08004828  08004828  00005828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004934  08004934  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004934  08004934  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004934  08004934  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004934  08004934  00005934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004938  08004938  00005938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800493c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ed8  2000000c  08004948  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ee4  08004948  00006ee4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bb2  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002639  00000000  00000000  00018be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  0001b220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d53  00000000  00000000  0001c2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e77  00000000  00000000  0001d03b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001512b  00000000  00000000  00032eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c8af  00000000  00000000  00047fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d488c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d40  00000000  00000000  000d48d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000d8610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004810 	.word	0x08004810

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08004810 	.word	0x08004810

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <is_index_out_of_bound>:
// Typical bitmap declaration for those function : uint8_t bitmap[BITMAP_SIZE] = {0};

/*
 * Bitmap Check if the index is out of bound
 */
uint8_t is_index_out_of_bound(int index) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	// 0 to 63
	return (index < 0 || index >= BITMAP_SIZE);
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	2b00      	cmp	r3, #0
 8000224:	db02      	blt.n	800022c <is_index_out_of_bound+0x14>
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2b3f      	cmp	r3, #63	@ 0x3f
 800022a:	dd01      	ble.n	8000230 <is_index_out_of_bound+0x18>
 800022c:	2301      	movs	r3, #1
 800022e:	e000      	b.n	8000232 <is_index_out_of_bound+0x1a>
 8000230:	2300      	movs	r3, #0
 8000232:	b2db      	uxtb	r3, r3
}
 8000234:	0018      	movs	r0, r3
 8000236:	46bd      	mov	sp, r7
 8000238:	b002      	add	sp, #8
 800023a:	bd80      	pop	{r7, pc}

0800023c <bitmap_set_bit>:

/*
 * Bitmap set a bit value
 */
void bitmap_set_bit(uint64_t *bitmap, int index) {
 800023c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800023e:	b085      	sub	sp, #20
 8000240:	af00      	add	r7, sp, #0
 8000242:	60f8      	str	r0, [r7, #12]
 8000244:	60b9      	str	r1, [r7, #8]
	if(is_index_out_of_bound(index)) return;
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	0018      	movs	r0, r3
 800024a:	f7ff ffe5 	bl	8000218 <is_index_out_of_bound>
 800024e:	1e03      	subs	r3, r0, #0
 8000250:	d124      	bne.n	800029c <bitmap_set_bit+0x60>
    *bitmap |= (1ULL << index);
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	68b9      	ldr	r1, [r7, #8]
 800025a:	3920      	subs	r1, #32
 800025c:	2900      	cmp	r1, #0
 800025e:	db03      	blt.n	8000268 <bitmap_set_bit+0x2c>
 8000260:	2001      	movs	r0, #1
 8000262:	4088      	lsls	r0, r1
 8000264:	0005      	movs	r5, r0
 8000266:	e00a      	b.n	800027e <bitmap_set_bit+0x42>
 8000268:	68b9      	ldr	r1, [r7, #8]
 800026a:	2020      	movs	r0, #32
 800026c:	1a41      	subs	r1, r0, r1
 800026e:	2001      	movs	r0, #1
 8000270:	40c8      	lsrs	r0, r1
 8000272:	0001      	movs	r1, r0
 8000274:	2600      	movs	r6, #0
 8000276:	68b8      	ldr	r0, [r7, #8]
 8000278:	4086      	lsls	r6, r0
 800027a:	0035      	movs	r5, r6
 800027c:	430d      	orrs	r5, r1
 800027e:	2001      	movs	r0, #1
 8000280:	68b9      	ldr	r1, [r7, #8]
 8000282:	4088      	lsls	r0, r1
 8000284:	0004      	movs	r4, r0
 8000286:	0011      	movs	r1, r2
 8000288:	4321      	orrs	r1, r4
 800028a:	6039      	str	r1, [r7, #0]
 800028c:	432b      	orrs	r3, r5
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	6839      	ldr	r1, [r7, #0]
 8000294:	687a      	ldr	r2, [r7, #4]
 8000296:	6019      	str	r1, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
 800029a:	e000      	b.n	800029e <bitmap_set_bit+0x62>
	if(is_index_out_of_bound(index)) return;
 800029c:	46c0      	nop			@ (mov r8, r8)
}
 800029e:	46bd      	mov	sp, r7
 80002a0:	b005      	add	sp, #20
 80002a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002a4 <bitmap_clear_bit>:

/*
 * Bitmap clear a bit value
 */
void bitmap_clear_bit(uint64_t *bitmap, int index) {
 80002a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002a6:	b087      	sub	sp, #28
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6178      	str	r0, [r7, #20]
 80002ac:	6139      	str	r1, [r7, #16]
	if(is_index_out_of_bound(index)) return;
 80002ae:	693b      	ldr	r3, [r7, #16]
 80002b0:	0018      	movs	r0, r3
 80002b2:	f7ff ffb1 	bl	8000218 <is_index_out_of_bound>
 80002b6:	1e03      	subs	r3, r0, #0
 80002b8:	d12b      	bne.n	8000312 <bitmap_clear_bit+0x6e>
	*bitmap &= ~(1ULL << index);
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	685b      	ldr	r3, [r3, #4]
 80002c0:	6939      	ldr	r1, [r7, #16]
 80002c2:	3920      	subs	r1, #32
 80002c4:	2900      	cmp	r1, #0
 80002c6:	db03      	blt.n	80002d0 <bitmap_clear_bit+0x2c>
 80002c8:	2001      	movs	r0, #1
 80002ca:	4088      	lsls	r0, r1
 80002cc:	0005      	movs	r5, r0
 80002ce:	e00a      	b.n	80002e6 <bitmap_clear_bit+0x42>
 80002d0:	6939      	ldr	r1, [r7, #16]
 80002d2:	2020      	movs	r0, #32
 80002d4:	1a41      	subs	r1, r0, r1
 80002d6:	2001      	movs	r0, #1
 80002d8:	40c8      	lsrs	r0, r1
 80002da:	0001      	movs	r1, r0
 80002dc:	2600      	movs	r6, #0
 80002de:	6938      	ldr	r0, [r7, #16]
 80002e0:	4086      	lsls	r6, r0
 80002e2:	0035      	movs	r5, r6
 80002e4:	430d      	orrs	r5, r1
 80002e6:	2001      	movs	r0, #1
 80002e8:	6939      	ldr	r1, [r7, #16]
 80002ea:	4088      	lsls	r0, r1
 80002ec:	0004      	movs	r4, r0
 80002ee:	43e1      	mvns	r1, r4
 80002f0:	60b9      	str	r1, [r7, #8]
 80002f2:	43e9      	mvns	r1, r5
 80002f4:	60f9      	str	r1, [r7, #12]
 80002f6:	68bc      	ldr	r4, [r7, #8]
 80002f8:	68fd      	ldr	r5, [r7, #12]
 80002fa:	0021      	movs	r1, r4
 80002fc:	4011      	ands	r1, r2
 80002fe:	6039      	str	r1, [r7, #0]
 8000300:	0029      	movs	r1, r5
 8000302:	4019      	ands	r1, r3
 8000304:	6079      	str	r1, [r7, #4]
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	6839      	ldr	r1, [r7, #0]
 800030a:	687a      	ldr	r2, [r7, #4]
 800030c:	6019      	str	r1, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	e000      	b.n	8000314 <bitmap_clear_bit+0x70>
	if(is_index_out_of_bound(index)) return;
 8000312:	46c0      	nop			@ (mov r8, r8)
}
 8000314:	46bd      	mov	sp, r7
 8000316:	b007      	add	sp, #28
 8000318:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800031a <bitmap_get_bit>:

/*
 * Bitmap get a bit value
 */
int bitmap_get_bit(uint64_t bitmap, int index) {
 800031a:	b5b0      	push	{r4, r5, r7, lr}
 800031c:	b084      	sub	sp, #16
 800031e:	af00      	add	r7, sp, #0
 8000320:	60b8      	str	r0, [r7, #8]
 8000322:	60f9      	str	r1, [r7, #12]
 8000324:	607a      	str	r2, [r7, #4]
	if(is_index_out_of_bound(index)) return -1;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	0018      	movs	r0, r3
 800032a:	f7ff ff75 	bl	8000218 <is_index_out_of_bound>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d002      	beq.n	8000338 <bitmap_get_bit+0x1e>
 8000332:	2301      	movs	r3, #1
 8000334:	425b      	negs	r3, r3
 8000336:	e019      	b.n	800036c <bitmap_get_bit+0x52>
	return (bitmap >> index) & 1;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	3b20      	subs	r3, #32
 800033c:	2b00      	cmp	r3, #0
 800033e:	db03      	blt.n	8000348 <bitmap_get_bit+0x2e>
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	40da      	lsrs	r2, r3
 8000344:	0014      	movs	r4, r2
 8000346:	e00a      	b.n	800035e <bitmap_get_bit+0x44>
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2220      	movs	r2, #32
 800034c:	1ad3      	subs	r3, r2, r3
 800034e:	68fa      	ldr	r2, [r7, #12]
 8000350:	409a      	lsls	r2, r3
 8000352:	0013      	movs	r3, r2
 8000354:	68b9      	ldr	r1, [r7, #8]
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	40d1      	lsrs	r1, r2
 800035a:	000c      	movs	r4, r1
 800035c:	431c      	orrs	r4, r3
 800035e:	68fa      	ldr	r2, [r7, #12]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	40da      	lsrs	r2, r3
 8000364:	0015      	movs	r5, r2
 8000366:	0022      	movs	r2, r4
 8000368:	2301      	movs	r3, #1
 800036a:	4013      	ands	r3, r2
}
 800036c:	0018      	movs	r0, r3
 800036e:	46bd      	mov	sp, r7
 8000370:	b004      	add	sp, #16
 8000372:	bdb0      	pop	{r4, r5, r7, pc}

08000374 <updateBuffer>:

// -------------------------------------------------------------------
// Remplit le buffer PWM à partir du tableau "colors"
// -------------------------------------------------------------------
void updateBuffer(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0
    for(int led = 0; led < LED_NUMBER; led++)
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
 800037e:	e049      	b.n	8000414 <updateBuffer+0xa0>
    {
        uint32_t color = ((uint32_t)colors[led][1] << 16) |  // R
 8000380:	4930      	ldr	r1, [pc, #192]	@ (8000444 <updateBuffer+0xd0>)
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	0013      	movs	r3, r2
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	189b      	adds	r3, r3, r2
 800038a:	18cb      	adds	r3, r1, r3
 800038c:	3301      	adds	r3, #1
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	0419      	lsls	r1, r3, #16
        				 ((uint32_t)colors[led][0] << 8) |  // G
 8000392:	482c      	ldr	r0, [pc, #176]	@ (8000444 <updateBuffer+0xd0>)
 8000394:	68fa      	ldr	r2, [r7, #12]
 8000396:	0013      	movs	r3, r2
 8000398:	005b      	lsls	r3, r3, #1
 800039a:	189b      	adds	r3, r3, r2
 800039c:	5c1b      	ldrb	r3, [r3, r0]
 800039e:	021b      	lsls	r3, r3, #8
        uint32_t color = ((uint32_t)colors[led][1] << 16) |  // R
 80003a0:	4319      	orrs	r1, r3
                         ((uint32_t)colors[led][2] << 0);  // R
 80003a2:	4828      	ldr	r0, [pc, #160]	@ (8000444 <updateBuffer+0xd0>)
 80003a4:	68fa      	ldr	r2, [r7, #12]
 80003a6:	0013      	movs	r3, r2
 80003a8:	005b      	lsls	r3, r3, #1
 80003aa:	189b      	adds	r3, r3, r2
 80003ac:	18c3      	adds	r3, r0, r3
 80003ae:	3302      	adds	r3, #2
 80003b0:	781b      	ldrb	r3, [r3, #0]
        uint32_t color = ((uint32_t)colors[led][1] << 16) |  // R
 80003b2:	430b      	orrs	r3, r1
 80003b4:	603b      	str	r3, [r7, #0]
        for(int i = 0; i < 24; i++)
 80003b6:	2300      	movs	r3, #0
 80003b8:	60bb      	str	r3, [r7, #8]
 80003ba:	e025      	b.n	8000408 <updateBuffer+0x94>
        {
            if(color & (1 << (23-i)))
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	2217      	movs	r2, #23
 80003c0:	1ad3      	subs	r3, r2, r3
 80003c2:	2201      	movs	r2, #1
 80003c4:	409a      	lsls	r2, r3
 80003c6:	0013      	movs	r3, r2
 80003c8:	001a      	movs	r2, r3
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	4013      	ands	r3, r2
 80003ce:	d00c      	beq.n	80003ea <updateBuffer+0x76>
                pwmData[led*24 + i] = HIGH_DUTY;
 80003d0:	68fa      	ldr	r2, [r7, #12]
 80003d2:	0013      	movs	r3, r2
 80003d4:	005b      	lsls	r3, r3, #1
 80003d6:	189b      	adds	r3, r3, r2
 80003d8:	00db      	lsls	r3, r3, #3
 80003da:	001a      	movs	r2, r3
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	18d2      	adds	r2, r2, r3
 80003e0:	4b19      	ldr	r3, [pc, #100]	@ (8000448 <updateBuffer+0xd4>)
 80003e2:	0052      	lsls	r2, r2, #1
 80003e4:	211a      	movs	r1, #26
 80003e6:	52d1      	strh	r1, [r2, r3]
 80003e8:	e00b      	b.n	8000402 <updateBuffer+0x8e>
            else
                pwmData[led*24 + i] = LOW_DUTY;
 80003ea:	68fa      	ldr	r2, [r7, #12]
 80003ec:	0013      	movs	r3, r2
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	189b      	adds	r3, r3, r2
 80003f2:	00db      	lsls	r3, r3, #3
 80003f4:	001a      	movs	r2, r3
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	18d2      	adds	r2, r2, r3
 80003fa:	4b13      	ldr	r3, [pc, #76]	@ (8000448 <updateBuffer+0xd4>)
 80003fc:	0052      	lsls	r2, r2, #1
 80003fe:	210d      	movs	r1, #13
 8000400:	52d1      	strh	r1, [r2, r3]
        for(int i = 0; i < 24; i++)
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	3301      	adds	r3, #1
 8000406:	60bb      	str	r3, [r7, #8]
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	2b17      	cmp	r3, #23
 800040c:	ddd6      	ble.n	80003bc <updateBuffer+0x48>
    for(int led = 0; led < LED_NUMBER; led++)
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	3301      	adds	r3, #1
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	2b3f      	cmp	r3, #63	@ 0x3f
 8000418:	ddb2      	ble.n	8000380 <updateBuffer+0xc>
        }
    }

    // Ajoute les zéros pour le reset (>50µs)
    for(int i = 24*LED_NUMBER; i < LED_BUFFER_SIZE; i++)
 800041a:	23c0      	movs	r3, #192	@ 0xc0
 800041c:	00db      	lsls	r3, r3, #3
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	e007      	b.n	8000432 <updateBuffer+0xbe>
    {
        pwmData[i] = 0;
 8000422:	4b09      	ldr	r3, [pc, #36]	@ (8000448 <updateBuffer+0xd4>)
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	0052      	lsls	r2, r2, #1
 8000428:	2100      	movs	r1, #0
 800042a:	52d1      	strh	r1, [r2, r3]
    for(int i = 24*LED_NUMBER; i < LED_BUFFER_SIZE; i++)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	3301      	adds	r3, #1
 8000430:	607b      	str	r3, [r7, #4]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a05      	ldr	r2, [pc, #20]	@ (800044c <updateBuffer+0xd8>)
 8000436:	4293      	cmp	r3, r2
 8000438:	ddf3      	ble.n	8000422 <updateBuffer+0xae>
    }
}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	46c0      	nop			@ (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	b004      	add	sp, #16
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20000e1c 	.word	0x20000e1c
 8000448:	200001b8 	.word	0x200001b8
 800044c:	00000631 	.word	0x00000631

08000450 <WS2812_Send>:

// -------------------------------------------------------------------
// Lance l’envoi vers la bande LED
// -------------------------------------------------------------------
void WS2812_Send(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
    ws2812_transfer_complete = 0;
 8000454:	4b09      	ldr	r3, [pc, #36]	@ (800047c <WS2812_Send+0x2c>)
 8000456:	2200      	movs	r2, #0
 8000458:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t*)pwmData, LED_BUFFER_SIZE);
 800045a:	4b09      	ldr	r3, [pc, #36]	@ (8000480 <WS2812_Send+0x30>)
 800045c:	4a09      	ldr	r2, [pc, #36]	@ (8000484 <WS2812_Send+0x34>)
 800045e:	480a      	ldr	r0, [pc, #40]	@ (8000488 <WS2812_Send+0x38>)
 8000460:	2100      	movs	r1, #0
 8000462:	f002 fbe3 	bl	8002c2c <HAL_TIM_PWM_Start_DMA>

    while(!ws2812_transfer_complete) {}
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	4b04      	ldr	r3, [pc, #16]	@ (800047c <WS2812_Send+0x2c>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	b2db      	uxtb	r3, r3
 800046e:	2b00      	cmp	r3, #0
 8000470:	d0fa      	beq.n	8000468 <WS2812_Send+0x18>
}
 8000472:	46c0      	nop			@ (mov r8, r8)
 8000474:	46c0      	nop			@ (mov r8, r8)
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)
 800047c:	20000edc 	.word	0x20000edc
 8000480:	00000632 	.word	0x00000632
 8000484:	200001b8 	.word	0x200001b8
 8000488:	2000007c 	.word	0x2000007c

0800048c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM17)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a07      	ldr	r2, [pc, #28]	@ (80004b8 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d107      	bne.n	80004ae <HAL_TIM_PWM_PulseFinishedCallback+0x22>
    {
        HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2100      	movs	r1, #0
 80004a2:	0018      	movs	r0, r3
 80004a4:	f002 fdb0 	bl	8003008 <HAL_TIM_PWM_Stop_DMA>
        ws2812_transfer_complete = 1;
 80004a8:	4b04      	ldr	r3, [pc, #16]	@ (80004bc <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	701a      	strb	r2, [r3, #0]
    }
}
 80004ae:	46c0      	nop			@ (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b002      	add	sp, #8
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	40014800 	.word	0x40014800
 80004bc:	20000edc 	.word	0x20000edc

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint64_t board_bitmap = 0;
 80004c6:	2200      	movs	r2, #0
 80004c8:	2300      	movs	r3, #0
 80004ca:	603a      	str	r2, [r7, #0]
 80004cc:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fdcd 	bl	800106c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f88b 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f9fb 	bl	80008d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004da:	f000 f9db 	bl	8000894 <MX_DMA_Init>
  MX_I2C1_Init();
 80004de:	f000 f8df 	bl	80006a0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80004e2:	f000 f9a3 	bl	800082c <MX_USART2_UART_Init>
  MX_TIM17_Init();
 80004e6:	f000 f91b 	bl	8000720 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  UART_Flush(&huart2);
 80004ea:	4b3e      	ldr	r3, [pc, #248]	@ (80005e4 <main+0x124>)
 80004ec:	0018      	movs	r0, r3
 80004ee:	f000 fa7f 	bl	80009f0 <UART_Flush>

  memset(colors, 0, sizeof(colors));
 80004f2:	4b3d      	ldr	r3, [pc, #244]	@ (80005e8 <main+0x128>)
 80004f4:	22c0      	movs	r2, #192	@ 0xc0
 80004f6:	2100      	movs	r1, #0
 80004f8:	0018      	movs	r0, r3
 80004fa:	f004 f95d 	bl	80047b8 <memset>
  uint8_t red = 64;
 80004fe:	230e      	movs	r3, #14
 8000500:	18fb      	adds	r3, r7, r3
 8000502:	2240      	movs	r2, #64	@ 0x40
 8000504:	701a      	strb	r2, [r3, #0]
  uint8_t green = 0;
 8000506:	230d      	movs	r3, #13
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	2200      	movs	r2, #0
 800050c:	701a      	strb	r2, [r3, #0]
  uint8_t blue = 0;
 800050e:	230c      	movs	r3, #12
 8000510:	18fb      	adds	r3, r7, r3
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	read_full_board(&board_bitmap);
 8000516:	003b      	movs	r3, r7
 8000518:	0018      	movs	r0, r3
 800051a:	f000 fb5f 	bl	8000bdc <read_full_board>

	for(uint8_t i = 0; i < LED_NUMBER; ++i) {
 800051e:	230f      	movs	r3, #15
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
 8000526:	e052      	b.n	80005ce <main+0x10e>
		uint8_t led_index = convert_reed_index_to_led_index(i);
 8000528:	250b      	movs	r5, #11
 800052a:	197c      	adds	r4, r7, r5
 800052c:	260f      	movs	r6, #15
 800052e:	19bb      	adds	r3, r7, r6
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	0018      	movs	r0, r3
 8000534:	f000 fbac 	bl	8000c90 <convert_reed_index_to_led_index>
 8000538:	0003      	movs	r3, r0
 800053a:	7023      	strb	r3, [r4, #0]
		if(bitmap_get_bit(board_bitmap, i)) {
 800053c:	6838      	ldr	r0, [r7, #0]
 800053e:	6879      	ldr	r1, [r7, #4]
 8000540:	19bb      	adds	r3, r7, r6
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	001a      	movs	r2, r3
 8000546:	f7ff fee8 	bl	800031a <bitmap_get_bit>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d01c      	beq.n	8000588 <main+0xc8>
			colors[led_index][0] = 0;   colors[led_index][1] = 200; colors[led_index][2] = 0;
 800054e:	197b      	adds	r3, r7, r5
 8000550:	781a      	ldrb	r2, [r3, #0]
 8000552:	4925      	ldr	r1, [pc, #148]	@ (80005e8 <main+0x128>)
 8000554:	0013      	movs	r3, r2
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	189b      	adds	r3, r3, r2
 800055a:	2200      	movs	r2, #0
 800055c:	545a      	strb	r2, [r3, r1]
 800055e:	197b      	adds	r3, r7, r5
 8000560:	781a      	ldrb	r2, [r3, #0]
 8000562:	4921      	ldr	r1, [pc, #132]	@ (80005e8 <main+0x128>)
 8000564:	0013      	movs	r3, r2
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	189b      	adds	r3, r3, r2
 800056a:	18cb      	adds	r3, r1, r3
 800056c:	3301      	adds	r3, #1
 800056e:	22c8      	movs	r2, #200	@ 0xc8
 8000570:	701a      	strb	r2, [r3, #0]
 8000572:	197b      	adds	r3, r7, r5
 8000574:	781a      	ldrb	r2, [r3, #0]
 8000576:	491c      	ldr	r1, [pc, #112]	@ (80005e8 <main+0x128>)
 8000578:	0013      	movs	r3, r2
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	189b      	adds	r3, r3, r2
 800057e:	18cb      	adds	r3, r1, r3
 8000580:	3302      	adds	r3, #2
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
 8000586:	e01c      	b.n	80005c2 <main+0x102>
		} else {
			colors[led_index][0] = 200;   colors[led_index][1] = 0; colors[led_index][2] = 0;
 8000588:	200b      	movs	r0, #11
 800058a:	183b      	adds	r3, r7, r0
 800058c:	781a      	ldrb	r2, [r3, #0]
 800058e:	4916      	ldr	r1, [pc, #88]	@ (80005e8 <main+0x128>)
 8000590:	0013      	movs	r3, r2
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	189b      	adds	r3, r3, r2
 8000596:	22c8      	movs	r2, #200	@ 0xc8
 8000598:	545a      	strb	r2, [r3, r1]
 800059a:	183b      	adds	r3, r7, r0
 800059c:	781a      	ldrb	r2, [r3, #0]
 800059e:	4912      	ldr	r1, [pc, #72]	@ (80005e8 <main+0x128>)
 80005a0:	0013      	movs	r3, r2
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	189b      	adds	r3, r3, r2
 80005a6:	18cb      	adds	r3, r1, r3
 80005a8:	3301      	adds	r3, #1
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
 80005ae:	183b      	adds	r3, r7, r0
 80005b0:	781a      	ldrb	r2, [r3, #0]
 80005b2:	490d      	ldr	r1, [pc, #52]	@ (80005e8 <main+0x128>)
 80005b4:	0013      	movs	r3, r2
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	189b      	adds	r3, r3, r2
 80005ba:	18cb      	adds	r3, r1, r3
 80005bc:	3302      	adds	r3, #2
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < LED_NUMBER; ++i) {
 80005c2:	220f      	movs	r2, #15
 80005c4:	18bb      	adds	r3, r7, r2
 80005c6:	18ba      	adds	r2, r7, r2
 80005c8:	7812      	ldrb	r2, [r2, #0]
 80005ca:	3201      	adds	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
 80005ce:	230f      	movs	r3, #15
 80005d0:	18fb      	adds	r3, r7, r3
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80005d6:	d9a7      	bls.n	8000528 <main+0x68>
		}
	}

	updateBuffer();
 80005d8:	f7ff fecc 	bl	8000374 <updateBuffer>
	WS2812_Send();
 80005dc:	f7ff ff38 	bl	8000450 <WS2812_Send>
	read_full_board(&board_bitmap);
 80005e0:	e799      	b.n	8000516 <main+0x56>
 80005e2:	46c0      	nop			@ (mov r8, r8)
 80005e4:	20000124 	.word	0x20000124
 80005e8:	20000e1c 	.word	0x20000e1c

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b093      	sub	sp, #76	@ 0x4c
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	2414      	movs	r4, #20
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	0018      	movs	r0, r3
 80005f8:	2334      	movs	r3, #52	@ 0x34
 80005fa:	001a      	movs	r2, r3
 80005fc:	2100      	movs	r1, #0
 80005fe:	f004 f8db 	bl	80047b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	0018      	movs	r0, r3
 8000606:	2310      	movs	r3, #16
 8000608:	001a      	movs	r2, r3
 800060a:	2100      	movs	r1, #0
 800060c:	f004 f8d4 	bl	80047b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000610:	2380      	movs	r3, #128	@ 0x80
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	0018      	movs	r0, r3
 8000616:	f001 fc25 	bl	8001e64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061a:	193b      	adds	r3, r7, r4
 800061c:	2202      	movs	r2, #2
 800061e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	193b      	adds	r3, r7, r4
 8000622:	2280      	movs	r2, #128	@ 0x80
 8000624:	0052      	lsls	r2, r2, #1
 8000626:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000628:	0021      	movs	r1, r4
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2240      	movs	r2, #64	@ 0x40
 8000634:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2202      	movs	r2, #2
 800063a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2202      	movs	r2, #2
 8000640:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2200      	movs	r2, #0
 8000646:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2208      	movs	r2, #8
 800064c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2280      	movs	r2, #128	@ 0x80
 8000652:	0292      	lsls	r2, r2, #10
 8000654:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	22c0      	movs	r2, #192	@ 0xc0
 800065a:	05d2      	lsls	r2, r2, #23
 800065c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	187b      	adds	r3, r7, r1
 8000660:	0018      	movs	r0, r3
 8000662:	f001 fc4b 	bl	8001efc <HAL_RCC_OscConfig>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800066a:	f000 fb33 	bl	8000cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2207      	movs	r2, #7
 8000672:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2202      	movs	r2, #2
 8000678:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2101      	movs	r1, #1
 800068a:	0018      	movs	r0, r3
 800068c:	f001 ff46 	bl	800251c <HAL_RCC_ClockConfig>
 8000690:	1e03      	subs	r3, r0, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000694:	f000 fb1e 	bl	8000cd4 <Error_Handler>
  }
}
 8000698:	46c0      	nop			@ (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	b013      	add	sp, #76	@ 0x4c
 800069e:	bd90      	pop	{r4, r7, pc}

080006a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000714 <MX_I2C1_Init+0x74>)
 80006a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000718 <MX_I2C1_Init+0x78>)
 80006a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 80006aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000714 <MX_I2C1_Init+0x74>)
 80006ac:	4a1b      	ldr	r2, [pc, #108]	@ (800071c <MX_I2C1_Init+0x7c>)
 80006ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006b0:	4b18      	ldr	r3, [pc, #96]	@ (8000714 <MX_I2C1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b6:	4b17      	ldr	r3, [pc, #92]	@ (8000714 <MX_I2C1_Init+0x74>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006bc:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <MX_I2C1_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006c2:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <MX_I2C1_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006c8:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <MX_I2C1_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ce:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_I2C1_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <MX_I2C1_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_I2C1_Init+0x74>)
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 fa83 	bl	8001be8 <HAL_I2C_Init>
 80006e2:	1e03      	subs	r3, r0, #0
 80006e4:	d001      	beq.n	80006ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006e6:	f000 faf5 	bl	8000cd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000714 <MX_I2C1_Init+0x74>)
 80006ec:	2100      	movs	r1, #0
 80006ee:	0018      	movs	r0, r3
 80006f0:	f001 fb20 	bl	8001d34 <HAL_I2CEx_ConfigAnalogFilter>
 80006f4:	1e03      	subs	r3, r0, #0
 80006f6:	d001      	beq.n	80006fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006f8:	f000 faec 	bl	8000cd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006fc:	4b05      	ldr	r3, [pc, #20]	@ (8000714 <MX_I2C1_Init+0x74>)
 80006fe:	2100      	movs	r1, #0
 8000700:	0018      	movs	r0, r3
 8000702:	f001 fb63 	bl	8001dcc <HAL_I2CEx_ConfigDigitalFilter>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d001      	beq.n	800070e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800070a:	f000 fae3 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000028 	.word	0x20000028
 8000718:	40005400 	.word	0x40005400
 800071c:	00b07cb4 	.word	0x00b07cb4

08000720 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	@ 0x50
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000726:	2334      	movs	r3, #52	@ 0x34
 8000728:	18fb      	adds	r3, r7, r3
 800072a:	0018      	movs	r0, r3
 800072c:	231c      	movs	r3, #28
 800072e:	001a      	movs	r2, r3
 8000730:	2100      	movs	r1, #0
 8000732:	f004 f841 	bl	80047b8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000736:	003b      	movs	r3, r7
 8000738:	0018      	movs	r0, r3
 800073a:	2334      	movs	r3, #52	@ 0x34
 800073c:	001a      	movs	r2, r3
 800073e:	2100      	movs	r1, #0
 8000740:	f004 f83a 	bl	80047b8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000744:	4b37      	ldr	r3, [pc, #220]	@ (8000824 <MX_TIM17_Init+0x104>)
 8000746:	4a38      	ldr	r2, [pc, #224]	@ (8000828 <MX_TIM17_Init+0x108>)
 8000748:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800074a:	4b36      	ldr	r3, [pc, #216]	@ (8000824 <MX_TIM17_Init+0x104>)
 800074c:	2200      	movs	r2, #0
 800074e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000750:	4b34      	ldr	r3, [pc, #208]	@ (8000824 <MX_TIM17_Init+0x104>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 39;
 8000756:	4b33      	ldr	r3, [pc, #204]	@ (8000824 <MX_TIM17_Init+0x104>)
 8000758:	2227      	movs	r2, #39	@ 0x27
 800075a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075c:	4b31      	ldr	r3, [pc, #196]	@ (8000824 <MX_TIM17_Init+0x104>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000762:	4b30      	ldr	r3, [pc, #192]	@ (8000824 <MX_TIM17_Init+0x104>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000768:	4b2e      	ldr	r3, [pc, #184]	@ (8000824 <MX_TIM17_Init+0x104>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800076e:	4b2d      	ldr	r3, [pc, #180]	@ (8000824 <MX_TIM17_Init+0x104>)
 8000770:	0018      	movs	r0, r3
 8000772:	f002 f9a3 	bl	8002abc <HAL_TIM_Base_Init>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800077a:	f000 faab 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800077e:	4b29      	ldr	r3, [pc, #164]	@ (8000824 <MX_TIM17_Init+0x104>)
 8000780:	0018      	movs	r0, r3
 8000782:	f002 f9f3 	bl	8002b6c <HAL_TIM_PWM_Init>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 800078a:	f000 faa3 	bl	8000cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800078e:	2134      	movs	r1, #52	@ 0x34
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2260      	movs	r2, #96	@ 0x60
 8000794:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2200      	movs	r2, #0
 800079a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ba:	1879      	adds	r1, r7, r1
 80007bc:	4b19      	ldr	r3, [pc, #100]	@ (8000824 <MX_TIM17_Init+0x104>)
 80007be:	2200      	movs	r2, #0
 80007c0:	0018      	movs	r0, r3
 80007c2:	f002 fe13 	bl	80033ec <HAL_TIM_PWM_ConfigChannel>
 80007c6:	1e03      	subs	r3, r0, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 80007ca:	f000 fa83 	bl	8000cd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007ce:	003b      	movs	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007d4:	003b      	movs	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007da:	003b      	movs	r3, r7
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007e0:	003b      	movs	r3, r7
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007e6:	003b      	movs	r3, r7
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007ec:	003b      	movs	r3, r7
 80007ee:	2280      	movs	r2, #128	@ 0x80
 80007f0:	0192      	lsls	r2, r2, #6
 80007f2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007f4:	003b      	movs	r3, r7
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007fa:	003b      	movs	r3, r7
 80007fc:	2200      	movs	r2, #0
 80007fe:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000800:	003a      	movs	r2, r7
 8000802:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <MX_TIM17_Init+0x104>)
 8000804:	0011      	movs	r1, r2
 8000806:	0018      	movs	r0, r3
 8000808:	f003 fb2e 	bl	8003e68 <HAL_TIMEx_ConfigBreakDeadTime>
 800080c:	1e03      	subs	r3, r0, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8000810:	f000 fa60 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000814:	4b03      	ldr	r3, [pc, #12]	@ (8000824 <MX_TIM17_Init+0x104>)
 8000816:	0018      	movs	r0, r3
 8000818:	f000 fb40 	bl	8000e9c <HAL_TIM_MspPostInit>

}
 800081c:	46c0      	nop			@ (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	b014      	add	sp, #80	@ 0x50
 8000822:	bd80      	pop	{r7, pc}
 8000824:	2000007c 	.word	0x2000007c
 8000828:	40014800 	.word	0x40014800

0800082c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000830:	4b16      	ldr	r3, [pc, #88]	@ (800088c <MX_USART2_UART_Init+0x60>)
 8000832:	4a17      	ldr	r2, [pc, #92]	@ (8000890 <MX_USART2_UART_Init+0x64>)
 8000834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000836:	4b15      	ldr	r3, [pc, #84]	@ (800088c <MX_USART2_UART_Init+0x60>)
 8000838:	22e1      	movs	r2, #225	@ 0xe1
 800083a:	0252      	lsls	r2, r2, #9
 800083c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b13      	ldr	r3, [pc, #76]	@ (800088c <MX_USART2_UART_Init+0x60>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b11      	ldr	r3, [pc, #68]	@ (800088c <MX_USART2_UART_Init+0x60>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084a:	4b10      	ldr	r3, [pc, #64]	@ (800088c <MX_USART2_UART_Init+0x60>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_USART2_UART_Init+0x60>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000856:	4b0d      	ldr	r3, [pc, #52]	@ (800088c <MX_USART2_UART_Init+0x60>)
 8000858:	22c0      	movs	r2, #192	@ 0xc0
 800085a:	0092      	lsls	r2, r2, #2
 800085c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800085e:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <MX_USART2_UART_Init+0x60>)
 8000860:	2200      	movs	r2, #0
 8000862:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000864:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_USART2_UART_Init+0x60>)
 8000866:	2200      	movs	r2, #0
 8000868:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800086a:	4b08      	ldr	r3, [pc, #32]	@ (800088c <MX_USART2_UART_Init+0x60>)
 800086c:	2200      	movs	r2, #0
 800086e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <MX_USART2_UART_Init+0x60>)
 8000872:	2200      	movs	r2, #0
 8000874:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000876:	4b05      	ldr	r3, [pc, #20]	@ (800088c <MX_USART2_UART_Init+0x60>)
 8000878:	0018      	movs	r0, r3
 800087a:	f003 fba9 	bl	8003fd0 <HAL_UART_Init>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d001      	beq.n	8000886 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000882:	f000 fa27 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000886:	46c0      	nop			@ (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000124 	.word	0x20000124
 8000890:	40004400 	.word	0x40004400

08000894 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800089a:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <MX_DMA_Init+0x38>)
 800089c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800089e:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <MX_DMA_Init+0x38>)
 80008a0:	2101      	movs	r1, #1
 80008a2:	430a      	orrs	r2, r1
 80008a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80008a6:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <MX_DMA_Init+0x38>)
 80008a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008aa:	2201      	movs	r2, #1
 80008ac:	4013      	ands	r3, r2
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	2009      	movs	r0, #9
 80008b8:	f000 fd0a 	bl	80012d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008bc:	2009      	movs	r0, #9
 80008be:	f000 fd1c 	bl	80012fa <HAL_NVIC_EnableIRQ>

}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	40021000 	.word	0x40021000

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b089      	sub	sp, #36	@ 0x24
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	240c      	movs	r4, #12
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	0018      	movs	r0, r3
 80008dc:	2314      	movs	r3, #20
 80008de:	001a      	movs	r2, r3
 80008e0:	2100      	movs	r1, #0
 80008e2:	f003 ff69 	bl	80047b8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	4b3e      	ldr	r3, [pc, #248]	@ (80009e0 <MX_GPIO_Init+0x110>)
 80008e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008ea:	4b3d      	ldr	r3, [pc, #244]	@ (80009e0 <MX_GPIO_Init+0x110>)
 80008ec:	2102      	movs	r1, #2
 80008ee:	430a      	orrs	r2, r1
 80008f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80008f2:	4b3b      	ldr	r3, [pc, #236]	@ (80009e0 <MX_GPIO_Init+0x110>)
 80008f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008f6:	2202      	movs	r2, #2
 80008f8:	4013      	ands	r3, r2
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4b38      	ldr	r3, [pc, #224]	@ (80009e0 <MX_GPIO_Init+0x110>)
 8000900:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000902:	4b37      	ldr	r3, [pc, #220]	@ (80009e0 <MX_GPIO_Init+0x110>)
 8000904:	2104      	movs	r1, #4
 8000906:	430a      	orrs	r2, r1
 8000908:	635a      	str	r2, [r3, #52]	@ 0x34
 800090a:	4b35      	ldr	r3, [pc, #212]	@ (80009e0 <MX_GPIO_Init+0x110>)
 800090c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800090e:	2204      	movs	r2, #4
 8000910:	4013      	ands	r3, r2
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b32      	ldr	r3, [pc, #200]	@ (80009e0 <MX_GPIO_Init+0x110>)
 8000918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800091a:	4b31      	ldr	r3, [pc, #196]	@ (80009e0 <MX_GPIO_Init+0x110>)
 800091c:	2101      	movs	r1, #1
 800091e:	430a      	orrs	r2, r1
 8000920:	635a      	str	r2, [r3, #52]	@ 0x34
 8000922:	4b2f      	ldr	r3, [pc, #188]	@ (80009e0 <MX_GPIO_Init+0x110>)
 8000924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000926:	2201      	movs	r2, #1
 8000928:	4013      	ands	r3, r2
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800092e:	2380      	movs	r3, #128	@ 0x80
 8000930:	021b      	lsls	r3, r3, #8
 8000932:	482c      	ldr	r0, [pc, #176]	@ (80009e4 <MX_GPIO_Init+0x114>)
 8000934:	2200      	movs	r2, #0
 8000936:	0019      	movs	r1, r3
 8000938:	f001 f939 	bl	8001bae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 800093c:	492a      	ldr	r1, [pc, #168]	@ (80009e8 <MX_GPIO_Init+0x118>)
 800093e:	23a0      	movs	r3, #160	@ 0xa0
 8000940:	05db      	lsls	r3, r3, #23
 8000942:	2200      	movs	r2, #0
 8000944:	0018      	movs	r0, r3
 8000946:	f001 f932 	bl	8001bae <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800094a:	193b      	adds	r3, r7, r4
 800094c:	2280      	movs	r2, #128	@ 0x80
 800094e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000950:	193b      	adds	r3, r7, r4
 8000952:	2200      	movs	r2, #0
 8000954:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	193b      	adds	r3, r7, r4
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095c:	193b      	adds	r3, r7, r4
 800095e:	4a23      	ldr	r2, [pc, #140]	@ (80009ec <MX_GPIO_Init+0x11c>)
 8000960:	0019      	movs	r1, r3
 8000962:	0010      	movs	r0, r2
 8000964:	f000 ffa2 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000968:	0021      	movs	r1, r4
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2280      	movs	r2, #128	@ 0x80
 800096e:	0212      	lsls	r2, r2, #8
 8000970:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	000c      	movs	r4, r1
 8000974:	193b      	adds	r3, r7, r4
 8000976:	2201      	movs	r2, #1
 8000978:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	193b      	adds	r3, r7, r4
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	193b      	adds	r3, r7, r4
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000986:	193b      	adds	r3, r7, r4
 8000988:	4a16      	ldr	r2, [pc, #88]	@ (80009e4 <MX_GPIO_Init+0x114>)
 800098a:	0019      	movs	r1, r3
 800098c:	0010      	movs	r0, r2
 800098e:	f000 ff8d 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 8000992:	193b      	adds	r3, r7, r4
 8000994:	4a14      	ldr	r2, [pc, #80]	@ (80009e8 <MX_GPIO_Init+0x118>)
 8000996:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	193b      	adds	r3, r7, r4
 800099a:	2201      	movs	r2, #1
 800099c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	193a      	adds	r2, r7, r4
 80009ac:	23a0      	movs	r3, #160	@ 0xa0
 80009ae:	05db      	lsls	r3, r3, #23
 80009b0:	0011      	movs	r1, r2
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 ff7a 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009b8:	193b      	adds	r3, r7, r4
 80009ba:	2201      	movs	r2, #1
 80009bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009be:	193b      	adds	r3, r7, r4
 80009c0:	2200      	movs	r2, #0
 80009c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	2202      	movs	r2, #2
 80009c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	4a07      	ldr	r2, [pc, #28]	@ (80009ec <MX_GPIO_Init+0x11c>)
 80009ce:	0019      	movs	r1, r3
 80009d0:	0010      	movs	r0, r2
 80009d2:	f000 ff6b 	bl	80018ac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b009      	add	sp, #36	@ 0x24
 80009dc:	bd90      	pop	{r4, r7, pc}
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	40021000 	.word	0x40021000
 80009e4:	50000800 	.word	0x50000800
 80009e8:	00001870 	.word	0x00001870
 80009ec:	50000400 	.word	0x50000400

080009f0 <UART_Flush>:

/* USER CODE BEGIN 4 */
void UART_Flush(UART_HandleTypeDef *huart)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
    // Vider le registre RX tant qu’il reste des données
    __HAL_UART_FLUSH_DRREGISTER(huart);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	699a      	ldr	r2, [r3, #24]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2108      	movs	r1, #8
 8000a04:	430a      	orrs	r2, r1
 8000a06:	619a      	str	r2, [r3, #24]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	699a      	ldr	r2, [r3, #24]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2110      	movs	r1, #16
 8000a14:	430a      	orrs	r2, r1
 8000a16:	619a      	str	r2, [r3, #24]

    // Effacer les flags d’erreur éventuels (Overrun, Framing, Noise, Parity)
    __HAL_UART_CLEAR_OREFLAG(huart);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(huart);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2202      	movs	r2, #2
 8000a26:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_NEFLAG(huart);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2204      	movs	r2, #4
 8000a2e:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_PEFLAG(huart);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2201      	movs	r2, #1
 8000a36:	621a      	str	r2, [r3, #32]

    // Attendre que la transmission en cours (TX) soit terminée
    while(__HAL_UART_GET_FLAG(huart, UART_FLAG_TC) == RESET);
 8000a38:	46c0      	nop			@ (mov r8, r8)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	69db      	ldr	r3, [r3, #28]
 8000a40:	2240      	movs	r2, #64	@ 0x40
 8000a42:	4013      	ands	r3, r2
 8000a44:	2b40      	cmp	r3, #64	@ 0x40
 8000a46:	d1f8      	bne.n	8000a3a <UART_Flush+0x4a>

}
 8000a48:	46c0      	nop			@ (mov r8, r8)
 8000a4a:	46c0      	nop			@ (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b002      	add	sp, #8
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <set_gpio_column>:

/*
 * Return : void
 */
void set_gpio_column(uint8_t column) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	0002      	movs	r2, r0
 8000a5c:	1dfb      	adds	r3, r7, #7
 8000a5e:	701a      	strb	r2, [r3, #0]

	uint8_t mask = 1;
 8000a60:	230f      	movs	r3, #15
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	2201      	movs	r2, #1
 8000a66:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = COL0; i < PIN_NUMBER_FOR_COLUMN + COL0; ++i) {
 8000a68:	230e      	movs	r3, #14
 8000a6a:	18fb      	adds	r3, r7, r3
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	701a      	strb	r2, [r3, #0]
 8000a70:	e037      	b.n	8000ae2 <set_gpio_column+0x8e>
		if(column & mask) {
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	220f      	movs	r2, #15
 8000a76:	18ba      	adds	r2, r7, r2
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	7812      	ldrb	r2, [r2, #0]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d011      	beq.n	8000aa8 <set_gpio_column+0x54>
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_SET);
 8000a84:	210e      	movs	r1, #14
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	781a      	ldrb	r2, [r3, #0]
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <set_gpio_column+0xa4>)
 8000a8c:	00d2      	lsls	r2, r2, #3
 8000a8e:	58d0      	ldr	r0, [r2, r3]
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4a18      	ldr	r2, [pc, #96]	@ (8000af8 <set_gpio_column+0xa4>)
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	18d3      	adds	r3, r2, r3
 8000a9a:	3304      	adds	r3, #4
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	0019      	movs	r1, r3
 8000aa2:	f001 f884 	bl	8001bae <HAL_GPIO_WritePin>
 8000aa6:	e010      	b.n	8000aca <set_gpio_column+0x76>
		} else {
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_RESET);
 8000aa8:	210e      	movs	r1, #14
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	781a      	ldrb	r2, [r3, #0]
 8000aae:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <set_gpio_column+0xa4>)
 8000ab0:	00d2      	lsls	r2, r2, #3
 8000ab2:	58d0      	ldr	r0, [r2, r3]
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4a0f      	ldr	r2, [pc, #60]	@ (8000af8 <set_gpio_column+0xa4>)
 8000aba:	00db      	lsls	r3, r3, #3
 8000abc:	18d3      	adds	r3, r2, r3
 8000abe:	3304      	adds	r3, #4
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	f001 f872 	bl	8001bae <HAL_GPIO_WritePin>
		}
		mask *= 2;
 8000aca:	230f      	movs	r3, #15
 8000acc:	18fa      	adds	r2, r7, r3
 8000ace:	18fb      	adds	r3, r7, r3
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	18db      	adds	r3, r3, r3
 8000ad4:	7013      	strb	r3, [r2, #0]
	for(uint8_t i = COL0; i < PIN_NUMBER_FOR_COLUMN + COL0; ++i) {
 8000ad6:	220e      	movs	r2, #14
 8000ad8:	18bb      	adds	r3, r7, r2
 8000ada:	18ba      	adds	r2, r7, r2
 8000adc:	7812      	ldrb	r2, [r2, #0]
 8000ade:	3201      	adds	r2, #1
 8000ae0:	701a      	strb	r2, [r3, #0]
 8000ae2:	230e      	movs	r3, #14
 8000ae4:	18fb      	adds	r3, r7, r3
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b05      	cmp	r3, #5
 8000aea:	d9c2      	bls.n	8000a72 <set_gpio_column+0x1e>
	}
}
 8000aec:	46c0      	nop			@ (mov r8, r8)
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b004      	add	sp, #16
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	08004828 	.word	0x08004828

08000afc <set_gpio_line>:

/*
 * Return void
 *
 */
void set_gpio_line(uint8_t line) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	0002      	movs	r2, r0
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	701a      	strb	r2, [r3, #0]

	uint8_t mask = 1;
 8000b08:	230f      	movs	r3, #15
 8000b0a:	18fb      	adds	r3, r7, r3
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = ROW0; i < PIN_NUMBER_FOR_LINE; ++i) {
 8000b10:	230e      	movs	r3, #14
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
 8000b18:	e037      	b.n	8000b8a <set_gpio_line+0x8e>
		if(line & mask) {
 8000b1a:	1dfb      	adds	r3, r7, #7
 8000b1c:	220f      	movs	r2, #15
 8000b1e:	18ba      	adds	r2, r7, r2
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	7812      	ldrb	r2, [r2, #0]
 8000b24:	4013      	ands	r3, r2
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d011      	beq.n	8000b50 <set_gpio_line+0x54>
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_SET);
 8000b2c:	210e      	movs	r1, #14
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	781a      	ldrb	r2, [r3, #0]
 8000b32:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba0 <set_gpio_line+0xa4>)
 8000b34:	00d2      	lsls	r2, r2, #3
 8000b36:	58d0      	ldr	r0, [r2, r3]
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4a18      	ldr	r2, [pc, #96]	@ (8000ba0 <set_gpio_line+0xa4>)
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	18d3      	adds	r3, r2, r3
 8000b42:	3304      	adds	r3, #4
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	2201      	movs	r2, #1
 8000b48:	0019      	movs	r1, r3
 8000b4a:	f001 f830 	bl	8001bae <HAL_GPIO_WritePin>
 8000b4e:	e010      	b.n	8000b72 <set_gpio_line+0x76>
		} else {
			HAL_GPIO_WritePin(gpio_pins[i].port, gpio_pins[i].pin, GPIO_PIN_RESET);
 8000b50:	210e      	movs	r1, #14
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	781a      	ldrb	r2, [r3, #0]
 8000b56:	4b12      	ldr	r3, [pc, #72]	@ (8000ba0 <set_gpio_line+0xa4>)
 8000b58:	00d2      	lsls	r2, r2, #3
 8000b5a:	58d0      	ldr	r0, [r2, r3]
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba0 <set_gpio_line+0xa4>)
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	18d3      	adds	r3, r2, r3
 8000b66:	3304      	adds	r3, #4
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	0019      	movs	r1, r3
 8000b6e:	f001 f81e 	bl	8001bae <HAL_GPIO_WritePin>
		}
		mask *= 2;
 8000b72:	230f      	movs	r3, #15
 8000b74:	18fa      	adds	r2, r7, r3
 8000b76:	18fb      	adds	r3, r7, r3
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	18db      	adds	r3, r3, r3
 8000b7c:	7013      	strb	r3, [r2, #0]
	for(uint8_t i = ROW0; i < PIN_NUMBER_FOR_LINE; ++i) {
 8000b7e:	220e      	movs	r2, #14
 8000b80:	18bb      	adds	r3, r7, r2
 8000b82:	18ba      	adds	r2, r7, r2
 8000b84:	7812      	ldrb	r2, [r2, #0]
 8000b86:	3201      	adds	r2, #1
 8000b88:	701a      	strb	r2, [r3, #0]
 8000b8a:	230e      	movs	r3, #14
 8000b8c:	18fb      	adds	r3, r7, r3
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d9c2      	bls.n	8000b1a <set_gpio_line+0x1e>
	}
}
 8000b94:	46c0      	nop			@ (mov r8, r8)
 8000b96:	46c0      	nop			@ (mov r8, r8)
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b004      	add	sp, #16
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			@ (mov r8, r8)
 8000ba0:	08004828 	.word	0x08004828

08000ba4 <read_reed_value>:

/*
 * Return the : ON or OFF
 */
uint8_t read_reed_value(Square square) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	8018      	strh	r0, [r3, #0]

	// Set the value with the decodeur
	set_gpio_column(square.column);
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f7ff ff4e 	bl	8000a54 <set_gpio_column>
	set_gpio_line(square.line);
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	785b      	ldrb	r3, [r3, #1]
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f7ff ff9d 	bl	8000afc <set_gpio_line>
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
	// Add delay ?? for commutation time ?
	//HAL_Delay(20); // 1 ms de temporisation

	// Get the value on the READ pin (see schematics)
	return HAL_GPIO_ReadPin(gpio_pins[READ].port, gpio_pins[READ].pin);
 8000bc2:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <read_reed_value+0x34>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f000 ffd3 	bl	8001b74 <HAL_GPIO_ReadPin>
 8000bce:	0003      	movs	r3, r0
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b002      	add	sp, #8
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	50000400 	.word	0x50000400

08000bdc <read_full_board>:

/*
 * Return : void
 */
void read_full_board(uint64_t *board_bitmap) {
 8000bdc:	b5b0      	push	{r4, r5, r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

	Square square = {0, 0};
 8000be4:	210c      	movs	r1, #12
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2200      	movs	r2, #0
 8000bf0:	705a      	strb	r2, [r3, #1]

	for(uint8_t line = 0; line < BOARD_WIDTH; ++line) {
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	18fb      	adds	r3, r7, r3
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e03f      	b.n	8000c7c <read_full_board+0xa0>
		for(uint8_t column = 0; column < BOARD_HEIGHT; ++column) {
 8000bfc:	230e      	movs	r3, #14
 8000bfe:	18fb      	adds	r3, r7, r3
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
 8000c04:	e02f      	b.n	8000c66 <read_full_board+0x8a>
			square.column = column;
 8000c06:	210c      	movs	r1, #12
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	240e      	movs	r4, #14
 8000c0c:	193a      	adds	r2, r7, r4
 8000c0e:	7812      	ldrb	r2, [r2, #0]
 8000c10:	701a      	strb	r2, [r3, #0]
			square.line = line;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	250f      	movs	r5, #15
 8000c16:	197a      	adds	r2, r7, r5
 8000c18:	7812      	ldrb	r2, [r2, #0]
 8000c1a:	705a      	strb	r2, [r3, #1]

			if(read_reed_value(square)) {
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	6818      	ldr	r0, [r3, #0]
 8000c20:	f7ff ffc0 	bl	8000ba4 <read_reed_value>
 8000c24:	1e03      	subs	r3, r0, #0
 8000c26:	d00b      	beq.n	8000c40 <read_full_board+0x64>
				bitmap_set_bit(board_bitmap, line * BOARD_WIDTH + column);
 8000c28:	197b      	adds	r3, r7, r5
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	00da      	lsls	r2, r3, #3
 8000c2e:	193b      	adds	r3, r7, r4
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	18d2      	adds	r2, r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	0011      	movs	r1, r2
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f7ff faff 	bl	800023c <bitmap_set_bit>
 8000c3e:	e00c      	b.n	8000c5a <read_full_board+0x7e>
			} else {
				bitmap_clear_bit(board_bitmap, line * BOARD_WIDTH + column);
 8000c40:	230f      	movs	r3, #15
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	00da      	lsls	r2, r3, #3
 8000c48:	230e      	movs	r3, #14
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	18d2      	adds	r2, r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	0011      	movs	r1, r2
 8000c54:	0018      	movs	r0, r3
 8000c56:	f7ff fb25 	bl	80002a4 <bitmap_clear_bit>
		for(uint8_t column = 0; column < BOARD_HEIGHT; ++column) {
 8000c5a:	220e      	movs	r2, #14
 8000c5c:	18bb      	adds	r3, r7, r2
 8000c5e:	18ba      	adds	r2, r7, r2
 8000c60:	7812      	ldrb	r2, [r2, #0]
 8000c62:	3201      	adds	r2, #1
 8000c64:	701a      	strb	r2, [r3, #0]
 8000c66:	230e      	movs	r3, #14
 8000c68:	18fb      	adds	r3, r7, r3
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b07      	cmp	r3, #7
 8000c6e:	d9ca      	bls.n	8000c06 <read_full_board+0x2a>
	for(uint8_t line = 0; line < BOARD_WIDTH; ++line) {
 8000c70:	220f      	movs	r2, #15
 8000c72:	18bb      	adds	r3, r7, r2
 8000c74:	18ba      	adds	r2, r7, r2
 8000c76:	7812      	ldrb	r2, [r2, #0]
 8000c78:	3201      	adds	r2, #1
 8000c7a:	701a      	strb	r2, [r3, #0]
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b07      	cmp	r3, #7
 8000c84:	d9ba      	bls.n	8000bfc <read_full_board+0x20>
			}

		}
	}
}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	46c0      	nop			@ (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b004      	add	sp, #16
 8000c8e:	bdb0      	pop	{r4, r5, r7, pc}

08000c90 <convert_reed_index_to_led_index>:

/* Convert reed index to
 *
 */
uint8_t convert_reed_index_to_led_index(uint8_t reed_index) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	0002      	movs	r2, r0
 8000c98:	1dfb      	adds	r3, r7, #7
 8000c9a:	701a      	strb	r2, [r3, #0]
	if((reed_index / 8) % 2 == 0) {
 8000c9c:	1dfb      	adds	r3, r7, #7
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	08db      	lsrs	r3, r3, #3
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d102      	bne.n	8000cb4 <convert_reed_index_to_led_index+0x24>
		return reed_index;
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	e00b      	b.n	8000ccc <convert_reed_index_to_led_index+0x3c>
	} else {
		return (16 * (uint8_t)(reed_index / 8)) + 7 - reed_index;
 8000cb4:	1dfb      	adds	r3, r7, #7
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	08db      	lsrs	r3, r3, #3
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	011b      	lsls	r3, r3, #4
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	1dfb      	adds	r3, r7, #7
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	3307      	adds	r3, #7
 8000cca:	b2db      	uxtb	r3, r3
	}
}
 8000ccc:	0018      	movs	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b002      	add	sp, #8
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
}
 8000cda:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cdc:	46c0      	nop			@ (mov r8, r8)
 8000cde:	e7fd      	b.n	8000cdc <Error_Handler+0x8>

08000ce0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d24 <HAL_MspInit+0x44>)
 8000ce8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cea:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <HAL_MspInit+0x44>)
 8000cec:	2101      	movs	r1, #1
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <HAL_MspInit+0x44>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <HAL_MspInit+0x44>)
 8000d00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d02:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <HAL_MspInit+0x44>)
 8000d04:	2180      	movs	r1, #128	@ 0x80
 8000d06:	0549      	lsls	r1, r1, #21
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d0c:	4b05      	ldr	r3, [pc, #20]	@ (8000d24 <HAL_MspInit+0x44>)
 8000d0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d10:	2380      	movs	r3, #128	@ 0x80
 8000d12:	055b      	lsls	r3, r3, #21
 8000d14:	4013      	ands	r3, r2
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b002      	add	sp, #8
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	40021000 	.word	0x40021000

08000d28 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b091      	sub	sp, #68	@ 0x44
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	232c      	movs	r3, #44	@ 0x2c
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	0018      	movs	r0, r3
 8000d36:	2314      	movs	r3, #20
 8000d38:	001a      	movs	r2, r3
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	f003 fd3c 	bl	80047b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d40:	2414      	movs	r4, #20
 8000d42:	193b      	adds	r3, r7, r4
 8000d44:	0018      	movs	r0, r3
 8000d46:	2318      	movs	r3, #24
 8000d48:	001a      	movs	r2, r3
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	f003 fd34 	bl	80047b8 <memset>
  if(hi2c->Instance==I2C1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a22      	ldr	r2, [pc, #136]	@ (8000de0 <HAL_I2C_MspInit+0xb8>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d13e      	bne.n	8000dd8 <HAL_I2C_MspInit+0xb0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d5a:	193b      	adds	r3, r7, r4
 8000d5c:	2220      	movs	r2, #32
 8000d5e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d60:	193b      	adds	r3, r7, r4
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d66:	193b      	adds	r3, r7, r4
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f001 fd81 	bl	8002870 <HAL_RCCEx_PeriphCLKConfig>
 8000d6e:	1e03      	subs	r3, r0, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d72:	f7ff ffaf 	bl	8000cd4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <HAL_I2C_MspInit+0xbc>)
 8000d78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <HAL_I2C_MspInit+0xbc>)
 8000d7c:	2102      	movs	r1, #2
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d82:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <HAL_I2C_MspInit+0xbc>)
 8000d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d86:	2202      	movs	r2, #2
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 8000d8e:	212c      	movs	r1, #44	@ 0x2c
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2290      	movs	r2, #144	@ 0x90
 8000d94:	0092      	lsls	r2, r2, #2
 8000d96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2212      	movs	r2, #18
 8000d9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2206      	movs	r2, #6
 8000dae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	4a0d      	ldr	r2, [pc, #52]	@ (8000de8 <HAL_I2C_MspInit+0xc0>)
 8000db4:	0019      	movs	r1, r3
 8000db6:	0010      	movs	r0, r2
 8000db8:	f000 fd78 	bl	80018ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dbc:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <HAL_I2C_MspInit+0xbc>)
 8000dbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dc0:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <HAL_I2C_MspInit+0xbc>)
 8000dc2:	2180      	movs	r1, #128	@ 0x80
 8000dc4:	0389      	lsls	r1, r1, #14
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_I2C_MspInit+0xbc>)
 8000dcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dce:	2380      	movs	r3, #128	@ 0x80
 8000dd0:	039b      	lsls	r3, r3, #14
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000dd8:	46c0      	nop			@ (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b011      	add	sp, #68	@ 0x44
 8000dde:	bd90      	pop	{r4, r7, pc}
 8000de0:	40005400 	.word	0x40005400
 8000de4:	40021000 	.word	0x40021000
 8000de8:	50000400 	.word	0x50000400

08000dec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a24      	ldr	r2, [pc, #144]	@ (8000e8c <HAL_TIM_Base_MspInit+0xa0>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d141      	bne.n	8000e82 <HAL_TIM_Base_MspInit+0x96>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000dfe:	4b24      	ldr	r3, [pc, #144]	@ (8000e90 <HAL_TIM_Base_MspInit+0xa4>)
 8000e00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e02:	4b23      	ldr	r3, [pc, #140]	@ (8000e90 <HAL_TIM_Base_MspInit+0xa4>)
 8000e04:	2180      	movs	r1, #128	@ 0x80
 8000e06:	02c9      	lsls	r1, r1, #11
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e0c:	4b20      	ldr	r3, [pc, #128]	@ (8000e90 <HAL_TIM_Base_MspInit+0xa4>)
 8000e0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e10:	2380      	movs	r3, #128	@ 0x80
 8000e12:	02db      	lsls	r3, r3, #11
 8000e14:	4013      	ands	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]

    /* TIM17 DMA Init */
    /* TIM17_CH1 Init */
    hdma_tim17_ch1.Instance = DMA1_Channel1;
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e94 <HAL_TIM_Base_MspInit+0xa8>)
 8000e1c:	4a1e      	ldr	r2, [pc, #120]	@ (8000e98 <HAL_TIM_Base_MspInit+0xac>)
 8000e1e:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
 8000e20:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <HAL_TIM_Base_MspInit+0xa8>)
 8000e22:	222f      	movs	r2, #47	@ 0x2f
 8000e24:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e26:	4b1b      	ldr	r3, [pc, #108]	@ (8000e94 <HAL_TIM_Base_MspInit+0xa8>)
 8000e28:	2210      	movs	r2, #16
 8000e2a:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e2c:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <HAL_TIM_Base_MspInit+0xa8>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000e32:	4b18      	ldr	r3, [pc, #96]	@ (8000e94 <HAL_TIM_Base_MspInit+0xa8>)
 8000e34:	2280      	movs	r2, #128	@ 0x80
 8000e36:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e38:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <HAL_TIM_Base_MspInit+0xa8>)
 8000e3a:	2280      	movs	r2, #128	@ 0x80
 8000e3c:	0052      	lsls	r2, r2, #1
 8000e3e:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e40:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <HAL_TIM_Base_MspInit+0xa8>)
 8000e42:	2280      	movs	r2, #128	@ 0x80
 8000e44:	00d2      	lsls	r2, r2, #3
 8000e46:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1.Init.Mode = DMA_NORMAL;
 8000e48:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <HAL_TIM_Base_MspInit+0xa8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	61da      	str	r2, [r3, #28]
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <HAL_TIM_Base_MspInit+0xa8>)
 8000e50:	2280      	movs	r2, #128	@ 0x80
 8000e52:	0152      	lsls	r2, r2, #5
 8000e54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 8000e56:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <HAL_TIM_Base_MspInit+0xa8>)
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f000 fa6b 	bl	8001334 <HAL_DMA_Init>
 8000e5e:	1e03      	subs	r3, r0, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_TIM_Base_MspInit+0x7a>
    {
      Error_Handler();
 8000e62:	f7ff ff37 	bl	8000cd4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a0a      	ldr	r2, [pc, #40]	@ (8000e94 <HAL_TIM_Base_MspInit+0xa8>)
 8000e6a:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e6c:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <HAL_TIM_Base_MspInit+0xa8>)
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	629a      	str	r2, [r3, #40]	@ 0x28

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	2016      	movs	r0, #22
 8000e78:	f000 fa2a 	bl	80012d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000e7c:	2016      	movs	r0, #22
 8000e7e:	f000 fa3c 	bl	80012fa <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b004      	add	sp, #16
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	40014800 	.word	0x40014800
 8000e90:	40021000 	.word	0x40021000
 8000e94:	200000c8 	.word	0x200000c8
 8000e98:	40020008 	.word	0x40020008

08000e9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b089      	sub	sp, #36	@ 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	240c      	movs	r4, #12
 8000ea6:	193b      	adds	r3, r7, r4
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	2314      	movs	r3, #20
 8000eac:	001a      	movs	r2, r3
 8000eae:	2100      	movs	r1, #0
 8000eb0:	f003 fc82 	bl	80047b8 <memset>
  if(htim->Instance==TIM17)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a14      	ldr	r2, [pc, #80]	@ (8000f0c <HAL_TIM_MspPostInit+0x70>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d122      	bne.n	8000f04 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	4b14      	ldr	r3, [pc, #80]	@ (8000f10 <HAL_TIM_MspPostInit+0x74>)
 8000ec0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ec2:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <HAL_TIM_MspPostInit+0x74>)
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000eca:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <HAL_TIM_MspPostInit+0x74>)
 8000ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ed6:	0021      	movs	r1, r4
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	2280      	movs	r2, #128	@ 0x80
 8000edc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	187b      	adds	r3, r7, r1
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	187b      	adds	r3, r7, r1
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	2205      	movs	r2, #5
 8000ef4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	187a      	adds	r2, r7, r1
 8000ef8:	23a0      	movs	r3, #160	@ 0xa0
 8000efa:	05db      	lsls	r3, r3, #23
 8000efc:	0011      	movs	r1, r2
 8000efe:	0018      	movs	r0, r3
 8000f00:	f000 fcd4 	bl	80018ac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000f04:	46c0      	nop			@ (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b009      	add	sp, #36	@ 0x24
 8000f0a:	bd90      	pop	{r4, r7, pc}
 8000f0c:	40014800 	.word	0x40014800
 8000f10:	40021000 	.word	0x40021000

08000f14 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b08b      	sub	sp, #44	@ 0x2c
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	2414      	movs	r4, #20
 8000f1e:	193b      	adds	r3, r7, r4
 8000f20:	0018      	movs	r0, r3
 8000f22:	2314      	movs	r3, #20
 8000f24:	001a      	movs	r2, r3
 8000f26:	2100      	movs	r1, #0
 8000f28:	f003 fc46 	bl	80047b8 <memset>
  if(huart->Instance==USART2)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa0 <HAL_UART_MspInit+0x8c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d130      	bne.n	8000f98 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f36:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa4 <HAL_UART_MspInit+0x90>)
 8000f38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa4 <HAL_UART_MspInit+0x90>)
 8000f3c:	2180      	movs	r1, #128	@ 0x80
 8000f3e:	0289      	lsls	r1, r1, #10
 8000f40:	430a      	orrs	r2, r1
 8000f42:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f44:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <HAL_UART_MspInit+0x90>)
 8000f46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f48:	2380      	movs	r3, #128	@ 0x80
 8000f4a:	029b      	lsls	r3, r3, #10
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <HAL_UART_MspInit+0x90>)
 8000f54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <HAL_UART_MspInit+0x90>)
 8000f58:	2101      	movs	r1, #1
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f5e:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <HAL_UART_MspInit+0x90>)
 8000f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f62:	2201      	movs	r2, #1
 8000f64:	4013      	ands	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000f6a:	0021      	movs	r1, r4
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	220f      	movs	r2, #15
 8000f70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	187b      	adds	r3, r7, r1
 8000f74:	2202      	movs	r2, #2
 8000f76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	187b      	adds	r3, r7, r1
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	2201      	movs	r2, #1
 8000f88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	187a      	adds	r2, r7, r1
 8000f8c:	23a0      	movs	r3, #160	@ 0xa0
 8000f8e:	05db      	lsls	r3, r3, #23
 8000f90:	0011      	movs	r1, r2
 8000f92:	0018      	movs	r0, r3
 8000f94:	f000 fc8a 	bl	80018ac <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f98:	46c0      	nop			@ (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b00b      	add	sp, #44	@ 0x2c
 8000f9e:	bd90      	pop	{r4, r7, pc}
 8000fa0:	40004400 	.word	0x40004400
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fac:	46c0      	nop			@ (mov r8, r8)
 8000fae:	e7fd      	b.n	8000fac <NMI_Handler+0x4>

08000fb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb4:	46c0      	nop			@ (mov r8, r8)
 8000fb6:	e7fd      	b.n	8000fb4 <HardFault_Handler+0x4>

08000fb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fbc:	46c0      	nop			@ (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc6:	46c0      	nop			@ (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd0:	f000 f8b6 	bl	8001140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd4:	46c0      	nop			@ (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1);
 8000fe0:	4b03      	ldr	r3, [pc, #12]	@ (8000ff0 <DMA1_Channel1_IRQHandler+0x14>)
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f000 fb20 	bl	8001628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fe8:	46c0      	nop			@ (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	46c0      	nop			@ (mov r8, r8)
 8000ff0:	200000c8 	.word	0x200000c8

08000ff4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000ff8:	4b03      	ldr	r3, [pc, #12]	@ (8001008 <TIM17_IRQHandler+0x14>)
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f002 f8ee 	bl	80031dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001000:	46c0      	nop			@ (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	46c0      	nop			@ (mov r8, r8)
 8001008:	2000007c 	.word	0x2000007c

0800100c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001010:	46c0      	nop			@ (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001018:	480d      	ldr	r0, [pc, #52]	@ (8001050 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800101a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800101c:	f7ff fff6 	bl	800100c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001020:	480c      	ldr	r0, [pc, #48]	@ (8001054 <LoopForever+0x6>)
  ldr r1, =_edata
 8001022:	490d      	ldr	r1, [pc, #52]	@ (8001058 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001024:	4a0d      	ldr	r2, [pc, #52]	@ (800105c <LoopForever+0xe>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001038:	4c0a      	ldr	r4, [pc, #40]	@ (8001064 <LoopForever+0x16>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001046:	f003 fbbf 	bl	80047c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800104a:	f7ff fa39 	bl	80004c0 <main>

0800104e <LoopForever>:

LoopForever:
  b LoopForever
 800104e:	e7fe      	b.n	800104e <LoopForever>
  ldr   r0, =_estack
 8001050:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001058:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800105c:	0800493c 	.word	0x0800493c
  ldr r2, =_sbss
 8001060:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001064:	20000ee4 	.word	0x20000ee4

08001068 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001068:	e7fe      	b.n	8001068 <ADC1_IRQHandler>
	...

0800106c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001072:	1dfb      	adds	r3, r7, #7
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001078:	4b0b      	ldr	r3, [pc, #44]	@ (80010a8 <HAL_Init+0x3c>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <HAL_Init+0x3c>)
 800107e:	2180      	movs	r1, #128	@ 0x80
 8001080:	0049      	lsls	r1, r1, #1
 8001082:	430a      	orrs	r2, r1
 8001084:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001086:	2003      	movs	r0, #3
 8001088:	f000 f810 	bl	80010ac <HAL_InitTick>
 800108c:	1e03      	subs	r3, r0, #0
 800108e:	d003      	beq.n	8001098 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001090:	1dfb      	adds	r3, r7, #7
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
 8001096:	e001      	b.n	800109c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001098:	f7ff fe22 	bl	8000ce0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800109c:	1dfb      	adds	r3, r7, #7
 800109e:	781b      	ldrb	r3, [r3, #0]
}
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b002      	add	sp, #8
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40022000 	.word	0x40022000

080010ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010b4:	230f      	movs	r3, #15
 80010b6:	18fb      	adds	r3, r7, r3
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80010bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001134 <HAL_InitTick+0x88>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d02b      	beq.n	800111c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80010c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001138 <HAL_InitTick+0x8c>)
 80010c6:	681c      	ldr	r4, [r3, #0]
 80010c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <HAL_InitTick+0x88>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	0019      	movs	r1, r3
 80010ce:	23fa      	movs	r3, #250	@ 0xfa
 80010d0:	0098      	lsls	r0, r3, #2
 80010d2:	f7ff f815 	bl	8000100 <__udivsi3>
 80010d6:	0003      	movs	r3, r0
 80010d8:	0019      	movs	r1, r3
 80010da:	0020      	movs	r0, r4
 80010dc:	f7ff f810 	bl	8000100 <__udivsi3>
 80010e0:	0003      	movs	r3, r0
 80010e2:	0018      	movs	r0, r3
 80010e4:	f000 f919 	bl	800131a <HAL_SYSTICK_Config>
 80010e8:	1e03      	subs	r3, r0, #0
 80010ea:	d112      	bne.n	8001112 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d80a      	bhi.n	8001108 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	2301      	movs	r3, #1
 80010f6:	425b      	negs	r3, r3
 80010f8:	2200      	movs	r2, #0
 80010fa:	0018      	movs	r0, r3
 80010fc:	f000 f8e8 	bl	80012d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001100:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <HAL_InitTick+0x90>)
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	e00d      	b.n	8001124 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001108:	230f      	movs	r3, #15
 800110a:	18fb      	adds	r3, r7, r3
 800110c:	2201      	movs	r2, #1
 800110e:	701a      	strb	r2, [r3, #0]
 8001110:	e008      	b.n	8001124 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001112:	230f      	movs	r3, #15
 8001114:	18fb      	adds	r3, r7, r3
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
 800111a:	e003      	b.n	8001124 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800111c:	230f      	movs	r3, #15
 800111e:	18fb      	adds	r3, r7, r3
 8001120:	2201      	movs	r2, #1
 8001122:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001124:	230f      	movs	r3, #15
 8001126:	18fb      	adds	r3, r7, r3
 8001128:	781b      	ldrb	r3, [r3, #0]
}
 800112a:	0018      	movs	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	b005      	add	sp, #20
 8001130:	bd90      	pop	{r4, r7, pc}
 8001132:	46c0      	nop			@ (mov r8, r8)
 8001134:	20000008 	.word	0x20000008
 8001138:	20000000 	.word	0x20000000
 800113c:	20000004 	.word	0x20000004

08001140 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001144:	4b05      	ldr	r3, [pc, #20]	@ (800115c <HAL_IncTick+0x1c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	001a      	movs	r2, r3
 800114a:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <HAL_IncTick+0x20>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	18d2      	adds	r2, r2, r3
 8001150:	4b03      	ldr	r3, [pc, #12]	@ (8001160 <HAL_IncTick+0x20>)
 8001152:	601a      	str	r2, [r3, #0]
}
 8001154:	46c0      	nop			@ (mov r8, r8)
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	46c0      	nop			@ (mov r8, r8)
 800115c:	20000008 	.word	0x20000008
 8001160:	20000ee0 	.word	0x20000ee0

08001164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  return uwTick;
 8001168:	4b02      	ldr	r3, [pc, #8]	@ (8001174 <HAL_GetTick+0x10>)
 800116a:	681b      	ldr	r3, [r3, #0]
}
 800116c:	0018      	movs	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	20000ee0 	.word	0x20000ee0

08001178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	0002      	movs	r2, r0
 8001180:	1dfb      	adds	r3, r7, #7
 8001182:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001184:	1dfb      	adds	r3, r7, #7
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b7f      	cmp	r3, #127	@ 0x7f
 800118a:	d809      	bhi.n	80011a0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118c:	1dfb      	adds	r3, r7, #7
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	001a      	movs	r2, r3
 8001192:	231f      	movs	r3, #31
 8001194:	401a      	ands	r2, r3
 8001196:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <__NVIC_EnableIRQ+0x30>)
 8001198:	2101      	movs	r1, #1
 800119a:	4091      	lsls	r1, r2
 800119c:	000a      	movs	r2, r1
 800119e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80011a0:	46c0      	nop			@ (mov r8, r8)
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b002      	add	sp, #8
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	e000e100 	.word	0xe000e100

080011ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	0002      	movs	r2, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	1dfb      	adds	r3, r7, #7
 80011b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011ba:	1dfb      	adds	r3, r7, #7
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b7f      	cmp	r3, #127	@ 0x7f
 80011c0:	d828      	bhi.n	8001214 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001280 <__NVIC_SetPriority+0xd4>)
 80011c4:	1dfb      	adds	r3, r7, #7
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	089b      	lsrs	r3, r3, #2
 80011cc:	33c0      	adds	r3, #192	@ 0xc0
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	589b      	ldr	r3, [r3, r2]
 80011d2:	1dfa      	adds	r2, r7, #7
 80011d4:	7812      	ldrb	r2, [r2, #0]
 80011d6:	0011      	movs	r1, r2
 80011d8:	2203      	movs	r2, #3
 80011da:	400a      	ands	r2, r1
 80011dc:	00d2      	lsls	r2, r2, #3
 80011de:	21ff      	movs	r1, #255	@ 0xff
 80011e0:	4091      	lsls	r1, r2
 80011e2:	000a      	movs	r2, r1
 80011e4:	43d2      	mvns	r2, r2
 80011e6:	401a      	ands	r2, r3
 80011e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	019b      	lsls	r3, r3, #6
 80011ee:	22ff      	movs	r2, #255	@ 0xff
 80011f0:	401a      	ands	r2, r3
 80011f2:	1dfb      	adds	r3, r7, #7
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	0018      	movs	r0, r3
 80011f8:	2303      	movs	r3, #3
 80011fa:	4003      	ands	r3, r0
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001200:	481f      	ldr	r0, [pc, #124]	@ (8001280 <__NVIC_SetPriority+0xd4>)
 8001202:	1dfb      	adds	r3, r7, #7
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	b25b      	sxtb	r3, r3
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	430a      	orrs	r2, r1
 800120c:	33c0      	adds	r3, #192	@ 0xc0
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001212:	e031      	b.n	8001278 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001214:	4a1b      	ldr	r2, [pc, #108]	@ (8001284 <__NVIC_SetPriority+0xd8>)
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	0019      	movs	r1, r3
 800121c:	230f      	movs	r3, #15
 800121e:	400b      	ands	r3, r1
 8001220:	3b08      	subs	r3, #8
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3306      	adds	r3, #6
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	18d3      	adds	r3, r2, r3
 800122a:	3304      	adds	r3, #4
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	1dfa      	adds	r2, r7, #7
 8001230:	7812      	ldrb	r2, [r2, #0]
 8001232:	0011      	movs	r1, r2
 8001234:	2203      	movs	r2, #3
 8001236:	400a      	ands	r2, r1
 8001238:	00d2      	lsls	r2, r2, #3
 800123a:	21ff      	movs	r1, #255	@ 0xff
 800123c:	4091      	lsls	r1, r2
 800123e:	000a      	movs	r2, r1
 8001240:	43d2      	mvns	r2, r2
 8001242:	401a      	ands	r2, r3
 8001244:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	019b      	lsls	r3, r3, #6
 800124a:	22ff      	movs	r2, #255	@ 0xff
 800124c:	401a      	ands	r2, r3
 800124e:	1dfb      	adds	r3, r7, #7
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	0018      	movs	r0, r3
 8001254:	2303      	movs	r3, #3
 8001256:	4003      	ands	r3, r0
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800125c:	4809      	ldr	r0, [pc, #36]	@ (8001284 <__NVIC_SetPriority+0xd8>)
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	001c      	movs	r4, r3
 8001264:	230f      	movs	r3, #15
 8001266:	4023      	ands	r3, r4
 8001268:	3b08      	subs	r3, #8
 800126a:	089b      	lsrs	r3, r3, #2
 800126c:	430a      	orrs	r2, r1
 800126e:	3306      	adds	r3, #6
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	18c3      	adds	r3, r0, r3
 8001274:	3304      	adds	r3, #4
 8001276:	601a      	str	r2, [r3, #0]
}
 8001278:	46c0      	nop			@ (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	b003      	add	sp, #12
 800127e:	bd90      	pop	{r4, r7, pc}
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	1e5a      	subs	r2, r3, #1
 8001294:	2380      	movs	r3, #128	@ 0x80
 8001296:	045b      	lsls	r3, r3, #17
 8001298:	429a      	cmp	r2, r3
 800129a:	d301      	bcc.n	80012a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800129c:	2301      	movs	r3, #1
 800129e:	e010      	b.n	80012c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a0:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <SysTick_Config+0x44>)
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	3a01      	subs	r2, #1
 80012a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a8:	2301      	movs	r3, #1
 80012aa:	425b      	negs	r3, r3
 80012ac:	2103      	movs	r1, #3
 80012ae:	0018      	movs	r0, r3
 80012b0:	f7ff ff7c 	bl	80011ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b4:	4b05      	ldr	r3, [pc, #20]	@ (80012cc <SysTick_Config+0x44>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ba:	4b04      	ldr	r3, [pc, #16]	@ (80012cc <SysTick_Config+0x44>)
 80012bc:	2207      	movs	r2, #7
 80012be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	0018      	movs	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b002      	add	sp, #8
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			@ (mov r8, r8)
 80012cc:	e000e010 	.word	0xe000e010

080012d0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
 80012da:	210f      	movs	r1, #15
 80012dc:	187b      	adds	r3, r7, r1
 80012de:	1c02      	adds	r2, r0, #0
 80012e0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	187b      	adds	r3, r7, r1
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b25b      	sxtb	r3, r3
 80012ea:	0011      	movs	r1, r2
 80012ec:	0018      	movs	r0, r3
 80012ee:	f7ff ff5d 	bl	80011ac <__NVIC_SetPriority>
}
 80012f2:	46c0      	nop			@ (mov r8, r8)
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b004      	add	sp, #16
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	0002      	movs	r2, r0
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b25b      	sxtb	r3, r3
 800130c:	0018      	movs	r0, r3
 800130e:	f7ff ff33 	bl	8001178 <__NVIC_EnableIRQ>
}
 8001312:	46c0      	nop			@ (mov r8, r8)
 8001314:	46bd      	mov	sp, r7
 8001316:	b002      	add	sp, #8
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	0018      	movs	r0, r3
 8001326:	f7ff ffaf 	bl	8001288 <SysTick_Config>
 800132a:	0003      	movs	r3, r0
}
 800132c:	0018      	movs	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	b002      	add	sp, #8
 8001332:	bd80      	pop	{r7, pc}

08001334 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e077      	b.n	8001436 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a3d      	ldr	r2, [pc, #244]	@ (8001440 <HAL_DMA_Init+0x10c>)
 800134c:	4694      	mov	ip, r2
 800134e:	4463      	add	r3, ip
 8001350:	2114      	movs	r1, #20
 8001352:	0018      	movs	r0, r3
 8001354:	f7fe fed4 	bl	8000100 <__udivsi3>
 8001358:	0003      	movs	r3, r0
 800135a:	009a      	lsls	r2, r3, #2
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2225      	movs	r2, #37	@ 0x25
 8001364:	2102      	movs	r1, #2
 8001366:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4934      	ldr	r1, [pc, #208]	@ (8001444 <HAL_DMA_Init+0x110>)
 8001374:	400a      	ands	r2, r1
 8001376:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6819      	ldr	r1, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689a      	ldr	r2, [r3, #8]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	431a      	orrs	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	431a      	orrs	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	431a      	orrs	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	0018      	movs	r0, r3
 80013b2:	f000 fa2b 	bl	800180c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	2380      	movs	r3, #128	@ 0x80
 80013bc:	01db      	lsls	r3, r3, #7
 80013be:	429a      	cmp	r2, r3
 80013c0:	d102      	bne.n	80013c8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d0:	213f      	movs	r1, #63	@ 0x3f
 80013d2:	400a      	ands	r2, r1
 80013d4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80013de:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d011      	beq.n	800140c <HAL_DMA_Init+0xd8>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b04      	cmp	r3, #4
 80013ee:	d80d      	bhi.n	800140c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	0018      	movs	r0, r3
 80013f4:	f000 fa36 	bl	8001864 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	e008      	b.n	800141e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2225      	movs	r2, #37	@ 0x25
 8001428:	2101      	movs	r1, #1
 800142a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2224      	movs	r2, #36	@ 0x24
 8001430:	2100      	movs	r1, #0
 8001432:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	0018      	movs	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	b002      	add	sp, #8
 800143c:	bd80      	pop	{r7, pc}
 800143e:	46c0      	nop			@ (mov r8, r8)
 8001440:	bffdfff8 	.word	0xbffdfff8
 8001444:	ffff800f 	.word	0xffff800f

08001448 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001456:	2317      	movs	r3, #23
 8001458:	18fb      	adds	r3, r7, r3
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2224      	movs	r2, #36	@ 0x24
 8001462:	5c9b      	ldrb	r3, [r3, r2]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d101      	bne.n	800146c <HAL_DMA_Start_IT+0x24>
 8001468:	2302      	movs	r3, #2
 800146a:	e06f      	b.n	800154c <HAL_DMA_Start_IT+0x104>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2224      	movs	r2, #36	@ 0x24
 8001470:	2101      	movs	r1, #1
 8001472:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2225      	movs	r2, #37	@ 0x25
 8001478:	5c9b      	ldrb	r3, [r3, r2]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b01      	cmp	r3, #1
 800147e:	d157      	bne.n	8001530 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2225      	movs	r2, #37	@ 0x25
 8001484:	2102      	movs	r1, #2
 8001486:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2200      	movs	r2, #0
 800148c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2101      	movs	r1, #1
 800149a:	438a      	bics	r2, r1
 800149c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	68b9      	ldr	r1, [r7, #8]
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f000 f971 	bl	800178c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d008      	beq.n	80014c4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	210e      	movs	r1, #14
 80014be:	430a      	orrs	r2, r1
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	e00f      	b.n	80014e4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2104      	movs	r1, #4
 80014d0:	438a      	bics	r2, r1
 80014d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	210a      	movs	r1, #10
 80014e0:	430a      	orrs	r2, r1
 80014e2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	2380      	movs	r3, #128	@ 0x80
 80014ec:	025b      	lsls	r3, r3, #9
 80014ee:	4013      	ands	r3, r2
 80014f0:	d008      	beq.n	8001504 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fc:	2180      	movs	r1, #128	@ 0x80
 80014fe:	0049      	lsls	r1, r1, #1
 8001500:	430a      	orrs	r2, r1
 8001502:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001508:	2b00      	cmp	r3, #0
 800150a:	d008      	beq.n	800151e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001516:	2180      	movs	r1, #128	@ 0x80
 8001518:	0049      	lsls	r1, r1, #1
 800151a:	430a      	orrs	r2, r1
 800151c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2101      	movs	r1, #1
 800152a:	430a      	orrs	r2, r1
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	e00a      	b.n	8001546 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2280      	movs	r2, #128	@ 0x80
 8001534:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2224      	movs	r2, #36	@ 0x24
 800153a:	2100      	movs	r1, #0
 800153c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800153e:	2317      	movs	r3, #23
 8001540:	18fb      	adds	r3, r7, r3
 8001542:	2201      	movs	r2, #1
 8001544:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001546:	2317      	movs	r3, #23
 8001548:	18fb      	adds	r3, r7, r3
 800154a:	781b      	ldrb	r3, [r3, #0]
}
 800154c:	0018      	movs	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	b006      	add	sp, #24
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800155c:	210f      	movs	r1, #15
 800155e:	187b      	adds	r3, r7, r1
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2225      	movs	r2, #37	@ 0x25
 8001568:	5c9b      	ldrb	r3, [r3, r2]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d006      	beq.n	800157e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2204      	movs	r2, #4
 8001574:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001576:	187b      	adds	r3, r7, r1
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
 800157c:	e049      	b.n	8001612 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	210e      	movs	r1, #14
 800158a:	438a      	bics	r2, r1
 800158c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2101      	movs	r1, #1
 800159a:	438a      	bics	r2, r1
 800159c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a8:	491d      	ldr	r1, [pc, #116]	@ (8001620 <HAL_DMA_Abort_IT+0xcc>)
 80015aa:	400a      	ands	r2, r1
 80015ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80015ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001624 <HAL_DMA_Abort_IT+0xd0>)
 80015b0:	6859      	ldr	r1, [r3, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	221c      	movs	r2, #28
 80015b8:	4013      	ands	r3, r2
 80015ba:	2201      	movs	r2, #1
 80015bc:	409a      	lsls	r2, r3
 80015be:	4b19      	ldr	r3, [pc, #100]	@ (8001624 <HAL_DMA_Abort_IT+0xd0>)
 80015c0:	430a      	orrs	r2, r1
 80015c2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80015cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00c      	beq.n	80015f0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015e0:	490f      	ldr	r1, [pc, #60]	@ (8001620 <HAL_DMA_Abort_IT+0xcc>)
 80015e2:	400a      	ands	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80015ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2225      	movs	r2, #37	@ 0x25
 80015f4:	2101      	movs	r1, #1
 80015f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2224      	movs	r2, #36	@ 0x24
 80015fc:	2100      	movs	r1, #0
 80015fe:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001604:	2b00      	cmp	r3, #0
 8001606:	d004      	beq.n	8001612 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	0010      	movs	r0, r2
 8001610:	4798      	blx	r3
    }
  }
  return status;
 8001612:	230f      	movs	r3, #15
 8001614:	18fb      	adds	r3, r7, r3
 8001616:	781b      	ldrb	r3, [r3, #0]
}
 8001618:	0018      	movs	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	b004      	add	sp, #16
 800161e:	bd80      	pop	{r7, pc}
 8001620:	fffffeff 	.word	0xfffffeff
 8001624:	40020000 	.word	0x40020000

08001628 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001630:	4b55      	ldr	r3, [pc, #340]	@ (8001788 <HAL_DMA_IRQHandler+0x160>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	221c      	movs	r2, #28
 8001644:	4013      	ands	r3, r2
 8001646:	2204      	movs	r2, #4
 8001648:	409a      	lsls	r2, r3
 800164a:	0013      	movs	r3, r2
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	4013      	ands	r3, r2
 8001650:	d027      	beq.n	80016a2 <HAL_DMA_IRQHandler+0x7a>
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	2204      	movs	r2, #4
 8001656:	4013      	ands	r3, r2
 8001658:	d023      	beq.n	80016a2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2220      	movs	r2, #32
 8001662:	4013      	ands	r3, r2
 8001664:	d107      	bne.n	8001676 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2104      	movs	r1, #4
 8001672:	438a      	bics	r2, r1
 8001674:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001676:	4b44      	ldr	r3, [pc, #272]	@ (8001788 <HAL_DMA_IRQHandler+0x160>)
 8001678:	6859      	ldr	r1, [r3, #4]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	221c      	movs	r2, #28
 8001680:	4013      	ands	r3, r2
 8001682:	2204      	movs	r2, #4
 8001684:	409a      	lsls	r2, r3
 8001686:	4b40      	ldr	r3, [pc, #256]	@ (8001788 <HAL_DMA_IRQHandler+0x160>)
 8001688:	430a      	orrs	r2, r1
 800168a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001690:	2b00      	cmp	r3, #0
 8001692:	d100      	bne.n	8001696 <HAL_DMA_IRQHandler+0x6e>
 8001694:	e073      	b.n	800177e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	0010      	movs	r0, r2
 800169e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80016a0:	e06d      	b.n	800177e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a6:	221c      	movs	r2, #28
 80016a8:	4013      	ands	r3, r2
 80016aa:	2202      	movs	r2, #2
 80016ac:	409a      	lsls	r2, r3
 80016ae:	0013      	movs	r3, r2
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	4013      	ands	r3, r2
 80016b4:	d02e      	beq.n	8001714 <HAL_DMA_IRQHandler+0xec>
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	2202      	movs	r2, #2
 80016ba:	4013      	ands	r3, r2
 80016bc:	d02a      	beq.n	8001714 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2220      	movs	r2, #32
 80016c6:	4013      	ands	r3, r2
 80016c8:	d10b      	bne.n	80016e2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	210a      	movs	r1, #10
 80016d6:	438a      	bics	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2225      	movs	r2, #37	@ 0x25
 80016de:	2101      	movs	r1, #1
 80016e0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80016e2:	4b29      	ldr	r3, [pc, #164]	@ (8001788 <HAL_DMA_IRQHandler+0x160>)
 80016e4:	6859      	ldr	r1, [r3, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	221c      	movs	r2, #28
 80016ec:	4013      	ands	r3, r2
 80016ee:	2202      	movs	r2, #2
 80016f0:	409a      	lsls	r2, r3
 80016f2:	4b25      	ldr	r3, [pc, #148]	@ (8001788 <HAL_DMA_IRQHandler+0x160>)
 80016f4:	430a      	orrs	r2, r1
 80016f6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2224      	movs	r2, #36	@ 0x24
 80016fc:	2100      	movs	r1, #0
 80016fe:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001704:	2b00      	cmp	r3, #0
 8001706:	d03a      	beq.n	800177e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	0010      	movs	r0, r2
 8001710:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001712:	e034      	b.n	800177e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001718:	221c      	movs	r2, #28
 800171a:	4013      	ands	r3, r2
 800171c:	2208      	movs	r2, #8
 800171e:	409a      	lsls	r2, r3
 8001720:	0013      	movs	r3, r2
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	4013      	ands	r3, r2
 8001726:	d02b      	beq.n	8001780 <HAL_DMA_IRQHandler+0x158>
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	2208      	movs	r2, #8
 800172c:	4013      	ands	r3, r2
 800172e:	d027      	beq.n	8001780 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	210e      	movs	r1, #14
 800173c:	438a      	bics	r2, r1
 800173e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001740:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <HAL_DMA_IRQHandler+0x160>)
 8001742:	6859      	ldr	r1, [r3, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001748:	221c      	movs	r2, #28
 800174a:	4013      	ands	r3, r2
 800174c:	2201      	movs	r2, #1
 800174e:	409a      	lsls	r2, r3
 8001750:	4b0d      	ldr	r3, [pc, #52]	@ (8001788 <HAL_DMA_IRQHandler+0x160>)
 8001752:	430a      	orrs	r2, r1
 8001754:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2225      	movs	r2, #37	@ 0x25
 8001760:	2101      	movs	r1, #1
 8001762:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2224      	movs	r2, #36	@ 0x24
 8001768:	2100      	movs	r1, #0
 800176a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	0010      	movs	r0, r2
 800177c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800177e:	46c0      	nop			@ (mov r8, r8)
 8001780:	46c0      	nop			@ (mov r8, r8)
}
 8001782:	46bd      	mov	sp, r7
 8001784:	b004      	add	sp, #16
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40020000 	.word	0x40020000

0800178c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80017a2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d004      	beq.n	80017b6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80017b4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80017b6:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <DMA_SetConfig+0x7c>)
 80017b8:	6859      	ldr	r1, [r3, #4]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	221c      	movs	r2, #28
 80017c0:	4013      	ands	r3, r2
 80017c2:	2201      	movs	r2, #1
 80017c4:	409a      	lsls	r2, r3
 80017c6:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <DMA_SetConfig+0x7c>)
 80017c8:	430a      	orrs	r2, r1
 80017ca:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b10      	cmp	r3, #16
 80017da:	d108      	bne.n	80017ee <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017ec:	e007      	b.n	80017fe <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	60da      	str	r2, [r3, #12]
}
 80017fe:	46c0      	nop			@ (mov r8, r8)
 8001800:	46bd      	mov	sp, r7
 8001802:	b004      	add	sp, #16
 8001804:	bd80      	pop	{r7, pc}
 8001806:	46c0      	nop			@ (mov r8, r8)
 8001808:	40020000 	.word	0x40020000

0800180c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	4a10      	ldr	r2, [pc, #64]	@ (800185c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800181c:	4694      	mov	ip, r2
 800181e:	4463      	add	r3, ip
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	001a      	movs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	001a      	movs	r2, r3
 800182e:	23ff      	movs	r3, #255	@ 0xff
 8001830:	4013      	ands	r3, r2
 8001832:	3b08      	subs	r3, #8
 8001834:	2114      	movs	r1, #20
 8001836:	0018      	movs	r0, r3
 8001838:	f7fe fc62 	bl	8000100 <__udivsi3>
 800183c:	0003      	movs	r3, r0
 800183e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a07      	ldr	r2, [pc, #28]	@ (8001860 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001844:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	221f      	movs	r2, #31
 800184a:	4013      	ands	r3, r2
 800184c:	2201      	movs	r2, #1
 800184e:	409a      	lsls	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001854:	46c0      	nop			@ (mov r8, r8)
 8001856:	46bd      	mov	sp, r7
 8001858:	b004      	add	sp, #16
 800185a:	bd80      	pop	{r7, pc}
 800185c:	10008200 	.word	0x10008200
 8001860:	40020880 	.word	0x40020880

08001864 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	223f      	movs	r2, #63	@ 0x3f
 8001872:	4013      	ands	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4a0a      	ldr	r2, [pc, #40]	@ (80018a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800187a:	4694      	mov	ip, r2
 800187c:	4463      	add	r3, ip
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	001a      	movs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a07      	ldr	r2, [pc, #28]	@ (80018a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800188a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	3b01      	subs	r3, #1
 8001890:	2203      	movs	r2, #3
 8001892:	4013      	ands	r3, r2
 8001894:	2201      	movs	r2, #1
 8001896:	409a      	lsls	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800189c:	46c0      	nop			@ (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	b004      	add	sp, #16
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	1000823f 	.word	0x1000823f
 80018a8:	40020940 	.word	0x40020940

080018ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ba:	e147      	b.n	8001b4c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2101      	movs	r1, #1
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	4091      	lsls	r1, r2
 80018c6:	000a      	movs	r2, r1
 80018c8:	4013      	ands	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d100      	bne.n	80018d4 <HAL_GPIO_Init+0x28>
 80018d2:	e138      	b.n	8001b46 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2203      	movs	r2, #3
 80018da:	4013      	ands	r3, r2
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d005      	beq.n	80018ec <HAL_GPIO_Init+0x40>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2203      	movs	r2, #3
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d130      	bne.n	800194e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	2203      	movs	r2, #3
 80018f8:	409a      	lsls	r2, r3
 80018fa:	0013      	movs	r3, r2
 80018fc:	43da      	mvns	r2, r3
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	409a      	lsls	r2, r3
 800190e:	0013      	movs	r3, r2
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4313      	orrs	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001922:	2201      	movs	r2, #1
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
 8001928:	0013      	movs	r3, r2
 800192a:	43da      	mvns	r2, r3
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	091b      	lsrs	r3, r3, #4
 8001938:	2201      	movs	r2, #1
 800193a:	401a      	ands	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	409a      	lsls	r2, r3
 8001940:	0013      	movs	r3, r2
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2203      	movs	r2, #3
 8001954:	4013      	ands	r3, r2
 8001956:	2b03      	cmp	r3, #3
 8001958:	d017      	beq.n	800198a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	2203      	movs	r2, #3
 8001966:	409a      	lsls	r2, r3
 8001968:	0013      	movs	r3, r2
 800196a:	43da      	mvns	r2, r3
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	409a      	lsls	r2, r3
 800197c:	0013      	movs	r3, r2
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2203      	movs	r2, #3
 8001990:	4013      	ands	r3, r2
 8001992:	2b02      	cmp	r3, #2
 8001994:	d123      	bne.n	80019de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	08da      	lsrs	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3208      	adds	r2, #8
 800199e:	0092      	lsls	r2, r2, #2
 80019a0:	58d3      	ldr	r3, [r2, r3]
 80019a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	2207      	movs	r2, #7
 80019a8:	4013      	ands	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	220f      	movs	r2, #15
 80019ae:	409a      	lsls	r2, r3
 80019b0:	0013      	movs	r3, r2
 80019b2:	43da      	mvns	r2, r3
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4013      	ands	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	691a      	ldr	r2, [r3, #16]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	2107      	movs	r1, #7
 80019c2:	400b      	ands	r3, r1
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	409a      	lsls	r2, r3
 80019c8:	0013      	movs	r3, r2
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	08da      	lsrs	r2, r3, #3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3208      	adds	r2, #8
 80019d8:	0092      	lsls	r2, r2, #2
 80019da:	6939      	ldr	r1, [r7, #16]
 80019dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	2203      	movs	r2, #3
 80019ea:	409a      	lsls	r2, r3
 80019ec:	0013      	movs	r3, r2
 80019ee:	43da      	mvns	r2, r3
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2203      	movs	r2, #3
 80019fc:	401a      	ands	r2, r3
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	409a      	lsls	r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	23c0      	movs	r3, #192	@ 0xc0
 8001a18:	029b      	lsls	r3, r3, #10
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d100      	bne.n	8001a20 <HAL_GPIO_Init+0x174>
 8001a1e:	e092      	b.n	8001b46 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001a20:	4a50      	ldr	r2, [pc, #320]	@ (8001b64 <HAL_GPIO_Init+0x2b8>)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3318      	adds	r3, #24
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	589b      	ldr	r3, [r3, r2]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	2203      	movs	r2, #3
 8001a32:	4013      	ands	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	220f      	movs	r2, #15
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	0013      	movs	r3, r2
 8001a3c:	43da      	mvns	r2, r3
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	23a0      	movs	r3, #160	@ 0xa0
 8001a48:	05db      	lsls	r3, r3, #23
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d013      	beq.n	8001a76 <HAL_GPIO_Init+0x1ca>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a45      	ldr	r2, [pc, #276]	@ (8001b68 <HAL_GPIO_Init+0x2bc>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00d      	beq.n	8001a72 <HAL_GPIO_Init+0x1c6>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a44      	ldr	r2, [pc, #272]	@ (8001b6c <HAL_GPIO_Init+0x2c0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d007      	beq.n	8001a6e <HAL_GPIO_Init+0x1c2>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a43      	ldr	r2, [pc, #268]	@ (8001b70 <HAL_GPIO_Init+0x2c4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d101      	bne.n	8001a6a <HAL_GPIO_Init+0x1be>
 8001a66:	2303      	movs	r3, #3
 8001a68:	e006      	b.n	8001a78 <HAL_GPIO_Init+0x1cc>
 8001a6a:	2305      	movs	r3, #5
 8001a6c:	e004      	b.n	8001a78 <HAL_GPIO_Init+0x1cc>
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e002      	b.n	8001a78 <HAL_GPIO_Init+0x1cc>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <HAL_GPIO_Init+0x1cc>
 8001a76:	2300      	movs	r3, #0
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	2103      	movs	r1, #3
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	00d2      	lsls	r2, r2, #3
 8001a80:	4093      	lsls	r3, r2
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001a88:	4936      	ldr	r1, [pc, #216]	@ (8001b64 <HAL_GPIO_Init+0x2b8>)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	3318      	adds	r3, #24
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a96:	4b33      	ldr	r3, [pc, #204]	@ (8001b64 <HAL_GPIO_Init+0x2b8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	43da      	mvns	r2, r3
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	2380      	movs	r3, #128	@ 0x80
 8001aac:	035b      	lsls	r3, r3, #13
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aba:	4b2a      	ldr	r3, [pc, #168]	@ (8001b64 <HAL_GPIO_Init+0x2b8>)
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001ac0:	4b28      	ldr	r3, [pc, #160]	@ (8001b64 <HAL_GPIO_Init+0x2b8>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	43da      	mvns	r2, r3
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	2380      	movs	r3, #128	@ 0x80
 8001ad6:	039b      	lsls	r3, r3, #14
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b64 <HAL_GPIO_Init+0x2b8>)
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001aea:	4a1e      	ldr	r2, [pc, #120]	@ (8001b64 <HAL_GPIO_Init+0x2b8>)
 8001aec:	2384      	movs	r3, #132	@ 0x84
 8001aee:	58d3      	ldr	r3, [r2, r3]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	43da      	mvns	r2, r3
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	2380      	movs	r3, #128	@ 0x80
 8001b02:	029b      	lsls	r3, r3, #10
 8001b04:	4013      	ands	r3, r2
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b10:	4914      	ldr	r1, [pc, #80]	@ (8001b64 <HAL_GPIO_Init+0x2b8>)
 8001b12:	2284      	movs	r2, #132	@ 0x84
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001b18:	4a12      	ldr	r2, [pc, #72]	@ (8001b64 <HAL_GPIO_Init+0x2b8>)
 8001b1a:	2380      	movs	r3, #128	@ 0x80
 8001b1c:	58d3      	ldr	r3, [r2, r3]
 8001b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	43da      	mvns	r2, r3
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	2380      	movs	r3, #128	@ 0x80
 8001b30:	025b      	lsls	r3, r3, #9
 8001b32:	4013      	ands	r3, r2
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b3e:	4909      	ldr	r1, [pc, #36]	@ (8001b64 <HAL_GPIO_Init+0x2b8>)
 8001b40:	2280      	movs	r2, #128	@ 0x80
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	40da      	lsrs	r2, r3
 8001b54:	1e13      	subs	r3, r2, #0
 8001b56:	d000      	beq.n	8001b5a <HAL_GPIO_Init+0x2ae>
 8001b58:	e6b0      	b.n	80018bc <HAL_GPIO_Init+0x10>
  }
}
 8001b5a:	46c0      	nop			@ (mov r8, r8)
 8001b5c:	46c0      	nop			@ (mov r8, r8)
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b006      	add	sp, #24
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40021800 	.word	0x40021800
 8001b68:	50000400 	.word	0x50000400
 8001b6c:	50000800 	.word	0x50000800
 8001b70:	50000c00 	.word	0x50000c00

08001b74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	000a      	movs	r2, r1
 8001b7e:	1cbb      	adds	r3, r7, #2
 8001b80:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	1cba      	adds	r2, r7, #2
 8001b88:	8812      	ldrh	r2, [r2, #0]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d004      	beq.n	8001b98 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001b8e:	230f      	movs	r3, #15
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	2201      	movs	r2, #1
 8001b94:	701a      	strb	r2, [r3, #0]
 8001b96:	e003      	b.n	8001ba0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b98:	230f      	movs	r3, #15
 8001b9a:	18fb      	adds	r3, r7, r3
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001ba0:	230f      	movs	r3, #15
 8001ba2:	18fb      	adds	r3, r7, r3
 8001ba4:	781b      	ldrb	r3, [r3, #0]
}
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b004      	add	sp, #16
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	0008      	movs	r0, r1
 8001bb8:	0011      	movs	r1, r2
 8001bba:	1cbb      	adds	r3, r7, #2
 8001bbc:	1c02      	adds	r2, r0, #0
 8001bbe:	801a      	strh	r2, [r3, #0]
 8001bc0:	1c7b      	adds	r3, r7, #1
 8001bc2:	1c0a      	adds	r2, r1, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bc6:	1c7b      	adds	r3, r7, #1
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d004      	beq.n	8001bd8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bce:	1cbb      	adds	r3, r7, #2
 8001bd0:	881a      	ldrh	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bd6:	e003      	b.n	8001be0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bd8:	1cbb      	adds	r3, r7, #2
 8001bda:	881a      	ldrh	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001be0:	46c0      	nop			@ (mov r8, r8)
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b002      	add	sp, #8
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e08f      	b.n	8001d1a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2241      	movs	r2, #65	@ 0x41
 8001bfe:	5c9b      	ldrb	r3, [r3, r2]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d107      	bne.n	8001c16 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2240      	movs	r2, #64	@ 0x40
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7ff f889 	bl	8000d28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2241      	movs	r2, #65	@ 0x41
 8001c1a:	2124      	movs	r1, #36	@ 0x24
 8001c1c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2101      	movs	r1, #1
 8001c2a:	438a      	bics	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	493b      	ldr	r1, [pc, #236]	@ (8001d24 <HAL_I2C_Init+0x13c>)
 8001c38:	400a      	ands	r2, r1
 8001c3a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4938      	ldr	r1, [pc, #224]	@ (8001d28 <HAL_I2C_Init+0x140>)
 8001c48:	400a      	ands	r2, r1
 8001c4a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d108      	bne.n	8001c66 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2180      	movs	r1, #128	@ 0x80
 8001c5e:	0209      	lsls	r1, r1, #8
 8001c60:	430a      	orrs	r2, r1
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	e007      	b.n	8001c76 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2184      	movs	r1, #132	@ 0x84
 8001c70:	0209      	lsls	r1, r1, #8
 8001c72:	430a      	orrs	r2, r1
 8001c74:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d109      	bne.n	8001c92 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2180      	movs	r1, #128	@ 0x80
 8001c8a:	0109      	lsls	r1, r1, #4
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	e007      	b.n	8001ca2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4923      	ldr	r1, [pc, #140]	@ (8001d2c <HAL_I2C_Init+0x144>)
 8001c9e:	400a      	ands	r2, r1
 8001ca0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4920      	ldr	r1, [pc, #128]	@ (8001d30 <HAL_I2C_Init+0x148>)
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	491a      	ldr	r1, [pc, #104]	@ (8001d28 <HAL_I2C_Init+0x140>)
 8001cbe:	400a      	ands	r2, r1
 8001cc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691a      	ldr	r2, [r3, #16]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69d9      	ldr	r1, [r3, #28]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1a      	ldr	r2, [r3, #32]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2241      	movs	r2, #65	@ 0x41
 8001d06:	2120      	movs	r1, #32
 8001d08:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2242      	movs	r2, #66	@ 0x42
 8001d14:	2100      	movs	r1, #0
 8001d16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b002      	add	sp, #8
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			@ (mov r8, r8)
 8001d24:	f0ffffff 	.word	0xf0ffffff
 8001d28:	ffff7fff 	.word	0xffff7fff
 8001d2c:	fffff7ff 	.word	0xfffff7ff
 8001d30:	02008000 	.word	0x02008000

08001d34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2241      	movs	r2, #65	@ 0x41
 8001d42:	5c9b      	ldrb	r3, [r3, r2]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b20      	cmp	r3, #32
 8001d48:	d138      	bne.n	8001dbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2240      	movs	r2, #64	@ 0x40
 8001d4e:	5c9b      	ldrb	r3, [r3, r2]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e032      	b.n	8001dbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2240      	movs	r2, #64	@ 0x40
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2241      	movs	r2, #65	@ 0x41
 8001d64:	2124      	movs	r1, #36	@ 0x24
 8001d66:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2101      	movs	r1, #1
 8001d74:	438a      	bics	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4911      	ldr	r1, [pc, #68]	@ (8001dc8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001d84:	400a      	ands	r2, r1
 8001d86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6819      	ldr	r1, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2101      	movs	r1, #1
 8001da4:	430a      	orrs	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2241      	movs	r2, #65	@ 0x41
 8001dac:	2120      	movs	r1, #32
 8001dae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2240      	movs	r2, #64	@ 0x40
 8001db4:	2100      	movs	r1, #0
 8001db6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e000      	b.n	8001dbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001dbc:	2302      	movs	r3, #2
  }
}
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	b002      	add	sp, #8
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	46c0      	nop			@ (mov r8, r8)
 8001dc8:	ffffefff 	.word	0xffffefff

08001dcc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2241      	movs	r2, #65	@ 0x41
 8001dda:	5c9b      	ldrb	r3, [r3, r2]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	d139      	bne.n	8001e56 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2240      	movs	r2, #64	@ 0x40
 8001de6:	5c9b      	ldrb	r3, [r3, r2]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e033      	b.n	8001e58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2240      	movs	r2, #64	@ 0x40
 8001df4:	2101      	movs	r1, #1
 8001df6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2241      	movs	r2, #65	@ 0x41
 8001dfc:	2124      	movs	r1, #36	@ 0x24
 8001dfe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	438a      	bics	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4a11      	ldr	r2, [pc, #68]	@ (8001e60 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2241      	movs	r2, #65	@ 0x41
 8001e46:	2120      	movs	r1, #32
 8001e48:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2240      	movs	r2, #64	@ 0x40
 8001e4e:	2100      	movs	r1, #0
 8001e50:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e000      	b.n	8001e58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e56:	2302      	movs	r3, #2
  }
}
 8001e58:	0018      	movs	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b004      	add	sp, #16
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	fffff0ff 	.word	0xfffff0ff

08001e64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001e6c:	4b19      	ldr	r3, [pc, #100]	@ (8001ed4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a19      	ldr	r2, [pc, #100]	@ (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	0019      	movs	r1, r3
 8001e76:	4b17      	ldr	r3, [pc, #92]	@ (8001ed4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	2380      	movs	r3, #128	@ 0x80
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d11f      	bne.n	8001ec8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001e88:	4b14      	ldr	r3, [pc, #80]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	0013      	movs	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	189b      	adds	r3, r3, r2
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4912      	ldr	r1, [pc, #72]	@ (8001ee0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001e96:	0018      	movs	r0, r3
 8001e98:	f7fe f932 	bl	8000100 <__udivsi3>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ea2:	e008      	b.n	8001eb6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	e001      	b.n	8001eb6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e009      	b.n	8001eca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eb6:	4b07      	ldr	r3, [pc, #28]	@ (8001ed4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001eb8:	695a      	ldr	r2, [r3, #20]
 8001eba:	2380      	movs	r3, #128	@ 0x80
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	2380      	movs	r3, #128	@ 0x80
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d0ed      	beq.n	8001ea4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	0018      	movs	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b004      	add	sp, #16
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	46c0      	nop			@ (mov r8, r8)
 8001ed4:	40007000 	.word	0x40007000
 8001ed8:	fffff9ff 	.word	0xfffff9ff
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	000f4240 	.word	0x000f4240

08001ee4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001ee8:	4b03      	ldr	r3, [pc, #12]	@ (8001ef8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	23e0      	movs	r3, #224	@ 0xe0
 8001eee:	01db      	lsls	r3, r3, #7
 8001ef0:	4013      	ands	r3, r2
}
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000

08001efc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e2f3      	b.n	80024f6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2201      	movs	r2, #1
 8001f14:	4013      	ands	r3, r2
 8001f16:	d100      	bne.n	8001f1a <HAL_RCC_OscConfig+0x1e>
 8001f18:	e07c      	b.n	8002014 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f1a:	4bc3      	ldr	r3, [pc, #780]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2238      	movs	r2, #56	@ 0x38
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f24:	4bc0      	ldr	r3, [pc, #768]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	2203      	movs	r2, #3
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	2b10      	cmp	r3, #16
 8001f32:	d102      	bne.n	8001f3a <HAL_RCC_OscConfig+0x3e>
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d002      	beq.n	8001f40 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d10b      	bne.n	8001f58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	4bb9      	ldr	r3, [pc, #740]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	029b      	lsls	r3, r3, #10
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d062      	beq.n	8002012 <HAL_RCC_OscConfig+0x116>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d15e      	bne.n	8002012 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e2ce      	b.n	80024f6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	2380      	movs	r3, #128	@ 0x80
 8001f5e:	025b      	lsls	r3, r3, #9
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d107      	bne.n	8001f74 <HAL_RCC_OscConfig+0x78>
 8001f64:	4bb0      	ldr	r3, [pc, #704]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4baf      	ldr	r3, [pc, #700]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001f6a:	2180      	movs	r1, #128	@ 0x80
 8001f6c:	0249      	lsls	r1, r1, #9
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	e020      	b.n	8001fb6 <HAL_RCC_OscConfig+0xba>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	23a0      	movs	r3, #160	@ 0xa0
 8001f7a:	02db      	lsls	r3, r3, #11
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d10e      	bne.n	8001f9e <HAL_RCC_OscConfig+0xa2>
 8001f80:	4ba9      	ldr	r3, [pc, #676]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4ba8      	ldr	r3, [pc, #672]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001f86:	2180      	movs	r1, #128	@ 0x80
 8001f88:	02c9      	lsls	r1, r1, #11
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	4ba6      	ldr	r3, [pc, #664]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	4ba5      	ldr	r3, [pc, #660]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001f94:	2180      	movs	r1, #128	@ 0x80
 8001f96:	0249      	lsls	r1, r1, #9
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	e00b      	b.n	8001fb6 <HAL_RCC_OscConfig+0xba>
 8001f9e:	4ba2      	ldr	r3, [pc, #648]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	4ba1      	ldr	r3, [pc, #644]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001fa4:	49a1      	ldr	r1, [pc, #644]	@ (800222c <HAL_RCC_OscConfig+0x330>)
 8001fa6:	400a      	ands	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	4b9f      	ldr	r3, [pc, #636]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	4b9e      	ldr	r3, [pc, #632]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001fb0:	499f      	ldr	r1, [pc, #636]	@ (8002230 <HAL_RCC_OscConfig+0x334>)
 8001fb2:	400a      	ands	r2, r1
 8001fb4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d014      	beq.n	8001fe8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbe:	f7ff f8d1 	bl	8001164 <HAL_GetTick>
 8001fc2:	0003      	movs	r3, r0
 8001fc4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7ff f8cc 	bl	8001164 <HAL_GetTick>
 8001fcc:	0002      	movs	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	@ 0x64
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e28d      	b.n	80024f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fda:	4b93      	ldr	r3, [pc, #588]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	2380      	movs	r3, #128	@ 0x80
 8001fe0:	029b      	lsls	r3, r3, #10
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0xcc>
 8001fe6:	e015      	b.n	8002014 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe8:	f7ff f8bc 	bl	8001164 <HAL_GetTick>
 8001fec:	0003      	movs	r3, r0
 8001fee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff2:	f7ff f8b7 	bl	8001164 <HAL_GetTick>
 8001ff6:	0002      	movs	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b64      	cmp	r3, #100	@ 0x64
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e278      	b.n	80024f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002004:	4b88      	ldr	r3, [pc, #544]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	2380      	movs	r3, #128	@ 0x80
 800200a:	029b      	lsls	r3, r3, #10
 800200c:	4013      	ands	r3, r2
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0xf6>
 8002010:	e000      	b.n	8002014 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002012:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2202      	movs	r2, #2
 800201a:	4013      	ands	r3, r2
 800201c:	d100      	bne.n	8002020 <HAL_RCC_OscConfig+0x124>
 800201e:	e099      	b.n	8002154 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002020:	4b81      	ldr	r3, [pc, #516]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2238      	movs	r2, #56	@ 0x38
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800202a:	4b7f      	ldr	r3, [pc, #508]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2203      	movs	r2, #3
 8002030:	4013      	ands	r3, r2
 8002032:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2b10      	cmp	r3, #16
 8002038:	d102      	bne.n	8002040 <HAL_RCC_OscConfig+0x144>
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d002      	beq.n	8002046 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d135      	bne.n	80020b2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002046:	4b78      	ldr	r3, [pc, #480]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	2380      	movs	r3, #128	@ 0x80
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4013      	ands	r3, r2
 8002050:	d005      	beq.n	800205e <HAL_RCC_OscConfig+0x162>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e24b      	b.n	80024f6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205e:	4b72      	ldr	r3, [pc, #456]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	4a74      	ldr	r2, [pc, #464]	@ (8002234 <HAL_RCC_OscConfig+0x338>)
 8002064:	4013      	ands	r3, r2
 8002066:	0019      	movs	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	021a      	lsls	r2, r3, #8
 800206e:	4b6e      	ldr	r3, [pc, #440]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8002070:	430a      	orrs	r2, r1
 8002072:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d112      	bne.n	80020a0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800207a:	4b6b      	ldr	r3, [pc, #428]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a6e      	ldr	r2, [pc, #440]	@ (8002238 <HAL_RCC_OscConfig+0x33c>)
 8002080:	4013      	ands	r3, r2
 8002082:	0019      	movs	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	4b67      	ldr	r3, [pc, #412]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 800208a:	430a      	orrs	r2, r1
 800208c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800208e:	4b66      	ldr	r3, [pc, #408]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	0adb      	lsrs	r3, r3, #11
 8002094:	2207      	movs	r2, #7
 8002096:	4013      	ands	r3, r2
 8002098:	4a68      	ldr	r2, [pc, #416]	@ (800223c <HAL_RCC_OscConfig+0x340>)
 800209a:	40da      	lsrs	r2, r3
 800209c:	4b68      	ldr	r3, [pc, #416]	@ (8002240 <HAL_RCC_OscConfig+0x344>)
 800209e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020a0:	4b68      	ldr	r3, [pc, #416]	@ (8002244 <HAL_RCC_OscConfig+0x348>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	0018      	movs	r0, r3
 80020a6:	f7ff f801 	bl	80010ac <HAL_InitTick>
 80020aa:	1e03      	subs	r3, r0, #0
 80020ac:	d051      	beq.n	8002152 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e221      	b.n	80024f6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d030      	beq.n	800211c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80020ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a5e      	ldr	r2, [pc, #376]	@ (8002238 <HAL_RCC_OscConfig+0x33c>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	0019      	movs	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	4b57      	ldr	r3, [pc, #348]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 80020ca:	430a      	orrs	r2, r1
 80020cc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80020ce:	4b56      	ldr	r3, [pc, #344]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4b55      	ldr	r3, [pc, #340]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 80020d4:	2180      	movs	r1, #128	@ 0x80
 80020d6:	0049      	lsls	r1, r1, #1
 80020d8:	430a      	orrs	r2, r1
 80020da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7ff f842 	bl	8001164 <HAL_GetTick>
 80020e0:	0003      	movs	r3, r0
 80020e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e6:	f7ff f83d 	bl	8001164 <HAL_GetTick>
 80020ea:	0002      	movs	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e1fe      	b.n	80024f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	2380      	movs	r3, #128	@ 0x80
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4013      	ands	r3, r2
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002104:	4b48      	ldr	r3, [pc, #288]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	4a4a      	ldr	r2, [pc, #296]	@ (8002234 <HAL_RCC_OscConfig+0x338>)
 800210a:	4013      	ands	r3, r2
 800210c:	0019      	movs	r1, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	021a      	lsls	r2, r3, #8
 8002114:	4b44      	ldr	r3, [pc, #272]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8002116:	430a      	orrs	r2, r1
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	e01b      	b.n	8002154 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800211c:	4b42      	ldr	r3, [pc, #264]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b41      	ldr	r3, [pc, #260]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8002122:	4949      	ldr	r1, [pc, #292]	@ (8002248 <HAL_RCC_OscConfig+0x34c>)
 8002124:	400a      	ands	r2, r1
 8002126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7ff f81c 	bl	8001164 <HAL_GetTick>
 800212c:	0003      	movs	r3, r0
 800212e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002132:	f7ff f817 	bl	8001164 <HAL_GetTick>
 8002136:	0002      	movs	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e1d8      	b.n	80024f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002144:	4b38      	ldr	r3, [pc, #224]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	2380      	movs	r3, #128	@ 0x80
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4013      	ands	r3, r2
 800214e:	d1f0      	bne.n	8002132 <HAL_RCC_OscConfig+0x236>
 8002150:	e000      	b.n	8002154 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002152:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2208      	movs	r2, #8
 800215a:	4013      	ands	r3, r2
 800215c:	d047      	beq.n	80021ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800215e:	4b32      	ldr	r3, [pc, #200]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2238      	movs	r2, #56	@ 0x38
 8002164:	4013      	ands	r3, r2
 8002166:	2b18      	cmp	r3, #24
 8002168:	d10a      	bne.n	8002180 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800216a:	4b2f      	ldr	r3, [pc, #188]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 800216c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800216e:	2202      	movs	r2, #2
 8002170:	4013      	ands	r3, r2
 8002172:	d03c      	beq.n	80021ee <HAL_RCC_OscConfig+0x2f2>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d138      	bne.n	80021ee <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e1ba      	b.n	80024f6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d019      	beq.n	80021bc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002188:	4b27      	ldr	r3, [pc, #156]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 800218a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800218c:	4b26      	ldr	r3, [pc, #152]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 800218e:	2101      	movs	r1, #1
 8002190:	430a      	orrs	r2, r1
 8002192:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7fe ffe6 	bl	8001164 <HAL_GetTick>
 8002198:	0003      	movs	r3, r0
 800219a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800219e:	f7fe ffe1 	bl	8001164 <HAL_GetTick>
 80021a2:	0002      	movs	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e1a2      	b.n	80024f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 80021b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021b4:	2202      	movs	r2, #2
 80021b6:	4013      	ands	r3, r2
 80021b8:	d0f1      	beq.n	800219e <HAL_RCC_OscConfig+0x2a2>
 80021ba:	e018      	b.n	80021ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80021bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 80021be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80021c0:	4b19      	ldr	r3, [pc, #100]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 80021c2:	2101      	movs	r1, #1
 80021c4:	438a      	bics	r2, r1
 80021c6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7fe ffcc 	bl	8001164 <HAL_GetTick>
 80021cc:	0003      	movs	r3, r0
 80021ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d2:	f7fe ffc7 	bl	8001164 <HAL_GetTick>
 80021d6:	0002      	movs	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e188      	b.n	80024f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021e4:	4b10      	ldr	r3, [pc, #64]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 80021e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021e8:	2202      	movs	r2, #2
 80021ea:	4013      	ands	r3, r2
 80021ec:	d1f1      	bne.n	80021d2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2204      	movs	r2, #4
 80021f4:	4013      	ands	r3, r2
 80021f6:	d100      	bne.n	80021fa <HAL_RCC_OscConfig+0x2fe>
 80021f8:	e0c6      	b.n	8002388 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fa:	231f      	movs	r3, #31
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	2200      	movs	r2, #0
 8002200:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002202:	4b09      	ldr	r3, [pc, #36]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2238      	movs	r2, #56	@ 0x38
 8002208:	4013      	ands	r3, r2
 800220a:	2b20      	cmp	r3, #32
 800220c:	d11e      	bne.n	800224c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800220e:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <HAL_RCC_OscConfig+0x32c>)
 8002210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002212:	2202      	movs	r2, #2
 8002214:	4013      	ands	r3, r2
 8002216:	d100      	bne.n	800221a <HAL_RCC_OscConfig+0x31e>
 8002218:	e0b6      	b.n	8002388 <HAL_RCC_OscConfig+0x48c>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d000      	beq.n	8002224 <HAL_RCC_OscConfig+0x328>
 8002222:	e0b1      	b.n	8002388 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e166      	b.n	80024f6 <HAL_RCC_OscConfig+0x5fa>
 8002228:	40021000 	.word	0x40021000
 800222c:	fffeffff 	.word	0xfffeffff
 8002230:	fffbffff 	.word	0xfffbffff
 8002234:	ffff80ff 	.word	0xffff80ff
 8002238:	ffffc7ff 	.word	0xffffc7ff
 800223c:	00f42400 	.word	0x00f42400
 8002240:	20000000 	.word	0x20000000
 8002244:	20000004 	.word	0x20000004
 8002248:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800224c:	4bac      	ldr	r3, [pc, #688]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 800224e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002250:	2380      	movs	r3, #128	@ 0x80
 8002252:	055b      	lsls	r3, r3, #21
 8002254:	4013      	ands	r3, r2
 8002256:	d101      	bne.n	800225c <HAL_RCC_OscConfig+0x360>
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <HAL_RCC_OscConfig+0x362>
 800225c:	2300      	movs	r3, #0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d011      	beq.n	8002286 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002262:	4ba7      	ldr	r3, [pc, #668]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 8002264:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002266:	4ba6      	ldr	r3, [pc, #664]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 8002268:	2180      	movs	r1, #128	@ 0x80
 800226a:	0549      	lsls	r1, r1, #21
 800226c:	430a      	orrs	r2, r1
 800226e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002270:	4ba3      	ldr	r3, [pc, #652]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 8002272:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002274:	2380      	movs	r3, #128	@ 0x80
 8002276:	055b      	lsls	r3, r3, #21
 8002278:	4013      	ands	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800227e:	231f      	movs	r3, #31
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002286:	4b9f      	ldr	r3, [pc, #636]	@ (8002504 <HAL_RCC_OscConfig+0x608>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	2380      	movs	r3, #128	@ 0x80
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4013      	ands	r3, r2
 8002290:	d11a      	bne.n	80022c8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002292:	4b9c      	ldr	r3, [pc, #624]	@ (8002504 <HAL_RCC_OscConfig+0x608>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	4b9b      	ldr	r3, [pc, #620]	@ (8002504 <HAL_RCC_OscConfig+0x608>)
 8002298:	2180      	movs	r1, #128	@ 0x80
 800229a:	0049      	lsls	r1, r1, #1
 800229c:	430a      	orrs	r2, r1
 800229e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80022a0:	f7fe ff60 	bl	8001164 <HAL_GetTick>
 80022a4:	0003      	movs	r3, r0
 80022a6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022aa:	f7fe ff5b 	bl	8001164 <HAL_GetTick>
 80022ae:	0002      	movs	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e11c      	b.n	80024f6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022bc:	4b91      	ldr	r3, [pc, #580]	@ (8002504 <HAL_RCC_OscConfig+0x608>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	2380      	movs	r3, #128	@ 0x80
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	4013      	ands	r3, r2
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d106      	bne.n	80022de <HAL_RCC_OscConfig+0x3e2>
 80022d0:	4b8b      	ldr	r3, [pc, #556]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 80022d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022d4:	4b8a      	ldr	r3, [pc, #552]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 80022d6:	2101      	movs	r1, #1
 80022d8:	430a      	orrs	r2, r1
 80022da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022dc:	e01c      	b.n	8002318 <HAL_RCC_OscConfig+0x41c>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b05      	cmp	r3, #5
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0x404>
 80022e6:	4b86      	ldr	r3, [pc, #536]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 80022e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022ea:	4b85      	ldr	r3, [pc, #532]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 80022ec:	2104      	movs	r1, #4
 80022ee:	430a      	orrs	r2, r1
 80022f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022f2:	4b83      	ldr	r3, [pc, #524]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 80022f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022f6:	4b82      	ldr	r3, [pc, #520]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 80022f8:	2101      	movs	r1, #1
 80022fa:	430a      	orrs	r2, r1
 80022fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022fe:	e00b      	b.n	8002318 <HAL_RCC_OscConfig+0x41c>
 8002300:	4b7f      	ldr	r3, [pc, #508]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 8002302:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002304:	4b7e      	ldr	r3, [pc, #504]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 8002306:	2101      	movs	r1, #1
 8002308:	438a      	bics	r2, r1
 800230a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800230c:	4b7c      	ldr	r3, [pc, #496]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 800230e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002310:	4b7b      	ldr	r3, [pc, #492]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 8002312:	2104      	movs	r1, #4
 8002314:	438a      	bics	r2, r1
 8002316:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d014      	beq.n	800234a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7fe ff20 	bl	8001164 <HAL_GetTick>
 8002324:	0003      	movs	r3, r0
 8002326:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002328:	e009      	b.n	800233e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232a:	f7fe ff1b 	bl	8001164 <HAL_GetTick>
 800232e:	0002      	movs	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	4a74      	ldr	r2, [pc, #464]	@ (8002508 <HAL_RCC_OscConfig+0x60c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e0db      	b.n	80024f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800233e:	4b70      	ldr	r3, [pc, #448]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 8002340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002342:	2202      	movs	r2, #2
 8002344:	4013      	ands	r3, r2
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x42e>
 8002348:	e013      	b.n	8002372 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234a:	f7fe ff0b 	bl	8001164 <HAL_GetTick>
 800234e:	0003      	movs	r3, r0
 8002350:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002352:	e009      	b.n	8002368 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002354:	f7fe ff06 	bl	8001164 <HAL_GetTick>
 8002358:	0002      	movs	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	4a6a      	ldr	r2, [pc, #424]	@ (8002508 <HAL_RCC_OscConfig+0x60c>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e0c6      	b.n	80024f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002368:	4b65      	ldr	r3, [pc, #404]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 800236a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236c:	2202      	movs	r2, #2
 800236e:	4013      	ands	r3, r2
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002372:	231f      	movs	r3, #31
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d105      	bne.n	8002388 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800237c:	4b60      	ldr	r3, [pc, #384]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 800237e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002380:	4b5f      	ldr	r3, [pc, #380]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 8002382:	4962      	ldr	r1, [pc, #392]	@ (800250c <HAL_RCC_OscConfig+0x610>)
 8002384:	400a      	ands	r2, r1
 8002386:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d100      	bne.n	8002392 <HAL_RCC_OscConfig+0x496>
 8002390:	e0b0      	b.n	80024f4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002392:	4b5b      	ldr	r3, [pc, #364]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2238      	movs	r2, #56	@ 0x38
 8002398:	4013      	ands	r3, r2
 800239a:	2b10      	cmp	r3, #16
 800239c:	d100      	bne.n	80023a0 <HAL_RCC_OscConfig+0x4a4>
 800239e:	e078      	b.n	8002492 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d153      	bne.n	8002450 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a8:	4b55      	ldr	r3, [pc, #340]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b54      	ldr	r3, [pc, #336]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 80023ae:	4958      	ldr	r1, [pc, #352]	@ (8002510 <HAL_RCC_OscConfig+0x614>)
 80023b0:	400a      	ands	r2, r1
 80023b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7fe fed6 	bl	8001164 <HAL_GetTick>
 80023b8:	0003      	movs	r3, r0
 80023ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023be:	f7fe fed1 	bl	8001164 <HAL_GetTick>
 80023c2:	0002      	movs	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e092      	b.n	80024f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	2380      	movs	r3, #128	@ 0x80
 80023d6:	049b      	lsls	r3, r3, #18
 80023d8:	4013      	ands	r3, r2
 80023da:	d1f0      	bne.n	80023be <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023dc:	4b48      	ldr	r3, [pc, #288]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002514 <HAL_RCC_OscConfig+0x618>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	0019      	movs	r1, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1a      	ldr	r2, [r3, #32]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f4:	021b      	lsls	r3, r3, #8
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	431a      	orrs	r2, r3
 8002404:	4b3e      	ldr	r3, [pc, #248]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 8002406:	430a      	orrs	r2, r1
 8002408:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800240a:	4b3d      	ldr	r3, [pc, #244]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4b3c      	ldr	r3, [pc, #240]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 8002410:	2180      	movs	r1, #128	@ 0x80
 8002412:	0449      	lsls	r1, r1, #17
 8002414:	430a      	orrs	r2, r1
 8002416:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002418:	4b39      	ldr	r3, [pc, #228]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	4b38      	ldr	r3, [pc, #224]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 800241e:	2180      	movs	r1, #128	@ 0x80
 8002420:	0549      	lsls	r1, r1, #21
 8002422:	430a      	orrs	r2, r1
 8002424:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002426:	f7fe fe9d 	bl	8001164 <HAL_GetTick>
 800242a:	0003      	movs	r3, r0
 800242c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002430:	f7fe fe98 	bl	8001164 <HAL_GetTick>
 8002434:	0002      	movs	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e059      	b.n	80024f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002442:	4b2f      	ldr	r3, [pc, #188]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	2380      	movs	r3, #128	@ 0x80
 8002448:	049b      	lsls	r3, r3, #18
 800244a:	4013      	ands	r3, r2
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0x534>
 800244e:	e051      	b.n	80024f4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002450:	4b2b      	ldr	r3, [pc, #172]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b2a      	ldr	r3, [pc, #168]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 8002456:	492e      	ldr	r1, [pc, #184]	@ (8002510 <HAL_RCC_OscConfig+0x614>)
 8002458:	400a      	ands	r2, r1
 800245a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7fe fe82 	bl	8001164 <HAL_GetTick>
 8002460:	0003      	movs	r3, r0
 8002462:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002466:	f7fe fe7d 	bl	8001164 <HAL_GetTick>
 800246a:	0002      	movs	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e03e      	b.n	80024f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002478:	4b21      	ldr	r3, [pc, #132]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	2380      	movs	r3, #128	@ 0x80
 800247e:	049b      	lsls	r3, r3, #18
 8002480:	4013      	ands	r3, r2
 8002482:	d1f0      	bne.n	8002466 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002484:	4b1e      	ldr	r3, [pc, #120]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	4b1d      	ldr	r3, [pc, #116]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 800248a:	4923      	ldr	r1, [pc, #140]	@ (8002518 <HAL_RCC_OscConfig+0x61c>)
 800248c:	400a      	ands	r2, r1
 800248e:	60da      	str	r2, [r3, #12]
 8002490:	e030      	b.n	80024f4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e02b      	b.n	80024f6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800249e:	4b18      	ldr	r3, [pc, #96]	@ (8002500 <HAL_RCC_OscConfig+0x604>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2203      	movs	r2, #3
 80024a8:	401a      	ands	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d11e      	bne.n	80024f0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2270      	movs	r2, #112	@ 0x70
 80024b6:	401a      	ands	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024bc:	429a      	cmp	r2, r3
 80024be:	d117      	bne.n	80024f0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	23fe      	movs	r3, #254	@ 0xfe
 80024c4:	01db      	lsls	r3, r3, #7
 80024c6:	401a      	ands	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024cc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d10e      	bne.n	80024f0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	23f8      	movs	r3, #248	@ 0xf8
 80024d6:	039b      	lsls	r3, r3, #14
 80024d8:	401a      	ands	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024de:	429a      	cmp	r2, r3
 80024e0:	d106      	bne.n	80024f0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	0f5b      	lsrs	r3, r3, #29
 80024e6:	075a      	lsls	r2, r3, #29
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	0018      	movs	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b008      	add	sp, #32
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	46c0      	nop			@ (mov r8, r8)
 8002500:	40021000 	.word	0x40021000
 8002504:	40007000 	.word	0x40007000
 8002508:	00001388 	.word	0x00001388
 800250c:	efffffff 	.word	0xefffffff
 8002510:	feffffff 	.word	0xfeffffff
 8002514:	1fc1808c 	.word	0x1fc1808c
 8002518:	effefffc 	.word	0xeffefffc

0800251c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0e9      	b.n	8002704 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002530:	4b76      	ldr	r3, [pc, #472]	@ (800270c <HAL_RCC_ClockConfig+0x1f0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2207      	movs	r2, #7
 8002536:	4013      	ands	r3, r2
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d91e      	bls.n	800257c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253e:	4b73      	ldr	r3, [pc, #460]	@ (800270c <HAL_RCC_ClockConfig+0x1f0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2207      	movs	r2, #7
 8002544:	4393      	bics	r3, r2
 8002546:	0019      	movs	r1, r3
 8002548:	4b70      	ldr	r3, [pc, #448]	@ (800270c <HAL_RCC_ClockConfig+0x1f0>)
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002550:	f7fe fe08 	bl	8001164 <HAL_GetTick>
 8002554:	0003      	movs	r3, r0
 8002556:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002558:	e009      	b.n	800256e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800255a:	f7fe fe03 	bl	8001164 <HAL_GetTick>
 800255e:	0002      	movs	r2, r0
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	4a6a      	ldr	r2, [pc, #424]	@ (8002710 <HAL_RCC_ClockConfig+0x1f4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d901      	bls.n	800256e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e0ca      	b.n	8002704 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800256e:	4b67      	ldr	r3, [pc, #412]	@ (800270c <HAL_RCC_ClockConfig+0x1f0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2207      	movs	r2, #7
 8002574:	4013      	ands	r3, r2
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d1ee      	bne.n	800255a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2202      	movs	r2, #2
 8002582:	4013      	ands	r3, r2
 8002584:	d015      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2204      	movs	r2, #4
 800258c:	4013      	ands	r3, r2
 800258e:	d006      	beq.n	800259e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002590:	4b60      	ldr	r3, [pc, #384]	@ (8002714 <HAL_RCC_ClockConfig+0x1f8>)
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	4b5f      	ldr	r3, [pc, #380]	@ (8002714 <HAL_RCC_ClockConfig+0x1f8>)
 8002596:	21e0      	movs	r1, #224	@ 0xe0
 8002598:	01c9      	lsls	r1, r1, #7
 800259a:	430a      	orrs	r2, r1
 800259c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800259e:	4b5d      	ldr	r3, [pc, #372]	@ (8002714 <HAL_RCC_ClockConfig+0x1f8>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	4a5d      	ldr	r2, [pc, #372]	@ (8002718 <HAL_RCC_ClockConfig+0x1fc>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	0019      	movs	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	4b59      	ldr	r3, [pc, #356]	@ (8002714 <HAL_RCC_ClockConfig+0x1f8>)
 80025ae:	430a      	orrs	r2, r1
 80025b0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2201      	movs	r2, #1
 80025b8:	4013      	ands	r3, r2
 80025ba:	d057      	beq.n	800266c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d107      	bne.n	80025d4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025c4:	4b53      	ldr	r3, [pc, #332]	@ (8002714 <HAL_RCC_ClockConfig+0x1f8>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	2380      	movs	r3, #128	@ 0x80
 80025ca:	029b      	lsls	r3, r3, #10
 80025cc:	4013      	ands	r3, r2
 80025ce:	d12b      	bne.n	8002628 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e097      	b.n	8002704 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d107      	bne.n	80025ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002714 <HAL_RCC_ClockConfig+0x1f8>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	2380      	movs	r3, #128	@ 0x80
 80025e2:	049b      	lsls	r3, r3, #18
 80025e4:	4013      	ands	r3, r2
 80025e6:	d11f      	bne.n	8002628 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e08b      	b.n	8002704 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d107      	bne.n	8002604 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025f4:	4b47      	ldr	r3, [pc, #284]	@ (8002714 <HAL_RCC_ClockConfig+0x1f8>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	2380      	movs	r3, #128	@ 0x80
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4013      	ands	r3, r2
 80025fe:	d113      	bne.n	8002628 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e07f      	b.n	8002704 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b03      	cmp	r3, #3
 800260a:	d106      	bne.n	800261a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800260c:	4b41      	ldr	r3, [pc, #260]	@ (8002714 <HAL_RCC_ClockConfig+0x1f8>)
 800260e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002610:	2202      	movs	r2, #2
 8002612:	4013      	ands	r3, r2
 8002614:	d108      	bne.n	8002628 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e074      	b.n	8002704 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800261a:	4b3e      	ldr	r3, [pc, #248]	@ (8002714 <HAL_RCC_ClockConfig+0x1f8>)
 800261c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800261e:	2202      	movs	r2, #2
 8002620:	4013      	ands	r3, r2
 8002622:	d101      	bne.n	8002628 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e06d      	b.n	8002704 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002628:	4b3a      	ldr	r3, [pc, #232]	@ (8002714 <HAL_RCC_ClockConfig+0x1f8>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2207      	movs	r2, #7
 800262e:	4393      	bics	r3, r2
 8002630:	0019      	movs	r1, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	4b37      	ldr	r3, [pc, #220]	@ (8002714 <HAL_RCC_ClockConfig+0x1f8>)
 8002638:	430a      	orrs	r2, r1
 800263a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800263c:	f7fe fd92 	bl	8001164 <HAL_GetTick>
 8002640:	0003      	movs	r3, r0
 8002642:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002644:	e009      	b.n	800265a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002646:	f7fe fd8d 	bl	8001164 <HAL_GetTick>
 800264a:	0002      	movs	r2, r0
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	4a2f      	ldr	r2, [pc, #188]	@ (8002710 <HAL_RCC_ClockConfig+0x1f4>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e054      	b.n	8002704 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265a:	4b2e      	ldr	r3, [pc, #184]	@ (8002714 <HAL_RCC_ClockConfig+0x1f8>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2238      	movs	r2, #56	@ 0x38
 8002660:	401a      	ands	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	429a      	cmp	r2, r3
 800266a:	d1ec      	bne.n	8002646 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800266c:	4b27      	ldr	r3, [pc, #156]	@ (800270c <HAL_RCC_ClockConfig+0x1f0>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2207      	movs	r2, #7
 8002672:	4013      	ands	r3, r2
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d21e      	bcs.n	80026b8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267a:	4b24      	ldr	r3, [pc, #144]	@ (800270c <HAL_RCC_ClockConfig+0x1f0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2207      	movs	r2, #7
 8002680:	4393      	bics	r3, r2
 8002682:	0019      	movs	r1, r3
 8002684:	4b21      	ldr	r3, [pc, #132]	@ (800270c <HAL_RCC_ClockConfig+0x1f0>)
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800268c:	f7fe fd6a 	bl	8001164 <HAL_GetTick>
 8002690:	0003      	movs	r3, r0
 8002692:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002694:	e009      	b.n	80026aa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002696:	f7fe fd65 	bl	8001164 <HAL_GetTick>
 800269a:	0002      	movs	r2, r0
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002710 <HAL_RCC_ClockConfig+0x1f4>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e02c      	b.n	8002704 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026aa:	4b18      	ldr	r3, [pc, #96]	@ (800270c <HAL_RCC_ClockConfig+0x1f0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2207      	movs	r2, #7
 80026b0:	4013      	ands	r3, r2
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d1ee      	bne.n	8002696 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2204      	movs	r2, #4
 80026be:	4013      	ands	r3, r2
 80026c0:	d009      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026c2:	4b14      	ldr	r3, [pc, #80]	@ (8002714 <HAL_RCC_ClockConfig+0x1f8>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	4a15      	ldr	r2, [pc, #84]	@ (800271c <HAL_RCC_ClockConfig+0x200>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	0019      	movs	r1, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	4b10      	ldr	r3, [pc, #64]	@ (8002714 <HAL_RCC_ClockConfig+0x1f8>)
 80026d2:	430a      	orrs	r2, r1
 80026d4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80026d6:	f000 f829 	bl	800272c <HAL_RCC_GetSysClockFreq>
 80026da:	0001      	movs	r1, r0
 80026dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002714 <HAL_RCC_ClockConfig+0x1f8>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	220f      	movs	r2, #15
 80026e4:	401a      	ands	r2, r3
 80026e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002720 <HAL_RCC_ClockConfig+0x204>)
 80026e8:	0092      	lsls	r2, r2, #2
 80026ea:	58d3      	ldr	r3, [r2, r3]
 80026ec:	221f      	movs	r2, #31
 80026ee:	4013      	ands	r3, r2
 80026f0:	000a      	movs	r2, r1
 80026f2:	40da      	lsrs	r2, r3
 80026f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002724 <HAL_RCC_ClockConfig+0x208>)
 80026f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80026f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002728 <HAL_RCC_ClockConfig+0x20c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f7fe fcd5 	bl	80010ac <HAL_InitTick>
 8002702:	0003      	movs	r3, r0
}
 8002704:	0018      	movs	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	b004      	add	sp, #16
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40022000 	.word	0x40022000
 8002710:	00001388 	.word	0x00001388
 8002714:	40021000 	.word	0x40021000
 8002718:	fffff0ff 	.word	0xfffff0ff
 800271c:	ffff8fff 	.word	0xffff8fff
 8002720:	08004868 	.word	0x08004868
 8002724:	20000000 	.word	0x20000000
 8002728:	20000004 	.word	0x20000004

0800272c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002732:	4b3c      	ldr	r3, [pc, #240]	@ (8002824 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2238      	movs	r2, #56	@ 0x38
 8002738:	4013      	ands	r3, r2
 800273a:	d10f      	bne.n	800275c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800273c:	4b39      	ldr	r3, [pc, #228]	@ (8002824 <HAL_RCC_GetSysClockFreq+0xf8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	0adb      	lsrs	r3, r3, #11
 8002742:	2207      	movs	r2, #7
 8002744:	4013      	ands	r3, r2
 8002746:	2201      	movs	r2, #1
 8002748:	409a      	lsls	r2, r3
 800274a:	0013      	movs	r3, r2
 800274c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800274e:	6839      	ldr	r1, [r7, #0]
 8002750:	4835      	ldr	r0, [pc, #212]	@ (8002828 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002752:	f7fd fcd5 	bl	8000100 <__udivsi3>
 8002756:	0003      	movs	r3, r0
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	e05d      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800275c:	4b31      	ldr	r3, [pc, #196]	@ (8002824 <HAL_RCC_GetSysClockFreq+0xf8>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2238      	movs	r2, #56	@ 0x38
 8002762:	4013      	ands	r3, r2
 8002764:	2b08      	cmp	r3, #8
 8002766:	d102      	bne.n	800276e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002768:	4b30      	ldr	r3, [pc, #192]	@ (800282c <HAL_RCC_GetSysClockFreq+0x100>)
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	e054      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800276e:	4b2d      	ldr	r3, [pc, #180]	@ (8002824 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2238      	movs	r2, #56	@ 0x38
 8002774:	4013      	ands	r3, r2
 8002776:	2b10      	cmp	r3, #16
 8002778:	d138      	bne.n	80027ec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800277a:	4b2a      	ldr	r3, [pc, #168]	@ (8002824 <HAL_RCC_GetSysClockFreq+0xf8>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2203      	movs	r2, #3
 8002780:	4013      	ands	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002784:	4b27      	ldr	r3, [pc, #156]	@ (8002824 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	2207      	movs	r2, #7
 800278c:	4013      	ands	r3, r2
 800278e:	3301      	adds	r3, #1
 8002790:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d10d      	bne.n	80027b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	4824      	ldr	r0, [pc, #144]	@ (800282c <HAL_RCC_GetSysClockFreq+0x100>)
 800279c:	f7fd fcb0 	bl	8000100 <__udivsi3>
 80027a0:	0003      	movs	r3, r0
 80027a2:	0019      	movs	r1, r3
 80027a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002824 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	0a1b      	lsrs	r3, r3, #8
 80027aa:	227f      	movs	r2, #127	@ 0x7f
 80027ac:	4013      	ands	r3, r2
 80027ae:	434b      	muls	r3, r1
 80027b0:	617b      	str	r3, [r7, #20]
        break;
 80027b2:	e00d      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	481c      	ldr	r0, [pc, #112]	@ (8002828 <HAL_RCC_GetSysClockFreq+0xfc>)
 80027b8:	f7fd fca2 	bl	8000100 <__udivsi3>
 80027bc:	0003      	movs	r3, r0
 80027be:	0019      	movs	r1, r3
 80027c0:	4b18      	ldr	r3, [pc, #96]	@ (8002824 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	0a1b      	lsrs	r3, r3, #8
 80027c6:	227f      	movs	r2, #127	@ 0x7f
 80027c8:	4013      	ands	r3, r2
 80027ca:	434b      	muls	r3, r1
 80027cc:	617b      	str	r3, [r7, #20]
        break;
 80027ce:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80027d0:	4b14      	ldr	r3, [pc, #80]	@ (8002824 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	0f5b      	lsrs	r3, r3, #29
 80027d6:	2207      	movs	r2, #7
 80027d8:	4013      	ands	r3, r2
 80027da:	3301      	adds	r3, #1
 80027dc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	6978      	ldr	r0, [r7, #20]
 80027e2:	f7fd fc8d 	bl	8000100 <__udivsi3>
 80027e6:	0003      	movs	r3, r0
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	e015      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80027ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002824 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2238      	movs	r2, #56	@ 0x38
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d103      	bne.n	8002800 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80027f8:	2380      	movs	r3, #128	@ 0x80
 80027fa:	021b      	lsls	r3, r3, #8
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	e00b      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002800:	4b08      	ldr	r3, [pc, #32]	@ (8002824 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2238      	movs	r2, #56	@ 0x38
 8002806:	4013      	ands	r3, r2
 8002808:	2b18      	cmp	r3, #24
 800280a:	d103      	bne.n	8002814 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800280c:	23fa      	movs	r3, #250	@ 0xfa
 800280e:	01db      	lsls	r3, r3, #7
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	e001      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002818:	693b      	ldr	r3, [r7, #16]
}
 800281a:	0018      	movs	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	b006      	add	sp, #24
 8002820:	bd80      	pop	{r7, pc}
 8002822:	46c0      	nop			@ (mov r8, r8)
 8002824:	40021000 	.word	0x40021000
 8002828:	00f42400 	.word	0x00f42400
 800282c:	007a1200 	.word	0x007a1200

08002830 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002834:	4b02      	ldr	r3, [pc, #8]	@ (8002840 <HAL_RCC_GetHCLKFreq+0x10>)
 8002836:	681b      	ldr	r3, [r3, #0]
}
 8002838:	0018      	movs	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	46c0      	nop			@ (mov r8, r8)
 8002840:	20000000 	.word	0x20000000

08002844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002844:	b5b0      	push	{r4, r5, r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002848:	f7ff fff2 	bl	8002830 <HAL_RCC_GetHCLKFreq>
 800284c:	0004      	movs	r4, r0
 800284e:	f7ff fb49 	bl	8001ee4 <LL_RCC_GetAPB1Prescaler>
 8002852:	0003      	movs	r3, r0
 8002854:	0b1a      	lsrs	r2, r3, #12
 8002856:	4b05      	ldr	r3, [pc, #20]	@ (800286c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002858:	0092      	lsls	r2, r2, #2
 800285a:	58d3      	ldr	r3, [r2, r3]
 800285c:	221f      	movs	r2, #31
 800285e:	4013      	ands	r3, r2
 8002860:	40dc      	lsrs	r4, r3
 8002862:	0023      	movs	r3, r4
}
 8002864:	0018      	movs	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	bdb0      	pop	{r4, r5, r7, pc}
 800286a:	46c0      	nop			@ (mov r8, r8)
 800286c:	080048a8 	.word	0x080048a8

08002870 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002878:	2313      	movs	r3, #19
 800287a:	18fb      	adds	r3, r7, r3
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002880:	2312      	movs	r3, #18
 8002882:	18fb      	adds	r3, r7, r3
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	2380      	movs	r3, #128	@ 0x80
 800288e:	029b      	lsls	r3, r3, #10
 8002890:	4013      	ands	r3, r2
 8002892:	d100      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002894:	e0a3      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002896:	2011      	movs	r0, #17
 8002898:	183b      	adds	r3, r7, r0
 800289a:	2200      	movs	r2, #0
 800289c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800289e:	4b7f      	ldr	r3, [pc, #508]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028a2:	2380      	movs	r3, #128	@ 0x80
 80028a4:	055b      	lsls	r3, r3, #21
 80028a6:	4013      	ands	r3, r2
 80028a8:	d110      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028aa:	4b7c      	ldr	r3, [pc, #496]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028ae:	4b7b      	ldr	r3, [pc, #492]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028b0:	2180      	movs	r1, #128	@ 0x80
 80028b2:	0549      	lsls	r1, r1, #21
 80028b4:	430a      	orrs	r2, r1
 80028b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80028b8:	4b78      	ldr	r3, [pc, #480]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028bc:	2380      	movs	r3, #128	@ 0x80
 80028be:	055b      	lsls	r3, r3, #21
 80028c0:	4013      	ands	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028c6:	183b      	adds	r3, r7, r0
 80028c8:	2201      	movs	r2, #1
 80028ca:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028cc:	4b74      	ldr	r3, [pc, #464]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4b73      	ldr	r3, [pc, #460]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028d2:	2180      	movs	r1, #128	@ 0x80
 80028d4:	0049      	lsls	r1, r1, #1
 80028d6:	430a      	orrs	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028da:	f7fe fc43 	bl	8001164 <HAL_GetTick>
 80028de:	0003      	movs	r3, r0
 80028e0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028e2:	e00b      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e4:	f7fe fc3e 	bl	8001164 <HAL_GetTick>
 80028e8:	0002      	movs	r2, r0
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d904      	bls.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80028f2:	2313      	movs	r3, #19
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	2203      	movs	r2, #3
 80028f8:	701a      	strb	r2, [r3, #0]
        break;
 80028fa:	e005      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028fc:	4b68      	ldr	r3, [pc, #416]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	2380      	movs	r3, #128	@ 0x80
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	4013      	ands	r3, r2
 8002906:	d0ed      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002908:	2313      	movs	r3, #19
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d154      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002912:	4b62      	ldr	r3, [pc, #392]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002914:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002916:	23c0      	movs	r3, #192	@ 0xc0
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4013      	ands	r3, r2
 800291c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d019      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	429a      	cmp	r2, r3
 800292c:	d014      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800292e:	4b5b      	ldr	r3, [pc, #364]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002932:	4a5c      	ldr	r2, [pc, #368]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002934:	4013      	ands	r3, r2
 8002936:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002938:	4b58      	ldr	r3, [pc, #352]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800293a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800293c:	4b57      	ldr	r3, [pc, #348]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800293e:	2180      	movs	r1, #128	@ 0x80
 8002940:	0249      	lsls	r1, r1, #9
 8002942:	430a      	orrs	r2, r1
 8002944:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002946:	4b55      	ldr	r3, [pc, #340]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002948:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800294a:	4b54      	ldr	r3, [pc, #336]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800294c:	4956      	ldr	r1, [pc, #344]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800294e:	400a      	ands	r2, r1
 8002950:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002952:	4b52      	ldr	r3, [pc, #328]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	2201      	movs	r2, #1
 800295c:	4013      	ands	r3, r2
 800295e:	d016      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe fc00 	bl	8001164 <HAL_GetTick>
 8002964:	0003      	movs	r3, r0
 8002966:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002968:	e00c      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296a:	f7fe fbfb 	bl	8001164 <HAL_GetTick>
 800296e:	0002      	movs	r2, r0
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	4a4d      	ldr	r2, [pc, #308]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d904      	bls.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800297a:	2313      	movs	r3, #19
 800297c:	18fb      	adds	r3, r7, r3
 800297e:	2203      	movs	r2, #3
 8002980:	701a      	strb	r2, [r3, #0]
            break;
 8002982:	e004      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002984:	4b45      	ldr	r3, [pc, #276]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002988:	2202      	movs	r2, #2
 800298a:	4013      	ands	r3, r2
 800298c:	d0ed      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800298e:	2313      	movs	r3, #19
 8002990:	18fb      	adds	r3, r7, r3
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10a      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002998:	4b40      	ldr	r3, [pc, #256]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800299a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299c:	4a41      	ldr	r2, [pc, #260]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800299e:	4013      	ands	r3, r2
 80029a0:	0019      	movs	r1, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695a      	ldr	r2, [r3, #20]
 80029a6:	4b3d      	ldr	r3, [pc, #244]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029a8:	430a      	orrs	r2, r1
 80029aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029ac:	e00c      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029ae:	2312      	movs	r3, #18
 80029b0:	18fb      	adds	r3, r7, r3
 80029b2:	2213      	movs	r2, #19
 80029b4:	18ba      	adds	r2, r7, r2
 80029b6:	7812      	ldrb	r2, [r2, #0]
 80029b8:	701a      	strb	r2, [r3, #0]
 80029ba:	e005      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029bc:	2312      	movs	r3, #18
 80029be:	18fb      	adds	r3, r7, r3
 80029c0:	2213      	movs	r2, #19
 80029c2:	18ba      	adds	r2, r7, r2
 80029c4:	7812      	ldrb	r2, [r2, #0]
 80029c6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029c8:	2311      	movs	r3, #17
 80029ca:	18fb      	adds	r3, r7, r3
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d105      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d2:	4b32      	ldr	r3, [pc, #200]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029d6:	4b31      	ldr	r3, [pc, #196]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029d8:	4935      	ldr	r1, [pc, #212]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029da:	400a      	ands	r2, r1
 80029dc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2201      	movs	r2, #1
 80029e4:	4013      	ands	r3, r2
 80029e6:	d009      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029e8:	4b2c      	ldr	r3, [pc, #176]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ec:	2203      	movs	r2, #3
 80029ee:	4393      	bics	r3, r2
 80029f0:	0019      	movs	r1, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	4b29      	ldr	r3, [pc, #164]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029f8:	430a      	orrs	r2, r1
 80029fa:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2220      	movs	r2, #32
 8002a02:	4013      	ands	r3, r2
 8002a04:	d009      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a06:	4b25      	ldr	r3, [pc, #148]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a0a:	4a2a      	ldr	r2, [pc, #168]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	0019      	movs	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	4b21      	ldr	r3, [pc, #132]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a16:	430a      	orrs	r2, r1
 8002a18:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	2380      	movs	r3, #128	@ 0x80
 8002a20:	01db      	lsls	r3, r3, #7
 8002a22:	4013      	ands	r3, r2
 8002a24:	d015      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a26:	4b1d      	ldr	r3, [pc, #116]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	0899      	lsrs	r1, r3, #2
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691a      	ldr	r2, [r3, #16]
 8002a32:	4b1a      	ldr	r3, [pc, #104]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a34:	430a      	orrs	r2, r1
 8002a36:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	2380      	movs	r3, #128	@ 0x80
 8002a3e:	05db      	lsls	r3, r3, #23
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d106      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a44:	4b15      	ldr	r3, [pc, #84]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	4b14      	ldr	r3, [pc, #80]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a4a:	2180      	movs	r1, #128	@ 0x80
 8002a4c:	0249      	lsls	r1, r1, #9
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	2380      	movs	r3, #128	@ 0x80
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d016      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a62:	4a15      	ldr	r2, [pc, #84]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	0019      	movs	r1, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	2380      	movs	r3, #128	@ 0x80
 8002a78:	01db      	lsls	r3, r3, #7
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d106      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a7e:	4b07      	ldr	r3, [pc, #28]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a84:	2180      	movs	r1, #128	@ 0x80
 8002a86:	0249      	lsls	r1, r1, #9
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002a8c:	2312      	movs	r3, #18
 8002a8e:	18fb      	adds	r3, r7, r3
 8002a90:	781b      	ldrb	r3, [r3, #0]
}
 8002a92:	0018      	movs	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	b006      	add	sp, #24
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	46c0      	nop			@ (mov r8, r8)
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40007000 	.word	0x40007000
 8002aa4:	fffffcff 	.word	0xfffffcff
 8002aa8:	fffeffff 	.word	0xfffeffff
 8002aac:	00001388 	.word	0x00001388
 8002ab0:	efffffff 	.word	0xefffffff
 8002ab4:	ffffcfff 	.word	0xffffcfff
 8002ab8:	ffff3fff 	.word	0xffff3fff

08002abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e04a      	b.n	8002b64 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	223d      	movs	r2, #61	@ 0x3d
 8002ad2:	5c9b      	ldrb	r3, [r3, r2]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d107      	bne.n	8002aea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	223c      	movs	r2, #60	@ 0x3c
 8002ade:	2100      	movs	r1, #0
 8002ae0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f7fe f981 	bl	8000dec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	223d      	movs	r2, #61	@ 0x3d
 8002aee:	2102      	movs	r1, #2
 8002af0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3304      	adds	r3, #4
 8002afa:	0019      	movs	r1, r3
 8002afc:	0010      	movs	r0, r2
 8002afe:	f000 fe79 	bl	80037f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2248      	movs	r2, #72	@ 0x48
 8002b06:	2101      	movs	r1, #1
 8002b08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	223e      	movs	r2, #62	@ 0x3e
 8002b0e:	2101      	movs	r1, #1
 8002b10:	5499      	strb	r1, [r3, r2]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	223f      	movs	r2, #63	@ 0x3f
 8002b16:	2101      	movs	r1, #1
 8002b18:	5499      	strb	r1, [r3, r2]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2240      	movs	r2, #64	@ 0x40
 8002b1e:	2101      	movs	r1, #1
 8002b20:	5499      	strb	r1, [r3, r2]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2241      	movs	r2, #65	@ 0x41
 8002b26:	2101      	movs	r1, #1
 8002b28:	5499      	strb	r1, [r3, r2]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2242      	movs	r2, #66	@ 0x42
 8002b2e:	2101      	movs	r1, #1
 8002b30:	5499      	strb	r1, [r3, r2]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2243      	movs	r2, #67	@ 0x43
 8002b36:	2101      	movs	r1, #1
 8002b38:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2244      	movs	r2, #68	@ 0x44
 8002b3e:	2101      	movs	r1, #1
 8002b40:	5499      	strb	r1, [r3, r2]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2245      	movs	r2, #69	@ 0x45
 8002b46:	2101      	movs	r1, #1
 8002b48:	5499      	strb	r1, [r3, r2]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2246      	movs	r2, #70	@ 0x46
 8002b4e:	2101      	movs	r1, #1
 8002b50:	5499      	strb	r1, [r3, r2]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2247      	movs	r2, #71	@ 0x47
 8002b56:	2101      	movs	r1, #1
 8002b58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	223d      	movs	r2, #61	@ 0x3d
 8002b5e:	2101      	movs	r1, #1
 8002b60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b002      	add	sp, #8
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e04a      	b.n	8002c14 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	223d      	movs	r2, #61	@ 0x3d
 8002b82:	5c9b      	ldrb	r3, [r3, r2]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d107      	bne.n	8002b9a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	223c      	movs	r2, #60	@ 0x3c
 8002b8e:	2100      	movs	r1, #0
 8002b90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	0018      	movs	r0, r3
 8002b96:	f000 f841 	bl	8002c1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	223d      	movs	r2, #61	@ 0x3d
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3304      	adds	r3, #4
 8002baa:	0019      	movs	r1, r3
 8002bac:	0010      	movs	r0, r2
 8002bae:	f000 fe21 	bl	80037f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2248      	movs	r2, #72	@ 0x48
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	223e      	movs	r2, #62	@ 0x3e
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	5499      	strb	r1, [r3, r2]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	223f      	movs	r2, #63	@ 0x3f
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	5499      	strb	r1, [r3, r2]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2240      	movs	r2, #64	@ 0x40
 8002bce:	2101      	movs	r1, #1
 8002bd0:	5499      	strb	r1, [r3, r2]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2241      	movs	r2, #65	@ 0x41
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	5499      	strb	r1, [r3, r2]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2242      	movs	r2, #66	@ 0x42
 8002bde:	2101      	movs	r1, #1
 8002be0:	5499      	strb	r1, [r3, r2]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2243      	movs	r2, #67	@ 0x43
 8002be6:	2101      	movs	r1, #1
 8002be8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2244      	movs	r2, #68	@ 0x44
 8002bee:	2101      	movs	r1, #1
 8002bf0:	5499      	strb	r1, [r3, r2]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2245      	movs	r2, #69	@ 0x45
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	5499      	strb	r1, [r3, r2]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2246      	movs	r2, #70	@ 0x46
 8002bfe:	2101      	movs	r1, #1
 8002c00:	5499      	strb	r1, [r3, r2]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2247      	movs	r2, #71	@ 0x47
 8002c06:	2101      	movs	r1, #1
 8002c08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	223d      	movs	r2, #61	@ 0x3d
 8002c0e:	2101      	movs	r1, #1
 8002c10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	0018      	movs	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b002      	add	sp, #8
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c24:	46c0      	nop			@ (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b002      	add	sp, #8
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	001a      	movs	r2, r3
 8002c3a:	1cbb      	adds	r3, r7, #2
 8002c3c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c3e:	2317      	movs	r3, #23
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d108      	bne.n	8002c5e <HAL_TIM_PWM_Start_DMA+0x32>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	223e      	movs	r2, #62	@ 0x3e
 8002c50:	5c9b      	ldrb	r3, [r3, r2]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	3b02      	subs	r3, #2
 8002c56:	425a      	negs	r2, r3
 8002c58:	4153      	adcs	r3, r2
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	e037      	b.n	8002cce <HAL_TIM_PWM_Start_DMA+0xa2>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d108      	bne.n	8002c76 <HAL_TIM_PWM_Start_DMA+0x4a>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	223f      	movs	r2, #63	@ 0x3f
 8002c68:	5c9b      	ldrb	r3, [r3, r2]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	3b02      	subs	r3, #2
 8002c6e:	425a      	negs	r2, r3
 8002c70:	4153      	adcs	r3, r2
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	e02b      	b.n	8002cce <HAL_TIM_PWM_Start_DMA+0xa2>
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d108      	bne.n	8002c8e <HAL_TIM_PWM_Start_DMA+0x62>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2240      	movs	r2, #64	@ 0x40
 8002c80:	5c9b      	ldrb	r3, [r3, r2]
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	3b02      	subs	r3, #2
 8002c86:	425a      	negs	r2, r3
 8002c88:	4153      	adcs	r3, r2
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	e01f      	b.n	8002cce <HAL_TIM_PWM_Start_DMA+0xa2>
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b0c      	cmp	r3, #12
 8002c92:	d108      	bne.n	8002ca6 <HAL_TIM_PWM_Start_DMA+0x7a>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2241      	movs	r2, #65	@ 0x41
 8002c98:	5c9b      	ldrb	r3, [r3, r2]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	3b02      	subs	r3, #2
 8002c9e:	425a      	negs	r2, r3
 8002ca0:	4153      	adcs	r3, r2
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	e013      	b.n	8002cce <HAL_TIM_PWM_Start_DMA+0xa2>
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2b10      	cmp	r3, #16
 8002caa:	d108      	bne.n	8002cbe <HAL_TIM_PWM_Start_DMA+0x92>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2242      	movs	r2, #66	@ 0x42
 8002cb0:	5c9b      	ldrb	r3, [r3, r2]
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	3b02      	subs	r3, #2
 8002cb6:	425a      	negs	r2, r3
 8002cb8:	4153      	adcs	r3, r2
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	e007      	b.n	8002cce <HAL_TIM_PWM_Start_DMA+0xa2>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2243      	movs	r2, #67	@ 0x43
 8002cc2:	5c9b      	ldrb	r3, [r3, r2]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	3b02      	subs	r3, #2
 8002cc8:	425a      	negs	r2, r3
 8002cca:	4153      	adcs	r3, r2
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e183      	b.n	8002fde <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d108      	bne.n	8002cee <HAL_TIM_PWM_Start_DMA+0xc2>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	223e      	movs	r2, #62	@ 0x3e
 8002ce0:	5c9b      	ldrb	r3, [r3, r2]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	425a      	negs	r2, r3
 8002ce8:	4153      	adcs	r3, r2
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	e037      	b.n	8002d5e <HAL_TIM_PWM_Start_DMA+0x132>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d108      	bne.n	8002d06 <HAL_TIM_PWM_Start_DMA+0xda>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	223f      	movs	r2, #63	@ 0x3f
 8002cf8:	5c9b      	ldrb	r3, [r3, r2]
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	425a      	negs	r2, r3
 8002d00:	4153      	adcs	r3, r2
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	e02b      	b.n	8002d5e <HAL_TIM_PWM_Start_DMA+0x132>
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d108      	bne.n	8002d1e <HAL_TIM_PWM_Start_DMA+0xf2>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2240      	movs	r2, #64	@ 0x40
 8002d10:	5c9b      	ldrb	r3, [r3, r2]
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	425a      	negs	r2, r3
 8002d18:	4153      	adcs	r3, r2
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	e01f      	b.n	8002d5e <HAL_TIM_PWM_Start_DMA+0x132>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b0c      	cmp	r3, #12
 8002d22:	d108      	bne.n	8002d36 <HAL_TIM_PWM_Start_DMA+0x10a>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2241      	movs	r2, #65	@ 0x41
 8002d28:	5c9b      	ldrb	r3, [r3, r2]
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	425a      	negs	r2, r3
 8002d30:	4153      	adcs	r3, r2
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	e013      	b.n	8002d5e <HAL_TIM_PWM_Start_DMA+0x132>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b10      	cmp	r3, #16
 8002d3a:	d108      	bne.n	8002d4e <HAL_TIM_PWM_Start_DMA+0x122>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2242      	movs	r2, #66	@ 0x42
 8002d40:	5c9b      	ldrb	r3, [r3, r2]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	3b01      	subs	r3, #1
 8002d46:	425a      	negs	r2, r3
 8002d48:	4153      	adcs	r3, r2
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	e007      	b.n	8002d5e <HAL_TIM_PWM_Start_DMA+0x132>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2243      	movs	r2, #67	@ 0x43
 8002d52:	5c9b      	ldrb	r3, [r3, r2]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	425a      	negs	r2, r3
 8002d5a:	4153      	adcs	r3, r2
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d035      	beq.n	8002dce <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_TIM_PWM_Start_DMA+0x144>
 8002d68:	1cbb      	adds	r3, r7, #2
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e134      	b.n	8002fde <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d104      	bne.n	8002d84 <HAL_TIM_PWM_Start_DMA+0x158>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	223e      	movs	r2, #62	@ 0x3e
 8002d7e:	2102      	movs	r1, #2
 8002d80:	5499      	strb	r1, [r3, r2]
 8002d82:	e026      	b.n	8002dd2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d104      	bne.n	8002d94 <HAL_TIM_PWM_Start_DMA+0x168>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	223f      	movs	r2, #63	@ 0x3f
 8002d8e:	2102      	movs	r1, #2
 8002d90:	5499      	strb	r1, [r3, r2]
 8002d92:	e01e      	b.n	8002dd2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d104      	bne.n	8002da4 <HAL_TIM_PWM_Start_DMA+0x178>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2240      	movs	r2, #64	@ 0x40
 8002d9e:	2102      	movs	r1, #2
 8002da0:	5499      	strb	r1, [r3, r2]
 8002da2:	e016      	b.n	8002dd2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2b0c      	cmp	r3, #12
 8002da8:	d104      	bne.n	8002db4 <HAL_TIM_PWM_Start_DMA+0x188>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2241      	movs	r2, #65	@ 0x41
 8002dae:	2102      	movs	r1, #2
 8002db0:	5499      	strb	r1, [r3, r2]
 8002db2:	e00e      	b.n	8002dd2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b10      	cmp	r3, #16
 8002db8:	d104      	bne.n	8002dc4 <HAL_TIM_PWM_Start_DMA+0x198>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2242      	movs	r2, #66	@ 0x42
 8002dbe:	2102      	movs	r1, #2
 8002dc0:	5499      	strb	r1, [r3, r2]
 8002dc2:	e006      	b.n	8002dd2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2243      	movs	r2, #67	@ 0x43
 8002dc8:	2102      	movs	r1, #2
 8002dca:	5499      	strb	r1, [r3, r2]
 8002dcc:	e001      	b.n	8002dd2 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e105      	b.n	8002fde <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2b0c      	cmp	r3, #12
 8002dd6:	d100      	bne.n	8002dda <HAL_TIM_PWM_Start_DMA+0x1ae>
 8002dd8:	e080      	b.n	8002edc <HAL_TIM_PWM_Start_DMA+0x2b0>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b0c      	cmp	r3, #12
 8002dde:	d900      	bls.n	8002de2 <HAL_TIM_PWM_Start_DMA+0x1b6>
 8002de0:	e0a1      	b.n	8002f26 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d054      	beq.n	8002e92 <HAL_TIM_PWM_Start_DMA+0x266>
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d900      	bls.n	8002df0 <HAL_TIM_PWM_Start_DMA+0x1c4>
 8002dee:	e09a      	b.n	8002f26 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_TIM_PWM_Start_DMA+0x1d2>
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d025      	beq.n	8002e48 <HAL_TIM_PWM_Start_DMA+0x21c>
 8002dfc:	e093      	b.n	8002f26 <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e02:	4a79      	ldr	r2, [pc, #484]	@ (8002fe8 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002e04:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	4a78      	ldr	r2, [pc, #480]	@ (8002fec <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002e0c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e12:	4a77      	ldr	r2, [pc, #476]	@ (8002ff0 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002e14:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3334      	adds	r3, #52	@ 0x34
 8002e22:	001a      	movs	r2, r3
 8002e24:	1cbb      	adds	r3, r7, #2
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	f7fe fb0e 	bl	8001448 <HAL_DMA_Start_IT>
 8002e2c:	1e03      	subs	r3, r0, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0d4      	b.n	8002fde <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2180      	movs	r1, #128	@ 0x80
 8002e40:	0089      	lsls	r1, r1, #2
 8002e42:	430a      	orrs	r2, r1
 8002e44:	60da      	str	r2, [r3, #12]
      break;
 8002e46:	e073      	b.n	8002f30 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4c:	4a66      	ldr	r2, [pc, #408]	@ (8002fe8 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002e4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e54:	4a65      	ldr	r2, [pc, #404]	@ (8002fec <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002e56:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5c:	4a64      	ldr	r2, [pc, #400]	@ (8002ff0 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002e5e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	3338      	adds	r3, #56	@ 0x38
 8002e6c:	001a      	movs	r2, r3
 8002e6e:	1cbb      	adds	r3, r7, #2
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	f7fe fae9 	bl	8001448 <HAL_DMA_Start_IT>
 8002e76:	1e03      	subs	r3, r0, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e0af      	b.n	8002fde <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2180      	movs	r1, #128	@ 0x80
 8002e8a:	00c9      	lsls	r1, r1, #3
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	60da      	str	r2, [r3, #12]
      break;
 8002e90:	e04e      	b.n	8002f30 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e96:	4a54      	ldr	r2, [pc, #336]	@ (8002fe8 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002e98:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9e:	4a53      	ldr	r2, [pc, #332]	@ (8002fec <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002ea0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea6:	4a52      	ldr	r2, [pc, #328]	@ (8002ff0 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002ea8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	333c      	adds	r3, #60	@ 0x3c
 8002eb6:	001a      	movs	r2, r3
 8002eb8:	1cbb      	adds	r3, r7, #2
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	f7fe fac4 	bl	8001448 <HAL_DMA_Start_IT>
 8002ec0:	1e03      	subs	r3, r0, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e08a      	b.n	8002fde <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2180      	movs	r1, #128	@ 0x80
 8002ed4:	0109      	lsls	r1, r1, #4
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	60da      	str	r2, [r3, #12]
      break;
 8002eda:	e029      	b.n	8002f30 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee0:	4a41      	ldr	r2, [pc, #260]	@ (8002fe8 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee8:	4a40      	ldr	r2, [pc, #256]	@ (8002fec <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002eea:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef0:	4a3f      	ldr	r2, [pc, #252]	@ (8002ff0 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002ef2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	3340      	adds	r3, #64	@ 0x40
 8002f00:	001a      	movs	r2, r3
 8002f02:	1cbb      	adds	r3, r7, #2
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	f7fe fa9f 	bl	8001448 <HAL_DMA_Start_IT>
 8002f0a:	1e03      	subs	r3, r0, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e065      	b.n	8002fde <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2180      	movs	r1, #128	@ 0x80
 8002f1e:	0149      	lsls	r1, r1, #5
 8002f20:	430a      	orrs	r2, r1
 8002f22:	60da      	str	r2, [r3, #12]
      break;
 8002f24:	e004      	b.n	8002f30 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8002f26:	2317      	movs	r3, #23
 8002f28:	18fb      	adds	r3, r7, r3
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
      break;
 8002f2e:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002f30:	2317      	movs	r3, #23
 8002f32:	18fb      	adds	r3, r7, r3
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d14e      	bne.n	8002fd8 <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68b9      	ldr	r1, [r7, #8]
 8002f40:	2201      	movs	r2, #1
 8002f42:	0018      	movs	r0, r3
 8002f44:	f000 ff6c 	bl	8003e20 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a29      	ldr	r2, [pc, #164]	@ (8002ff4 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d009      	beq.n	8002f66 <HAL_TIM_PWM_Start_DMA+0x33a>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a28      	ldr	r2, [pc, #160]	@ (8002ff8 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d004      	beq.n	8002f66 <HAL_TIM_PWM_Start_DMA+0x33a>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a26      	ldr	r2, [pc, #152]	@ (8002ffc <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d101      	bne.n	8002f6a <HAL_TIM_PWM_Start_DMA+0x33e>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_TIM_PWM_Start_DMA+0x340>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d008      	beq.n	8002f82 <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2180      	movs	r1, #128	@ 0x80
 8002f7c:	0209      	lsls	r1, r1, #8
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a1b      	ldr	r2, [pc, #108]	@ (8002ff4 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d004      	beq.n	8002f96 <HAL_TIM_PWM_Start_DMA+0x36a>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a1b      	ldr	r2, [pc, #108]	@ (8003000 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d116      	bne.n	8002fc4 <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	4a19      	ldr	r2, [pc, #100]	@ (8003004 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b06      	cmp	r3, #6
 8002fa6:	d016      	beq.n	8002fd6 <HAL_TIM_PWM_Start_DMA+0x3aa>
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	2380      	movs	r3, #128	@ 0x80
 8002fac:	025b      	lsls	r3, r3, #9
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d011      	beq.n	8002fd6 <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc2:	e008      	b.n	8002fd6 <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2101      	movs	r1, #1
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	e000      	b.n	8002fd8 <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd6:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8002fd8:	2317      	movs	r3, #23
 8002fda:	18fb      	adds	r3, r7, r3
 8002fdc:	781b      	ldrb	r3, [r3, #0]
}
 8002fde:	0018      	movs	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	b006      	add	sp, #24
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	46c0      	nop			@ (mov r8, r8)
 8002fe8:	080036e1 	.word	0x080036e1
 8002fec:	0800378b 	.word	0x0800378b
 8002ff0:	0800364d 	.word	0x0800364d
 8002ff4:	40012c00 	.word	0x40012c00
 8002ff8:	40014400 	.word	0x40014400
 8002ffc:	40014800 	.word	0x40014800
 8003000:	40000400 	.word	0x40000400
 8003004:	00010007 	.word	0x00010007

08003008 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003012:	230f      	movs	r3, #15
 8003014:	18fb      	adds	r3, r7, r3
 8003016:	2200      	movs	r2, #0
 8003018:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2b0c      	cmp	r3, #12
 800301e:	d039      	beq.n	8003094 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	2b0c      	cmp	r3, #12
 8003024:	d844      	bhi.n	80030b0 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b08      	cmp	r3, #8
 800302a:	d025      	beq.n	8003078 <HAL_TIM_PWM_Stop_DMA+0x70>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2b08      	cmp	r3, #8
 8003030:	d83e      	bhi.n	80030b0 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_TIM_PWM_Stop_DMA+0x38>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b04      	cmp	r3, #4
 800303c:	d00e      	beq.n	800305c <HAL_TIM_PWM_Stop_DMA+0x54>
 800303e:	e037      	b.n	80030b0 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	495a      	ldr	r1, [pc, #360]	@ (80031b4 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 800304c:	400a      	ands	r2, r1
 800304e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003054:	0018      	movs	r0, r3
 8003056:	f7fe fa7d 	bl	8001554 <HAL_DMA_Abort_IT>
      break;
 800305a:	e02e      	b.n	80030ba <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4954      	ldr	r1, [pc, #336]	@ (80031b8 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8003068:	400a      	ands	r2, r1
 800306a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003070:	0018      	movs	r0, r3
 8003072:	f7fe fa6f 	bl	8001554 <HAL_DMA_Abort_IT>
      break;
 8003076:	e020      	b.n	80030ba <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	494e      	ldr	r1, [pc, #312]	@ (80031bc <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8003084:	400a      	ands	r2, r1
 8003086:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308c:	0018      	movs	r0, r3
 800308e:	f7fe fa61 	bl	8001554 <HAL_DMA_Abort_IT>
      break;
 8003092:	e012      	b.n	80030ba <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4948      	ldr	r1, [pc, #288]	@ (80031c0 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 80030a0:	400a      	ands	r2, r1
 80030a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a8:	0018      	movs	r0, r3
 80030aa:	f7fe fa53 	bl	8001554 <HAL_DMA_Abort_IT>
      break;
 80030ae:	e004      	b.n	80030ba <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 80030b0:	230f      	movs	r3, #15
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
      break;
 80030b8:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80030ba:	230f      	movs	r3, #15
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d000      	beq.n	80030c6 <HAL_TIM_PWM_Stop_DMA+0xbe>
 80030c4:	e06e      	b.n	80031a4 <HAL_TIM_PWM_Stop_DMA+0x19c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6839      	ldr	r1, [r7, #0]
 80030cc:	2200      	movs	r2, #0
 80030ce:	0018      	movs	r0, r3
 80030d0:	f000 fea6 	bl	8003e20 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a3a      	ldr	r2, [pc, #232]	@ (80031c4 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d009      	beq.n	80030f2 <HAL_TIM_PWM_Stop_DMA+0xea>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a39      	ldr	r2, [pc, #228]	@ (80031c8 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d004      	beq.n	80030f2 <HAL_TIM_PWM_Stop_DMA+0xea>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a37      	ldr	r2, [pc, #220]	@ (80031cc <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d101      	bne.n	80030f6 <HAL_TIM_PWM_Stop_DMA+0xee>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <HAL_TIM_PWM_Stop_DMA+0xf0>
 80030f6:	2300      	movs	r3, #0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d013      	beq.n	8003124 <HAL_TIM_PWM_Stop_DMA+0x11c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	4a33      	ldr	r2, [pc, #204]	@ (80031d0 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8003104:	4013      	ands	r3, r2
 8003106:	d10d      	bne.n	8003124 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	4a31      	ldr	r2, [pc, #196]	@ (80031d4 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8003110:	4013      	ands	r3, r2
 8003112:	d107      	bne.n	8003124 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	492e      	ldr	r1, [pc, #184]	@ (80031d8 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8003120:	400a      	ands	r2, r1
 8003122:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	4a29      	ldr	r2, [pc, #164]	@ (80031d0 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 800312c:	4013      	ands	r3, r2
 800312e:	d10d      	bne.n	800314c <HAL_TIM_PWM_Stop_DMA+0x144>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	4a27      	ldr	r2, [pc, #156]	@ (80031d4 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8003138:	4013      	ands	r3, r2
 800313a:	d107      	bne.n	800314c <HAL_TIM_PWM_Stop_DMA+0x144>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2101      	movs	r1, #1
 8003148:	438a      	bics	r2, r1
 800314a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d104      	bne.n	800315c <HAL_TIM_PWM_Stop_DMA+0x154>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	223e      	movs	r2, #62	@ 0x3e
 8003156:	2101      	movs	r1, #1
 8003158:	5499      	strb	r1, [r3, r2]
 800315a:	e023      	b.n	80031a4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	2b04      	cmp	r3, #4
 8003160:	d104      	bne.n	800316c <HAL_TIM_PWM_Stop_DMA+0x164>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	223f      	movs	r2, #63	@ 0x3f
 8003166:	2101      	movs	r1, #1
 8003168:	5499      	strb	r1, [r3, r2]
 800316a:	e01b      	b.n	80031a4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2b08      	cmp	r3, #8
 8003170:	d104      	bne.n	800317c <HAL_TIM_PWM_Stop_DMA+0x174>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2240      	movs	r2, #64	@ 0x40
 8003176:	2101      	movs	r1, #1
 8003178:	5499      	strb	r1, [r3, r2]
 800317a:	e013      	b.n	80031a4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2b0c      	cmp	r3, #12
 8003180:	d104      	bne.n	800318c <HAL_TIM_PWM_Stop_DMA+0x184>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2241      	movs	r2, #65	@ 0x41
 8003186:	2101      	movs	r1, #1
 8003188:	5499      	strb	r1, [r3, r2]
 800318a:	e00b      	b.n	80031a4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b10      	cmp	r3, #16
 8003190:	d104      	bne.n	800319c <HAL_TIM_PWM_Stop_DMA+0x194>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2242      	movs	r2, #66	@ 0x42
 8003196:	2101      	movs	r1, #1
 8003198:	5499      	strb	r1, [r3, r2]
 800319a:	e003      	b.n	80031a4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2243      	movs	r2, #67	@ 0x43
 80031a0:	2101      	movs	r1, #1
 80031a2:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80031a4:	230f      	movs	r3, #15
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	781b      	ldrb	r3, [r3, #0]
}
 80031aa:	0018      	movs	r0, r3
 80031ac:	46bd      	mov	sp, r7
 80031ae:	b004      	add	sp, #16
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	46c0      	nop			@ (mov r8, r8)
 80031b4:	fffffdff 	.word	0xfffffdff
 80031b8:	fffffbff 	.word	0xfffffbff
 80031bc:	fffff7ff 	.word	0xfffff7ff
 80031c0:	ffffefff 	.word	0xffffefff
 80031c4:	40012c00 	.word	0x40012c00
 80031c8:	40014400 	.word	0x40014400
 80031cc:	40014800 	.word	0x40014800
 80031d0:	00001111 	.word	0x00001111
 80031d4:	00000444 	.word	0x00000444
 80031d8:	ffff7fff 	.word	0xffff7fff

080031dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2202      	movs	r2, #2
 80031f8:	4013      	ands	r3, r2
 80031fa:	d021      	beq.n	8003240 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2202      	movs	r2, #2
 8003200:	4013      	ands	r3, r2
 8003202:	d01d      	beq.n	8003240 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2203      	movs	r2, #3
 800320a:	4252      	negs	r2, r2
 800320c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	2203      	movs	r2, #3
 800321c:	4013      	ands	r3, r2
 800321e:	d004      	beq.n	800322a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	0018      	movs	r0, r3
 8003224:	f000 f9f2 	bl	800360c <HAL_TIM_IC_CaptureCallback>
 8003228:	e007      	b.n	800323a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	0018      	movs	r0, r3
 800322e:	f000 f9e5 	bl	80035fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	0018      	movs	r0, r3
 8003236:	f7fd f929 	bl	800048c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2204      	movs	r2, #4
 8003244:	4013      	ands	r3, r2
 8003246:	d022      	beq.n	800328e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2204      	movs	r2, #4
 800324c:	4013      	ands	r3, r2
 800324e:	d01e      	beq.n	800328e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2205      	movs	r2, #5
 8003256:	4252      	negs	r2, r2
 8003258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2202      	movs	r2, #2
 800325e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699a      	ldr	r2, [r3, #24]
 8003266:	23c0      	movs	r3, #192	@ 0xc0
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4013      	ands	r3, r2
 800326c:	d004      	beq.n	8003278 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	0018      	movs	r0, r3
 8003272:	f000 f9cb 	bl	800360c <HAL_TIM_IC_CaptureCallback>
 8003276:	e007      	b.n	8003288 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	0018      	movs	r0, r3
 800327c:	f000 f9be 	bl	80035fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	0018      	movs	r0, r3
 8003284:	f7fd f902 	bl	800048c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2208      	movs	r2, #8
 8003292:	4013      	ands	r3, r2
 8003294:	d021      	beq.n	80032da <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2208      	movs	r2, #8
 800329a:	4013      	ands	r3, r2
 800329c:	d01d      	beq.n	80032da <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2209      	movs	r2, #9
 80032a4:	4252      	negs	r2, r2
 80032a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2204      	movs	r2, #4
 80032ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	2203      	movs	r2, #3
 80032b6:	4013      	ands	r3, r2
 80032b8:	d004      	beq.n	80032c4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	0018      	movs	r0, r3
 80032be:	f000 f9a5 	bl	800360c <HAL_TIM_IC_CaptureCallback>
 80032c2:	e007      	b.n	80032d4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	0018      	movs	r0, r3
 80032c8:	f000 f998 	bl	80035fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	0018      	movs	r0, r3
 80032d0:	f7fd f8dc 	bl	800048c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2210      	movs	r2, #16
 80032de:	4013      	ands	r3, r2
 80032e0:	d022      	beq.n	8003328 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2210      	movs	r2, #16
 80032e6:	4013      	ands	r3, r2
 80032e8:	d01e      	beq.n	8003328 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2211      	movs	r2, #17
 80032f0:	4252      	negs	r2, r2
 80032f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2208      	movs	r2, #8
 80032f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69da      	ldr	r2, [r3, #28]
 8003300:	23c0      	movs	r3, #192	@ 0xc0
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4013      	ands	r3, r2
 8003306:	d004      	beq.n	8003312 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	0018      	movs	r0, r3
 800330c:	f000 f97e 	bl	800360c <HAL_TIM_IC_CaptureCallback>
 8003310:	e007      	b.n	8003322 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	0018      	movs	r0, r3
 8003316:	f000 f971 	bl	80035fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	0018      	movs	r0, r3
 800331e:	f7fd f8b5 	bl	800048c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2201      	movs	r2, #1
 800332c:	4013      	ands	r3, r2
 800332e:	d00c      	beq.n	800334a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2201      	movs	r2, #1
 8003334:	4013      	ands	r3, r2
 8003336:	d008      	beq.n	800334a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2202      	movs	r2, #2
 800333e:	4252      	negs	r2, r2
 8003340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	0018      	movs	r0, r3
 8003346:	f000 f951 	bl	80035ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2280      	movs	r2, #128	@ 0x80
 800334e:	4013      	ands	r3, r2
 8003350:	d104      	bne.n	800335c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	2380      	movs	r3, #128	@ 0x80
 8003356:	019b      	lsls	r3, r3, #6
 8003358:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800335a:	d00b      	beq.n	8003374 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2280      	movs	r2, #128	@ 0x80
 8003360:	4013      	ands	r3, r2
 8003362:	d007      	beq.n	8003374 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a1e      	ldr	r2, [pc, #120]	@ (80033e4 <HAL_TIM_IRQHandler+0x208>)
 800336a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	0018      	movs	r0, r3
 8003370:	f000 fe1e 	bl	8003fb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	2380      	movs	r3, #128	@ 0x80
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	4013      	ands	r3, r2
 800337c:	d00b      	beq.n	8003396 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2280      	movs	r2, #128	@ 0x80
 8003382:	4013      	ands	r3, r2
 8003384:	d007      	beq.n	8003396 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a17      	ldr	r2, [pc, #92]	@ (80033e8 <HAL_TIM_IRQHandler+0x20c>)
 800338c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	0018      	movs	r0, r3
 8003392:	f000 fe15 	bl	8003fc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2240      	movs	r2, #64	@ 0x40
 800339a:	4013      	ands	r3, r2
 800339c:	d00c      	beq.n	80033b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2240      	movs	r2, #64	@ 0x40
 80033a2:	4013      	ands	r3, r2
 80033a4:	d008      	beq.n	80033b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2241      	movs	r2, #65	@ 0x41
 80033ac:	4252      	negs	r2, r2
 80033ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	0018      	movs	r0, r3
 80033b4:	f000 f93a 	bl	800362c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2220      	movs	r2, #32
 80033bc:	4013      	ands	r3, r2
 80033be:	d00c      	beq.n	80033da <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	4013      	ands	r3, r2
 80033c6:	d008      	beq.n	80033da <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2221      	movs	r2, #33	@ 0x21
 80033ce:	4252      	negs	r2, r2
 80033d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	0018      	movs	r0, r3
 80033d6:	f000 fde3 	bl	8003fa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033da:	46c0      	nop			@ (mov r8, r8)
 80033dc:	46bd      	mov	sp, r7
 80033de:	b004      	add	sp, #16
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	46c0      	nop			@ (mov r8, r8)
 80033e4:	ffffdf7f 	.word	0xffffdf7f
 80033e8:	fffffeff 	.word	0xfffffeff

080033ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f8:	2317      	movs	r3, #23
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	223c      	movs	r2, #60	@ 0x3c
 8003404:	5c9b      	ldrb	r3, [r3, r2]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_TIM_PWM_ConfigChannel+0x22>
 800340a:	2302      	movs	r3, #2
 800340c:	e0e5      	b.n	80035da <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	223c      	movs	r2, #60	@ 0x3c
 8003412:	2101      	movs	r1, #1
 8003414:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b14      	cmp	r3, #20
 800341a:	d900      	bls.n	800341e <HAL_TIM_PWM_ConfigChannel+0x32>
 800341c:	e0d1      	b.n	80035c2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	009a      	lsls	r2, r3, #2
 8003422:	4b70      	ldr	r3, [pc, #448]	@ (80035e4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003424:	18d3      	adds	r3, r2, r3
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	0011      	movs	r1, r2
 8003432:	0018      	movs	r0, r3
 8003434:	f000 fa58 	bl	80038e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2108      	movs	r1, #8
 8003444:	430a      	orrs	r2, r1
 8003446:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699a      	ldr	r2, [r3, #24]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2104      	movs	r1, #4
 8003454:	438a      	bics	r2, r1
 8003456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6999      	ldr	r1, [r3, #24]
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	691a      	ldr	r2, [r3, #16]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	619a      	str	r2, [r3, #24]
      break;
 800346a:	e0af      	b.n	80035cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	0011      	movs	r1, r2
 8003474:	0018      	movs	r0, r3
 8003476:	f000 fab7 	bl	80039e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699a      	ldr	r2, [r3, #24]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2180      	movs	r1, #128	@ 0x80
 8003486:	0109      	lsls	r1, r1, #4
 8003488:	430a      	orrs	r2, r1
 800348a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699a      	ldr	r2, [r3, #24]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4954      	ldr	r1, [pc, #336]	@ (80035e8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003498:	400a      	ands	r2, r1
 800349a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6999      	ldr	r1, [r3, #24]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	021a      	lsls	r2, r3, #8
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	619a      	str	r2, [r3, #24]
      break;
 80034b0:	e08c      	b.n	80035cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	0011      	movs	r1, r2
 80034ba:	0018      	movs	r0, r3
 80034bc:	f000 fb12 	bl	8003ae4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	69da      	ldr	r2, [r3, #28]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2108      	movs	r1, #8
 80034cc:	430a      	orrs	r2, r1
 80034ce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	69da      	ldr	r2, [r3, #28]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2104      	movs	r1, #4
 80034dc:	438a      	bics	r2, r1
 80034de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	69d9      	ldr	r1, [r3, #28]
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	691a      	ldr	r2, [r3, #16]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	61da      	str	r2, [r3, #28]
      break;
 80034f2:	e06b      	b.n	80035cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	0011      	movs	r1, r2
 80034fc:	0018      	movs	r0, r3
 80034fe:	f000 fb73 	bl	8003be8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69da      	ldr	r2, [r3, #28]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2180      	movs	r1, #128	@ 0x80
 800350e:	0109      	lsls	r1, r1, #4
 8003510:	430a      	orrs	r2, r1
 8003512:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	69da      	ldr	r2, [r3, #28]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4932      	ldr	r1, [pc, #200]	@ (80035e8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003520:	400a      	ands	r2, r1
 8003522:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	69d9      	ldr	r1, [r3, #28]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	021a      	lsls	r2, r3, #8
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	61da      	str	r2, [r3, #28]
      break;
 8003538:	e048      	b.n	80035cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	0011      	movs	r1, r2
 8003542:	0018      	movs	r0, r3
 8003544:	f000 fbb4 	bl	8003cb0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2108      	movs	r1, #8
 8003554:	430a      	orrs	r2, r1
 8003556:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2104      	movs	r1, #4
 8003564:	438a      	bics	r2, r1
 8003566:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	691a      	ldr	r2, [r3, #16]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800357a:	e027      	b.n	80035cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	0011      	movs	r1, r2
 8003584:	0018      	movs	r0, r3
 8003586:	f000 fbed 	bl	8003d64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2180      	movs	r1, #128	@ 0x80
 8003596:	0109      	lsls	r1, r1, #4
 8003598:	430a      	orrs	r2, r1
 800359a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4910      	ldr	r1, [pc, #64]	@ (80035e8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80035a8:	400a      	ands	r2, r1
 80035aa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	021a      	lsls	r2, r3, #8
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80035c0:	e004      	b.n	80035cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80035c2:	2317      	movs	r3, #23
 80035c4:	18fb      	adds	r3, r7, r3
 80035c6:	2201      	movs	r2, #1
 80035c8:	701a      	strb	r2, [r3, #0]
      break;
 80035ca:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	223c      	movs	r2, #60	@ 0x3c
 80035d0:	2100      	movs	r1, #0
 80035d2:	5499      	strb	r1, [r3, r2]

  return status;
 80035d4:	2317      	movs	r3, #23
 80035d6:	18fb      	adds	r3, r7, r3
 80035d8:	781b      	ldrb	r3, [r3, #0]
}
 80035da:	0018      	movs	r0, r3
 80035dc:	46bd      	mov	sp, r7
 80035de:	b006      	add	sp, #24
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	46c0      	nop			@ (mov r8, r8)
 80035e4:	080048c8 	.word	0x080048c8
 80035e8:	fffffbff 	.word	0xfffffbff

080035ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80035f4:	46c0      	nop			@ (mov r8, r8)
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b002      	add	sp, #8
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003604:	46c0      	nop			@ (mov r8, r8)
 8003606:	46bd      	mov	sp, r7
 8003608:	b002      	add	sp, #8
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003614:	46c0      	nop			@ (mov r8, r8)
 8003616:	46bd      	mov	sp, r7
 8003618:	b002      	add	sp, #8
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003624:	46c0      	nop			@ (mov r8, r8)
 8003626:	46bd      	mov	sp, r7
 8003628:	b002      	add	sp, #8
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003634:	46c0      	nop			@ (mov r8, r8)
 8003636:	46bd      	mov	sp, r7
 8003638:	b002      	add	sp, #8
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003644:	46c0      	nop			@ (mov r8, r8)
 8003646:	46bd      	mov	sp, r7
 8003648:	b002      	add	sp, #8
 800364a:	bd80      	pop	{r7, pc}

0800364c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003658:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	429a      	cmp	r2, r3
 8003662:	d107      	bne.n	8003674 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2201      	movs	r2, #1
 8003668:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	223e      	movs	r2, #62	@ 0x3e
 800366e:	2101      	movs	r1, #1
 8003670:	5499      	strb	r1, [r3, r2]
 8003672:	e02a      	b.n	80036ca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	429a      	cmp	r2, r3
 800367c:	d107      	bne.n	800368e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2202      	movs	r2, #2
 8003682:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	223f      	movs	r2, #63	@ 0x3f
 8003688:	2101      	movs	r1, #1
 800368a:	5499      	strb	r1, [r3, r2]
 800368c:	e01d      	b.n	80036ca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	429a      	cmp	r2, r3
 8003696:	d107      	bne.n	80036a8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2204      	movs	r2, #4
 800369c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2240      	movs	r2, #64	@ 0x40
 80036a2:	2101      	movs	r1, #1
 80036a4:	5499      	strb	r1, [r3, r2]
 80036a6:	e010      	b.n	80036ca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d107      	bne.n	80036c2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2208      	movs	r2, #8
 80036b6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2241      	movs	r2, #65	@ 0x41
 80036bc:	2101      	movs	r1, #1
 80036be:	5499      	strb	r1, [r3, r2]
 80036c0:	e003      	b.n	80036ca <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	223d      	movs	r2, #61	@ 0x3d
 80036c6:	2101      	movs	r1, #1
 80036c8:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	0018      	movs	r0, r3
 80036ce:	f7ff ffb5 	bl	800363c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	771a      	strb	r2, [r3, #28]
}
 80036d8:	46c0      	nop			@ (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	b004      	add	sp, #16
 80036de:	bd80      	pop	{r7, pc}

080036e0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ec:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d10b      	bne.n	8003710 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2201      	movs	r2, #1
 80036fc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d136      	bne.n	8003774 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	223e      	movs	r2, #62	@ 0x3e
 800370a:	2101      	movs	r1, #1
 800370c:	5499      	strb	r1, [r3, r2]
 800370e:	e031      	b.n	8003774 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	429a      	cmp	r2, r3
 8003718:	d10b      	bne.n	8003732 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2202      	movs	r2, #2
 800371e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d125      	bne.n	8003774 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	223f      	movs	r2, #63	@ 0x3f
 800372c:	2101      	movs	r1, #1
 800372e:	5499      	strb	r1, [r3, r2]
 8003730:	e020      	b.n	8003774 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	429a      	cmp	r2, r3
 800373a:	d10b      	bne.n	8003754 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2204      	movs	r2, #4
 8003740:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d114      	bne.n	8003774 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2240      	movs	r2, #64	@ 0x40
 800374e:	2101      	movs	r1, #1
 8003750:	5499      	strb	r1, [r3, r2]
 8003752:	e00f      	b.n	8003774 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	429a      	cmp	r2, r3
 800375c:	d10a      	bne.n	8003774 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2208      	movs	r2, #8
 8003762:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d103      	bne.n	8003774 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2241      	movs	r2, #65	@ 0x41
 8003770:	2101      	movs	r1, #1
 8003772:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	0018      	movs	r0, r3
 8003778:	f7fc fe88 	bl	800048c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	771a      	strb	r2, [r3, #28]
}
 8003782:	46c0      	nop			@ (mov r8, r8)
 8003784:	46bd      	mov	sp, r7
 8003786:	b004      	add	sp, #16
 8003788:	bd80      	pop	{r7, pc}

0800378a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003796:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d103      	bne.n	80037aa <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2201      	movs	r2, #1
 80037a6:	771a      	strb	r2, [r3, #28]
 80037a8:	e019      	b.n	80037de <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d103      	bne.n	80037bc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2202      	movs	r2, #2
 80037b8:	771a      	strb	r2, [r3, #28]
 80037ba:	e010      	b.n	80037de <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d103      	bne.n	80037ce <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2204      	movs	r2, #4
 80037ca:	771a      	strb	r2, [r3, #28]
 80037cc:	e007      	b.n	80037de <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d102      	bne.n	80037de <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2208      	movs	r2, #8
 80037dc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	0018      	movs	r0, r3
 80037e2:	f7ff ff1b 	bl	800361c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	771a      	strb	r2, [r3, #28]
}
 80037ec:	46c0      	nop			@ (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b004      	add	sp, #16
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a32      	ldr	r2, [pc, #200]	@ (80038d0 <TIM_Base_SetConfig+0xdc>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d003      	beq.n	8003814 <TIM_Base_SetConfig+0x20>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a31      	ldr	r2, [pc, #196]	@ (80038d4 <TIM_Base_SetConfig+0xe0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d108      	bne.n	8003826 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2270      	movs	r2, #112	@ 0x70
 8003818:	4393      	bics	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a29      	ldr	r2, [pc, #164]	@ (80038d0 <TIM_Base_SetConfig+0xdc>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00f      	beq.n	800384e <TIM_Base_SetConfig+0x5a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a28      	ldr	r2, [pc, #160]	@ (80038d4 <TIM_Base_SetConfig+0xe0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d00b      	beq.n	800384e <TIM_Base_SetConfig+0x5a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a27      	ldr	r2, [pc, #156]	@ (80038d8 <TIM_Base_SetConfig+0xe4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d007      	beq.n	800384e <TIM_Base_SetConfig+0x5a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a26      	ldr	r2, [pc, #152]	@ (80038dc <TIM_Base_SetConfig+0xe8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d003      	beq.n	800384e <TIM_Base_SetConfig+0x5a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a25      	ldr	r2, [pc, #148]	@ (80038e0 <TIM_Base_SetConfig+0xec>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d108      	bne.n	8003860 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4a24      	ldr	r2, [pc, #144]	@ (80038e4 <TIM_Base_SetConfig+0xf0>)
 8003852:	4013      	ands	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4313      	orrs	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2280      	movs	r2, #128	@ 0x80
 8003864:	4393      	bics	r3, r2
 8003866:	001a      	movs	r2, r3
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a11      	ldr	r2, [pc, #68]	@ (80038d0 <TIM_Base_SetConfig+0xdc>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d007      	beq.n	800389e <TIM_Base_SetConfig+0xaa>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a12      	ldr	r2, [pc, #72]	@ (80038dc <TIM_Base_SetConfig+0xe8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d003      	beq.n	800389e <TIM_Base_SetConfig+0xaa>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a11      	ldr	r2, [pc, #68]	@ (80038e0 <TIM_Base_SetConfig+0xec>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d103      	bne.n	80038a6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	2201      	movs	r2, #1
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d106      	bne.n	80038c6 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	2201      	movs	r2, #1
 80038be:	4393      	bics	r3, r2
 80038c0:	001a      	movs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	611a      	str	r2, [r3, #16]
  }
}
 80038c6:	46c0      	nop			@ (mov r8, r8)
 80038c8:	46bd      	mov	sp, r7
 80038ca:	b004      	add	sp, #16
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	46c0      	nop			@ (mov r8, r8)
 80038d0:	40012c00 	.word	0x40012c00
 80038d4:	40000400 	.word	0x40000400
 80038d8:	40002000 	.word	0x40002000
 80038dc:	40014400 	.word	0x40014400
 80038e0:	40014800 	.word	0x40014800
 80038e4:	fffffcff 	.word	0xfffffcff

080038e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	2201      	movs	r2, #1
 80038fe:	4393      	bics	r3, r2
 8003900:	001a      	movs	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4a2e      	ldr	r2, [pc, #184]	@ (80039d0 <TIM_OC1_SetConfig+0xe8>)
 8003916:	4013      	ands	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2203      	movs	r2, #3
 800391e:	4393      	bics	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2202      	movs	r2, #2
 8003930:	4393      	bics	r3, r2
 8003932:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	4313      	orrs	r3, r2
 800393c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a24      	ldr	r2, [pc, #144]	@ (80039d4 <TIM_OC1_SetConfig+0xec>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d007      	beq.n	8003956 <TIM_OC1_SetConfig+0x6e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a23      	ldr	r2, [pc, #140]	@ (80039d8 <TIM_OC1_SetConfig+0xf0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d003      	beq.n	8003956 <TIM_OC1_SetConfig+0x6e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a22      	ldr	r2, [pc, #136]	@ (80039dc <TIM_OC1_SetConfig+0xf4>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d10c      	bne.n	8003970 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2208      	movs	r2, #8
 800395a:	4393      	bics	r3, r2
 800395c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	4313      	orrs	r3, r2
 8003966:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2204      	movs	r2, #4
 800396c:	4393      	bics	r3, r2
 800396e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a18      	ldr	r2, [pc, #96]	@ (80039d4 <TIM_OC1_SetConfig+0xec>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d007      	beq.n	8003988 <TIM_OC1_SetConfig+0xa0>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a17      	ldr	r2, [pc, #92]	@ (80039d8 <TIM_OC1_SetConfig+0xf0>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d003      	beq.n	8003988 <TIM_OC1_SetConfig+0xa0>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a16      	ldr	r2, [pc, #88]	@ (80039dc <TIM_OC1_SetConfig+0xf4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d111      	bne.n	80039ac <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4a15      	ldr	r2, [pc, #84]	@ (80039e0 <TIM_OC1_SetConfig+0xf8>)
 800398c:	4013      	ands	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	4a14      	ldr	r2, [pc, #80]	@ (80039e4 <TIM_OC1_SetConfig+0xfc>)
 8003994:	4013      	ands	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	621a      	str	r2, [r3, #32]
}
 80039c6:	46c0      	nop			@ (mov r8, r8)
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b006      	add	sp, #24
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	46c0      	nop			@ (mov r8, r8)
 80039d0:	fffeff8f 	.word	0xfffeff8f
 80039d4:	40012c00 	.word	0x40012c00
 80039d8:	40014400 	.word	0x40014400
 80039dc:	40014800 	.word	0x40014800
 80039e0:	fffffeff 	.word	0xfffffeff
 80039e4:	fffffdff 	.word	0xfffffdff

080039e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	2210      	movs	r2, #16
 80039fe:	4393      	bics	r3, r2
 8003a00:	001a      	movs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4a2c      	ldr	r2, [pc, #176]	@ (8003ac8 <TIM_OC2_SetConfig+0xe0>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4a2b      	ldr	r2, [pc, #172]	@ (8003acc <TIM_OC2_SetConfig+0xe4>)
 8003a1e:	4013      	ands	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	021b      	lsls	r3, r3, #8
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2220      	movs	r2, #32
 8003a32:	4393      	bics	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a22      	ldr	r2, [pc, #136]	@ (8003ad0 <TIM_OC2_SetConfig+0xe8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d10d      	bne.n	8003a66 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2280      	movs	r2, #128	@ 0x80
 8003a4e:	4393      	bics	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2240      	movs	r2, #64	@ 0x40
 8003a62:	4393      	bics	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a19      	ldr	r2, [pc, #100]	@ (8003ad0 <TIM_OC2_SetConfig+0xe8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d007      	beq.n	8003a7e <TIM_OC2_SetConfig+0x96>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a18      	ldr	r2, [pc, #96]	@ (8003ad4 <TIM_OC2_SetConfig+0xec>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d003      	beq.n	8003a7e <TIM_OC2_SetConfig+0x96>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a17      	ldr	r2, [pc, #92]	@ (8003ad8 <TIM_OC2_SetConfig+0xf0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d113      	bne.n	8003aa6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	4a16      	ldr	r2, [pc, #88]	@ (8003adc <TIM_OC2_SetConfig+0xf4>)
 8003a82:	4013      	ands	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	4a15      	ldr	r2, [pc, #84]	@ (8003ae0 <TIM_OC2_SetConfig+0xf8>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	621a      	str	r2, [r3, #32]
}
 8003ac0:	46c0      	nop			@ (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b006      	add	sp, #24
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	feff8fff 	.word	0xfeff8fff
 8003acc:	fffffcff 	.word	0xfffffcff
 8003ad0:	40012c00 	.word	0x40012c00
 8003ad4:	40014400 	.word	0x40014400
 8003ad8:	40014800 	.word	0x40014800
 8003adc:	fffffbff 	.word	0xfffffbff
 8003ae0:	fffff7ff 	.word	0xfffff7ff

08003ae4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	4a31      	ldr	r2, [pc, #196]	@ (8003bc0 <TIM_OC3_SetConfig+0xdc>)
 8003afa:	401a      	ands	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4a2d      	ldr	r2, [pc, #180]	@ (8003bc4 <TIM_OC3_SetConfig+0xe0>)
 8003b10:	4013      	ands	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2203      	movs	r2, #3
 8003b18:	4393      	bics	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	4a27      	ldr	r2, [pc, #156]	@ (8003bc8 <TIM_OC3_SetConfig+0xe4>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	021b      	lsls	r3, r3, #8
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a23      	ldr	r2, [pc, #140]	@ (8003bcc <TIM_OC3_SetConfig+0xe8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d10d      	bne.n	8003b5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	4a22      	ldr	r2, [pc, #136]	@ (8003bd0 <TIM_OC3_SetConfig+0xec>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	021b      	lsls	r3, r3, #8
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	4a1e      	ldr	r2, [pc, #120]	@ (8003bd4 <TIM_OC3_SetConfig+0xf0>)
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a1a      	ldr	r2, [pc, #104]	@ (8003bcc <TIM_OC3_SetConfig+0xe8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d007      	beq.n	8003b76 <TIM_OC3_SetConfig+0x92>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a1b      	ldr	r2, [pc, #108]	@ (8003bd8 <TIM_OC3_SetConfig+0xf4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d003      	beq.n	8003b76 <TIM_OC3_SetConfig+0x92>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a1a      	ldr	r2, [pc, #104]	@ (8003bdc <TIM_OC3_SetConfig+0xf8>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d113      	bne.n	8003b9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4a19      	ldr	r2, [pc, #100]	@ (8003be0 <TIM_OC3_SetConfig+0xfc>)
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4a18      	ldr	r2, [pc, #96]	@ (8003be4 <TIM_OC3_SetConfig+0x100>)
 8003b82:	4013      	ands	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	621a      	str	r2, [r3, #32]
}
 8003bb8:	46c0      	nop			@ (mov r8, r8)
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b006      	add	sp, #24
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	fffffeff 	.word	0xfffffeff
 8003bc4:	fffeff8f 	.word	0xfffeff8f
 8003bc8:	fffffdff 	.word	0xfffffdff
 8003bcc:	40012c00 	.word	0x40012c00
 8003bd0:	fffff7ff 	.word	0xfffff7ff
 8003bd4:	fffffbff 	.word	0xfffffbff
 8003bd8:	40014400 	.word	0x40014400
 8003bdc:	40014800 	.word	0x40014800
 8003be0:	ffffefff 	.word	0xffffefff
 8003be4:	ffffdfff 	.word	0xffffdfff

08003be8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	4a24      	ldr	r2, [pc, #144]	@ (8003c90 <TIM_OC4_SetConfig+0xa8>)
 8003bfe:	401a      	ands	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4a20      	ldr	r2, [pc, #128]	@ (8003c94 <TIM_OC4_SetConfig+0xac>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4a1f      	ldr	r2, [pc, #124]	@ (8003c98 <TIM_OC4_SetConfig+0xb0>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	021b      	lsls	r3, r3, #8
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8003c9c <TIM_OC4_SetConfig+0xb4>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	031b      	lsls	r3, r3, #12
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a17      	ldr	r2, [pc, #92]	@ (8003ca0 <TIM_OC4_SetConfig+0xb8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d007      	beq.n	8003c58 <TIM_OC4_SetConfig+0x70>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a16      	ldr	r2, [pc, #88]	@ (8003ca4 <TIM_OC4_SetConfig+0xbc>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d003      	beq.n	8003c58 <TIM_OC4_SetConfig+0x70>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a15      	ldr	r2, [pc, #84]	@ (8003ca8 <TIM_OC4_SetConfig+0xc0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d109      	bne.n	8003c6c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	4a14      	ldr	r2, [pc, #80]	@ (8003cac <TIM_OC4_SetConfig+0xc4>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	019b      	lsls	r3, r3, #6
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	621a      	str	r2, [r3, #32]
}
 8003c86:	46c0      	nop			@ (mov r8, r8)
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b006      	add	sp, #24
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	46c0      	nop			@ (mov r8, r8)
 8003c90:	ffffefff 	.word	0xffffefff
 8003c94:	feff8fff 	.word	0xfeff8fff
 8003c98:	fffffcff 	.word	0xfffffcff
 8003c9c:	ffffdfff 	.word	0xffffdfff
 8003ca0:	40012c00 	.word	0x40012c00
 8003ca4:	40014400 	.word	0x40014400
 8003ca8:	40014800 	.word	0x40014800
 8003cac:	ffffbfff 	.word	0xffffbfff

08003cb0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	4a21      	ldr	r2, [pc, #132]	@ (8003d4c <TIM_OC5_SetConfig+0x9c>)
 8003cc6:	401a      	ands	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4a1d      	ldr	r2, [pc, #116]	@ (8003d50 <TIM_OC5_SetConfig+0xa0>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	4a19      	ldr	r2, [pc, #100]	@ (8003d54 <TIM_OC5_SetConfig+0xa4>)
 8003cee:	4013      	ands	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	041b      	lsls	r3, r3, #16
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a15      	ldr	r2, [pc, #84]	@ (8003d58 <TIM_OC5_SetConfig+0xa8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d007      	beq.n	8003d16 <TIM_OC5_SetConfig+0x66>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a14      	ldr	r2, [pc, #80]	@ (8003d5c <TIM_OC5_SetConfig+0xac>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d003      	beq.n	8003d16 <TIM_OC5_SetConfig+0x66>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a13      	ldr	r2, [pc, #76]	@ (8003d60 <TIM_OC5_SetConfig+0xb0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d109      	bne.n	8003d2a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	4a0c      	ldr	r2, [pc, #48]	@ (8003d4c <TIM_OC5_SetConfig+0x9c>)
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	021b      	lsls	r3, r3, #8
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	621a      	str	r2, [r3, #32]
}
 8003d44:	46c0      	nop			@ (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b006      	add	sp, #24
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	fffeffff 	.word	0xfffeffff
 8003d50:	fffeff8f 	.word	0xfffeff8f
 8003d54:	fffdffff 	.word	0xfffdffff
 8003d58:	40012c00 	.word	0x40012c00
 8003d5c:	40014400 	.word	0x40014400
 8003d60:	40014800 	.word	0x40014800

08003d64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	4a22      	ldr	r2, [pc, #136]	@ (8003e04 <TIM_OC6_SetConfig+0xa0>)
 8003d7a:	401a      	ands	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8003e08 <TIM_OC6_SetConfig+0xa4>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	021b      	lsls	r3, r3, #8
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	4a1a      	ldr	r2, [pc, #104]	@ (8003e0c <TIM_OC6_SetConfig+0xa8>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	051b      	lsls	r3, r3, #20
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a16      	ldr	r2, [pc, #88]	@ (8003e10 <TIM_OC6_SetConfig+0xac>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d007      	beq.n	8003dcc <TIM_OC6_SetConfig+0x68>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a15      	ldr	r2, [pc, #84]	@ (8003e14 <TIM_OC6_SetConfig+0xb0>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d003      	beq.n	8003dcc <TIM_OC6_SetConfig+0x68>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a14      	ldr	r2, [pc, #80]	@ (8003e18 <TIM_OC6_SetConfig+0xb4>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d109      	bne.n	8003de0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	4a13      	ldr	r2, [pc, #76]	@ (8003e1c <TIM_OC6_SetConfig+0xb8>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	029b      	lsls	r3, r3, #10
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	621a      	str	r2, [r3, #32]
}
 8003dfa:	46c0      	nop			@ (mov r8, r8)
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b006      	add	sp, #24
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	46c0      	nop			@ (mov r8, r8)
 8003e04:	ffefffff 	.word	0xffefffff
 8003e08:	feff8fff 	.word	0xfeff8fff
 8003e0c:	ffdfffff 	.word	0xffdfffff
 8003e10:	40012c00 	.word	0x40012c00
 8003e14:	40014400 	.word	0x40014400
 8003e18:	40014800 	.word	0x40014800
 8003e1c:	fffbffff 	.word	0xfffbffff

08003e20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	221f      	movs	r2, #31
 8003e30:	4013      	ands	r3, r2
 8003e32:	2201      	movs	r2, #1
 8003e34:	409a      	lsls	r2, r3
 8003e36:	0013      	movs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	43d2      	mvns	r2, r2
 8003e42:	401a      	ands	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a1a      	ldr	r2, [r3, #32]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	211f      	movs	r1, #31
 8003e50:	400b      	ands	r3, r1
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	4099      	lsls	r1, r3
 8003e56:	000b      	movs	r3, r1
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	621a      	str	r2, [r3, #32]
}
 8003e5e:	46c0      	nop			@ (mov r8, r8)
 8003e60:	46bd      	mov	sp, r7
 8003e62:	b006      	add	sp, #24
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	223c      	movs	r2, #60	@ 0x3c
 8003e7a:	5c9b      	ldrb	r3, [r3, r2]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e06f      	b.n	8003f64 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	223c      	movs	r2, #60	@ 0x3c
 8003e88:	2101      	movs	r1, #1
 8003e8a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	22ff      	movs	r2, #255	@ 0xff
 8003e90:	4393      	bics	r3, r2
 8003e92:	001a      	movs	r2, r3
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4a33      	ldr	r2, [pc, #204]	@ (8003f6c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003ea0:	401a      	ands	r2, r3
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4a30      	ldr	r2, [pc, #192]	@ (8003f70 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003eae:	401a      	ands	r2, r3
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4a2e      	ldr	r2, [pc, #184]	@ (8003f74 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003ebc:	401a      	ands	r2, r3
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4a2b      	ldr	r2, [pc, #172]	@ (8003f78 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003eca:	401a      	ands	r2, r3
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4a29      	ldr	r2, [pc, #164]	@ (8003f7c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003ed8:	401a      	ands	r2, r3
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4a26      	ldr	r2, [pc, #152]	@ (8003f80 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003ee6:	401a      	ands	r2, r3
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4a24      	ldr	r2, [pc, #144]	@ (8003f84 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003ef4:	401a      	ands	r2, r3
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	041b      	lsls	r3, r3, #16
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4a21      	ldr	r2, [pc, #132]	@ (8003f88 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003f04:	401a      	ands	r2, r3
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a1e      	ldr	r2, [pc, #120]	@ (8003f8c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d11c      	bne.n	8003f52 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8003f90 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003f1c:	401a      	ands	r2, r3
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f22:	051b      	lsls	r3, r3, #20
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4a1a      	ldr	r2, [pc, #104]	@ (8003f94 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003f2c:	401a      	ands	r2, r3
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4a17      	ldr	r2, [pc, #92]	@ (8003f98 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003f3a:	401a      	ands	r2, r3
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4a15      	ldr	r2, [pc, #84]	@ (8003f9c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003f48:	401a      	ands	r2, r3
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	223c      	movs	r2, #60	@ 0x3c
 8003f5e:	2100      	movs	r1, #0
 8003f60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	0018      	movs	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	b004      	add	sp, #16
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	fffffcff 	.word	0xfffffcff
 8003f70:	fffffbff 	.word	0xfffffbff
 8003f74:	fffff7ff 	.word	0xfffff7ff
 8003f78:	ffffefff 	.word	0xffffefff
 8003f7c:	ffffdfff 	.word	0xffffdfff
 8003f80:	ffffbfff 	.word	0xffffbfff
 8003f84:	fff0ffff 	.word	0xfff0ffff
 8003f88:	efffffff 	.word	0xefffffff
 8003f8c:	40012c00 	.word	0x40012c00
 8003f90:	ff0fffff 	.word	0xff0fffff
 8003f94:	feffffff 	.word	0xfeffffff
 8003f98:	fdffffff 	.word	0xfdffffff
 8003f9c:	dfffffff 	.word	0xdfffffff

08003fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fa8:	46c0      	nop			@ (mov r8, r8)
 8003faa:	46bd      	mov	sp, r7
 8003fac:	b002      	add	sp, #8
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fb8:	46c0      	nop			@ (mov r8, r8)
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b002      	add	sp, #8
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003fc8:	46c0      	nop			@ (mov r8, r8)
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	b002      	add	sp, #8
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e046      	b.n	8004070 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2288      	movs	r2, #136	@ 0x88
 8003fe6:	589b      	ldr	r3, [r3, r2]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d107      	bne.n	8003ffc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2284      	movs	r2, #132	@ 0x84
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f7fc ff8c 	bl	8000f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2288      	movs	r2, #136	@ 0x88
 8004000:	2124      	movs	r1, #36	@ 0x24
 8004002:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2101      	movs	r1, #1
 8004010:	438a      	bics	r2, r1
 8004012:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	0018      	movs	r0, r3
 8004020:	f000 f996 	bl	8004350 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	0018      	movs	r0, r3
 8004028:	f000 f828 	bl	800407c <UART_SetConfig>
 800402c:	0003      	movs	r3, r0
 800402e:	2b01      	cmp	r3, #1
 8004030:	d101      	bne.n	8004036 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e01c      	b.n	8004070 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	490d      	ldr	r1, [pc, #52]	@ (8004078 <HAL_UART_Init+0xa8>)
 8004042:	400a      	ands	r2, r1
 8004044:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	212a      	movs	r1, #42	@ 0x2a
 8004052:	438a      	bics	r2, r1
 8004054:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2101      	movs	r1, #1
 8004062:	430a      	orrs	r2, r1
 8004064:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	0018      	movs	r0, r3
 800406a:	f000 fa25 	bl	80044b8 <UART_CheckIdleState>
 800406e:	0003      	movs	r3, r0
}
 8004070:	0018      	movs	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	b002      	add	sp, #8
 8004076:	bd80      	pop	{r7, pc}
 8004078:	ffffb7ff 	.word	0xffffb7ff

0800407c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b088      	sub	sp, #32
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004084:	231a      	movs	r3, #26
 8004086:	18fb      	adds	r3, r7, r3
 8004088:	2200      	movs	r2, #0
 800408a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4aa1      	ldr	r2, [pc, #644]	@ (8004330 <UART_SetConfig+0x2b4>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	0019      	movs	r1, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69fa      	ldr	r2, [r7, #28]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	4a9c      	ldr	r2, [pc, #624]	@ (8004334 <UART_SetConfig+0x2b8>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	0019      	movs	r1, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	4313      	orrs	r3, r2
 80040e0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	4a93      	ldr	r2, [pc, #588]	@ (8004338 <UART_SetConfig+0x2bc>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	0019      	movs	r1, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69fa      	ldr	r2, [r7, #28]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fe:	220f      	movs	r2, #15
 8004100:	4393      	bics	r3, r2
 8004102:	0019      	movs	r1, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a89      	ldr	r2, [pc, #548]	@ (800433c <UART_SetConfig+0x2c0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d127      	bne.n	800416a <UART_SetConfig+0xee>
 800411a:	4b89      	ldr	r3, [pc, #548]	@ (8004340 <UART_SetConfig+0x2c4>)
 800411c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800411e:	2203      	movs	r2, #3
 8004120:	4013      	ands	r3, r2
 8004122:	2b03      	cmp	r3, #3
 8004124:	d017      	beq.n	8004156 <UART_SetConfig+0xda>
 8004126:	d81b      	bhi.n	8004160 <UART_SetConfig+0xe4>
 8004128:	2b02      	cmp	r3, #2
 800412a:	d00a      	beq.n	8004142 <UART_SetConfig+0xc6>
 800412c:	d818      	bhi.n	8004160 <UART_SetConfig+0xe4>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <UART_SetConfig+0xbc>
 8004132:	2b01      	cmp	r3, #1
 8004134:	d00a      	beq.n	800414c <UART_SetConfig+0xd0>
 8004136:	e013      	b.n	8004160 <UART_SetConfig+0xe4>
 8004138:	231b      	movs	r3, #27
 800413a:	18fb      	adds	r3, r7, r3
 800413c:	2200      	movs	r2, #0
 800413e:	701a      	strb	r2, [r3, #0]
 8004140:	e021      	b.n	8004186 <UART_SetConfig+0x10a>
 8004142:	231b      	movs	r3, #27
 8004144:	18fb      	adds	r3, r7, r3
 8004146:	2202      	movs	r2, #2
 8004148:	701a      	strb	r2, [r3, #0]
 800414a:	e01c      	b.n	8004186 <UART_SetConfig+0x10a>
 800414c:	231b      	movs	r3, #27
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	2204      	movs	r2, #4
 8004152:	701a      	strb	r2, [r3, #0]
 8004154:	e017      	b.n	8004186 <UART_SetConfig+0x10a>
 8004156:	231b      	movs	r3, #27
 8004158:	18fb      	adds	r3, r7, r3
 800415a:	2208      	movs	r2, #8
 800415c:	701a      	strb	r2, [r3, #0]
 800415e:	e012      	b.n	8004186 <UART_SetConfig+0x10a>
 8004160:	231b      	movs	r3, #27
 8004162:	18fb      	adds	r3, r7, r3
 8004164:	2210      	movs	r2, #16
 8004166:	701a      	strb	r2, [r3, #0]
 8004168:	e00d      	b.n	8004186 <UART_SetConfig+0x10a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a75      	ldr	r2, [pc, #468]	@ (8004344 <UART_SetConfig+0x2c8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d104      	bne.n	800417e <UART_SetConfig+0x102>
 8004174:	231b      	movs	r3, #27
 8004176:	18fb      	adds	r3, r7, r3
 8004178:	2200      	movs	r2, #0
 800417a:	701a      	strb	r2, [r3, #0]
 800417c:	e003      	b.n	8004186 <UART_SetConfig+0x10a>
 800417e:	231b      	movs	r3, #27
 8004180:	18fb      	adds	r3, r7, r3
 8004182:	2210      	movs	r2, #16
 8004184:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69da      	ldr	r2, [r3, #28]
 800418a:	2380      	movs	r3, #128	@ 0x80
 800418c:	021b      	lsls	r3, r3, #8
 800418e:	429a      	cmp	r2, r3
 8004190:	d000      	beq.n	8004194 <UART_SetConfig+0x118>
 8004192:	e065      	b.n	8004260 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8004194:	231b      	movs	r3, #27
 8004196:	18fb      	adds	r3, r7, r3
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b08      	cmp	r3, #8
 800419c:	d015      	beq.n	80041ca <UART_SetConfig+0x14e>
 800419e:	dc18      	bgt.n	80041d2 <UART_SetConfig+0x156>
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d00d      	beq.n	80041c0 <UART_SetConfig+0x144>
 80041a4:	dc15      	bgt.n	80041d2 <UART_SetConfig+0x156>
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <UART_SetConfig+0x134>
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d005      	beq.n	80041ba <UART_SetConfig+0x13e>
 80041ae:	e010      	b.n	80041d2 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041b0:	f7fe fb48 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 80041b4:	0003      	movs	r3, r0
 80041b6:	617b      	str	r3, [r7, #20]
        break;
 80041b8:	e012      	b.n	80041e0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041ba:	4b63      	ldr	r3, [pc, #396]	@ (8004348 <UART_SetConfig+0x2cc>)
 80041bc:	617b      	str	r3, [r7, #20]
        break;
 80041be:	e00f      	b.n	80041e0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041c0:	f7fe fab4 	bl	800272c <HAL_RCC_GetSysClockFreq>
 80041c4:	0003      	movs	r3, r0
 80041c6:	617b      	str	r3, [r7, #20]
        break;
 80041c8:	e00a      	b.n	80041e0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ca:	2380      	movs	r3, #128	@ 0x80
 80041cc:	021b      	lsls	r3, r3, #8
 80041ce:	617b      	str	r3, [r7, #20]
        break;
 80041d0:	e006      	b.n	80041e0 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80041d6:	231a      	movs	r3, #26
 80041d8:	18fb      	adds	r3, r7, r3
 80041da:	2201      	movs	r2, #1
 80041dc:	701a      	strb	r2, [r3, #0]
        break;
 80041de:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d100      	bne.n	80041e8 <UART_SetConfig+0x16c>
 80041e6:	e08d      	b.n	8004304 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041ec:	4b57      	ldr	r3, [pc, #348]	@ (800434c <UART_SetConfig+0x2d0>)
 80041ee:	0052      	lsls	r2, r2, #1
 80041f0:	5ad3      	ldrh	r3, [r2, r3]
 80041f2:	0019      	movs	r1, r3
 80041f4:	6978      	ldr	r0, [r7, #20]
 80041f6:	f7fb ff83 	bl	8000100 <__udivsi3>
 80041fa:	0003      	movs	r3, r0
 80041fc:	005a      	lsls	r2, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	085b      	lsrs	r3, r3, #1
 8004204:	18d2      	adds	r2, r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	0019      	movs	r1, r3
 800420c:	0010      	movs	r0, r2
 800420e:	f7fb ff77 	bl	8000100 <__udivsi3>
 8004212:	0003      	movs	r3, r0
 8004214:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	2b0f      	cmp	r3, #15
 800421a:	d91c      	bls.n	8004256 <UART_SetConfig+0x1da>
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	2380      	movs	r3, #128	@ 0x80
 8004220:	025b      	lsls	r3, r3, #9
 8004222:	429a      	cmp	r2, r3
 8004224:	d217      	bcs.n	8004256 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	b29a      	uxth	r2, r3
 800422a:	200e      	movs	r0, #14
 800422c:	183b      	adds	r3, r7, r0
 800422e:	210f      	movs	r1, #15
 8004230:	438a      	bics	r2, r1
 8004232:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	085b      	lsrs	r3, r3, #1
 8004238:	b29b      	uxth	r3, r3
 800423a:	2207      	movs	r2, #7
 800423c:	4013      	ands	r3, r2
 800423e:	b299      	uxth	r1, r3
 8004240:	183b      	adds	r3, r7, r0
 8004242:	183a      	adds	r2, r7, r0
 8004244:	8812      	ldrh	r2, [r2, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	183a      	adds	r2, r7, r0
 8004250:	8812      	ldrh	r2, [r2, #0]
 8004252:	60da      	str	r2, [r3, #12]
 8004254:	e056      	b.n	8004304 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004256:	231a      	movs	r3, #26
 8004258:	18fb      	adds	r3, r7, r3
 800425a:	2201      	movs	r2, #1
 800425c:	701a      	strb	r2, [r3, #0]
 800425e:	e051      	b.n	8004304 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004260:	231b      	movs	r3, #27
 8004262:	18fb      	adds	r3, r7, r3
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b08      	cmp	r3, #8
 8004268:	d015      	beq.n	8004296 <UART_SetConfig+0x21a>
 800426a:	dc18      	bgt.n	800429e <UART_SetConfig+0x222>
 800426c:	2b04      	cmp	r3, #4
 800426e:	d00d      	beq.n	800428c <UART_SetConfig+0x210>
 8004270:	dc15      	bgt.n	800429e <UART_SetConfig+0x222>
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <UART_SetConfig+0x200>
 8004276:	2b02      	cmp	r3, #2
 8004278:	d005      	beq.n	8004286 <UART_SetConfig+0x20a>
 800427a:	e010      	b.n	800429e <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800427c:	f7fe fae2 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 8004280:	0003      	movs	r3, r0
 8004282:	617b      	str	r3, [r7, #20]
        break;
 8004284:	e012      	b.n	80042ac <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004286:	4b30      	ldr	r3, [pc, #192]	@ (8004348 <UART_SetConfig+0x2cc>)
 8004288:	617b      	str	r3, [r7, #20]
        break;
 800428a:	e00f      	b.n	80042ac <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800428c:	f7fe fa4e 	bl	800272c <HAL_RCC_GetSysClockFreq>
 8004290:	0003      	movs	r3, r0
 8004292:	617b      	str	r3, [r7, #20]
        break;
 8004294:	e00a      	b.n	80042ac <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004296:	2380      	movs	r3, #128	@ 0x80
 8004298:	021b      	lsls	r3, r3, #8
 800429a:	617b      	str	r3, [r7, #20]
        break;
 800429c:	e006      	b.n	80042ac <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80042a2:	231a      	movs	r3, #26
 80042a4:	18fb      	adds	r3, r7, r3
 80042a6:	2201      	movs	r2, #1
 80042a8:	701a      	strb	r2, [r3, #0]
        break;
 80042aa:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d028      	beq.n	8004304 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042b6:	4b25      	ldr	r3, [pc, #148]	@ (800434c <UART_SetConfig+0x2d0>)
 80042b8:	0052      	lsls	r2, r2, #1
 80042ba:	5ad3      	ldrh	r3, [r2, r3]
 80042bc:	0019      	movs	r1, r3
 80042be:	6978      	ldr	r0, [r7, #20]
 80042c0:	f7fb ff1e 	bl	8000100 <__udivsi3>
 80042c4:	0003      	movs	r3, r0
 80042c6:	001a      	movs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	085b      	lsrs	r3, r3, #1
 80042ce:	18d2      	adds	r2, r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	0019      	movs	r1, r3
 80042d6:	0010      	movs	r0, r2
 80042d8:	f7fb ff12 	bl	8000100 <__udivsi3>
 80042dc:	0003      	movs	r3, r0
 80042de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	2b0f      	cmp	r3, #15
 80042e4:	d90a      	bls.n	80042fc <UART_SetConfig+0x280>
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	2380      	movs	r3, #128	@ 0x80
 80042ea:	025b      	lsls	r3, r3, #9
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d205      	bcs.n	80042fc <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	60da      	str	r2, [r3, #12]
 80042fa:	e003      	b.n	8004304 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80042fc:	231a      	movs	r3, #26
 80042fe:	18fb      	adds	r3, r7, r3
 8004300:	2201      	movs	r2, #1
 8004302:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	226a      	movs	r2, #106	@ 0x6a
 8004308:	2101      	movs	r1, #1
 800430a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2268      	movs	r2, #104	@ 0x68
 8004310:	2101      	movs	r1, #1
 8004312:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004320:	231a      	movs	r3, #26
 8004322:	18fb      	adds	r3, r7, r3
 8004324:	781b      	ldrb	r3, [r3, #0]
}
 8004326:	0018      	movs	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	b008      	add	sp, #32
 800432c:	bd80      	pop	{r7, pc}
 800432e:	46c0      	nop			@ (mov r8, r8)
 8004330:	cfff69f3 	.word	0xcfff69f3
 8004334:	ffffcfff 	.word	0xffffcfff
 8004338:	11fff4ff 	.word	0x11fff4ff
 800433c:	40013800 	.word	0x40013800
 8004340:	40021000 	.word	0x40021000
 8004344:	40004400 	.word	0x40004400
 8004348:	00f42400 	.word	0x00f42400
 800434c:	0800491c 	.word	0x0800491c

08004350 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435c:	2208      	movs	r2, #8
 800435e:	4013      	ands	r3, r2
 8004360:	d00b      	beq.n	800437a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	4a4a      	ldr	r2, [pc, #296]	@ (8004494 <UART_AdvFeatureConfig+0x144>)
 800436a:	4013      	ands	r3, r2
 800436c:	0019      	movs	r1, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437e:	2201      	movs	r2, #1
 8004380:	4013      	ands	r3, r2
 8004382:	d00b      	beq.n	800439c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	4a43      	ldr	r2, [pc, #268]	@ (8004498 <UART_AdvFeatureConfig+0x148>)
 800438c:	4013      	ands	r3, r2
 800438e:	0019      	movs	r1, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a0:	2202      	movs	r2, #2
 80043a2:	4013      	ands	r3, r2
 80043a4:	d00b      	beq.n	80043be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	4a3b      	ldr	r2, [pc, #236]	@ (800449c <UART_AdvFeatureConfig+0x14c>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	0019      	movs	r1, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c2:	2204      	movs	r2, #4
 80043c4:	4013      	ands	r3, r2
 80043c6:	d00b      	beq.n	80043e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	4a34      	ldr	r2, [pc, #208]	@ (80044a0 <UART_AdvFeatureConfig+0x150>)
 80043d0:	4013      	ands	r3, r2
 80043d2:	0019      	movs	r1, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e4:	2210      	movs	r2, #16
 80043e6:	4013      	ands	r3, r2
 80043e8:	d00b      	beq.n	8004402 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	4a2c      	ldr	r2, [pc, #176]	@ (80044a4 <UART_AdvFeatureConfig+0x154>)
 80043f2:	4013      	ands	r3, r2
 80043f4:	0019      	movs	r1, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004406:	2220      	movs	r2, #32
 8004408:	4013      	ands	r3, r2
 800440a:	d00b      	beq.n	8004424 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	4a25      	ldr	r2, [pc, #148]	@ (80044a8 <UART_AdvFeatureConfig+0x158>)
 8004414:	4013      	ands	r3, r2
 8004416:	0019      	movs	r1, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004428:	2240      	movs	r2, #64	@ 0x40
 800442a:	4013      	ands	r3, r2
 800442c:	d01d      	beq.n	800446a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	4a1d      	ldr	r2, [pc, #116]	@ (80044ac <UART_AdvFeatureConfig+0x15c>)
 8004436:	4013      	ands	r3, r2
 8004438:	0019      	movs	r1, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800444a:	2380      	movs	r3, #128	@ 0x80
 800444c:	035b      	lsls	r3, r3, #13
 800444e:	429a      	cmp	r2, r3
 8004450:	d10b      	bne.n	800446a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	4a15      	ldr	r2, [pc, #84]	@ (80044b0 <UART_AdvFeatureConfig+0x160>)
 800445a:	4013      	ands	r3, r2
 800445c:	0019      	movs	r1, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446e:	2280      	movs	r2, #128	@ 0x80
 8004470:	4013      	ands	r3, r2
 8004472:	d00b      	beq.n	800448c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	4a0e      	ldr	r2, [pc, #56]	@ (80044b4 <UART_AdvFeatureConfig+0x164>)
 800447c:	4013      	ands	r3, r2
 800447e:	0019      	movs	r1, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	605a      	str	r2, [r3, #4]
  }
}
 800448c:	46c0      	nop			@ (mov r8, r8)
 800448e:	46bd      	mov	sp, r7
 8004490:	b002      	add	sp, #8
 8004492:	bd80      	pop	{r7, pc}
 8004494:	ffff7fff 	.word	0xffff7fff
 8004498:	fffdffff 	.word	0xfffdffff
 800449c:	fffeffff 	.word	0xfffeffff
 80044a0:	fffbffff 	.word	0xfffbffff
 80044a4:	ffffefff 	.word	0xffffefff
 80044a8:	ffffdfff 	.word	0xffffdfff
 80044ac:	ffefffff 	.word	0xffefffff
 80044b0:	ff9fffff 	.word	0xff9fffff
 80044b4:	fff7ffff 	.word	0xfff7ffff

080044b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b092      	sub	sp, #72	@ 0x48
 80044bc:	af02      	add	r7, sp, #8
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2290      	movs	r2, #144	@ 0x90
 80044c4:	2100      	movs	r1, #0
 80044c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044c8:	f7fc fe4c 	bl	8001164 <HAL_GetTick>
 80044cc:	0003      	movs	r3, r0
 80044ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2208      	movs	r2, #8
 80044d8:	4013      	ands	r3, r2
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d12d      	bne.n	800453a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044e0:	2280      	movs	r2, #128	@ 0x80
 80044e2:	0391      	lsls	r1, r2, #14
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	4a47      	ldr	r2, [pc, #284]	@ (8004604 <UART_CheckIdleState+0x14c>)
 80044e8:	9200      	str	r2, [sp, #0]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f000 f88e 	bl	800460c <UART_WaitOnFlagUntilTimeout>
 80044f0:	1e03      	subs	r3, r0, #0
 80044f2:	d022      	beq.n	800453a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044f4:	f3ef 8310 	mrs	r3, PRIMASK
 80044f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80044fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80044fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044fe:	2301      	movs	r3, #1
 8004500:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004504:	f383 8810 	msr	PRIMASK, r3
}
 8004508:	46c0      	nop			@ (mov r8, r8)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2180      	movs	r1, #128	@ 0x80
 8004516:	438a      	bics	r2, r1
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800451c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800451e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004520:	f383 8810 	msr	PRIMASK, r3
}
 8004524:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2288      	movs	r2, #136	@ 0x88
 800452a:	2120      	movs	r1, #32
 800452c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2284      	movs	r2, #132	@ 0x84
 8004532:	2100      	movs	r1, #0
 8004534:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e060      	b.n	80045fc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2204      	movs	r2, #4
 8004542:	4013      	ands	r3, r2
 8004544:	2b04      	cmp	r3, #4
 8004546:	d146      	bne.n	80045d6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800454a:	2280      	movs	r2, #128	@ 0x80
 800454c:	03d1      	lsls	r1, r2, #15
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	4a2c      	ldr	r2, [pc, #176]	@ (8004604 <UART_CheckIdleState+0x14c>)
 8004552:	9200      	str	r2, [sp, #0]
 8004554:	2200      	movs	r2, #0
 8004556:	f000 f859 	bl	800460c <UART_WaitOnFlagUntilTimeout>
 800455a:	1e03      	subs	r3, r0, #0
 800455c:	d03b      	beq.n	80045d6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800455e:	f3ef 8310 	mrs	r3, PRIMASK
 8004562:	60fb      	str	r3, [r7, #12]
  return(result);
 8004564:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004566:	637b      	str	r3, [r7, #52]	@ 0x34
 8004568:	2301      	movs	r3, #1
 800456a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f383 8810 	msr	PRIMASK, r3
}
 8004572:	46c0      	nop			@ (mov r8, r8)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4922      	ldr	r1, [pc, #136]	@ (8004608 <UART_CheckIdleState+0x150>)
 8004580:	400a      	ands	r2, r1
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004586:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f383 8810 	msr	PRIMASK, r3
}
 800458e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004590:	f3ef 8310 	mrs	r3, PRIMASK
 8004594:	61bb      	str	r3, [r7, #24]
  return(result);
 8004596:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004598:	633b      	str	r3, [r7, #48]	@ 0x30
 800459a:	2301      	movs	r3, #1
 800459c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	f383 8810 	msr	PRIMASK, r3
}
 80045a4:	46c0      	nop			@ (mov r8, r8)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2101      	movs	r1, #1
 80045b2:	438a      	bics	r2, r1
 80045b4:	609a      	str	r2, [r3, #8]
 80045b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	f383 8810 	msr	PRIMASK, r3
}
 80045c0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	228c      	movs	r2, #140	@ 0x8c
 80045c6:	2120      	movs	r1, #32
 80045c8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2284      	movs	r2, #132	@ 0x84
 80045ce:	2100      	movs	r1, #0
 80045d0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e012      	b.n	80045fc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2288      	movs	r2, #136	@ 0x88
 80045da:	2120      	movs	r1, #32
 80045dc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	228c      	movs	r2, #140	@ 0x8c
 80045e2:	2120      	movs	r1, #32
 80045e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2284      	movs	r2, #132	@ 0x84
 80045f6:	2100      	movs	r1, #0
 80045f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	0018      	movs	r0, r3
 80045fe:	46bd      	mov	sp, r7
 8004600:	b010      	add	sp, #64	@ 0x40
 8004602:	bd80      	pop	{r7, pc}
 8004604:	01ffffff 	.word	0x01ffffff
 8004608:	fffffedf 	.word	0xfffffedf

0800460c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	603b      	str	r3, [r7, #0]
 8004618:	1dfb      	adds	r3, r7, #7
 800461a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800461c:	e051      	b.n	80046c2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	3301      	adds	r3, #1
 8004622:	d04e      	beq.n	80046c2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004624:	f7fc fd9e 	bl	8001164 <HAL_GetTick>
 8004628:	0002      	movs	r2, r0
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	429a      	cmp	r2, r3
 8004632:	d302      	bcc.n	800463a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e051      	b.n	80046e2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2204      	movs	r2, #4
 8004646:	4013      	ands	r3, r2
 8004648:	d03b      	beq.n	80046c2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	2b80      	cmp	r3, #128	@ 0x80
 800464e:	d038      	beq.n	80046c2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2b40      	cmp	r3, #64	@ 0x40
 8004654:	d035      	beq.n	80046c2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	2208      	movs	r2, #8
 800465e:	4013      	ands	r3, r2
 8004660:	2b08      	cmp	r3, #8
 8004662:	d111      	bne.n	8004688 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2208      	movs	r2, #8
 800466a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	0018      	movs	r0, r3
 8004670:	f000 f83c 	bl	80046ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2290      	movs	r2, #144	@ 0x90
 8004678:	2108      	movs	r1, #8
 800467a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2284      	movs	r2, #132	@ 0x84
 8004680:	2100      	movs	r1, #0
 8004682:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e02c      	b.n	80046e2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	69da      	ldr	r2, [r3, #28]
 800468e:	2380      	movs	r3, #128	@ 0x80
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	401a      	ands	r2, r3
 8004694:	2380      	movs	r3, #128	@ 0x80
 8004696:	011b      	lsls	r3, r3, #4
 8004698:	429a      	cmp	r2, r3
 800469a:	d112      	bne.n	80046c2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2280      	movs	r2, #128	@ 0x80
 80046a2:	0112      	lsls	r2, r2, #4
 80046a4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	0018      	movs	r0, r3
 80046aa:	f000 f81f 	bl	80046ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2290      	movs	r2, #144	@ 0x90
 80046b2:	2120      	movs	r1, #32
 80046b4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2284      	movs	r2, #132	@ 0x84
 80046ba:	2100      	movs	r1, #0
 80046bc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e00f      	b.n	80046e2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	4013      	ands	r3, r2
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	425a      	negs	r2, r3
 80046d2:	4153      	adcs	r3, r2
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	001a      	movs	r2, r3
 80046d8:	1dfb      	adds	r3, r7, #7
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d09e      	beq.n	800461e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	0018      	movs	r0, r3
 80046e4:	46bd      	mov	sp, r7
 80046e6:	b004      	add	sp, #16
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08e      	sub	sp, #56	@ 0x38
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046f4:	f3ef 8310 	mrs	r3, PRIMASK
 80046f8:	617b      	str	r3, [r7, #20]
  return(result);
 80046fa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80046fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80046fe:	2301      	movs	r3, #1
 8004700:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	f383 8810 	msr	PRIMASK, r3
}
 8004708:	46c0      	nop			@ (mov r8, r8)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4926      	ldr	r1, [pc, #152]	@ (80047b0 <UART_EndRxTransfer+0xc4>)
 8004716:	400a      	ands	r2, r1
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800471c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	f383 8810 	msr	PRIMASK, r3
}
 8004724:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004726:	f3ef 8310 	mrs	r3, PRIMASK
 800472a:	623b      	str	r3, [r7, #32]
  return(result);
 800472c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800472e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004730:	2301      	movs	r3, #1
 8004732:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004736:	f383 8810 	msr	PRIMASK, r3
}
 800473a:	46c0      	nop			@ (mov r8, r8)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	491b      	ldr	r1, [pc, #108]	@ (80047b4 <UART_EndRxTransfer+0xc8>)
 8004748:	400a      	ands	r2, r1
 800474a:	609a      	str	r2, [r3, #8]
 800474c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004752:	f383 8810 	msr	PRIMASK, r3
}
 8004756:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800475c:	2b01      	cmp	r3, #1
 800475e:	d118      	bne.n	8004792 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004760:	f3ef 8310 	mrs	r3, PRIMASK
 8004764:	60bb      	str	r3, [r7, #8]
  return(result);
 8004766:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004768:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800476a:	2301      	movs	r3, #1
 800476c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f383 8810 	msr	PRIMASK, r3
}
 8004774:	46c0      	nop			@ (mov r8, r8)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2110      	movs	r1, #16
 8004782:	438a      	bics	r2, r1
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004788:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f383 8810 	msr	PRIMASK, r3
}
 8004790:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	228c      	movs	r2, #140	@ 0x8c
 8004796:	2120      	movs	r1, #32
 8004798:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80047a6:	46c0      	nop			@ (mov r8, r8)
 80047a8:	46bd      	mov	sp, r7
 80047aa:	b00e      	add	sp, #56	@ 0x38
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	46c0      	nop			@ (mov r8, r8)
 80047b0:	fffffedf 	.word	0xfffffedf
 80047b4:	effffffe 	.word	0xeffffffe

080047b8 <memset>:
 80047b8:	0003      	movs	r3, r0
 80047ba:	1882      	adds	r2, r0, r2
 80047bc:	4293      	cmp	r3, r2
 80047be:	d100      	bne.n	80047c2 <memset+0xa>
 80047c0:	4770      	bx	lr
 80047c2:	7019      	strb	r1, [r3, #0]
 80047c4:	3301      	adds	r3, #1
 80047c6:	e7f9      	b.n	80047bc <memset+0x4>

080047c8 <__libc_init_array>:
 80047c8:	b570      	push	{r4, r5, r6, lr}
 80047ca:	2600      	movs	r6, #0
 80047cc:	4c0c      	ldr	r4, [pc, #48]	@ (8004800 <__libc_init_array+0x38>)
 80047ce:	4d0d      	ldr	r5, [pc, #52]	@ (8004804 <__libc_init_array+0x3c>)
 80047d0:	1b64      	subs	r4, r4, r5
 80047d2:	10a4      	asrs	r4, r4, #2
 80047d4:	42a6      	cmp	r6, r4
 80047d6:	d109      	bne.n	80047ec <__libc_init_array+0x24>
 80047d8:	2600      	movs	r6, #0
 80047da:	f000 f819 	bl	8004810 <_init>
 80047de:	4c0a      	ldr	r4, [pc, #40]	@ (8004808 <__libc_init_array+0x40>)
 80047e0:	4d0a      	ldr	r5, [pc, #40]	@ (800480c <__libc_init_array+0x44>)
 80047e2:	1b64      	subs	r4, r4, r5
 80047e4:	10a4      	asrs	r4, r4, #2
 80047e6:	42a6      	cmp	r6, r4
 80047e8:	d105      	bne.n	80047f6 <__libc_init_array+0x2e>
 80047ea:	bd70      	pop	{r4, r5, r6, pc}
 80047ec:	00b3      	lsls	r3, r6, #2
 80047ee:	58eb      	ldr	r3, [r5, r3]
 80047f0:	4798      	blx	r3
 80047f2:	3601      	adds	r6, #1
 80047f4:	e7ee      	b.n	80047d4 <__libc_init_array+0xc>
 80047f6:	00b3      	lsls	r3, r6, #2
 80047f8:	58eb      	ldr	r3, [r5, r3]
 80047fa:	4798      	blx	r3
 80047fc:	3601      	adds	r6, #1
 80047fe:	e7f2      	b.n	80047e6 <__libc_init_array+0x1e>
 8004800:	08004934 	.word	0x08004934
 8004804:	08004934 	.word	0x08004934
 8004808:	08004938 	.word	0x08004938
 800480c:	08004934 	.word	0x08004934

08004810 <_init>:
 8004810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004812:	46c0      	nop			@ (mov r8, r8)
 8004814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004816:	bc08      	pop	{r3}
 8004818:	469e      	mov	lr, r3
 800481a:	4770      	bx	lr

0800481c <_fini>:
 800481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481e:	46c0      	nop			@ (mov r8, r8)
 8004820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004822:	bc08      	pop	{r3}
 8004824:	469e      	mov	lr, r3
 8004826:	4770      	bx	lr
